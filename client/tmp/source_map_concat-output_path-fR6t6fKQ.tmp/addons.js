define('ember-ajax/ajax-request', ['exports', 'ember', 'ember-ajax/mixins/ajax-request'], function (exports, _ember, _emberAjaxMixinsAjaxRequest) {
  'use strict';

  var EmberObject = _ember['default'].Object;

  exports['default'] = EmberObject.extend(_emberAjaxMixinsAjaxRequest['default']);
});
define('ember-ajax/errors', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.AjaxError = AjaxError;
  exports.InvalidError = InvalidError;
  exports.UnauthorizedError = UnauthorizedError;
  exports.ForbiddenError = ForbiddenError;
  exports.BadRequestError = BadRequestError;
  exports.NotFoundError = NotFoundError;
  exports.TimeoutError = TimeoutError;
  exports.AbortError = AbortError;
  exports.ConflictError = ConflictError;
  exports.ServerError = ServerError;
  exports.isAjaxError = isAjaxError;
  exports.isUnauthorizedError = isUnauthorizedError;
  exports.isForbiddenError = isForbiddenError;
  exports.isInvalidError = isInvalidError;
  exports.isBadRequestError = isBadRequestError;
  exports.isNotFoundError = isNotFoundError;
  exports.isTimeoutError = isTimeoutError;
  exports.isAbortError = isAbortError;
  exports.isConflictError = isConflictError;
  exports.isServerError = isServerError;
  exports.isSuccess = isSuccess;

  var EmberError = _ember['default'].Error;

  /**
   * @class AjaxError
   * @private
   */

  function AjaxError(errors) {
    var message = arguments.length <= 1 || arguments[1] === undefined ? 'Ajax operation failed' : arguments[1];

    EmberError.call(this, message);

    this.errors = errors || [{
      title: 'Ajax Error',
      detail: message
    }];
  }

  AjaxError.prototype = Object.create(EmberError.prototype);

  /**
   * @class InvalidError
   * @public
   * @extends AjaxError
   */

  function InvalidError(errors) {
    AjaxError.call(this, errors, 'Request was rejected because it was invalid');
  }

  InvalidError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class UnauthorizedError
   * @public
   * @extends AjaxError
   */

  function UnauthorizedError(errors) {
    AjaxError.call(this, errors, 'Ajax authorization failed');
  }

  UnauthorizedError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class ForbiddenError
   * @public
   * @extends AjaxError
   */

  function ForbiddenError(errors) {
    AjaxError.call(this, errors, 'Request was rejected because user is not permitted to perform this operation.');
  }

  ForbiddenError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class BadRequestError
   * @public
   * @extends AjaxError
   */

  function BadRequestError(errors) {
    AjaxError.call(this, errors, 'Request was formatted incorrectly.');
  }

  BadRequestError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class NotFoundError
   * @public
   * @extends AjaxError
   */

  function NotFoundError(errors) {
    AjaxError.call(this, errors, 'Resource was not found.');
  }

  NotFoundError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class TimeoutError
   * @public
   * @extends AjaxError
   */

  function TimeoutError() {
    AjaxError.call(this, null, 'The ajax operation timed out');
  }

  TimeoutError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class AbortError
   * @public
   * @extends AjaxError
   */

  function AbortError() {
    AjaxError.call(this, null, 'The ajax operation was aborted');
  }

  AbortError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class ConflictError
   * @public
   * @extends AjaxError
   */

  function ConflictError() {
    AjaxError.call(this, null, 'The ajax operation failed due to a conflict');
  }

  ConflictError.prototype = Object.create(AjaxError.prototype);

  /**
   * @class ServerError
   * @public
   * @extends AjaxError
   */

  function ServerError(errors) {
    AjaxError.call(this, errors, 'Request was rejected due to server error');
  }

  ServerError.prototype = Object.create(AjaxError.prototype);

  /**
   * Checks if the given error is or inherits from AjaxError
   *
   * @method isAjaxError
   * @public
   * @param  {Error} error
   * @return {Boolean}
   */

  function isAjaxError(error) {
    return error instanceof AjaxError;
  }

  /**
   * Checks if the given status code or AjaxError object represents an
   * unauthorized request error
   *
   * @method isUnauthorizedError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isUnauthorizedError(error) {
    if (isAjaxError(error)) {
      return error instanceof UnauthorizedError;
    } else {
      return error === 401;
    }
  }

  /**
   * Checks if the given status code or AjaxError object represents a forbidden
   * request error
   *
   * @method isForbiddenError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isForbiddenError(error) {
    if (isAjaxError(error)) {
      return error instanceof ForbiddenError;
    } else {
      return error === 403;
    }
  }

  /**
   * Checks if the given status code or AjaxError object represents an invalid
   * request error
   *
   * @method isInvalidError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isInvalidError(error) {
    if (isAjaxError(error)) {
      return error instanceof InvalidError;
    } else {
      return error === 422;
    }
  }

  /**
   * Checks if the given status code or AjaxError object represents a bad request
   * error
   *
   * @method isBadRequestError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isBadRequestError(error) {
    if (isAjaxError(error)) {
      return error instanceof BadRequestError;
    } else {
      return error === 400;
    }
  }

  /**
   * Checks if the given status code or AjaxError object represents a
   * "not found" error
   *
   * @method isNotFoundError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isNotFoundError(error) {
    if (isAjaxError(error)) {
      return error instanceof NotFoundError;
    } else {
      return error === 404;
    }
  }

  /**
   * Checks if the given status code or AjaxError object represents a
   * "timeout" error
   *
   * @method isTimeoutError
   * @public
   * @param  {AjaxError} error
   * @return {Boolean}
   */

  function isTimeoutError(error) {
    return error instanceof TimeoutError;
  }

  /**
   * Checks if the given status code or AjaxError object represents an
   * "abort" error
   *
   * @method isAbortError
   * @public
   * @param  {AjaxError} error
   * @return {Boolean}
   */

  function isAbortError(error) {
    return error instanceof AbortError;
  }

  /**
   * Checks if the given status code or AjaxError object represents a
   * conflict error
   *
   * @method isConflictError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isConflictError(error) {
    if (isAjaxError(error)) {
      return error instanceof ConflictError;
    } else {
      return error === 409;
    }
  }

  /**
   * Checks if the given status code or AjaxError object represents a server error
   *
   * @method isServerError
   * @public
   * @param  {Number | AjaxError} error
   * @return {Boolean}
   */

  function isServerError(error) {
    if (isAjaxError(error)) {
      return error instanceof ServerError;
    } else {
      return error >= 500 && error < 600;
    }
  }

  /**
   * Checks if the given status code represents a successful request
   *
   * @method isSuccess
   * @public
   * @param  {Number} status
   * @return {Boolean}
   */

  function isSuccess(status) {
    var s = parseInt(status, 10);
    return s >= 200 && s < 300 || s === 304;
  }
});
define('ember-ajax/index', ['exports', 'ember-ajax/request'], function (exports, _emberAjaxRequest) {
  'use strict';

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxRequest['default'];
    }
  });
});
define('ember-ajax/mixins/ajax-request', ['exports', 'ember', 'ember-ajax/errors', 'ember-ajax/utils/parse-response-headers', 'ember-ajax/utils/url-helpers', 'ember-ajax/utils/ajax'], function (exports, _ember, _emberAjaxErrors, _emberAjaxUtilsParseResponseHeaders, _emberAjaxUtilsUrlHelpers, _emberAjaxUtilsAjax) {
  'use strict';

  var $ = _ember['default'].$;
  var A = _ember['default'].A;
  var EmberError = _ember['default'].Error;
  var Logger = _ember['default'].Logger;
  var Mixin = _ember['default'].Mixin;
  var Promise = _ember['default'].RSVP.Promise;
  var Test = _ember['default'].Test;
  var get = _ember['default'].get;
  var isArray = _ember['default'].isArray;
  var isEmpty = _ember['default'].isEmpty;
  var isNone = _ember['default'].isNone;
  var merge = _ember['default'].merge;
  var run = _ember['default'].run;
  var runInDebug = _ember['default'].runInDebug;
  var testing = _ember['default'].testing;
  var warn = _ember['default'].warn;

  var JSONAPIContentType = 'application/vnd.api+json';

  function isJSONAPIContentType(header) {
    if (isNone(header)) {
      return false;
    }
    return header.indexOf(JSONAPIContentType) === 0;
  }

  function startsWithSlash(string) {
    return string.charAt(0) === '/';
  }

  function endsWithSlash(string) {
    return string.charAt(string.length - 1) === '/';
  }

  function stripSlashes(path) {
    // make sure path starts with `/`
    if (startsWithSlash(path)) {
      path = path.substring(1);
    }

    // remove end `/`
    if (endsWithSlash(path)) {
      path = path.slice(0, -1);
    }
    return path;
  }

  function isObject(object) {
    return typeof object === 'object';
  }

  function isString(object) {
    return typeof object === 'string';
  }

  var pendingRequestCount = 0;
  if (testing) {
    Test.registerWaiter(function () {
      return pendingRequestCount === 0;
    });
  }

  /**
   * AjaxRequest Mixin
   *
   * @public
   * @mixin
   */
  exports['default'] = Mixin.create({

    /**
     * The default value for the request `contentType`
     *
     * For now, defaults to the same value that jQuery would assign.  In the
     * future, the default value will be for JSON requests.
     * @property {string} contentType
     * @public
     * @default
     */
    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',

    /**
     * Headers to include on the request
     *
     * Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary
     * headers can be set as key/value pairs on the `RESTAdapter`'s `headers`
     * object and Ember Data will send them along with each ajax request.
     *
     * ```javascript
     * // app/services/ajax.js
     * import AjaxService from 'ember-ajax/services/ajax';
     *
     * export default AjaxService.extend({
     *   headers: {
     *     'API_KEY': 'secret key',
     *     'ANOTHER_HEADER': 'Some header value'
     *   }
     * });
     * ```
     *
     * `headers` can also be used as a computed property to support dynamic
     * headers.
     *
     * ```javascript
     * // app/services/ajax.js
     * import Ember from 'ember';
     * import AjaxService from 'ember-ajax/services/ajax';
     *
     * const {
     *   computed,
     *   get,
     *   inject: { service }
     * } = Ember;
     *
     * export default AjaxService.extend({
     *   session: service(),
     *   headers: computed('session.authToken', function() {
     *     return {
     *       'API_KEY': get(this, 'session.authToken'),
     *       'ANOTHER_HEADER': 'Some header value'
     *     };
     *   })
     * });
     * ```
     *
     * In some cases, your dynamic headers may require data from some object
     * outside of Ember's observer system (for example `document.cookie`). You
     * can use the `volatile` function to set the property into a non-cached mode
     * causing the headers to be recomputed with every request.
     *
     * ```javascript
     * // app/services/ajax.js
     * import Ember from 'ember';
     * import AjaxService from 'ember-ajax/services/ajax';
     *
     * const {
     *   computed,
     *   get,
     *   inject: { service }
     * } = Ember;
     *
     * export default AjaxService.extend({
     *   session: service(),
     *   headers: computed('session.authToken', function() {
     *     return {
     *       'API_KEY': get(document.cookie.match(/apiKey\=([^;]*)/), '1'),
     *       'ANOTHER_HEADER': 'Some header value'
     *     };
     *   }).volatile()
     * });
     * ```
     *
     * @property {Object} headers
     * @public
     * @default
     */
    headers: {},

    /**
     * Make an AJAX request, ignoring the raw XHR object and dealing only with
     * the response
     *
     * @method request
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    request: function request(url, options) {
      var _this = this;

      var hash = this.options(url, options);
      return new Promise(function (resolve, reject) {
        _this._makeRequest(hash).then(function (_ref) {
          var response = _ref.response;

          resolve(response);
        })['catch'](function (_ref2) {
          var response = _ref2.response;

          reject(response);
        });
      }, 'ember-ajax: ' + hash.type + ' ' + hash.url + ' response');
    },

    /**
     * Make an AJAX request, returning the raw XHR object along with the response
     *
     * @method raw
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    raw: function raw(url, options) {
      var hash = this.options(url, options);
      return this._makeRequest(hash);
    },

    /**
     * Shared method to actually make an AJAX request
     *
     * @method _makeRequest
     * @private
     * @param {Object} hash The options for the request
     * @param {string} hash.url The URL to make the request to
     * @return {Promise} The result of the request
     */
    _makeRequest: function _makeRequest(hash) {
      var _this2 = this;

      var requestData = {
        type: hash.type,
        url: hash.url
      };

      if (isJSONAPIContentType(hash.headers['Content-Type']) && requestData.type !== 'GET') {
        if (typeof hash.data === 'object') {
          hash.data = JSON.stringify(hash.data);
        }
      }

      return new Promise(function (resolve, reject) {
        hash.success = function (payload, textStatus, jqXHR) {
          var response = _this2.handleResponse(jqXHR.status, (0, _emberAjaxUtilsParseResponseHeaders['default'])(jqXHR.getAllResponseHeaders()), payload, requestData);

          pendingRequestCount = pendingRequestCount - 1;

          if ((0, _emberAjaxErrors.isAjaxError)(response)) {
            run.join(null, reject, { payload: payload, textStatus: textStatus, jqXHR: jqXHR, response: response });
          } else {
            run.join(null, resolve, { payload: payload, textStatus: textStatus, jqXHR: jqXHR, response: response });
          }
        };

        hash.error = function (jqXHR, textStatus, errorThrown) {
          runInDebug(function () {
            var message = 'The server returned an empty string for ' + requestData.type + ' ' + requestData.url + ', which cannot be parsed into a valid JSON. Return either null or {}.';
            var validJSONString = !(textStatus === 'parsererror' && jqXHR.responseText === '');
            warn(message, validJSONString, {
              id: 'ds.adapter.returned-empty-string-as-JSON'
            });
          });

          var payload = _this2.parseErrorResponse(jqXHR.responseText) || errorThrown;
          var response = undefined;

          if (errorThrown instanceof Error) {
            response = errorThrown;
          } else if (textStatus === 'timeout') {
            response = new _emberAjaxErrors.TimeoutError();
          } else if (textStatus === 'abort') {
            response = new _emberAjaxErrors.AbortError();
          } else {
            response = _this2.handleResponse(jqXHR.status, (0, _emberAjaxUtilsParseResponseHeaders['default'])(jqXHR.getAllResponseHeaders()), payload, requestData);
          }

          pendingRequestCount = pendingRequestCount - 1;

          run.join(null, reject, { payload: payload, textStatus: textStatus, jqXHR: jqXHR, errorThrown: errorThrown, response: response });
        };

        pendingRequestCount = pendingRequestCount + 1;

        (0, _emberAjaxUtilsAjax['default'])(hash);
      }, 'ember-ajax: ' + hash.type + ' ' + hash.url);
    },

    /**
     * calls `request()` but forces `options.type` to `POST`
     *
     * @method post
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    post: function post(url, options) {
      return this.request(url, this._addTypeToOptionsFor(options, 'POST'));
    },

    /**
     * calls `request()` but forces `options.type` to `PUT`
     *
     * @method put
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    put: function put(url, options) {
      return this.request(url, this._addTypeToOptionsFor(options, 'PUT'));
    },

    /**
     * calls `request()` but forces `options.type` to `PATCH`
     *
     * @method patch
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    patch: function patch(url, options) {
      return this.request(url, this._addTypeToOptionsFor(options, 'PATCH'));
    },

    /**
     * calls `request()` but forces `options.type` to `DELETE`
     *
     * @method del
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    del: function del(url, options) {
      return this.request(url, this._addTypeToOptionsFor(options, 'DELETE'));
    },

    /**
     * calls `request()` but forces `options.type` to `DELETE`
     *
     * Alias for `del()`
     *
     * @method delete
     * @public
     * @param {string} url The url to make a request to
     * @param {Object} options The options for the request
     * @return {Promise} The result of the request
     */
    'delete': function _delete() {
      return this.del.apply(this, arguments);
    },

    /**
     * Wrap the `.get` method so that we issue a warning if
     *
     * Since `.get` is both an AJAX pattern _and_ an Ember pattern, we want to try
     * to warn users when they try using `.get` to make a request
     *
     * @method get
     * @public
     */
    get: function get(url) {
      if (arguments.length > 1 || url.charAt(0) === '/') {
        throw new EmberError('It seems you tried to use `.get` to make a request! Use the `.request` method instead.');
      }
      return this._super.apply(this, arguments);
    },

    /**
     * Manipulates the options hash to include the HTTP method on the type key
     *
     * @method _addTypeToOptionsFor
     * @private
     * @param {Object} options The original request options
     * @param {string} method The method to enforce
     * @return {Object} The new options, with the method set
     */
    _addTypeToOptionsFor: function _addTypeToOptionsFor(options, method) {
      options = options || {};
      options.type = method;
      return options;
    },

    /**
     * Get the full "headers" hash, combining the service-defined headers with
     * the ones provided for the request
     *
     * @method _getFullHeadersHash
     * @private
     * @param {Object} headers
     * @return {Object}
     */
    _getFullHeadersHash: function _getFullHeadersHash(headers) {
      var classHeaders = get(this, 'headers');
      var _headers = merge({}, classHeaders);
      return merge(_headers, headers);
    },

    /**
     * @method options
     * @private
     * @param {string} url
     * @param {Object} options
     * @return {Object}
     */
    options: function options(url) {
      var _options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _options.url = this._buildURL(url, _options);
      _options.type = _options.type || 'GET';
      _options.dataType = _options.dataType || 'json';
      _options.contentType = isEmpty(_options.contentType) ? get(this, 'contentType') : _options.contentType;

      if (this._shouldSendHeaders(_options)) {
        _options.headers = this._getFullHeadersHash(_options.headers);
      } else {
        _options.headers = _options.headers || {};
      }

      return _options;
    },

    /**
     * Build a URL for a request
     *
     * If the provided `url` is deemed to be a complete URL, it will be returned
     * directly.  If it is not complete, then the segment provided will be combined
     * with the `host` and `namespace` options of the request class to create the
     * full URL.
     *
     * @private
     * @param {string} url the url, or url segment, to request
     * @param {Object} [options={}] the options for the request being made
     * @param {string} [options.host] the host to use for this request
     * @returns {string} the URL to make a request to
     */
    _buildURL: function _buildURL(url) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var urlObject = new _emberAjaxUtilsUrlHelpers.RequestURL(url);

      // If the URL passed is not relative, return the whole URL
      if (urlObject.isComplete) {
        return urlObject.href;
      }

      var host = options.host || get(this, 'host');
      var namespace = options.namespace || get(this, 'namespace');
      if (namespace) {
        namespace = stripSlashes(namespace);
      }

      // If the URL has already been constructed (presumably, by Ember Data), then we should just leave it alone
      var hasNamespaceRegex = new RegExp('^(/)?' + namespace);
      if (hasNamespaceRegex.test(url)) {
        return url;
      }

      var fullUrl = '';
      // Add the host, if it exists
      if (host) {
        fullUrl += host;
      }
      // Add the namespace, if it exists
      if (namespace) {
        if (!endsWithSlash(fullUrl)) {
          fullUrl += '/';
        }
        fullUrl += namespace;
      }
      // Add the URL segment, if it exists
      if (url) {
        if (!startsWithSlash(url)) {
          fullUrl += '/';
        }
        fullUrl += url;
      }

      return fullUrl;
    },

    /**
     * Takes an ajax response, and returns the json payload or an error.
     *
     * By default this hook just returns the json payload passed to it.
     * You might want to override it in two cases:
     *
     * 1. Your API might return useful results in the response headers.
     *    Response headers are passed in as the second argument.
     *
     * 2. Your API might return errors as successful responses with status code
     *    200 and an Errors text or object.
     *
     * @method handleResponse
     * @private
     * @param  {Number} status
     * @param  {Object} headers
     * @param  {Object} payload
     * @param  {Object} requestData the original request information
     * @return {Object | AjaxError} response
     */
    handleResponse: function handleResponse(status, headers, payload, requestData) {
      payload = payload === null || payload === undefined ? {} : payload;
      var errors = this.normalizeErrorResponse(status, headers, payload);

      if (this.isSuccess(status, headers, payload)) {
        return payload;
      } else if (this.isUnauthorizedError(status, headers, payload)) {
        return new _emberAjaxErrors.UnauthorizedError(errors);
      } else if (this.isForbiddenError(status, headers, payload)) {
        return new _emberAjaxErrors.ForbiddenError(errors);
      } else if (this.isInvalidError(status, headers, payload)) {
        return new _emberAjaxErrors.InvalidError(errors);
      } else if (this.isBadRequestError(status, headers, payload)) {
        return new _emberAjaxErrors.BadRequestError(errors);
      } else if (this.isNotFoundError(status, headers, payload)) {
        return new _emberAjaxErrors.NotFoundError(errors);
      } else if (this.isAbortError(status, headers, payload)) {
        return new _emberAjaxErrors.AbortError(errors);
      } else if (this.isConflictError(status, headers, payload)) {
        return new _emberAjaxErrors.ConflictError(errors);
      } else if (this.isServerError(status, headers, payload)) {
        return new _emberAjaxErrors.ServerError(errors);
      }

      var detailedMessage = this.generateDetailedMessage(status, headers, payload, requestData);
      return new _emberAjaxErrors.AjaxError(errors, detailedMessage);
    },

    /**
     * Match the host to a provided array of strings or regexes that can match to a host
     *
     * @method matchHosts
     * @private
     * @param {string} host the host you are sending too
     * @param {RegExp | string} matcher a string or regex that you can match the host to.
     * @returns {Boolean} if the host passed the matcher
     */
    _matchHosts: function _matchHosts(host, matcher) {
      if (matcher.constructor === RegExp) {
        return matcher.test(host);
      } else if (typeof matcher === 'string') {
        return matcher === host;
      } else {
        Logger.warn('trustedHosts only handles strings or regexes.', matcher, 'is neither.');
        return false;
      }
    },

    /**
     * Determine whether the headers should be added for this request
     *
     * This hook is used to help prevent sending headers to every host, regardless
     * of the destination, since this could be a security issue if authentication
     * tokens are accidentally leaked to third parties.
     *
     * To avoid that problem, subclasses should utilize the `headers` computed
     * property to prevent authentication from being sent to third parties, or
     * implement this hook for more fine-grain control over when headers are sent.
     *
     * By default, the headers are sent if the host of the request matches the
     * `host` property designated on the class.
     *
     * @method _shouldSendHeaders
     * @private
     * @property {Object} hash request options hash
     * @returns {Boolean} whether or not headers should be sent
     */
    _shouldSendHeaders: function _shouldSendHeaders(_ref3) {
      var _this3 = this;

      var url = _ref3.url;
      var host = _ref3.host;

      url = url || '';
      host = host || get(this, 'host') || '';

      var urlObject = new _emberAjaxUtilsUrlHelpers.RequestURL(url);
      var trustedHosts = get(this, 'trustedHosts') || A();

      // Add headers on relative URLs
      if (!urlObject.isComplete) {
        return true;
      } else if (trustedHosts.find(function (matcher) {
        return _this3._matchHosts(urlObject.hostname, matcher);
      })) {
        return true;
      }

      // Add headers on matching host
      var hostObject = new _emberAjaxUtilsUrlHelpers.RequestURL(host);
      return urlObject.sameHost(hostObject);
    },

    /**
     * Generates a detailed ("friendly") error message, with plenty
     * of information for debugging (good luck!)
     *
     * @method generateDetailedMessage
     * @private
     * @param  {Number} status
     * @param  {Object} headers
     * @param  {Object} payload
     * @param  {Object} requestData the original request information
     * @return {Object} request information
     */
    generateDetailedMessage: function generateDetailedMessage(status, headers, payload, requestData) {
      var shortenedPayload = undefined;
      var payloadContentType = headers['Content-Type'] || 'Empty Content-Type';

      if (payloadContentType === 'text/html' && payload.length > 250) {
        shortenedPayload = '[Omitted Lengthy HTML]';
      } else {
        shortenedPayload = JSON.stringify(payload);
      }

      var requestDescription = requestData.type + ' ' + requestData.url;
      var payloadDescription = 'Payload (' + payloadContentType + ')';

      return ['Ember AJAX Request ' + requestDescription + ' returned a ' + status, payloadDescription, shortenedPayload].join('\n');
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a an authorized error.
     *
     * @method isUnauthorizedError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isUnauthorizedError: function isUnauthorizedError(status) {
      return (0, _emberAjaxErrors.isUnauthorizedError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a forbidden error.
     *
     * @method isForbiddenError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isForbiddenError: function isForbiddenError(status) {
      return (0, _emberAjaxErrors.isForbiddenError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a an invalid error.
     *
     * @method isInvalidError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isInvalidError: function isInvalidError(status) {
      return (0, _emberAjaxErrors.isInvalidError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a bad request error.
     *
     * @method isBadRequestError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isBadRequestError: function isBadRequestError(status) {
      return (0, _emberAjaxErrors.isBadRequestError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a "not found" error.
     *
     * @method isNotFoundError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isNotFoundError: function isNotFoundError(status) {
      return (0, _emberAjaxErrors.isNotFoundError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is an "abort" error.
     *
     * @method isAbortError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isAbortError: function isAbortError(status) {
      return (0, _emberAjaxErrors.isAbortError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a "conflict" error.
     *
     * @method isConflictError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isConflictError: function isConflictError(status) {
      return (0, _emberAjaxErrors.isConflictError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a server error.
     *
     * @method isServerError
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isServerError: function isServerError(status) {
      return (0, _emberAjaxErrors.isServerError)(status);
    },

    /**
     * Default `handleResponse` implementation uses this hook to decide if the
     * response is a success.
     *
     * @method isSuccess
     * @private
     * @param {Number} status
     * @param {Object} headers
     * @param {Object} payload
     * @return {Boolean}
     */
    isSuccess: function isSuccess(status) {
      return (0, _emberAjaxErrors.isSuccess)(status);
    },

    /**
     * @method parseErrorResponse
     * @private
     * @param {string} responseText
     * @return {Object}
     */
    parseErrorResponse: function parseErrorResponse(responseText) {
      try {
        return $.parseJSON(responseText);
      } catch (e) {
        return responseText;
      }
    },

    /**
     * Normalize the error from the server into the same format
     *
     * The format we normalize to is based on the JSON API specification.  The
     * return value should be an array of objects that match the format they
     * describe. More details about the object format can be found
     * [here](http://jsonapi.org/format/#error-objects)
     *
     * The basics of the format are as follows:
     *
     * ```javascript
     * [
     *   {
     *     status: 'The status code for the error',
     *     title: 'The human-readable title of the error'
     *     detail: 'The human-readable details of the error'
     *   }
     * ]
     * ```
     *
     * In cases where the server returns an array, then there should be one item
     * in the array for each of the payload.  If your server returns a JSON API
     * formatted payload already, it will just be returned directly.
     *
     * If your server returns something other than a JSON API format, it's
     * suggested that you override this method to convert your own errors into the
     * one described above.
     *
     * @method normalizeErrorResponse
     * @private
     * @param  {Number} status
     * @param  {Object} headers
     * @param  {Object} payload
     * @return {Array} An array of JSON API-formatted error objects
     */
    normalizeErrorResponse: function normalizeErrorResponse(status, headers, payload) {
      if (isArray(payload.errors)) {
        return payload.errors.map(function (error) {
          if (isObject(error)) {
            var ret = merge({}, error);
            ret.status = '' + error.status;
            return ret;
          } else {
            return {
              status: '' + status,
              title: error
            };
          }
        });
      } else if (isArray(payload)) {
        return payload.map(function (error) {
          if (isObject(error)) {
            return {
              status: '' + status,
              title: error.title || 'The backend responded with an error',
              detail: error
            };
          } else {
            return {
              status: '' + status,
              title: '' + error
            };
          }
        });
      } else {
        if (isString(payload)) {
          return [{
            status: '' + status,
            title: payload
          }];
        } else {
          return [{
            status: '' + status,
            title: payload.title || 'The backend responded with an error',
            detail: payload
          }];
        }
      }
    }
  });
});
define('ember-ajax/mixins/ajax-support', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var Mixin = _ember['default'].Mixin;
  var service = _ember['default'].inject.service;
  var alias = _ember['default'].computed.alias;

  exports['default'] = Mixin.create({

    /**
     * The AJAX service to send requests through
     *
     * @property {AjaxService} ajaxService
     * @public
     */
    ajaxService: service('ajax'),

    /**
     * @property {string} host
     * @public
     */
    host: alias('ajaxService.host'),

    /**
     * @property {string} namespace
     * @public
     */
    namespace: alias('ajaxService.namespace'),

    /**
     * @property {object} headers
     * @public
     */
    headers: alias('ajaxService.headers'),

    ajax: function ajax(url, type) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      options.type = type;
      return this.get('ajaxService').request(url, options);
    }
  });
});
define('ember-ajax/raw', ['exports', 'ember-ajax/ajax-request'], function (exports, _emberAjaxAjaxRequest) {
  'use strict';

  exports['default'] = raw;

  /**
   * Same as `request` except it resolves an object with
   *
   *   {response, textStatus, jqXHR}
   *
   * Useful if you need access to the jqXHR object for headers, etc.
   *
   * @public
   */
  function raw() {
    var ajax = new _emberAjaxAjaxRequest['default']();
    return ajax.raw.apply(ajax, arguments);
  }
});
define('ember-ajax/request', ['exports', 'ember-ajax/ajax-request'], function (exports, _emberAjaxAjaxRequest) {
  'use strict';

  exports['default'] = request;

  /**
   * Helper function that allows you to use the default `ember-ajax` to make
   * requests without using the service.
   *
   * Note: Unlike `ic-ajax`'s `request` helper function, this will *not* return a
   * jqXHR object in the error handler.  If you need jqXHR, you can use the `raw`
   * function instead.
   *
   * @public
   */
  function request() {
    var ajax = new _emberAjaxAjaxRequest['default']();
    return ajax.request.apply(ajax, arguments);
  }
});
define('ember-ajax/services/ajax', ['exports', 'ember', 'ember-ajax/mixins/ajax-request'], function (exports, _ember, _emberAjaxMixinsAjaxRequest) {
  'use strict';

  var Service = _ember['default'].Service;

  exports['default'] = Service.extend(_emberAjaxMixinsAjaxRequest['default']);
});
define('ember-ajax/utils/ajax', ['exports', 'ember', 'ember-ajax/utils/is-fastboot'], function (exports, _ember, _emberAjaxUtilsIsFastboot) {
  /* global najax */
  'use strict';

  var $ = _ember['default'].$;

  exports['default'] = _emberAjaxUtilsIsFastboot['default'] ? najax : $.ajax;
});
define('ember-ajax/utils/is-fastboot', ['exports'], function (exports) {
  /* global FastBoot */
  'use strict';

  var isFastBoot = typeof FastBoot !== 'undefined';
  exports['default'] = isFastBoot;
});
define('ember-ajax/utils/parse-response-headers', ['exports'], function (exports) {
  'use strict';

  exports['default'] = parseResponseHeaders;

  function _toArray(arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  }

  var CLRF = '\r\n';
  function parseResponseHeaders(headersString) {
    var headers = {};

    if (!headersString) {
      return headers;
    }

    var headerPairs = headersString.split(CLRF);

    headerPairs.forEach(function (header) {
      var _header$split = header.split(':');

      var _header$split2 = _toArray(_header$split);

      var field = _header$split2[0];

      var value = _header$split2.slice(1);

      field = field.trim();
      value = value.join(':').trim();

      if (value) {
        headers[field] = value;
      }
    });

    return headers;
  }
});
define('ember-ajax/utils/url-helpers', ['exports', 'ember-ajax/utils/is-fastboot'], function (exports, _emberAjaxUtilsIsFastboot) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  /* global require, module, URL */

  var completeUrlRegex = /^(http|https)/;

  /*
   * Isomorphic URL parsing
   * Borrowed from
   * http://www.sitepoint.com/url-parsing-isomorphic-javascript/
   */
  var isNode = typeof module === 'object' && module.exports;
  var url = getUrlModule();

  /**
   * Get the node url module or an anchor element
   *
   * @function getUrlModule
   * @private
   * @return {Object|HTMLAnchorElement} Object to parse urls
   */
  function getUrlModule() {
    if (_emberAjaxUtilsIsFastboot['default']) {
      // ember-fastboot-server provides the node url module as URL global
      return URL;
    }

    if (isNode) {
      return require('url');
    }

    return document.createElement('a');
  }

  /**
   * Parse a URL string into an object that defines its structure
   *
   * The returned object will have the following properties:
   *
   *   href: the full URL
   *   protocol: the request protocol
   *   hostname: the target for the request
   *   port: the port for the request
   *   pathname: any URL after the host
   *   search: query parameters
   *   hash: the URL hash
   *
   * @function parseUrl
   * @private
   * @param {string} str The string to parse
   * @return {Object} URL structure
   */
  function parseUrl(str) {
    var fullObject = undefined;
    if (isNode || _emberAjaxUtilsIsFastboot['default']) {
      fullObject = url.parse(str);
    } else {
      url.href = str;
      fullObject = url;
    }
    var desiredProps = {};
    desiredProps.href = fullObject.href;
    desiredProps.protocol = fullObject.protocol;
    desiredProps.hostname = fullObject.hostname;
    desiredProps.port = fullObject.port;
    desiredProps.pathname = fullObject.pathname;
    desiredProps.search = fullObject.search;
    desiredProps.hash = fullObject.hash;
    return desiredProps;
  }

  /**
   * RequestURL
   *
   * Converts a URL string into an object for easy comparison to other URLs
   *
   * @public
   */

  var RequestURL = (function () {
    function RequestURL(url) {
      _classCallCheck(this, RequestURL);

      this.url = url;
    }

    _createClass(RequestURL, [{
      key: 'sameHost',
      value: function sameHost(other) {
        var _this = this;

        return ['protocol', 'hostname', 'port'].reduce(function (previous, prop) {
          return previous && _this[prop] === other[prop];
        }, true);
      }
    }, {
      key: 'url',
      get: function get() {
        return this._url;
      },
      set: function set(value) {
        this._url = value;

        var explodedUrl = parseUrl(value);
        for (var prop in explodedUrl) {
          if (({}).hasOwnProperty.call(explodedUrl, prop)) {
            this[prop] = explodedUrl[prop];
          }
        }

        return this._url;
      }
    }, {
      key: 'isComplete',
      get: function get() {
        return this.url.match(completeUrlRegex);
      }
    }]);

    return RequestURL;
  })();

  exports.RequestURL = RequestURL;
});
define('ember-bootstrap/components/bs-accordion-item', ['exports', 'ember', 'ember-bootstrap/mixins/type-class', 'ember-bootstrap/mixins/component-child', 'ember-bootstrap/components/bs-accordion'], function (exports, _ember, _emberBootstrapMixinsTypeClass, _emberBootstrapMixinsComponentChild, _emberBootstrapComponentsBsAccordion) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   A collapsible/expandable item within an accordion
  
   See [Components.Accordion](Components.Accordion.html) for examples.
  
  
   @class AccordionItem
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentChild
   @uses Mixins.TypeClass
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentChild['default'], _emberBootstrapMixinsTypeClass['default'], {
    classNames: ['panel'],

    /**
     * @property classTypePrefix
     * @type String
     * @default 'panel'
     * @protected
     */
    classTypePrefix: 'panel',

    /**
     * The title of the accordion item, displayed as a .panel-title element
     *
     * @property title
     * @type string
     * @public
     */
    title: null,

    /**
     * The value of the accordion item, which is used as the value of the `selected` property of the parent [Components.Accordion](Components.Accordion.html) component
     *
     * @property value
     * @public
     */
    value: computed.oneWay('elementId'),

    selected: computed.alias('accordion.selected'),

    collapsed: computed('value', 'selected', function () {
      return this.get('value') !== this.get('selected');
    }),
    active: computed.not('collapsed'),

    /**
     * Reference to the parent `Components.Accordion` class.
     *
     * @property accordion
     * @private
     */
    accordion: computed(function () {
      return this.nearestOfType(_emberBootstrapComponentsBsAccordion['default']);
    }),

    target: computed.reads('accordion'),

    actions: {
      toggleActive: function toggleActive() {
        var value = this.get('value');
        var previous = this.get('selected');
        var active = this.get('active');
        if (!active) {
          this.set('selected', value);
          this.send('selected', value, previous);
        } else {
          this.set('selected', null);
          this.send('selected', null, previous);
        }
      }
    }

  });
});
define('ember-bootstrap/components/bs-accordion', ['exports', 'ember', 'ember-bootstrap/mixins/component-parent'], function (exports, _ember, _emberBootstrapMixinsComponentParent) {
  'use strict';

  /**
   Bootstrap-style accordion group, with collapsible/expandable items.
   See http://getbootstrap.com/components/#btn-groups
  
   Use as a block level component with any number of [Components.AccordionItem](Components.AccordionItem.html) components as children:
  
   ```handlebars
    {{#bs-accordion selected=selected}}
        {{#bs-accordion-item value="1" title="First item"}}
          <p>Lorem ipsum...</p>
        {{/bs-accordion-item}}
        {{#bs-accordion-item value="2" title="Second item"}}
          <p>Lorem ipsum...</p>
        {{/bs-accordion-item}}
        {{#bs-accordion-item value="3" title="Third item"}}
          <p>Lorem ipsum...</p>
        {{/bs-accordion-item}}
    {{/bs-accordion}}
  
    <p>Selected accordion item: {{selected}}</p>
   ```
  
  
   @class Accordion
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentParent
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentParent['default'], {
    classNames: ['panel-group'],
    ariaRole: 'tablist',

    /**
     * The value of the currently selected accordion item
     *
     * @property selected
     * @public
     */
    selected: null,

    actions: {
      selected: function selected(currentValue, previousValue) {
        this.sendAction('action', currentValue, previousValue);
      }
    }

  });
});
define('ember-bootstrap/components/bs-alert', ['exports', 'ember', 'ember-bootstrap/mixins/type-class'], function (exports, _ember, _emberBootstrapMixinsTypeClass) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;

  /**
   Implements Bootstrap alerts, see http://getbootstrap.com/components/#alerts
  
   By default it is a user dismissible alert with a fade out animation, both of which can be disabled. Be sure to set the
   `type` property for proper styling.
  
   ```hbs
   {{#bs-alert type="success"}}
   <strong>Well done!</strong> You successfully read this important alert message.
   {{/bs-alert}}
   ```
  
   @class Alert
   @namespace Components
   @extends Ember.Component
   @uses Mixins.TypeClass
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsTypeClass['default'], {
    classNameBindings: ['alert', 'fade', 'in'],

    /**
     * A dismissible alert will have a close button in the upper right corner, that the user can click to dismiss
     * the alert.
     *
     * @property dismissible
     * @type boolean
     * @default true
     * @public
     */
    dismissible: true,

    /**
     * If true the alert is completely hidden. Will be set when the fade animation has finished.
     *
     * @property hidden
     * @type boolean
     * @default false
     * @readonly
     * @protected
     */
    hidden: false,

    /**
     * This property controls if the alert should be visible. If false it might still be in the DOM until the fade animation
     * has completed.
     *
     * @property visible
     * @type boolean
     * @default true
     * @public
     */
    visible: true,
    notVisible: computed.not('visible'),

    /**
     * Set to false to disable the fade out animation when hiding the alert.
     *
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * Computed property to set the alert class to the component div. Will be false when dismissed to have the component
     * div (which cannot be removed form DOM by the component itself) without any markup.
     *
     * @property alert
     * @type boolean
     * @private
     */
    alert: computed.not('hidden'),
    'in': computed.and('visible', 'fade'),

    /**
     * @property classTypePrefix
     * @type String
     * @default 'alert'
     * @protected
     */
    classTypePrefix: 'alert',

    /**
     * The duration of the fade out animation
     *
     * @property fadeDuration
     * @type integer
     * @default 150
     * @public
     */
    fadeDuration: 150,

    /**
     * The action to be sent after the alert has been dismissed (including the CSS transition).
     *
     * @property dismissedAction
     * @type string
     * @default null
     * @public
     */
    dismissedAction: null,

    actions: {
      dismiss: function dismiss() {
        this.set('visible', false);
      }
    },

    _onVisibleChange: observer('visible', function () {
      if (this.get('visible')) {
        this.show();
      } else {
        this.hide();
      }
    }),

    /**
     * Call to make the alert visible again after it has been hidden
     *
     * @method show
     * @private
     */
    show: function show() {
      this.setProperties({
        hidden: false
      });
    },

    /**
     * Call to hide the alert. If the `fade` property is true, this will fade out the alert before being finally
     * dismissed.
     *
     * @method hide
     * @private
     */
    hide: function hide() {
      if (this.get('fade')) {
        _ember['default'].run.later(this, function () {
          if (!this.get('isDestroyed')) {
            this.set('hidden', true);
            this.sendAction('dismissedAction');
          }
        }, this.get('fadeDuration'));
      } else {
        this.setProperties({
          hidden: true
        });
        this.sendAction('dismissedAction');
      }
    },

    init: function init() {
      this._super.apply(this, arguments);
      this.set('hidden', !this.get('visible'));
    }
  });
});
define('ember-bootstrap/components/bs-button-group', ['exports', 'ember', 'ember-bootstrap/mixins/size-class', 'ember-bootstrap/mixins/component-parent'], function (exports, _ember, _emberBootstrapMixinsSizeClass, _emberBootstrapMixinsComponentParent) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;

  /**
   Bootstrap-style button group, that visually groups buttons, and optionally adds radio/checkbox like behaviour.
   See http://getbootstrap.com/components/#btn-groups
  
   Use as a block level component with any number of [Components.Button](Components.Button.html) components as children:
  
   ```handlebars
   {{#bs-button-group}}
     {{#bs-button}}1{{/bs-button}}
     {{#bs-button}}2{{/bs-button}}
     {{#bs-button}}3{{/bs-button}}
   {{/bs-button-group}}
   ```
  
   ### Radio-like behaviour
  
   Use the `type` property set to "radio" to make the child buttons toggle like radio buttons, i.e. only one button can be active.
   Set the `value` property of the buttons to something meaningful. The `value` property of the button group will then reflect
   the value of the active button:
  
   ```handlebars
   {{#bs-button-group value=buttonGroupValue type="radio"}}
     {{#bs-button value='foo'}}foo{{/bs-button}}
     {{#bs-button value='bar'}}bar{{/bs-button}}
     {{#bs-button value='baz'}}baz{{/bs-button}}
   {{/bs-button-group}}
  
   You selected: {{buttonGroupValue}}!
   ```
  
   ### Checkbox-like behaviour
  
   Set `type` to "checkbox" to make any number of child buttons selectable. The `value` property will be an array
   of all the values of the active buttons:
  
   ```handlebars
   {{#bs-button-group value=buttonGroupValue type="checkbox"}}
     {{#bs-button value='foo'}}foo{{/bs-button}}
     {{#bs-button value='bar'}}bar{{/bs-button}}
     {{#bs-button value='baz'}}baz{{/bs-button}}
   {{/bs-button-group}}
  
   You selected:
   <ul>
   {{#each value in buttonGroupValue}}
     <li>{{value}}</li>
   {{/each}}
   </ul>
   ```
  
   @class ButtonGroup
   @namespace Components
   @extends Ember.Component
   @uses Mixins.SizeClass
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentParent['default'], _emberBootstrapMixinsSizeClass['default'], {
    /**
     * @type string
     * @property ariaRole
     * @default 'group'
     * @protected
     */
    ariaRole: 'group',

    /**
     * @property classNames
     * @type array
     * @default ['btn-group']
     * @protected
     */
    classNames: ['btn-group'],

    /**
     * @property classNameBindings
     * @type array
     * @protected
     */
    classNameBindings: ['vertical:btn-group-vertical', 'justified:btn-group-justified'],

    /**
     * @property classTypePrefix
     * @type String
     * @default 'btn-group'
     * @protected
     */
    classTypePrefix: 'btn-group',

    /**
     * Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical
     *
     * @property vertical
     * @type boolean
     * @default false
     * @public
     */
    vertical: false,

    /**
     * Set to true for the buttons to stretch at equal sizes to span the entire width of its parent.
     *
     * *Important*: You have to wrap every button component in a `div class="btn-group">`:
     *
     * ```handlebars
     * <div class="btn-group" role="group">
     * {{#bs-button}}My Button{{/bs-button}}
     * </div>
     * ```
     *
     * See http://getbootstrap.com/components/#btn-groups-justified
     *
     * @property justified
     * @type boolean
     * @default false
     * @public
     */
    justified: false,

    /**
     * The type of the button group specifies how child buttons behave and how the `value` property will be computed:
     *
     * ### null
     * If `type` is not set (null), the button group will add no functionality besides Bootstrap styling
     *
     * ### radio
     * if `type` is set to "radio", the buttons will behave like radio buttons:
     * * the buttons will toggle (`toggle` property of the child buttons will be set to true)
     * * only one button may be active
     * * the `value` property of the button group will reflect the `value` property of the active button
     *
     * ### checkbox
     * if `type` is set to "checkbox", the buttons will behave like checkboxes:
     * * the buttons will toggle (`toggle` property of the child buttons will be set to true)
     * * any number of buttons may be active
     * * the `value` property of the button group will be an array containing the `value` properties of all active buttons
     *
     * @property type
     * @type string
     * @default null
     * @public
     */
    type: null,

    /**
     * The value of the button group, computed by its child buttons.
     * See the `type` property for how the value property is constructed.
     *
     * When you set the value, the corresponding buttons will be activated:
     * * use a single value for a radio button group to activate the button with the same value
     * * use an array of values for a checkbox button group to activate all the buttons with values contained in the array
     *
     * @property value
     * @type array
     * @public
     */
    value: undefined,

    _syncValueToActiveButtons: observer('value', 'children.@each.value', '_inDOM', function () {
      if (!this._inDOM) {
        return;
      }
      var value = this.get('value');
      var values = _ember['default'].A(!_ember['default'].isArray(value) ? [value] : value);
      this.get('children').forEach(function (button) {
        button.set('active', values.includes(button.get('value')));
      });
    }),

    /**
     * Child buttons that are active (pressed)
     * @property activeChildren
     * @type array
     * @protected
     */
    activeChildren: computed.filterBy('children', 'active', true),

    lastActiveChildren: null,
    newActiveChildren: computed.setDiff('activeChildren', 'lastActiveChildren'),
    _observeButtons: observer('activeChildren.[]', 'type', function () {
      var type = this.get('type');

      if (!this._inDOM || type !== 'radio' && type !== 'checkbox') {
        return;
      }

      _ember['default'].run.scheduleOnce('actions', this, function () {
        // the button that just became active
        var value = undefined;

        switch (type) {
          case 'radio':
            var newActive = _ember['default'].A(this.get('newActiveChildren')).objectAt(0);
            if (newActive) {
              value = newActive.get('value');
            } else {
              var lastActive = this.get('lastActiveChildren.firstObject');
              if (lastActive) {
                lastActive.set('active', true);
              }
            }
            break;
          case 'checkbox':
            value = this.get('activeChildren').mapBy('value');
            break;
        }
        if (typeof value !== 'undefined') {
          this.set('value', value);
        }
        // remember activeChildren, used as a replacement for a before observer as they will be deprecated in the future...
        this.set('lastActiveChildren', _ember['default'].A(this.get('activeChildren').slice()));
      });
    }),

    _observeType: observer('type', 'children.[]', function () {
      if (this.get('type') === 'radio' || this.get('type') === 'checkbox') {
        // set all child buttons to toggle
        this.get('children').forEach(function (button) {
          button.set('toggle', true);
        });
      }
    }),

    init: function init() {
      this._super();
      this.set('lastActiveChildren', _ember['default'].A());
    },

    _inDOM: false,

    didInsertElement: function didInsertElement() {
      this.set('_inDOM', true);
      this.get('activeChildren');
    }
  });
});
define('ember-bootstrap/components/bs-button', ['exports', 'ember', 'ember-bootstrap/mixins/type-class', 'ember-bootstrap/mixins/size-class', 'ember-bootstrap/mixins/component-child'], function (exports, _ember, _emberBootstrapMixinsTypeClass, _emberBootstrapMixinsSizeClass, _emberBootstrapMixinsComponentChild) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;
  var typeOf = _ember['default'].typeOf;

  /**
   Implements a HTML button element, with support for all [Bootstrap button CSS styles](http://getbootstrap.com/css/#buttons)
   as well as advanced functionality such as button states.
  
   ### Basic Usage
  
   ```hbs
   {{#bs-button type="primary" icon="glyphicon glyphicon-download"}}
   Downloads
   {{/bs-button}}
   ```
  
   ### Actions
  
   Set the action property of the component to send an action to your controller. The following parameters will be sent:
   * value: the button's value, see the `value` property
   * event: the browsers event object
   * callback: a function that may be called from the action handler to supply a Promise to the button component for automatic state handling
  
   ```hbs
   {{#bs-button type="primary" icon="glyphicon glyphicon-download" action="download"}}
   Download
   {{/bs-button}}
   ```
  
   ### States
  
   Use the `textState` property to change the label of the button. You can bind it to a controller property to set a "loading" state for example.
   The label of the button will be taken from the `<state>Text` property.
  
   ```hbs
   {{bs-button type="primary" icon="glyphicon glyphicon-download" textState=buttonState defaultText="Download" loadingText="Loading..." action="download"}}
   ```
  
   ```js
   App.ApplicationController = Ember.Controller.extend({
     buttonState: "default"
     actions: {
       download: function() {
         this.set("buttonState", "loading");
       }
     }
   });
   ```
  
   ### Promise support for automatic state change
  
   When returning a Promise for any asynchronous operation from the click closure action the button will
   manage its `textState` property automatically, changing its value according to the state of the promise:
   "default" > "pending" > "resolved"/"rejected"
  
   ```hbs
   {{bs-button type="primary" icon="glyphicon glyphicon-download" defaultText="Download" pendingText="Loading..." resolvedText="Completed!" rejectedText="Oups!?" action=(action "download")}}
   ```
  
   ```js
   // controller.js
  export default Ember.Controller.extend({
     actions: {
       download(actionParam, evt) {
         return new Ember.RSVP.Promise(...);
       }
     }
   });
   ```
  
   @class Button
   @namespace Components
   @extends Ember.Component
   @uses Mixins.TypeClass
   @uses Mixins.SizeClass
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentChild['default'], _emberBootstrapMixinsTypeClass['default'], _emberBootstrapMixinsSizeClass['default'], {
    tagName: 'button',
    classNames: ['btn'],
    classNameBindings: ['active', 'block:btn-block'],

    /**
     * @property classTypePrefix
     * @type String
     * @default 'btn'
     * @protected
     */
    classTypePrefix: 'btn',

    attributeBindings: ['disabled', 'buttonType:type'],

    /**
     * Default label of the button. Not need if used as a block component
     *
     * @property defaultText
     * @type string
     * @public
     */
    defaultText: null,

    /**
     * Property to disable the button
     *
     * @property disabled
     * @type boolean
     * @default false
     * @public
     */
    disabled: false,

    /**
     * Set the type of the button, either 'button' or 'submit'
     *
     * @property buttonType
     * @type String
     * @default 'button'
     * @public
     */
    buttonType: 'button',

    /**
     * Set the 'active' class to apply active/pressed CSS styling
     *
     * @property active
     * @type boolean
     * @default false
     * @public
     */
    active: false,

    /**
     * Property for block level buttons
     *
     * See the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)
     * @property block
     * @type boolean
     * @default false
     * @public
     */
    block: false,

    /**
     * If toggle property is true, clicking the button will toggle the active state
     *
     * @property toggle
     * @type boolean
     * @default false
     * @public
     */
    toggle: false,

    /**
     * If button is active and this is set, the icon property will match this property
     *
     * @property iconActive
     * @type String
     * @public
     */
    iconActive: null,

    /**
     * If button is inactive and this is set, the icon property will match this property
     *
     * @property iconInactive
     * @type String
     * @public
     */
    iconInactive: null,

    /**
     * Class(es) (e.g. glyphicons or font awesome) to use as a button icon
     * This will render a <i class="{{icon}}"></i> element in front of the button's label
     *
     * @property icon
     * @type String
     * @readonly
     * @protected
     */
    icon: computed('active', function () {
      if (this.get('active')) {
        return this.get('iconActive');
      } else {
        return this.get('iconInactive');
      }
    }),

    /**
     * Supply a value that will be associated with this button. This will be send
     * as a parameter of the default action triggered when clicking the button
     *
     * @property value
     * @type any
     * @public
     */
    value: null,

    /**
     * State of the button. The button's label (if not used as a block component) will be set to the
     * `<state>Text` property.
     * This property will automatically be set when using a click action that supplies the callback with an promise
     *
     * @property textState
     * @type String
     * @default 'default'
     * @protected
     */
    textState: 'default',

    /**
     * Set this to true to reset the state. A typical use case is to bind this attribute with ember-data isDirty flag.
     *
     * @property reset
     * @type boolean
     * @public
     */
    reset: null,

    /**
     * This will reset the state property to 'default', and with that the button's label to defaultText
     *
     * @method resetState
     * @protected
     */
    resetState: function resetState() {
      this.set('textState', 'default');
    },

    resetObserver: observer('reset', function () {
      if (this.get('reset')) {
        _ember['default'].run.scheduleOnce('actions', this, function () {
          this.set('textState', 'default');
        });
      }
    }),

    text: computed('textState', 'defaultText', 'pendingText', 'resolvedText', 'rejectedText', function () {
      return this.getWithDefault(this.get('textState') + 'Text', this.get('defaultText'));
    }),

    /**
     * Click handler. This will send the default "action" action, with the following parameters:
     * * value of the button (that is the value of the "value" property)
     * * original event object of the click event
     * * callback: call that with a promise object, and the buttons state will automatically set to "pending", "resolved" and/or "rejected"
     *
     * When using closure actions just return the promise instead of calling the above mentioned callback.
     *
     * @method click
     * @protected
     * @param evt
     */
    click: function click(evt) {
      if (this.get('toggle')) {
        this.toggleProperty('active');
      }
      var that = this;

      function handleButtonPromise(promise) {
        if (promise) {
          that.set('textState', 'pending');
          promise.then(function () {
            if (!that.get('isDestroyed')) {
              that.set('textState', 'resolved');
            }
          }, function () {
            if (!that.get('isDestroyed')) {
              that.set('textState', 'rejected');
            }
          });
        }
      }

      var action = this.get('action');
      if (typeOf(action) === 'function') {
        var promise = action(this.get('value'), evt, handleButtonPromise);
        if (promise && promise.then) {
          handleButtonPromise(promise);
        }
      } else {
        // continue to support string actions for now...
        this.sendAction('action', this.get('value'), evt, handleButtonPromise);
      }
    },

    init: function init() {
      this._super.apply(this, arguments);
      this.get('reset');
    }

  });
});
define('ember-bootstrap/components/bs-collapse', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;

  /**
   An Ember component that mimics the behaviour of Bootstrap's collapse.js plugin, see http://getbootstrap.com/javascript/#collapse
  
   ```hbs
   {{#bs-collapse collapsed=collapsed}}
    <div class="well">
      <h2>Collapse</h2>
      <p>This is collapsible content</p>
    </div>
   {{/bs-collapse}}
   ```
  
   @class Collapse
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend({

    classNameBindings: ['collapse', 'in', 'collapsing'],
    attributeBindings: ['style'],

    /**
     * Collapsed/expanded state
     *
     * @property collapsed
     * @type boolean
     * @default true
     * @public
     */
    collapsed: true,

    /**
     * True if this item is expanded
     *
     * @property active
     * @protected
     */
    active: false,

    collapse: computed.not('transitioning'),
    collapsing: computed.alias('transitioning'),
    'in': computed.and('collapse', 'active'),

    /**
     * true if the component is currently transitioning
     *
     * @property transitioning
     * @type boolean
     * @protected
     */
    transitioning: false,

    /**
     * @property collapseSize
     * @type number
     * @protected
     */
    collapseSize: null,

    /**
     * The size of the element when collapsed. Defaults to 0.
     *
     * @property collapsedSize
     * @type number
     * @default 0
     * @public
     */
    collapsedSize: 0,

    /**
     * The size of the element when expanded. When null the value is calculated automatically to fit the containing elements.
     *
     * @property expandedSize
     * @type number
     * @default null
     * @public
     */
    expandedSize: null,

    /**
     * Usually the size (height) of the element is only set while transitioning, and reseted afterwards. Set to true to always set a size.
     *
     * @property resetSizeWhenNotCollapsing
     * @type boolean
     * @default true
     * @private
     */
    resetSizeWhenNotCollapsing: true,

    /**
     * The direction (height/width) of the collapse animation.
     * When setting this to 'width' you should also define custom CSS transitions for the width property, as the Bootstrap
     * CSS does only support collapsible elements for the height direction.
     *
     * @property collapseDimension
     * @type string
     * @default 'height'
     * @public
     */
    collapseDimension: 'height',

    style: computed('collapseSize', function () {
      var size = this.get('collapseSize');
      var dimension = this.get('collapseDimension');
      if (_ember['default'].isEmpty(size)) {
        return _ember['default'].String.htmlSafe('');
      }
      return _ember['default'].String.htmlSafe(dimension + ': ' + size + 'px');
    }),

    /**
     * Triggers the show transition
     *
     * @method show
     * @protected
     */
    show: function show() {
      var complete = function complete() {
        this.set('transitioning', false);
        if (this.get('resetSizeWhenNotCollapsing')) {
          this.set('collapseSize', null);
        }
        this.sendAction('didShow');
      };

      this.sendAction('willShow');

      this.setProperties({
        transitioning: true,
        collapseSize: this.get('collapsedSize'),
        active: true
      });

      if (!_ember['default'].$.support.transition) {
        return complete.call(this);
      }

      this.$().one('bsTransitionEnd', _ember['default'].run.bind(this, complete))
      // @todo: make duration configurable
      .emulateTransitionEnd(350);

      _ember['default'].run.next(this, function () {
        if (!this.get('isDestroyed')) {
          this.set('collapseSize', this.getExpandedSize('show'));
        }
      });
    },

    /**
     * Get the size of the element when expanded
     *
     * @method getExpandedSize
     * @param $action
     * @return {Number}
     * @private
     */
    getExpandedSize: function getExpandedSize($action) {
      var expandedSize = this.get('expandedSize');
      if (_ember['default'].isPresent(expandedSize)) {
        return expandedSize;
      }

      var collapseElement = this.$();
      var prefix = $action === 'show' ? 'scroll' : 'offset';
      var measureProperty = _ember['default'].String.camelize(prefix + '-' + this.get('collapseDimension'));
      return collapseElement[0][measureProperty];
    },

    /**
     * Triggers the hide transition
     *
     * @method hide
     * @protected
     */
    hide: function hide() {

      var complete = function complete() {
        this.set('transitioning', false);
        if (this.get('resetSizeWhenNotCollapsing')) {
          this.set('collapseSize', null);
        }
        this.sendAction('didHide');
      };

      this.sendAction('willHide');

      this.setProperties({
        transitioning: true,
        collapseSize: this.getExpandedSize('hide'),
        active: false
      });

      if (!_ember['default'].$.support.transition) {
        return complete.call(this);
      }

      this.$().one('bsTransitionEnd', _ember['default'].run.bind(this, complete))
      // @todo: make duration configurable
      .emulateTransitionEnd(350);

      _ember['default'].run.next(this, function () {
        if (!this.get('isDestroyed')) {
          this.set('collapseSize', this.get('collapsedSize'));
        }
      });
    },

    _onCollapsedChange: observer('collapsed', function () {
      var collapsed = this.get('collapsed');
      var active = this.get('active');
      if (collapsed !== active) {
        return;
      }
      if (collapsed === false) {
        this.show();
      } else {
        this.hide();
      }
    }),

    _onInit: _ember['default'].on('init', function () {
      this.set('active', !this.get('collapsed'));
    }),

    _updateCollapsedSize: observer('collapsedSize', function () {
      if (!this.get('resetSizeWhenNotCollapsing') && this.get('collapsed') && !this.get('collapsing')) {
        this.set('collapseSize', this.get('collapsedSize'));
      }
    }),

    _updateExpandedSize: observer('expandedSize', function () {
      if (!this.get('resetSizeWhenNotCollapsing') && !this.get('collapsed') && !this.get('collapsing')) {
        this.set('collapseSize', this.get('expandedSize'));
      }
    })
  });
});
define('ember-bootstrap/components/bs-contextual-help', ['exports', 'ember', 'ember-bootstrap/utils/get-position', 'ember-bootstrap/utils/get-calculated-offset', 'ember-bootstrap/utils/get-parent'], function (exports, _ember, _emberBootstrapUtilsGetPosition, _emberBootstrapUtilsGetCalculatedOffset, _emberBootstrapUtilsGetParent) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var assert = _ember['default'].assert;
  var Component = _ember['default'].Component;
  var computed = _ember['default'].computed;
  var guidFor = _ember['default'].guidFor;
  var isArray = _ember['default'].isArray;
  var isBlank = _ember['default'].isBlank;
  var K = _ember['default'].K;
  var observer = _ember['default'].observer;
  var run = _ember['default'].run;
  var $ = _ember['default'].$;
  var _Ember$run = _ember['default'].run;
  var later = _Ember$run.later;
  var cancel = _Ember$run.cancel;
  var bind = _Ember$run.bind;
  var schedule = _Ember$run.schedule;
  var next = _Ember$run.next;

  var eventNamespace = 'bs-contextual-help';

  var InState = _ember['default'].Object.extend({
    hover: false,
    focus: false,
    click: false,
    'in': computed.or('hover', 'focus', 'click')
  });

  /**
  
   @class Components.ContextualHelp
   @namespace Components
   @extends Ember.Component
   @private
   */
  exports['default'] = Component.extend({
    tagName: '',

    /**
     * @property title
     * @type string
     * @public
     */
    title: null,

    /**
     * How to position the tooltip/popover - top | bottom | left | right
     *
     * @property title
     * @type string
     * @default 'top'
     * @public
     */
    placement: 'top',

    _placement: computed.reads('placement'),

    /**
     * When `true` it will dynamically reorient the tooltip/popover. For example, if `placement` is "left", the
     * tooltip/popover will display to the left when possible, otherwise it will display right.
     *
     * @property autoPlacement
     * @type boolean
     * @default false
     * @public
     */
    autoPlacement: false,

    /**
     * You can programmatically show the tooltip/popover by setting this to `true`
     *
     * @property visible
     * @type boolean
     * @default false
     * @public
     */
    visible: false,

    /**
     * @property inDom
     * @type boolean
     * @private
     */
    inDom: computed.reads('visible'),

    /**
     * Set to false to disable fade animations.
     *
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * Used to apply Bootstrap's "in" class
     *
     * @property in
     * @type boolean
     * @default false
     * @private
     */
    'in': computed.reads('visible'),

    /**
     * Delay showing and hiding the tooltip/popover (ms). Individual delays for showing and hiding can be specified by using the
     * `delayShow` and `delayHide` properties.
     *
     * @property delay
     * @type number
     * @default 0
     * @public
     */
    delay: 0,

    /**
     * Delay showing the tooltip/popover. This property overrides the general delay set with the `delay` property.
     *
     * @property delayShow
     * @type number
     * @default 0
     * @public
     */
    delayShow: computed.reads('delay'),

    /**
     * Delay hiding the tooltip/popover. This property overrides the general delay set with the `delay` property.
     *
     * @property delayHide
     * @type number
     * @default 0
     * @public
     */
    delayHide: computed.reads('delay'),

    hasDelayShow: computed.gt('delayShow', 0),
    hasDelayHide: computed.gt('delayHide', 0),

    /**
     * The duration of the fade transition
     *
     * @property transitionDuration
     * @type number
     * @default 150
     * @public
     */
    transitionDuration: 150,

    /**
     * Keeps the tooltip/popover within the bounds of this element when `autoPlacement` is true. Can be any valid jQuery selector.
     *
     * @property viewportSelector
     * @type string
     * @default 'body'
     * @see viewportPadding
     * @see autoPlacement
     * @public
     */
    viewportSelector: 'body',

    /**
     * Take a padding into account for keeping the tooltip/popover within the bounds of the element given by `viewportSelector`.
     *
     * @property viewportPadding
     * @type number
     * @default 0
     * @see viewportSelector
     * @see autoPlacement
     * @public
     */
    viewportPadding: 0,

    /**
     * Use CSS transitions when showing/hiding?
     *
     * @property usesTransition
     * @type boolean
     * @readonly
     * @private
     */
    usesTransition: computed('fade', function () {
      return _ember['default'].$.support.transition && this.get('fade');
    }),

    /**
     * The id of the overlay element.
     *
     * @property overlayId
     * @type string
     * @readonly
     * @private
     */
    overlayId: computed(function () {
      return 'overlay-' + guidFor(this);
    }),

    /**
     * The jQuery object of the overlay element.
     *
     * @property overlayElement
     * @type object
     * @readonly
     * @private
     */
    overlayElement: computed('overlayId', function () {
      return _ember['default'].$('#' + this.get('overlayId'));
    }).volatile(),

    /**
     * The jQuery object of the arrow element.
     *
     * @property arrowElement
     * @type object
     * @readonly
     * @private
     */
    arrowElement: null,

    /**
     * The jQuery object of the viewport element.
     *
     * @property viewportElement
     * @type object
     * @readonly
     * @private
     */
    viewportElement: computed('viewportSelector', function () {
      return $(this.get('viewportSelector'));
    }),

    /**
     * The DOM element that triggers the tooltip/popover. By default it is the parent element of this component.
     * You can set this to any jQuery selector to have any other element trigger the tooltip/popover.
     * With the special value of "parentView" you can attach the tooltip/popover to the parent component's element.
     *
     * @property triggerElement
     * @type string
     * @public
     */
    triggerElement: null,

    /**
     * @property triggerTargetElement
     * @type {jQuery}
     * @private
     */
    triggerTargetElement: computed('triggerElement', function () {
      var triggerElement = this.get('triggerElement');
      var $el = undefined;

      if (isBlank(triggerElement)) {
        $el = (0, _emberBootstrapUtilsGetParent['default'])(this);
      } else if (triggerElement === 'parentView') {
        $el = $(this.get('parentView.element'));
      } else {
        $el = $(triggerElement);
      }
      assert('Trigger element for tooltip/popover must be present', $el.length === 1);
      return $el;
    }),

    /**
     * The event(s) that should trigger the tooltip/popover - click | hover | focus.
     * You can set this to a single event or multiple events, given as an array or a string separated by spaces.
     *
     * @property triggerEvents
     * @type array|string
     * @default 'hover focus'
     * @public
     */
    triggerEvents: 'hover focus',

    _triggerEvents: computed('triggerEvents', function () {
      var events = this.get('triggerEvents');
      if (!isArray(events)) {
        events = events.split(' ');
      }

      return events.map(function (event) {
        switch (event) {
          case 'hover':
            return ['mouseenter', 'mouseleave'];
          case 'focus':
            return ['focusin', 'focusout'];
          default:
            return event;
        }
      });
    }),

    /**
     * If true component will render in place, rather than be wormholed.
     *
     * @property renderInPlace
     * @type boolean
     * @default false
     * @public
     */
    renderInPlace: false,

    /**
     * @property _renderInPlace
     * @type boolean
     * @private
     */
    _renderInPlace: computed('renderInPlace', function () {
      return this.get('renderInPlace') || typeof _ember['default'].$ !== 'function' || _ember['default'].$('#ember-bootstrap-modal-container').length === 0;
    }),

    /**
     * Current hover state, 'in', 'out' or null
     *
     * @property hoverState
     * @type string
     * @private
     */
    hoverState: null,

    /**
     * Current state for events
     *
     * @property inState
     * @type {InState}
     * @private
     */
    inState: computed(function () {
      return InState.create();
    }),

    /**
     * Ember.run timer
     *
     * @property timer
     * @private
     */
    timer: null,

    /**
     * This action is called immediately when the tooltip/popover is about to be shown.
     *
     * @event onShow
     * @public
     */
    onShow: K,

    /**
     * This action will be called when the tooltip/popover has been made visible to the user (will wait for CSS transitions to complete).
     *
     * @event onShown
     * @public
     */
    onShown: K,

    /**
     * This action is called immediately when the tooltip/popover is about to be hidden.
     *
     * @event onHide
     * @public
     */
    onHide: K,

    /**
     * This action is called when the tooltip/popover has finished being hidden from the user (will wait for CSS transitions to complete).
     *
     * @event onHidden
     * @public
     */
    onHidden: K,

    /**
     * Called when a show event has been received
     *
     * @method enter
     * @param e
     * @private
     */
    enter: function enter(e) {
      if (e) {
        var eventType = e.type === 'focusin' ? 'focus' : 'hover';
        this.get('inState').set(eventType, true);
      }

      if (this.get('in') || this.get('hoverState') === 'in') {
        this.set('hoverState', 'in');
        return;
      }

      cancel(this.timer);

      this.set('hoverState', 'in');

      if (!this.get('hasDelayShow')) {
        return this.show();
      }

      this.timer = later(this, function () {
        if (this.get('hoverState') === 'in') {
          this.show();
        }
      }, this.get('delayShow'));
    },

    /**
     * Called when a hide event has been received
     *
     * @method leave
     * @param e
     * @private
     */
    leave: function leave(e) {
      if (e) {
        var eventType = e.type === 'focusout' ? 'focus' : 'hover';
        this.get('inState').set(eventType, false);
      }

      if (this.get('inState.in')) {
        return;
      }

      cancel(this.timer);

      this.set('hoverState', 'out');

      if (!this.get('hasDelayHide')) {
        return this.hide();
      }

      this.timer = later(this, function () {
        if (this.get('hoverState') === 'out') {
          this.hide();
        }
      }, this.get('delayHide'));
    },

    /**
     * Called for a click event
     *
     * @method toggle
     * @param e
     * @private
     */
    toggle: function toggle(e) {
      if (e) {
        this.get('inState').toggleProperty('click');
        if (this.get('inState.in')) {
          this.enter();
        } else {
          this.leave();
        }
      } else {
        if (this.get('in')) {
          this.leave();
        } else {
          this.enter();
        }
      }
    },

    /**
     * Show the tooltip/popover
     *
     * @method show
     * @private
     */
    show: function show() {
      if (this.get('isDestroyed')) {
        return;
      }

      if (false === this.get('onShow')(this)) {
        return;
      }

      // this waits for the tooltip/popover element to be created. when animating a wormholed tooltip/popover we need to wait until
      // ember-wormhole has moved things in the DOM for the animation to be correct, so use Ember.run.next in this case
      var delayFn = !this.get('_renderInPlace') && this.get('fade') ? next : function (target, fn) {
        schedule('afterRender', target, fn);
      };

      this.set('inDom', true);
      delayFn(this, this._show);
    },

    _show: function _show() {
      var skipTransition = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var $element = this.get('triggerTargetElement');
      var placement = this.get('placement');

      // this.$element.attr('aria-describedby', tipId) @todo ?

      var $tip = this.get('overlayElement');
      $tip.css({ top: 0, left: 0, display: 'block' });

      var pos = (0, _emberBootstrapUtilsGetPosition['default'])($element);
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (this.get('autoPlacement')) {
        var viewportDim = (0, _emberBootstrapUtilsGetPosition['default'])(this.get('viewportElement'));

        placement = placement === 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement === 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement === 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement === 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;
      }

      this.set('_placement', placement);

      var calculatedOffset = (0, _emberBootstrapUtilsGetCalculatedOffset['default'])(placement, pos, actualWidth, actualHeight);
      this.applyPlacement(calculatedOffset, placement);

      function tooltipShowComplete() {
        if (this.get('isDestroyed')) {
          return;
        }
        var prevHoverState = this.get('hoverState');

        this.get('onShown')(this);
        this.set('hoverState', null);

        if (prevHoverState === 'out') {
          this.leave();
        }
      }

      if (skipTransition === false && this.get('usesTransition')) {
        this.get('overlayElement').one('bsTransitionEnd', bind(this, tooltipShowComplete)).emulateTransitionEnd(this.get('transitionDuration'));
      } else {
        tooltipShowComplete.call(this);
      }
    },

    /**
     * Position the tooltip/popover
     *
     * @method applyPlacement
     * @param offset
     * @param placement
     * @private
     */
    applyPlacement: function applyPlacement(offset, placement) {
      var $tip = this.get('overlayElement');
      var width = $tip[0].offsetWidth;
      var height = $tip[0].offsetHeight;

      // manually read margins because getBoundingClientRect includes difference
      var marginTop = parseInt($tip.css('margin-top'), 10);
      var marginLeft = parseInt($tip.css('margin-left'), 10);

      // we must check for NaN for ie 8/9
      if (isNaN(marginTop)) {
        marginTop = 0;
      }
      if (isNaN(marginLeft)) {
        marginLeft = 0;
      }

      offset.top += marginTop;
      offset.left += marginLeft;

      // $.fn.offset doesn't round pixel values
      // so we use setOffset directly with our own function B-0
      $.offset.setOffset($tip[0], $.extend({
        using: function using(props) {
          $tip.css({
            top: Math.round(props.top),
            left: Math.round(props.left)
          });
        }
      }, offset), 0);

      this.set('in', true);

      // check to see if placing tip in new offset caused the tip to resize itself
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (placement === 'top' && actualHeight !== height) {
        offset.top = offset.top + height - actualHeight;
      }

      var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

      if (delta.left) {
        offset.left += delta.left;
      } else {
        offset.top += delta.top;
      }

      var isVertical = /top|bottom/.test(placement);
      var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
      var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';

      $tip.offset(offset);
      this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
    },

    /**
     * @method getViewportAdjustedDelta
     * @param placement
     * @param pos
     * @param actualWidth
     * @param actualHeight
     * @returns {{top: number, left: number}}
     * @private
     */
    getViewportAdjustedDelta: function getViewportAdjustedDelta(placement, pos, actualWidth, actualHeight) {
      var delta = { top: 0, left: 0 };
      var $viewport = this.get('viewportElement');
      if (!$viewport) {
        return delta;
      }

      var viewportPadding = this.get('viewportPadding');
      var viewportDimensions = (0, _emberBootstrapUtilsGetPosition['default'])($viewport);

      if (/right|left/.test(placement)) {
        var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
        var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
        if (topEdgeOffset < viewportDimensions.top) {
          // top overflow
          delta.top = viewportDimensions.top - topEdgeOffset;
        } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
          // bottom overflow
          delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
        }
      } else {
        var leftEdgeOffset = pos.left - viewportPadding;
        var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
        if (leftEdgeOffset < viewportDimensions.left) {
          // left overflow
          delta.left = viewportDimensions.left - leftEdgeOffset;
        } else if (rightEdgeOffset > viewportDimensions.right) {
          // right overflow
          delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
        }
      }

      return delta;
    },

    /**
     * Position the tooltip/popover's arrow
     *
     * @method replaceArrow
     * @param delta
     * @param dimension
     * @param isVertical
     * @private
     */
    replaceArrow: function replaceArrow(delta, dimension, isVertical) {
      this.get('arrowElement').css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
    },

    /**
     * Hide the tooltip/popover
     *
     * @method hide
     * @private
     */
    hide: function hide() {
      if (this.get('isDestroyed')) {
        return;
      }

      if (false === this.get('onHide')(this)) {
        return;
      }

      function tooltipHideComplete() {
        if (this.get('isDestroyed')) {
          return;
        }
        if (this.get('hoverState') !== 'in') {
          this.set('inDom', false);
        }
        this.get('onHidden')(this);
      }

      this.set('in', false);

      if (this.get('usesTransition')) {
        this.get('overlayElement').one('bsTransitionEnd', bind(this, tooltipHideComplete)).emulateTransitionEnd(this.get('transitionDuration'));
      } else {
        tooltipHideComplete.call(this);
      }

      this.set('hoverState', null);
    },

    /**
     * @method addListeners
     * @private
     */
    addListeners: function addListeners() {
      var _this = this;

      var $target = this.get('triggerTargetElement');

      this.get('_triggerEvents').forEach(function (event) {
        if (isArray(event)) {
          var _event = _slicedToArray(event, 2);

          var inEvent = _event[0];
          var outEvent = _event[1];

          $target.on(inEvent + '.' + eventNamespace, run.bind(_this, _this.enter));
          $target.on(outEvent + '.' + eventNamespace, run.bind(_this, _this.leave));
        } else {
          $target.on(event + '.' + eventNamespace, run.bind(_this, _this.toggle));
        }
      });
    },

    /**
     * @method removeListeners
     * @private
     */
    removeListeners: function removeListeners() {
      this.get('triggerTargetElement').off('.' + eventNamespace);
    },

    didInsertElement: function didInsertElement() {
      this._super.apply(this, arguments);
      this.addListeners();
      if (this.get('visible')) {
        next(this, this._show, true);
      }
    },

    willRemoveElement: function willRemoveElement() {
      this._super.apply(this, arguments);
      this.removeListeners();
    },

    _watchVisible: observer('visible', function () {
      if (this.get('visible')) {
        this.show();
      } else {
        this.hide();
      }
    })

  });
});
define('ember-bootstrap/components/bs-dropdown-button', ['exports', 'ember-bootstrap/components/bs-button', 'ember-bootstrap/mixins/dropdown-toggle'], function (exports, _emberBootstrapComponentsBsButton, _emberBootstrapMixinsDropdownToggle) {
  'use strict';

  /**
   Button component with that can act as a dropdown toggler.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownButton
   @namespace Components
   @extends Components.Button
   @uses Mixins.DropdownToggle
   @public
   */
  exports['default'] = _emberBootstrapComponentsBsButton['default'].extend(_emberBootstrapMixinsDropdownToggle['default']);
});
define('ember-bootstrap/components/bs-dropdown-menu', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   Component for the dropdown menu.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
   @class DropdownMenu
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend({

    /**
     * Defaults to a `<ul>` tag. Change for other types of dropdown menus.
     *
     * @property tagName
     * @type string
     * @default ul
     * @public
     */
    tagName: 'ul',
    classNames: ['dropdown-menu'],
    classNameBindings: ['alignClass'],

    /**
     * @property ariaRole
     * @default menu
     * @type string
     * @protected
     */
    ariaRole: 'menu',

    /**
     * Alignment of the menu, either "left" or "right"
     *
     * @property align
     * @type string
     * @default left
     * @public
     */
    align: 'left',

    alignClass: computed('align', function () {
      if (this.get('align') !== 'left') {
        return 'dropdown-menu-' + this.get('align');
      }
    })
  });
});
define('ember-bootstrap/components/bs-dropdown-toggle', ['exports', 'ember', 'ember-bootstrap/mixins/dropdown-toggle'], function (exports, _ember, _emberBootstrapMixinsDropdownToggle) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   Anchor element that triggers the parent dropdown to open.
   Use [Components.DropdownButton](Components.DropdownButton.html) if you want a button instead of an anchor tag.
  
   See [Components.Dropdown](Components.Dropdown.html) for examples.
  
  
   @class DropdownToggle
   @namespace Components
   @extends Ember.Component
   @uses Mixins.DropdownToggle
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsDropdownToggle['default'], {
    /**
     * Defaults to a `<a>` tag. Change for other types of dropdown toggles.
     *
     * @property tagName
     * @type string
     * @default a
     * @public
     */
    tagName: 'a',

    attributeBindings: ['href'],

    /**
     * Computed property to generate a `href="#"` attribute when `tagName` is "a".
     *
     * @property href
     * @type string
     * @readonly
     * @protected
     */
    href: computed('tagName', function () {
      if (this.get('tagName').toUpperCase() === 'A') {
        return '#';
      }
    }),

    click: function click(e) {
      e.preventDefault();
      this.sendAction();
    }

  });
});
define('ember-bootstrap/components/bs-dropdown', ['exports', 'ember', 'ember-bootstrap/components/bs-dropdown-button', 'ember-bootstrap/mixins/component-parent'], function (exports, _ember, _emberBootstrapComponentsBsDropdownButton, _emberBootstrapMixinsComponentParent) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;

  /**
   Bootstrap style dropdown menus, consisting of a toggle element, and the dropdown menu itself.
   See http://getbootstrap.com/components/#dropdowns
  
   Use this component together with two sub components, a dropdown toggle (`Components.DropdownToggle` or
   `Components.DropdownButton` component) and a dropdown menu (`Components.DropdownMenu`) component:
  
   ```hbs
   <nav class="navbar navbar-default navbar-static">
     <div class="container-fluid">
       <ul class="nav navbar-nav">
         {{#bs-dropdown tagName="li"}}
           {{#bs-dropdown-toggle}}Dropdown <span class="caret"></span>{{/bs-dropdown-toggle}}
           {{#bs-dropdown-menu}}
             <li>{{#link-to "index"}}Something{{/link-to}}</li>
             <li>{{#link-to "index"}}Something different{{/link-to}}</li>
           {{/bs-dropdown-menu}}
         {{/bs-dropdown}}
       </ul>
     </div>
   </nav>
   ```
  
   ### Button dropdowns
  
   To use a button as the dropdown toggle element (see http://getbootstrap.com/components/#btn-dropdowns), use the
   `Components.DropdownButton` component as the toggle:
  
   ```hbs
   {{#bs-dropdown}}
     {{#bs-dropdown-button}}Dropdown <span class="caret"></span>{{/bs-dropdown-button}}
     {{#bs-dropdown-menu}}
       <li>{{#link-to "index"}}Something{{/link-to}}</li>
       <li>{{#link-to "index"}}Something different{{/link-to}}</li>
     {{/bs-dropdown-menu}}
   {{/bs-dropdown}}
   ```
  
   It has all the functionality of a `Components.Button` with additional dropdown support.
  
   ### Split button dropdowns
  
   To have a regular button with a dropdown button as in http://getbootstrap.com/components/#btn-dropdowns-split, use a
   `Components.Button` component and a `Components.DropdownButton`:
  
   ```hbs
   {{#bs-dropdown}}
     {{#bs-button}}Dropdown{{/bs-button}}
     {{#bs-dropdown-button}}Dropdown <span class="caret"></span>{{/bs-dropdown-button}}
     {{#bs-dropdown-menu}}
       <li>{{#link-to "index"}}Something{{/link-to}}</li>
       <li>{{#link-to "index"}}Something different{{/link-to}}</li>
     {{/bs-dropdown-menu}}
   {{/bs-dropdown}}
   ```
  
   ### Dropup style
  
   Set the `direction` property to "up" to switch to a "dropup" style:
  
   ```hbs
   {{#bs-dropdown direction="up"}}
     ...
   {{/bs-dropdown}}
   ```
  
   @class Dropdown
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentParent['default'], {
    classNameBindings: ['open', 'containerClass'],

    /**
     * This property reflects the state of the dropdown, whether it is open or closed.
     *
     * @property open
     * @default false
     * @type boolean
     * @public
     */
    open: false,

    /**
     * By default clicking on an open dropdown menu will close it. Set this property to false for the menu to stay open.
     *
     * @property closeOnMenuClick
     * @default true
     * @type boolean
     * @public
     */
    closeOnMenuClick: true,

    /**
     * jQuery click event name, namespaced to this component's instance to prevent interference between multiple dropdowns.
     *
     * @property clickEventName
     * @type string
     * @private
     */
    clickEventName: undefined,

    /**
     * By default the dropdown menu will expand downwards. Set to 'up' to expand upwards.
     *
     * @property direction
     * @type string
     * @default 'down'
     * @public
     */
    direction: 'down',

    /**
     * A computed property to generate the suiting class for the dropdown container, either "dropdown", "dropup" or "btn-group".
     *
     * @property containerClass
     * @type string
     * @readonly
     * @private
     */
    containerClass: computed('toggleType', 'direction', function () {
      if (this.get('toggleType') === 'button') {
        return this.get('direction') === 'up' ? 'btn-group dropup' : 'btn-group';
      } else {
        return this.get('direction') === 'up' ? 'dropup' : 'dropdown';
      }
    }),

    /**
     * This property is "button" if the toggle element is an instance of [Components.DropdownButton](Components.DropdownButton.html), otherwise "toggle".
     *
     * @property toggleType
     * @type string
     * @readonly
     * @protected
     */
    toggleType: computed('children.[]', function () {
      if (this.get('children').any(function (view) {
        return view instanceof _emberBootstrapComponentsBsDropdownButton['default'];
      })) {
        return 'button';
      }
      return 'toggle';
    }),

    actions: {
      toggleDropdown: function toggleDropdown() {
        this.toggleProperty('open');
      },

      openDropdown: function openDropdown() {
        this.set('open', true);
      },

      closeDropdown: function closeDropdown() {
        this.set('open', false);
      }
    },

    handleClickEvents: observer('open', function () {
      if (this.get('open')) {
        _ember['default'].$(document).on(this.clickEventName, _ember['default'].run.bind(this, this.closeOnClickHandler));
      } else {
        _ember['default'].$(document).off(this.clickEventName);
      }
    }),

    willDestroyElement: function willDestroyElement() {
      this._super();
      _ember['default'].$(document).off(this.clickEventName);
    },

    init: function init() {
      this._super();
      // click event name that is namespaced to our component instance, so multiple dropdowns do not interfere
      // with each other
      this.clickEventName = 'click.' + this.get('elementId');
    },

    /**
     * Handler for click events to close the dropdown
     *
     * @method closeOnClickHandler
     * @param e
     * @protected
     */
    closeOnClickHandler: function closeOnClickHandler(e) {
      var $target = _ember['default'].$(e.target);
      if (!this.get('isDestroyed') && $target.closest(this.$().find('.dropdown-toggle')).length === 0 && ($target.closest(this.$().find('.dropdown-menu')).length === 0 || this.get('closeOnMenuClick'))) {
        this.set('open', false);
      }
    }
  });
});
define('ember-bootstrap/components/bs-form-element', ['exports', 'ember', 'ember-bootstrap/components/bs-form-group', 'ember-bootstrap/components/bs-form', 'ember-bootstrap/mixins/component-child'], function (exports, _ember, _emberBootstrapComponentsBsFormGroup, _emberBootstrapComponentsBsForm, _emberBootstrapMixinsComponentChild) {
  'use strict';

  var computed = _ember['default'].computed;
  var defineProperty = _ember['default'].defineProperty;
  var isArray = _ember['default'].isArray;
  var observer = _ember['default'].observer;
  var on = _ember['default'].on;
  var run = _ember['default'].run;
  var warn = _ember['default'].warn;

  var nonTextFieldControlTypes = _ember['default'].A(['checkbox', 'select', 'textarea']);

  /**
   Sub class of `Components.FormGroup` that adds automatic form layout markup and form validation features.
  
   ### Form layout
  
   The appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily
   create forms without coding the default Bootstrap form markup by hand:
  
   ```hbs
   {{#bs-form formLayout="horizontal" action="submit"}}
     {{bs-form-element controlType="email" label="Email" placeholder="Email" value=email}}
     {{bs-form-element controlType="password" label="Password" placeholder="Password" value=password}}
     {{bs-form-element controlType="checkbox" label="Remember me" value=rememberMe}}
     {{bs-button defaultText="Submit" type="primary" buttonType="submit"}}
   {{/bs-form}}
   ```
  
   ### Form validation
  
   In the following example the control elements of the three form elements value will be bound to the properties
   (given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):
  
   ```hbs
   {{#bs-form formLayout="horizontal" model=this action="submit"}}
     {{bs-form-element controlType="email" label="Email" placeholder="Email" property="email"}}
     {{bs-form-element controlType="password" label="Password" placeholder="Password" property="password"}}
     {{bs-form-element controlType="checkbox" label="Remember me" property="rememberMe"}}
     {{bs-button defaultText="Submit" type="primary" buttonType="submit"}}
   {{/bs-form}}
   ```
  
   By using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic
   form validation, given that your `model` has a supported means of validating itself.
   See [Components.Form](Components.Form.html) for details on how to enable form validation.
  
   In the example above the `model` was our controller itself, so the control elements were bound to the appropriate
   properties of our controller. A controller implementing validations on those properties could look like this:
  
   ```js
   import Ember from 'ember';
   import EmberValidations from 'ember-validations';
  
   export default Ember.Controller.extend(EmberValidations,{
     email: null,
     password: null,
     rememberMe: false,
     validations: {
       email: {
         presence: true,
         format: {
           with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/
         }
       },
       password: {
         presence: true,
         length: { minimum: 6, maximum: 10}
       },
       comments: {
         length: { minimum: 5, maximum: 20}
       }
     }
   });
   ```
  
   If the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the
   control element or the containing `Components.Form` was submitted with its `model` failing validation) and there are
   validation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see
   http://getbootstrap.com/css/#forms-control-validation) is applied:
  
   * `validation` is set to 'error', which will set the `has-error` CSS class
   * the `errorIcon` feedback icon is displayed if `controlType` is a text field
   * the validation messages are displayed as Bootstrap `help-block`s
  
   The same applies for warning messages, if the used validation library supports this. (Currently only
   [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations))
  
   As soon as the validation is successful again...
  
   * `validation` is set to 'success', which will set the `has-success` CSS class
   * the `successIcon` feedback icon is displayed if `controlType` is a text field
   * the validation messages are removed
  
   ### Custom controls
  
   Apart from the standard built-in browser controls (see the `controlType` property), you can use any custom control simply
   by invoking the component with a block template. Use whatever control you might want, for example a select-2 component
   (from the [ember-select-2 addon](https://istefo.github.io/ember-select-2)):
  
   ```hbs
   {{#bs-form formLayout="horizontal" model=this action="submit"}}
     {{#bs-form-element label="Select-2" property="gender" useIcons=false as |value id validationState|}}
       {{select-2 id=id content=genderChoices optionLabelPath="label" value=value searchEnabled=false}}
     {{/bs-form-element}}
   {{/bs-form}}
   ```
  
   If your custom control does not render an input element, you should set `useIcons` to `false` since bootstrap only supports
   feedback icons with textual `<input class="form-control">` elements.
  
   @class FormElement
   @namespace Components
   @extends Components.FormGroup
   @public
   */
  exports['default'] = _emberBootstrapComponentsBsFormGroup['default'].extend(_emberBootstrapMixinsComponentChild['default'], {
    classNameBindings: ['disabled:is-disabled', 'required:is-required', 'isValidating'],

    /**
     * Text to display within a `<label>` tag.
     *
     * You should include a label for every form input cause otherwise screen readers
     * will have trouble with your forms. Use `invisibleLabel` property if you want
     * to hide them.
     *
     * @property label
     * @type string
     * @public
     */
    label: null,

    /**
     * Controls label visibilty by adding 'sr-only' class.
     *
     * @property invisibleLabel
     * @type boolean
     * @public
     */
    invisibleLabel: false,

    /**
     * The type of the control widget.
     * Supported types:
     *
     * * 'text'
     * * 'checkbox'
     * * 'select' (deprecated)
     * * 'textarea'
     * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input
     * types like 'email'), and the same layout as the 'text' type
     *
     * @property controlType
     * @type string
     * @public
     */
    controlType: 'text',

    /**
     * The value of the control element is bound to this property. You can bind it to some controller property to
     * get/set the control element's value:
     *
     * ```hbs
     * {{bs-form-element controlType="email" label="Email" placeholder="Email" value=email}}
     * ```
     *
     * Note: you loose the ability to validate this form element by directly binding to its value. It is recommended
     * to use the `property` feature instead.
     *
     *
     * @property value
     * @public
     */
    value: null,

    /**
     The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this
     form element should represent. The control element's value will automatically be bound to the model property's
     value.
      Using this property enables form validation on this element.
      @property property
     @type string
     @public
     */
    property: null,

    /**
     * Control element's HTML5 placeholder attribute
     *
     * @property placeholder
     * @type string
     * @public
     */
    placeholder: null,

    /**
     * Control element's HTML5 disabled attribute
     *
     * @property disabled
     * @type boolean
     * @public
     */
    disabled: false,

    /**
     * Control element's HTML5 required attribute
     *
     * @property required
     * @type boolean
     * @public
     */
    required: false,

    /**
     * Control element's HTML5 autofocus attribute
     *
     * @property autofocus
     * @type boolean
     * @public
     */
    autofocus: false,

    /**
     * Control element's name attribute
     *
     * @property name
     * @type string
     * @public
     */
    name: null,

    /**
     * An array of objects containing the selection of choices for multiple choice style form controls, e.g. select
     * boxes.
     *
     * ```hbs
     * {{bs-form-element controlType="select" choices=countries choiceLabelProperty="name" choiceValueProperty="id" label="Country" value=selectedCountry}}
     * ```
     *
     * Be sure to also set the `choiceValueProperty` and `choiceLabelProperty` properties.
     *
     * @property choices
     * @type array
     * @public
     */
    choices: _ember['default'].A(),

    /**
     * The property of the `choices` array of objects, containing the value of the choice, e.g. the select box option.
     *
     * @property choiceValueProperty
     * @type string
     * @public
     */
    choiceValueProperty: null,

    /**
     * The property of the `choices` array of objects, containing the label of the choice, e.g. the select box option.
     *
     * @property choiceLabelProperty
     * @type string
     * @public
     */
    choiceLabelProperty: null,

    /**
     * Textarea's rows attribute (ignored for other `controlType`s)
     *
     * @property rows
     * @type number
     * @default 5
     * @public
     */
    rows: 5,

    /**
     * Textarea's cols attribute (ignored for other `controlType`s)
     *
     * @property cols
     * @type number
     * @public
     */
    cols: null,

    /**
     * The model used for validation. Defaults to the parent `Components.Form`'s `model`
     *
     * @property model
     * @public
     */
    model: computed.reads('form.model'),

    /**
     * The array of error messages from the `model`'s validation.
     *
     * @property errors
     * @type array
     * @protected
     */
    errors: null,

    /**
     * @property hasErrors
     * @type boolean
     * @readonly
     * @protected
     */
    hasErrors: computed.gt('errors.length', 0),

    /**
     * The array of warning messages from the `model`'s validation.
     *
     * @property errors
     * @type array
     * @protected
     */
    warnings: null,

    /**
     * @property hasWarnings
     * @type boolean
     * @readonly
     * @protected
     */
    hasWarnings: computed.gt('warnings.length', 0),

    /**
     * The array of validation messages (either errors or warnings) rom the `model`'s validation.
     *
     * @property validationMessages
     * @type array
     * @protected
     */
    validationMessages: computed('hasErrors', 'hasWarnings', 'errors.[]', 'warnings.[]', function () {
      if (this.get('hasErrors')) {
        return this.get('errors');
      }
      if (this.get('hasWarnings')) {
        return this.get('warnings');
      }
      return null;
    }),

    /**
     * @property hasValidationMessages
     * @type boolean
     * @readonly
     * @protected
     */
    hasValidationMessages: computed.gt('validationMessages.length', 0),

    /**
     * @property hasValidator
     * @type boolean
     * @readonly
     * @protected
     */
    hasValidator: computed.notEmpty('model.validate'),

    /**
     * Set a validating state for async validations
     *
     * @property isValidating
     * @type boolean
     * @default false
     * @public
     */
    isValidating: false,

    /**
     * If `true` form validation markup is rendered (requires a validatable `model`).
     *
     * @property showValidation
     * @type boolean
     * @default false
     * @public
     */
    showValidation: false,

    /**
     * @property showValidationMessages
     * @type boolean
     * @readonly
     * @protected
     */
    showValidationMessages: computed.and('showValidation', 'hasValidationMessages'),

    /**
     * Event or list of events which enable form validation markup rendering.
     * Supported events: ['focusOut', 'change']
     *
     * @property showValidationOn
     * @type string|array
     * @default ['focusOut']
     * @public
     */
    showValidationOn: ['focusOut'],

    /**
     * @property _showValidationOn
     * @type array
     * @readonly
     * @private
     */
    _showValidationOn: computed('showValidationOn', function () {
      var showValidationOn = this.get('showValidationOn');

      if (isArray(showValidationOn)) {
        return showValidationOn;
      }

      if (typeof showValidationOn.toString === 'function') {
        return [showValidationOn];
      }

      warn('showValidationOn must be a String or an Array');
      return [];
    }),

    /**
     * @method showValidationOnHandler
     * @private
     */
    showValidationOnHandler: function showValidationOnHandler(event) {
      if (this.get('_showValidationOn').indexOf(event) !== -1) {
        this.set('showValidation', true);
      }
    },

    /**
     * @property showErrors
     * @type boolean
     * @readonly
     * @deprecated
     * @protected
     */
    showErrors: computed.deprecatingAlias('showValidationMessages'),

    /**
     * The validation ("error" or "success") or null if no validation is to be shown. Automatically computed from the
     * models validation state.
     *
     * @property validation
     * @readonly
     * @type string
     * @protected
     */
    validation: computed('hasErrors', 'hasWarnings', 'hasValidator', 'showValidation', 'isValidating', 'disabled', function () {
      if (!this.get('showValidation') || !this.get('hasValidator') || this.get('isValidating') || this.get('disabled')) {
        return null;
      }
      return this.get('hasErrors') ? 'error' : this.get('hasWarnings') ? 'warning' : 'success';
    }),

    /**
     * @property hasLabel
     * @type boolean
     * @readonly
     * @protected
     */
    hasLabel: computed.notEmpty('label'),

    /**
     * True for text field `controlType`s
     *
     * @property useIcons
     * @type boolean
     * @readonly
     * @public
     */
    useIcons: computed('controlType', function () {
      return !nonTextFieldControlTypes.includes(this.get('controlType'));
    }),

    /**
     * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):
     *
     * * 'horizontal'
     * * 'vertical'
     * * 'inline'
     *
     * Defaults to the parent `form`'s `formLayout` property.
     *
     * @property formLayout
     * @type string
     * @public
     */
    formLayout: computed.alias('form.formLayout'),

    /**
     * @property isVertical
     * @type boolean
     * @readonly
     * @protected
     */
    isVertical: computed.equal('formLayout', 'vertical'),

    /**
     * @property isHorizontal
     * @type boolean
     * @readonly
     * @protected
     */
    isHorizontal: computed.equal('formLayout', 'horizontal'),

    /**
     * @property isInline
     * @type boolean
     * @readonly
     * @protected
     */
    isInline: computed.equal('formLayout', 'inline'),

    /**
     * The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same
     * property of the parent form. The corresponding grid class for form controls is automatically computed.
     *
     * @property horizontalLabelGridClass
     * @type string
     * @default 'col-md-4'
     * @public
     */
    horizontalLabelGridClass: computed.oneWay('form.horizontalLabelGridClass'),

    /**
     * Computed property that specifies the Bootstrap grid class for form controls within a horizontal layout form.
     *
     * @property horizontalInputGridClass
     * @type string
     * @readonly
     * @protected
     */
    horizontalInputGridClass: computed('horizontalLabelGridClass', function () {
      var parts = this.get('horizontalLabelGridClass').split('-');
      _ember['default'].assert('horizontalInputGridClass must match format bootstrap grid column class', parts.length === 3);
      parts[2] = 12 - parts[2];
      return parts.join('-');
    }),

    /**
     * Computed property that specifies the Bootstrap offset grid class for form controls within a horizontal layout
     * form, that have no label.
     *
     * @property horizontalInputOffsetGridClass
     * @type string
     * @readonly
     * @protected
     */
    horizontalInputOffsetGridClass: computed('horizontalLabelGridClass', function () {
      var parts = this.get('horizontalLabelGridClass').split('-');
      parts.splice(2, 0, 'offset');
      return parts.join('-');
    }),

    /**
     * ID for input field and the corresponding label's "for" attribute
     *
     * @property formElementId
     * @type string
     * @private
     */
    formElementId: computed('elementId', function () {
      var elementId = this.get('elementId');
      return elementId + '-field';
    }),

    /**
     * Reference to the parent `Components.Form` class.
     *
     * @property form
     * @protected
     */
    form: computed(function () {
      return this.nearestOfType(_emberBootstrapComponentsBsForm['default']);
    }),

    formElementTemplate: computed('formLayout', 'controlType', function () {
      var formLayout = this.getWithDefault('formLayout', 'vertical');
      var inputLayout = undefined;
      var controlType = this.get('controlType');

      switch (true) {
        case nonTextFieldControlTypes.includes(controlType):
          inputLayout = controlType;
          break;
        default:
          inputLayout = 'default';
      }

      return 'components/form-element/' + formLayout + '/' + inputLayout;
    }),

    /**
     * Setup validation properties. This method acts as a hook for external validation
     * libraries to overwrite. In case of failed validations the `errors` property should contain an array of error messages.
     *
     * @method setupValidations
     * @protected
     */
    setupValidations: _ember['default'].K,

    /**
     * Listen for focusOut events from the control element to automatically set `showValidation` to true to enable
     * form validation markup rendering if `showValidationsOn` contains `focusOut`.
     *
     * @event focusOut
     * @private
     */
    focusOut: function focusOut() {
      this.showValidationOnHandler('focusOut');
    },

    /**
     * Listen for change events from the control element to automatically set `showValidation` to true to enable
     * form validation markup rendering if `showValidationsOn` contains `change`.
     *
     * @event change
     * @private
     */
    change: function change() {
      this.showValidationOnHandler('change');
    },

    init: function init() {
      this._super();
      if (!_ember['default'].isBlank(this.get('property'))) {
        defineProperty(this, 'value', computed.alias('model.' + this.get('property')));
        this.setupValidations();
      }
    },

    /*
     * adjust feedback icon position
     *
     * Bootstrap documentation:
     *  Manual positioning of feedback icons is required for [...] input groups
     *  with an add-on on the right. [...] For input groups, adjust the right
     *  value to an appropriate pixel value depending on the width of your addon.
     */
    adjustFeedbackIcons: on('didInsertElement', observer('hasFeedback', 'formLayout', function () {
      var _this = this;

      run.scheduleOnce('afterRender', function () {
        // validation state icons are only shown if form element has feedback
        if (_this.get('hasFeedback') && !_this.get('isDestroying')) {
          // form group element has
          _this.$()
          // an input-group
          .has('.input-group')
          // an addon or button on right si de
          .has('.input-group input + .input-group-addon, .input-group input + .input-group-btn')
          // an icon showing validation state
          .has('.form-control-feedback').each(function (i, formGroups) {
            // clear existing adjustment
            _this.$('.form-control-feedback').css('right', '');
            var feedbackIcon = _this.$('.form-control-feedback', formGroups);
            var defaultPositionString = feedbackIcon.css('right');
            _ember['default'].assert(defaultPositionString.substr(-2) === 'px', '.form-control-feedback css right units other than px are not supported');
            var defaultPosition = parseInt(defaultPositionString.substr(0, defaultPositionString.length - 2));
            // Bootstrap documentation:
            //  We do not support multiple add-ons (.input-group-addon or .input-group-btn) on a single side.
            // therefore we could rely on having only one input-group-addon or input-group-btn
            var inputGroupWidth = _this.$('input + .input-group-addon, input + .input-group-btn', formGroups).outerWidth();
            var adjustedPosition = defaultPosition + inputGroupWidth;

            feedbackIcon.css('right', adjustedPosition);
          });
        }
      });
    }))
  });
});
define('ember-bootstrap/components/bs-form-group', ['exports', 'ember', 'ember-bootstrap/config'], function (exports, _ember, _emberBootstrapConfig) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   This component renders a `<div class="form-group">` element, with support for validation states and feedback icons.
   Use as a block level component:
  
   ```hbs
   {{#bs-form-group validation=firstNameValidation}}
     <label class="control-label">First name</label>
     {{bs-input type="text" value=firstname}}
   {{/bs-form-group}}
   ```
  
   If the `validation` property is set to some state (usually Bootstrap's predefined states "success",
   "warning" or "error"), the appropriate styles will be added, together with a feedback icon.
   See http://getbootstrap.com/css/#forms-control-validation
  
   @class FormGroup
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['form-group'],
    classNameBindings: ['validationClass', 'hasFeedback'],

    /**
     * Whether to show validation state icons.
     * See http://getbootstrap.com/css/#forms-control-validation
     *
     * @property useIcons
     * @type boolean
     * @default true
     * @public
     */
    useIcons: true,

    /**
     * Computed property which is true if the form group is in a validation state
     *
     * @property hasValidation
     * @type boolean
     * @public
     * @readonly
     */
    hasValidation: computed.notEmpty('validation'),

    /**
     * Computed property which is true if the form group is showing a validation icon
     *
     * @property hasFeedback
     * @type boolean
     * @public
     * @readonly
     */
    hasFeedback: computed.and('hasValidation', 'useIcons', 'hasIconForValidationState'),

    /**
     * The icon classes to be used for a feedback icon in a "success" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationSuccessIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationSuccessIcon: 'fa fa-check'
       * }
     * ```
     *
     * @property successIcon
     * @type string
     * @default 'glyphicon glyphicon-ok'
     * @public
     */
    successIcon: _emberBootstrapConfig['default'].formValidationSuccessIcon,

    /**
     * The icon classes to be used for a feedback icon in a "error" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationErrorIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationErrorIcon: 'fa fa-times'
       * }
     * ```
     *
     * @property errorIcon
     * @type string
     * @public
     */
    errorIcon: _emberBootstrapConfig['default'].formValidationErrorIcon,

    /**
     * The icon classes to be used for a feedback icon in a "warning" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationWarningIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationWarningIcon: 'fa fa-warning'
       * }
     * ```
     *
     * @property warningIcon
     * @type string
     * @public
     */
    warningIcon: _emberBootstrapConfig['default'].formValidationWarningIcon,

    /**
     * The icon classes to be used for a feedback icon in a "info" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationInfoIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationInfoIcon: 'fa fa-info-circle
       * }
     * ```
     *
     * The "info" validation state is not supported in Bootstrap CSS, but can be easily added
     * using the following LESS style:
     * ```less
     * .has-info {
       *   .form-control-validation(@state-info-text; @state-info-text; @state-info-bg);
       * }
     * ```
     *
     * @property infoIcon
     * @type string
     * @public
     */
    infoIcon: _emberBootstrapConfig['default'].formValidationInfoIcon,

    iconName: computed('validation', function () {
      var validation = this.get('validation') || 'success';
      return this.get(validation + 'Icon');
    }),

    hasIconForValidationState: computed.notEmpty('iconName'),

    /**
     * Set to a validation state to render the form-group with a validation style.
     * See http://getbootstrap.com/css/#forms-control-validation
     *
     * The default states of "success", "warning" and "error" are supported by Bootstrap out-of-the-box.
     * But you can use custom states as well. This will set a has-<state> class, and (if `useIcons`is true)
     * a feedback whose class is taken from the <state>Icon property
     *
     * @property validation
     * @type string
     * @public
     */
    validation: null,

    validationClass: computed('validation', function () {
      var validation = this.get('validation');
      if (!_ember['default'].isBlank(validation)) {
        return 'has-' + this.get('validation');
      }
    })
  });
});
define('ember-bootstrap/components/bs-form', ['exports', 'ember', 'ember-bootstrap/components/bs-form-element', 'ember-bootstrap/mixins/component-parent'], function (exports, _ember, _emberBootstrapComponentsBsFormElement, _emberBootstrapMixinsComponentParent) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
    Render a form with the appropriate Bootstrap layout class (see `formLayout`).
    Allows setting a `model` that nested `Components.FormElement`s can access, and that can provide form validation (see below)
  
    You can use whatever markup you like within the form:
  
   ```handlebars
     {{#bs-form action="submit"}}
       {{#bs-form-group validation=firstNameValidation}}
         <label class="control-label">First name</label>
         {{bs-input type="text" value=firstname}}
      {{/bs-form-group}}
    {{/bs-form}}
    ```
  
    However to benefit from features such as automatic form markup, validations and validation markup, use `Components.FormElement`
    as nested components. See below for an example.
  
    ### Submitting the form
  
    When the form is submitted (e.g. by clicking a submit button), the event will be intercepted and the default action
    will be sent to the controller.
    In case the form supports validation (see "Form validation" below), the "before" action is called (which allows you to
    do e.g. model data normalization), then the available  validation rules are evaluated, and if those fail, the "invalid"
    action is sent instead of the default "action".
  
    ### Use with Components.FormElement
  
    When using `Components.FormElement`s with their `property` set to property names of the form's validation enabled
    `model`, you gain some additional powerful features:
    * the appropriate Bootstrap markup for the given `formLayout` and the form element's `controlType` is automatically generated
    * markup for validation states and error messages is generated based on the model's validation (if available), when submitting the form
    with an invalid validation, or when focusing out of invalid inputs
  
    ```handlebars
    {{#bs-form formLayout="horizontal" model=this action="submit"}}
      {{bs-form-element controlType="email" label="Email" placeholder="Email" property="email"}}
      {{bs-form-element controlType="password" label="Password" placeholder="Password" property="password"}}
      {{bs-form-element controlType="checkbox" label="Remember me" property="rememberMe"}}
      {{bs-button defaultText="Submit" type="primary" buttonType="submit"}}
    {{/bs-form}}
    ```
  
    See the [Components.FormElement](Components.FormElement.html) API docs for further information.
  
    ### Form validation
  
    All version of ember-bootstrap beginning from 0.7.0 do not come with built-in support for validation engines anymore.
    Instead support is added usually by additional Ember addons, for example:
  
    * [ember-bootstrap-validations](https://github.com/kaliber5/ember-bootstrap-validations): adds support for [ember-validations](https://github.com/DockYard/ember-validations)
    * [ember-bootstrap-cp-validations](https://github.com/offirgolan/ember-bootstrap-cp-validations): adds support for [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations)
    * [ember-bootstrap-changeset-validations](https://github.com/kaliber5/ember-bootstrap-changeset-validations): adds support for [ember-changeset](https://github.com/poteto/ember-changeset)
  
    To add your own validation support, you have to:
  
    * extend this component, setting `hasValidator` to true if validations are available (by means of a computed property for example), and implementing the `validate` method
    * extend the [Components.FormElement](Components.FormElement.html) component and implement the `setupValidations` hook or simply override the `errors` property to add the validation error messages to be displayed
  
    When validation fails, the appropriate Bootstrap markup is added automatically, i.e. the error classes are applied and
    the validation messages are shown for each form element. In case the validation library supports it, also warning messages
    are shown. See the [Components.FormElement](Components.FormElement.html) documentation for further details.
  
    See the above mentioned addons for examples.
  
  
    @class Form
    @namespace Components
    @extends Ember.Component
    @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentParent['default'], {
    tagName: 'form',
    classNameBindings: ['layoutClass'],
    attributeBindings: ['_novalidate:novalidate'],
    ariaRole: 'form',

    /**
     * Bootstrap form class name (computed)
     *
     * @property layoutClass
     * @type string
     * @readonly
     * @protected
     *
     */
    layoutClass: computed('formLayout', function () {
      var layout = this.get('formLayout');
      return layout === 'vertical' ? 'form' : 'form-' + layout;
    }),

    /**
     * Set a model that this form should represent. This serves several purposes:
     *
     * * child `Components.FormElement`s can access and bind to this model by their `property`
     * * when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,
     * child `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.
     * Moreover the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.
     *
     * @property model
     * @type Ember.Object
     * @public
     */
    model: null,

    /**
     * Set the layout of the form to either "vertical", "horizontal" or "inline". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal
     *
     * @property formLayout
     * @type string
     * @public
     */
    formLayout: 'vertical',

    /**
     * Check if validating the model is supported. This needs to be implemented by another addon.
     *
     * @property hasValidator
     * @type boolean
     * @readonly
     * @protected
     */
    hasValidator: false,

    /**
     * The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the
     * whole form.
     *
     * @property horizontalLabelGridClass
     * @type string
     * @default 'col-md-4'
     * @public
     */
    horizontalLabelGridClass: 'col-md-4',

    /**
     * If set to true pressing enter will submit the form, even if no submit button is present
     *
     * @property submitOnEnter
     * @type boolean
     * @default false
     * @public
     */
    submitOnEnter: false,

    /**
     * If set to true novalidate attribute is present on form element
     *
     * @property novalidate
     * @type boolean
     * @default null
     * @public
     */
    novalidate: false,

    _novalidate: computed('novalidate', function () {
      return this.get('novalidate') === true ? '' : undefined;
    }),

    /**
     * An array of `Components.FormElement`s that are children of this form.
     *
     * @property childFormElements
     * @type Array
     * @readonly
     * @protected
     */
    childFormElements: computed.filter('children', function (view) {
      return view instanceof _emberBootstrapComponentsBsFormElement['default'];
    }),

    /**
     * Validate hook which will return a promise that will either resolve if the model is valid
     * or reject if it's not. This should be overridden to add validation support.
     *
     * @param Object model
     * @return {Promise}
     * @public
     */
    validate: function validate() /* model */{
      _ember['default'].deprecate('[ember-bootstrap] Validation support has been moved to 3rd party addons.\n' + 'ember-validations: https://github.com/kaliber5/ember-bootstrap-validations\n' + 'ember-cp-validations: https://github.com/offirgolan/ember-bootstrap-cp-validations\n', false, {
        id: 'ember-bootstrap.form.validate',
        url: 'http://kaliber5.github.io/ember-bootstrap/api/classes/Components.Form.html'
      });
    },

    /**
     * A handler called before the form is validated (if possible) and submitted.
     *
     * @event before
     * @param Object model  The form's `model`
     * @public
     */

    /**
     * A handler called when submit has been triggered and the model has passed all validations (if present).
     *
     * @event action
     * @param Object model  The form's `model`
     * @param Object result The returned result from the validate method, if validation is available
     * @public
     */

    /**
     * A handler called when validation of the model has failed.
     *
     * @event invalid
     * @param Object error
     * @public
     */

    /**
     * Submit handler that will send the default action ("action") to the controller when submitting the form.
     *
     * If there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and
     * only if validation is successful the default action will be sent. Otherwise an "invalid" action will be sent, and
     * all the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and
     * messages will be shown automatically.
     *
     * @method submit
     * @private
     */
    submit: function submit(e) {
      var _this = this;

      if (e) {
        e.preventDefault();
      }
      var model = this.get('model');

      this.sendAction('before', model);

      if (!this.get('hasValidator')) {
        return this.sendAction('action', model);
      } else {
        var validationPromise = this.validate(this.get('model'));
        if (validationPromise && validationPromise instanceof _ember['default'].RSVP.Promise) {
          validationPromise.then(function (r) {
            return _this.sendAction('action', model, r);
          }, function (err) {
            _this.get('childFormElements').setEach('showValidation', true);
            return _this.sendAction('invalid', err);
          });
        }
      }
    },

    keyPress: function keyPress(e) {
      var code = e.keyCode || e.which;
      if (code === 13 && this.get('submitOnEnter')) {
        this.$().submit();
      }
    }
  });
});
define('ember-bootstrap/components/bs-input', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   Extends Ember.TextField to add Bootstrap's 'form-control' class.
  
   @class Input
   @namespace Components
   @extends Ember.TextField
   @public
   */
  exports['default'] = _ember['default'].TextField.extend({
    classNames: ['form-control']
  });
});
define('ember-bootstrap/components/bs-modal-body', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
  
   Modal body element used within [Components.Modal](Components.Modal.html) components. See there for examples.
  
   @class ModalBody
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['modal-body']
  });
});
define('ember-bootstrap/components/bs-modal-dialog', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
    Internal component for modal's markup and event handling. Should not be used directly.
  
    @class ModalDialog
    @namespace Components
    @extends Ember.Component
    @private
   */
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['modal'],
    classNameBindings: ['fade', 'in'],
    attributeBindings: ['tabindex'],
    ariaRole: 'dialog',
    tabindex: '-1',

    /**
     * The title of the modal, visible in the modal header. Is ignored if `header` is false.
     *
     * @property title
     * @type string
     * @public
     */
    title: null,

    /**
     * Display a close button (x icon) in the corner of the modal header.
     *
     * @property closeButton
     * @type boolean
     * @default true
     * @public
     */
    closeButton: true,

    /**
     * Set to false to disable fade animations.
     *
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * Used to apply Bootstrap's "in" class
     *
     * @property in
     * @type boolean
     * @default false
     * @private
     */
    'in': false,

    /**
     * Closes the modal when escape key is pressed.
     *
     * @property keyboard
     * @type boolean
     * @default true
     * @public
     */
    keyboard: true,

    /**
     * Generate a modal header component automatically. Set to false to disable. In this case you would want to include an
     * instance of [Components.ModalHeader](Components.ModalHeader.html) in the components block template
     *
     * @property header
     * @type boolean
     * @default true
     * @public
     */
    header: true,

    /**
     * Generate a modal body component automatically. Set to false to disable. In this case you would want to include an
     * instance of [Components.ModalBody](Components.ModalBody.html) in the components block template.
     *
     * Always set this to false if `header` and/or `footer` is false!
     *
     * @property body
     * @type boolean
     * @default true
     * @public
     */
    body: true,

    /**
     * Generate a modal footer component automatically. Set to false to disable. In this case you would want to include an
     * instance of [Components.ModalFooter](Components.ModalFooter.html) in the components block template
     *
     * @property footer
     * @type boolean
     * @default true
     * @public
     */
    footer: true,

    /**
     * Property for size styling, set to null (default), 'lg' or 'sm'
     *
     * Also see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)
     *
     * @property size
     * @type String
     * @public
     */
    size: null,

    /**
     * If true clicking on the backdrop will close the modal.
     *
     * @property backdropClose
     * @type boolean
     * @default true
     * @public
     */
    backdropClose: true,

    /**
     * Name of the size class
     *
     * @property sizeClass
     * @type string
     * @private
     */
    sizeClass: computed('size', function () {
      var size = this.get('size');
      return _ember['default'].isBlank(size) ? null : 'modal-' + size;
    }),

    keyDown: function keyDown(e) {
      var code = e.keyCode || e.which;
      if (code === 27 && this.get('keyboard')) {
        this.sendAction('close');
      }
    },

    click: function click(e) {
      if (e.target !== e.currentTarget || !this.get('backdropClose')) {
        return;
      }
      this.sendAction('close');
    }

  });
});
define('ember-bootstrap/components/bs-modal-footer', ['exports', 'ember', 'ember-bootstrap/mixins/modal-closer'], function (exports, _ember, _emberBootstrapMixinsModalCloser) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
  
   Modal footer element used within [Components.Modal](Components.Modal.html) components. See there for examples.
  
   @class ModalFooter
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsModalCloser['default'], {
    tagName: 'form',
    classNames: ['modal-footer'],

    /**
     * The title of the default close button. Will be ignored (i.e. no close button) if you provide your own block
     * template.
     *
     * @property closeTitle
     * @type string
     * @default 'Ok'
     * @public
     */
    closeTitle: 'Ok',

    /**
     * The title of the submit button (primary button). Will be ignored (i.e. no button) if set to null or if you provide
     * your own block template.
     *
     * @property submitTitle
     * @type string
     * @default null
     * @public
     */
    submitTitle: null,

    hasSubmitButton: computed.notEmpty('submitTitle'),

    /**
     * Set to true to disable the submit button. If you bind this to some property that indicates if submitting is allowed
     * (form validation for example) this can be used to prevent the user from pressing the submit button.
     *
     * @property submitDisabled
     * @type boolean
     * @default false
     * @public
     */
    submitDisabled: false,

    /**
     * The action to send to the parent modal component when the modal footer's form is submitted
     *
     * @property submitAction
     * @type string
     * @default 'submit'
     * @private
     */
    submitAction: 'submit',

    submit: function submit(e) {
      e.preventDefault();
      // send to parent bs-modal component
      this.sendAction('submitAction');
    }

  });
});
define('ember-bootstrap/components/bs-modal-header', ['exports', 'ember', 'ember-bootstrap/mixins/modal-closer'], function (exports, _ember, _emberBootstrapMixinsModalCloser) {
  'use strict';

  /**
  
   Modal header element used within [Components.Modal](Components.Modal.html) components. See there for examples.
  
   @class ModalHeader
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsModalCloser['default'], {
    classNames: ['modal-header'],

    /**
     * Show a close button (x icon)
     *
     * @property closeButton
     * @type boolean
     * @default true
     * @public
     */
    closeButton: true,

    /**
     * The title to display in the modal header
     *
     * @property title
     * @type string
     * @default null
     * @public
     */
    title: null

  });
});
define('ember-bootstrap/components/bs-modal', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;

  var Modal = {};

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  var observeOpen = function observeOpen() {
    if (this.get('open')) {
      this.show();
    } else {
      this.hide();
    }
  };

  /**
  
   Component for creating [Bootstrap modals](http://getbootstrap.com/javascript/#modals). Creating a simple modal is easy:
  
   ```hbs
   {{#bs-modal title="Simple Dialog"}}
     Hello world!
   {{/bs-modal}}
   ```
  
   This will automatically create the appropriate markup, with a modal header containing the title, and a footer containing
   a default "Ok" button, that will close the modal automatically (unless you set `autoClose` to false).
  
   A modal created this way will be visible at once. You can use the `{{#if ...}}` helper to hide all modal elements form
   the DOM until needed. Or you can bind the `open` property to trigger showing and hiding the modal:
  
   ```hbs
   {{#bs-modal open=openModal title="Simple Dialog"}}
     Hello world!
   {{/bs-modal}}
   ```
  
   ### Custom Markup
  
   To customize your modal markup you can use the following sub components:
  
   [Components.ModalBody](Components.ModalBody.html)
   [Components.ModalHeader](Components.ModalHeader.html)
   [Components.ModalFooter](Components.ModalFooter.html)
  
   In the example above, these are generated for you automatically. Whenever you use one of these by yourself you should
   set the appropriate property (`body`, `footer`, `header`) to false to prevent their automatic generation. Note that
   in any case where you use a custom sub component, you must also use a custom [Components.ModalBody](Components.ModalBody.html)!
  
   A common use case is to customize the buttons in the footer. Most often you will have a cancel button that closes the
   model without action, and a submit button that triggers some action. The footer component supports this case by letting
   you customize the button titles, the rest (triggering close or submit actions) automatically set up:
  
   ```hbs
   {{#bs-modal body=false footer=false title="Attention" submitAction=(action "submit")}}
     {{#bs-modal-body}}Are you sure?{{/bs-modal-body}}
     {{bs-modal-footer closeTitle="Cancel" submitTitle="Ok"}}
   {{/bs-modal}}
   ```
  
   If you further want to customize your modal elements, you can supply custom templates for your footer and header, as in
   the following example:
  
   ```hbs
   {{#bs-modal body=false footer=false header=false submitAction=(action "submit")}}
     {{#bs-modal-header}}
       <h4 class="modal-title"><i class="glyphicon glyphicon-alert"></i> Alert</h4>
     {{/bs-modal-header}}
     {{#bs-modal-body}}Are you absolutely sure you want to do that???{{/bs-modal-body}}
     {{#bs-modal-footer as |footer|}}
       {{#bs-button action=(action "close" target=footer) type="danger"}}Oh no, forget it!{{/bs-button}}
       {{#bs-button buttonType="submit" type="success"}}Yeah!{{/bs-button}}
     {{/bs-modal-footer}}
   {{/bs-modal}}
   ```
  
   Note the use of the action helper of the close button that triggers the close action on the modal footer component
   instead of on the controller, which will bubble up to the modal component and close the modal.
  
   ### Modals with forms
  
   There is a special case when you have a form inside your modals body: you probably do not want to have a submit button
   within your form but instead in your modal footer. Hover pressing the submit button outside of your form would not
   trigger the form data to be submitted. In the example below this would not trigger the submit action of the form, an
   thus bypass the form validation feature of the form component.
  
   ```hbs
   {{#bs-modal title="Form Example" body=false footer=false}}
     {{#bs-modal-body}}
       {{#bs-form action=(action "submit") model=this}}
         {{bs-form-element controlType="text" label="first name" property="firstname"}}
         {{bs-form-element controlType="text" label="last name" property="lastname"}}
       {{/bs-form}}
     {{/bs-modal-body}}
     {{bs-modal-footer closeTitle=(t "contact.label.cancel") submitTitle=(t "contact.label.ok")}}
   {{/bs-modal}}
   ```
  
   The modal component supports this common case by triggering the submit event programmatically on the body's form if
   present whenever the footer's submit button is pressed, so the example above will work as expected.
  
   ### Auto-focus
  
   In order to allow key handling to function, the modal's root element is given focus once the modal is shown. If your
   modal contains an element such as a text input and you would like it to be given focus rather than the modal element,
   then give it the HTML5 autofocus attribute:
  
   ```hbs
   {{#bs-modal title="Form Example" body=false footer=false}}
     {{#bs-modal-body}}
       {{#bs-form action=(action "submit") model=this}}
         {{bs-form-element controlType="text" label="first name" property="firstname" autofocus=true}}
         {{bs-form-element controlType="text" label="last name" property="lastname"}}
       {{/bs-form}}
     {{/bs-modal-body}}
     {{bs-modal-footer closeTitle=(t "contact.label.cancel") submitTitle=(t "contact.label.ok")}}
   {{/bs-modal}}
   ```
  
  
   ### Modals inside wormhole
  
   Modals make use of the [ember-wormhole](https://github.com/yapplabs/ember-wormhole) addon, which will be installed
   automatically alongside ember-bootstrap. This is used to allow the modal to be placed in deeply nested
   components/templates where it belongs to logically, but to have the actual DOM elements within a special container
   element, which is a child of ember's root element. This will make sure that modals always overlay the whole app, and
   are not effected by parent elements with `overflow: hidden` for example.
  
   If you want the modal to render in place, rather than being wormholed, you can set renderInPlace=true.
  
   @class Modal
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend({

    /**
     * Visibility of the modal. Toggle to to show/hide with CSS transitions.
     *
     * @property open
     * @type boolean
     * @default true
     * @public
     */
    open: true,

    /**
     * The title of the modal, visible in the modal header. Is ignored if `header` is false.
     *
     * @property title
     * @type string
     * @public
     */
    title: null,

    /**
     * Display a close button (x icon) in the corner of the modal header.
     *
     * @property closeButton
     * @type boolean
     * @default true
     * @public
     */
    closeButton: true,

    /**
     * Set to false to disable fade animations.
     *
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * @property notFade
     * @type boolean
     * @private
     */
    notFade: computed.not('fade'),

    /**
     * Used to apply Bootstrap's "in" class
     *
     * @property in
     * @type boolean
     * @default false
     * @private
     */
    'in': computed.and('open', 'notFade'),

    /**
     * Use a semi-transparent modal background to hide the rest of the page.
     *
     * @property backdrop
     * @type boolean
     * @default true
     * @public
     */
    backdrop: true,

    /**
     * @property showBackdrop
     * @type boolean
     * @default false
     * @private
     */
    showBackdrop: computed.and('open', 'backdrop'),

    /**
     * Closes the modal when escape key is pressed.
     *
     * @property keyboard
     * @type boolean
     * @default true
     * @public
     */
    keyboard: true,

    /**
     * If true clicking a close button will hide the modal automatically.
     * If you want to handle hiding the modal by yourself, you can set this to false and use the closeAction to
     * implement your custom logic.
     *
     * @property autoClose
     * @type boolean
     * @default true
     * @public
     */
    autoClose: true,

    /**
     * Generate a modal header component automatically. Set to false to disable. In this case you would want to include an
     * instance of [Components.ModalHeader](Components.ModalHeader.html) in the components block template
     *
     * @property header
     * @type boolean
     * @default true
     * @public
     */
    header: true,

    /**
     * Generate a modal body component automatically. Set to false to disable. In this case you would want to include an
     * instance of [Components.ModalBody](Components.ModalBody.html) in the components block template.
     *
     * Always set this to false if `header` and/or `footer` is false!
     *
     * @property body
     * @type boolean
     * @default true
     * @public
     */
    body: true,

    /**
     * Generate a modal footer component automatically. Set to false to disable. In this case you would want to include an
     * instance of [Components.ModalFooter](Components.ModalFooter.html) in the components block template
     *
     * @property footer
     * @type boolean
     * @default true
     * @public
     */
    footer: true,

    /**
     * The id of the `.modal` element.
     *
     * @property modalId
     * @type string
     * @readonly
     * @private
     */
    modalId: computed('elementId', function () {
      return this.get('elementId') + '-modal';
    }),

    /**
     * The jQuery object of the `.modal` element.
     *
     * @property modalElement
     * @type object
     * @readonly
     * @private
     */
    modalElement: computed('modalId', function () {
      return _ember['default'].$('#' + this.get('modalId'));
    }).volatile(),

    /**
     * The id of the backdrop element.
     *
     * @property backdropId
     * @type string
     * @readonly
     * @private
     */
    backdropId: computed('elementId', function () {
      return this.get('elementId') + '-backdrop';
    }),

    /**
     * The jQuery object of the backdrop element.
     *
     * @property backdropElement
     * @type object
     * @readonly
     * @private
     */
    backdropElement: computed('backdropId', function () {
      return _ember['default'].$('#' + this.get('backdropId'));
    }).volatile(),

    /**
     * Use CSS transitions when showing/hiding the modal?
     *
     * @property usesTransition
     * @type boolean
     * @readonly
     * @private
     */
    usesTransition: computed('fade', function () {
      return _ember['default'].$.support.transition && this.get('fade');
    }),

    /**
     * Property for size styling, set to null (default), 'lg' or 'sm'
     *
     * Also see the [Bootstrap docs](http://getbootstrap.com/javascript/#modals-sizes)
     *
     * @property size
     * @type String
     * @public
     */
    size: null,

    /**
     * If true clicking on the backdrop will close the modal.
     *
     * @property backdropClose
     * @type boolean
     * @default true
     * @public
     */
    backdropClose: true,

    /**
     * If true component will render in place, rather than be wormholed.
     *
     * @property renderInPlace
     * @type boolean
     * @default false
     * @public
     */
    renderInPlace: false,

    /**
     * @property _renderInPlace
     * @type boolean
     * @private
     */
    _renderInPlace: computed('renderInPlace', function () {
      return this.get('renderInPlace') || typeof _ember['default'].$ !== 'function' || _ember['default'].$('#ember-bootstrap-modal-container').length === 0;
    }),

    /**
     * The action to be sent when the modal footer's submit button (if present) is pressed.
     * Note that if your modal body contains a form (e.g. [Components.Form](Components.Form.html){{/crossLink}}) this action will
     * not be triggered. Instead a submit event will be triggered on the form itself. See the class description for an
     * example.
     *
     * @property submitAction
     * @type string
     * @default null
     * @public
     */
    submitAction: null,

    /**
     * The action to be sent when the modal is closing.
     * This will be triggered by pressing the modal header's close button (x button) or the modal footer's close button.
     * Note that this will happen before the modal is hidden from the DOM, as the fade transitions will still need some
     * time to finish. Use the `closedAction` if you need the modal to be hidden when the action triggers.
     *
     * You can set `autoClose` to false to prevent closing the modal automatically, and do that in your closeAction by
     * setting `open` to false.
     *
     * @property closeAction
     * @type string
     * @default null
     * @public
     */
    closeAction: null,

    /**
     * The action to be sent after the modal has been completely hidden (including the CSS transition).
     *
     * @property closedAction
     * @type string
     * @default null
     * @public
     */
    closedAction: null,

    /**
     * The action to be sent when the modal is opening.
     * This will be triggered immediately after the modal is shown (so it's safe to access the DOM for
     * size calculations and the like). This means that if fade=true, it will be shown in between the
     * backdrop animation and the fade animation.
     *
     * @property openAction
     * @type string
     * @default null
     * @public
     */
    openAction: null,

    /**
     * The action to be sent after the modal has been completely shown (including the CSS transition).
     *
     * @property openedAction
     * @type string
     * @default null
     * @public
     */
    openedAction: null,

    actions: {
      close: function close() {
        if (this.get('autoClose')) {
          this.set('open', false);
        }
        this.sendAction('closeAction');
      },
      submit: function submit() {
        var form = this.get('modalElement').find('.modal-body form');
        if (form.length > 0) {
          // trigger submit event on body form
          form.trigger('submit');
        } else {
          // if we have no form, we send a submit action
          this.sendAction('submitAction');
        }
      }
    },

    _observeOpen: observer('open', observeOpen),

    /**
     * Give the modal (or its autofocus element) focus
     *
     * @method takeFocus
     * @private
     */
    takeFocus: function takeFocus() {
      var focusElement = this.get('modalElement').find('[autofocus]').first();
      if (focusElement.length === 0) {
        focusElement = this.get('modalElement');
      }
      if (focusElement.length > 0) {
        focusElement.focus();
      }
    },

    /**
     * Show the modal
     *
     * @method show
     * @private
     */
    show: function show() {

      this.checkScrollbar();
      this.setScrollbar();

      _ember['default'].$('body').addClass('modal-open');

      this.resize();

      var callback = function callback() {
        if (this.get('isDestroyed')) {
          return;
        }

        this.get('modalElement').show().scrollTop(0);

        this.handleUpdate();
        this.set('in', true);
        this.sendAction('openAction');

        if (this.get('usesTransition')) {
          this.get('modalElement').one('bsTransitionEnd', _ember['default'].run.bind(this, function () {
            this.takeFocus();
            this.sendAction('openedAction');
          })).emulateTransitionEnd(Modal.TRANSITION_DURATION);
        } else {
          this.takeFocus();
          this.sendAction('openedAction');
        }
      };
      this.handleBackdrop(callback);
    },

    /**
     * Hide the modal
     *
     * @method hide
     * @private
     */
    hide: function hide() {
      this.resize();
      this.set('in', false);

      if (this.get('usesTransition')) {
        this.get('modalElement').one('bsTransitionEnd', _ember['default'].run.bind(this, this.hideModal)).emulateTransitionEnd(Modal.TRANSITION_DURATION);
      } else {
        this.hideModal();
      }
    },

    /**
     * Clean up after modal is hidden and call closedAction
     *
     * @method hideModal
     * @private
     */
    hideModal: function hideModal() {
      var _this = this;

      if (this.get('isDestroyed')) {
        return;
      }

      this.get('modalElement').hide();
      this.handleBackdrop(function () {
        _ember['default'].$('body').removeClass('modal-open');
        _this.resetAdjustments();
        _this.resetScrollbar();
        _this.sendAction('closedAction');
      });
    },

    /**
     * SHow/hide the backdrop
     *
     * @method handleBackdrop
     * @param callback
     * @private
     */
    handleBackdrop: function handleBackdrop(callback) {
      var doAnimate = this.get('usesTransition');

      if (this.get('open') && this.get('backdrop')) {
        this.set('showBackdrop', true);

        if (!callback) {
          return;
        }

        if (doAnimate) {
          _ember['default'].run.schedule('afterRender', this, function () {
            var $backdrop = this.get('backdropElement');
            _ember['default'].assert('Backdrop element should be in DOM', $backdrop && $backdrop.length > 0);
            $backdrop.one('bsTransitionEnd', _ember['default'].run.bind(this, callback)).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);
          });
        } else {
          callback.call(this);
        }
      } else if (!this.get('open') && this.get('backdrop')) {
        var $backdrop = this.get('backdropElement');
        _ember['default'].assert('Backdrop element should be in DOM', $backdrop && $backdrop.length > 0);

        var callbackRemove = function callbackRemove() {
          this.set('showBackdrop', false);
          if (callback) {
            callback.call(this);
          }
        };
        if (doAnimate) {
          $backdrop.one('bsTransitionEnd', _ember['default'].run.bind(this, callbackRemove)).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);
        } else {
          callbackRemove.call(this);
        }
      } else if (callback) {
        _ember['default'].run.next(this, callback);
      }
    },

    /**
     * Attach/Detach resize event listeners
     *
     * @method resize
     * @private
     */
    resize: function resize() {
      if (this.get('open')) {
        _ember['default'].$(window).on('resize.bs.modal', _ember['default'].run.bind(this, this.handleUpdate));
      } else {
        _ember['default'].$(window).off('resize.bs.modal');
      }
    },

    /**
     * @method handleUpdate
     * @private
     */
    handleUpdate: function handleUpdate() {
      this.adjustDialog();
    },

    /**
     * @method adjustDialog
     * @private
     */
    adjustDialog: function adjustDialog() {
      var modalIsOverflowing = this.get('modalElement')[0].scrollHeight > document.documentElement.clientHeight;
      this.get('modalElement').css({
        paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.get('scrollbarWidth') : '',
        paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.get('scrollbarWidth') : ''
      });
    },

    /**
     * @method resetAdjustments
     * @private
     */
    resetAdjustments: function resetAdjustments() {
      this.get('modalElement').css({
        paddingLeft: '',
        paddingRight: ''
      });
    },

    /**
     * @method checkScrollbar
     * @private
     */
    checkScrollbar: function checkScrollbar() {
      var fullWindowWidth = window.innerWidth;
      if (!fullWindowWidth) {
        // workaround for missing window.innerWidth in IE8
        var documentElementRect = document.documentElement.getBoundingClientRect();
        fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
      }

      this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    },

    /**
     * @method setScrollbar
     * @private
     */
    setScrollbar: function setScrollbar() {
      var bodyPad = parseInt(_ember['default'].$('body').css('padding-right') || 0, 10);
      this.originalBodyPad = document.body.style.paddingRight || '';
      if (this.bodyIsOverflowing) {
        _ember['default'].$('body').css('padding-right', bodyPad + this.get('scrollbarWidth'));
      }
    },

    /**
     * @method resetScrollbar
     * @private
     */
    resetScrollbar: function resetScrollbar() {
      _ember['default'].$('body').css('padding-right', this.originalBodyPad);
    },

    /**
     * @property scrollbarWidth
     * @type number
     * @readonly
     * @private
     */
    scrollbarWidth: computed(function () {
      var scrollDiv = document.createElement('div');
      scrollDiv.className = 'modal-scrollbar-measure';
      this.get('modalElement').after(scrollDiv);
      var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      _ember['default'].$(scrollDiv).remove();
      return scrollbarWidth;
    }),

    didInsertElement: function didInsertElement() {
      if (this.get('open')) {
        this.show();
      }
    },

    willDestroyElement: function willDestroyElement() {
      _ember['default'].$(window).off('resize.bs.modal');
      _ember['default'].$('body').removeClass('modal-open');
      this.resetScrollbar();
    }

  });
});
define('ember-bootstrap/components/bs-nav-item', ['exports', 'ember', 'ember-bootstrap/templates/components/bs-nav-item', 'ember-bootstrap/mixins/component-parent'], function (exports, _ember, _emberBootstrapTemplatesComponentsBsNavItem, _emberBootstrapMixinsComponentParent) {
  'use strict';

  var computed = _ember['default'].computed;
  var LinkComponent = _ember['default'].LinkComponent;

  /**
  
   Component for each item within a [Components.Nav](Components.Nav.html) component. Have a look there for examples.
  
   @class NavItem
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentParent
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentParent['default'], {
    layout: _emberBootstrapTemplatesComponentsBsNavItem['default'],
    classNameBindings: ['disabled', 'active'],
    tagName: 'li',
    ariaRole: 'presentation',

    /**
     * Render the nav item as disabled (see [Bootstrap docs](http://getbootstrap.com/components/#nav-disabled-links)).
     * By default it will look at any nested `link-to` components and make itself disabled if there is a disabled link.
     * See the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_disabling-the-code-link-to-code-component)
     *
     * @property disabled
     * @type boolean
     * @public
     */
    disabled: computed.gt('disabledChildLinks.length', 0),

    /**
     * Render the nav item as active.
     * By default it will look at any nested `link-to` components and make itself active if there is an active link
     * (i.e. the link points to the current route).
     * See the [link-to API](http://emberjs.com/api/classes/Ember.Templates.helpers.html#toc_handling-current-route)
     *
     * @property active
     * @type boolean
     * @public
     */
    active: computed.gt('activeChildLinks.length', 0),

    /**
     * Collection of all `Ember.LinkComponent`s that are children
     *
     * @property childLinks
     * @private
     */
    childLinks: computed.filter('children', function (view) {
      return view instanceof LinkComponent;
    }),

    activeChildLinks: computed.filterBy('childLinks', 'active'),
    disabledChildLinks: computed.filterBy('childLinks', 'disabled')
  });
});
define('ember-bootstrap/components/bs-nav', ['exports', 'ember', 'ember-bootstrap/templates/components/bs-nav'], function (exports, _ember, _emberBootstrapTemplatesComponentsBsNav) {
  'use strict';

  var isPresent = _ember['default'].isPresent;

  /**
  
   Component to generate [bootstrap navs](http://getbootstrap.com/components/#nav)
  
   ### Usage
  
   Use in combination with the [Components.NavItem](Components.NavItem.html) component:
  
   ```hbs
   {{#bs-nav type="pills"}}
     {{#bs-nav-item}}
        {{#link-to "foo"}}Foo{{/link-to}}
     {{/bs-nav-item}}
     {{#bs-nav-item}}
       {{#link-to "bar"}}Bar{{/link-to}}
     {{/bs-nav-item}}
   {{/bs-nav}}
   ```
  
   ### Nav styles
  
   The component supports the default bootstrap nav styling options "pills" and "tabs" through the `type`
   property, as well as the `justified` and `stacked` properties.
  
   ### Active items
  
   Bootstrap expects to have the `active` class on the `<li>` element that should be the active (highlighted)
   navigation item. To achieve that just use the `link-to` helper as usual. If the link is active, i.e
   it points to the current route, the `bs-nav-item` component will detect that and apply the `active` class
   automatically. The same applies for the `disabled` state.
  
   ### Dropdowns
  
   Use the [Components.Dropdown](Components.Dropdown.html) component with a `tagName` of "li" to integrate a dropdown into your nav:
  
   ```hbs
   {{#bs-nav type="pills"}}
     {{#bs-nav-item}}{{#link-to "index"}}Home{{/link-to}}{{/bs-nav-item}}
     {{#bs-dropdown tagName="li"}}
       {{#bs-dropdown-toggle}}Dropdown <span class="caret"></span>{{/bs-dropdown-toggle}}
       {{#bs-dropdown-menu}}
         <li>{{#link-to "foo"}}Foo{{/link-to}}</li>
         <li>{{#link-to "bar"}}Bar{{/link-to}}</li>
       {{/bs-dropdown-menu}}
     {{/bs-dropdown}}
   {{/bs-nav}}
   ```
  
   @class Nav
   @namespace Components
   @extends Ember.Component
   @public
  
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberBootstrapTemplatesComponentsBsNav['default'],

    tagName: 'ul',
    classNames: ['nav'],

    classNameBindings: ['typeClass', 'justified:nav-justified', 'stacked:nav-stacked'],

    typeClass: _ember['default'].computed('type', function () {
      var type = this.get('type');
      if (isPresent(type)) {
        return 'nav-' + type;
      }
    }),

    /**
     * Special type of nav, either "pills" or "tabs"
     *
     * @property type
     * @type String
     * @default null
     * @public
     */
    type: null,

    /**
     * Make the nav justified, see [bootstrap docs](http://getbootstrap.com/components/#nav-justified)
     *
     * @property justified
     * @type boolean
     * @default false
     * @public
     */
    justified: false,

    /**
     * Make the nav pills stacked, see [bootstrap docs](http://getbootstrap.com/components/#nav-pills)
     *
     * @property stacked
     * @type boolean
     * @default false
     * @public
     */
    stacked: false
  });
});
define('ember-bootstrap/components/bs-navbar-content', ['exports', 'ember', 'ember-bootstrap/components/bs-collapse', 'ember-bootstrap/components/bs-navbar', 'ember-bootstrap/templates/components/bs-navbar-content'], function (exports, _ember, _emberBootstrapComponentsBsCollapse, _emberBootstrapComponentsBsNavbar, _emberBootstrapTemplatesComponentsBsNavbarContent) {
  'use strict';

  /**
   * Component to wrap the collapsible content of a [Components.Navbar](Components.Navbar.html) component.
   * Have a look there for examples.
   *
   * @class NavbarContent
   * @namespace Components
   * @extends Components.Collapse
   * @public
   */
  exports['default'] = _emberBootstrapComponentsBsCollapse['default'].extend({
    layout: _emberBootstrapTemplatesComponentsBsNavbarContent['default'],

    classNames: ['navbar-collapse'],

    navbar: _ember['default'].computed(function () {
      return this.nearestOfType(_emberBootstrapComponentsBsNavbar['default']);
    }),

    collapsed: _ember['default'].computed.reads('navbar.collapsed')
  });
});
define('ember-bootstrap/components/bs-navbar-nav', ['exports', 'ember-bootstrap/components/bs-nav', 'ember-bootstrap/templates/components/bs-navbar-nav'], function (exports, _emberBootstrapComponentsBsNav, _emberBootstrapTemplatesComponentsBsNavbarNav) {
  'use strict';

  /**
   * Component for the `.nav` element within a [Components.Navbar](Components.Navbar.html)
   * component. Have a look there for examples.
   *
   * Per [the bootstrap docs](http://getbootstrap.com/components/#navbar),
   * justified navbar nav links are not supported.
   *
   * @class NavbarNav
   * @namespace Components
   * @extends Components.Nav
   * @public
   */
  exports['default'] = _emberBootstrapComponentsBsNav['default'].extend({
    layout: _emberBootstrapTemplatesComponentsBsNavbarNav['default'],

    classNames: ['navbar-nav'],

    didReceiveAttrs: function didReceiveAttrs() {
      this._super.apply(this, arguments);
      this.set('justified', false);
    }
  });
});
define('ember-bootstrap/components/bs-navbar-toggle', ['exports', 'ember', 'ember-bootstrap/components/bs-button', 'ember-bootstrap/components/bs-navbar', 'ember-bootstrap/templates/components/bs-navbar-toggle'], function (exports, _ember, _emberBootstrapComponentsBsButton, _emberBootstrapComponentsBsNavbar, _emberBootstrapTemplatesComponentsBsNavbarToggle) {
  'use strict';

  /**
   * Component to implement the responsive menu toggle behavior in a [Components.Navbar](Components.Navbar.html)
   * component. Have a look there for examples.
   *
   * The button `toggle` property will always be set to `true` in this component.
   *
   * @class NavbarToggle
   * @namespace Components
   * @extends Components.Button
   * @public
   */
  exports['default'] = _emberBootstrapComponentsBsButton['default'].extend({
    layout: _emberBootstrapTemplatesComponentsBsNavbarToggle['default'],

    classNames: ['navbar-toggle', 'collapsed'],

    targetObject: _ember['default'].computed(function () {
      return this.nearestOfType(_emberBootstrapComponentsBsNavbar['default']);
    }).volatile(),

    action: 'toggleNavbar',

    actions: {
      toggleNavbar: function toggleNavbar() {
        this.sendAction();
      }
    },

    didReceiveAttrs: function didReceiveAttrs() {
      this._super.apply(this, arguments);
      this.set('toggle', true);
    }
  });
});
define('ember-bootstrap/components/bs-navbar', ['exports', 'ember', 'ember-bootstrap/mixins/type-class', 'ember-bootstrap/templates/components/bs-navbar'], function (exports, _ember, _emberBootstrapMixinsTypeClass, _emberBootstrapTemplatesComponentsBsNavbar) {
  'use strict';

  /**
   Component to generate [bootstrap navbars](http://getbootstrap.com/components/#navbar).
  
   ### Usage
  
   Used in combination with the following components:
  
   - [Components.NavbarContent](Components.NavbarContent.html)
   - [Components.NavbarToggle](Components.NavbarToggle.html)
   - [Components.NavbarNav](Components.NavbarNav.html)
   - [Components.NavItem](Components.NavItem.html)
  
   ```hbs
   {{#bs-navbar}}
     <div class="navbar-header">
       {{#bs-navbar-toggle}}
         <span class="sr-only">Toggle navigation</span>
         <span class="icon-bar"></span>
         <span class="icon-bar"></span>
         <span class="icon-bar"></span>
       {{/bs-navbar-toggle}}
       <a class="navbar-brand" href="#">Brand</a>
     </div>
     {{#bs-navbar-content}}
       {{#bs-navbar-nav}}
         {{#bs-nav-item}}{{#link-to "alert"}}Alert{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "button"}}Buttons{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "dropdown"}}Dropdown{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "forms"}}Forms{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "accordion"}}Accordion{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "collapse"}}Collapse{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "modal"}}Modals{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "progress"}}Progress bars{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "navs"}}Navs{{/link-to}}{{/bs-nav-item}}
         {{#bs-nav-item}}{{#link-to "navbars"}}Navbars{{/link-to}}{{/bs-nav-item}}
       {{/bs-navbar-nav}}
     {{/bs-navbar-content}}
   {{/bs-navbar}}
   ```
  
   ### Navbar styles
  
   The component supports the default bootstrap navbar styling options "default" and "inverse" through the `type`
   property. Bootstrap navbars [do not currently support justified nav links](http://getbootstrap.com/components/#navbar-default),
   so those are explicitly disallowed.
  
   Other bootstrap navbar variations, such as forms, buttons, etc. can be supported through direct use of
   bootstrap styles applied through the `class` attribute on the components.
  
   @class Navbar
   @namespace Components
   @extends Ember.Component
   @uses Mixins.TypeClass
   @public
  
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsTypeClass['default'], {
    layout: _emberBootstrapTemplatesComponentsBsNavbar['default'],

    tagName: 'nav',
    classNames: ['navbar'],
    classNameBindings: ['positionClass'],

    classTypePrefix: 'navbar',

    /**
     * Manages the state for the responsive menu between the toggle and the content.
     *
     * @property collapsed
     * @type boolean
     * @default true
     * @protected
     */
    collapsed: true,

    /**
     * Controls whether the wrapping div is a fluid container or not.
     *
     * @property fluid
     * @type boolean
     * @default true
     * @public
     */
    fluid: true,

    /**
     * Specifies the position classes for the navbar, currently supporting none, "fixed-top", "fixed-bottom", and "static-top".
     * See the [bootstrap docs](http://getbootstrap.com/components/#navbar-fixed-top) for details.
     *
     * @property position
     * @type String
     * @default null
     * @public
     */
    position: null,

    positionClass: _ember['default'].computed('position', function () {
      var position = this.get('position');
      var validPositions = ['fixed-top', 'fixed-bottom', 'static-top'];

      if (validPositions.indexOf(position) === -1) {
        return null;
      }

      return 'navbar-' + position;
    }),

    actions: {
      toggleNavbar: function toggleNavbar() {
        this.toggleProperty('collapsed');
      }
    }
  });
});
define('ember-bootstrap/components/bs-popover-element', ['exports', 'ember', 'ember-bootstrap/templates/components/bs-popover-element'], function (exports, _ember, _emberBootstrapTemplatesComponentsBsPopoverElement) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   Internal component for popover's markup. Should not be used directly.
  
   @class PopoverElement
   @namespace Components
   @extends Ember.Component
   @private
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberBootstrapTemplatesComponentsBsPopoverElement['default'],

    classNames: ['popover'],
    classNameBindings: ['placement', 'in', 'fade'],
    ariaRole: 'tooltip',

    /**
     * @property placement
     * @type string
     * @default 'top'
     * @public
     */
    placement: 'top',

    /**
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * @property in
     * @type boolean
     * @default false
     * @public
     */
    'in': false,

    /**
     * @property title
     * @type string
     * @public
     */
    title: undefined,

    /**
     * @property hasTitle
     * @type boolean
     * @private
     */
    hasTitle: computed.notEmpty('title')
  });
});
define('ember-bootstrap/components/bs-popover', ['exports', 'ember', 'ember-bootstrap/components/bs-contextual-help', 'ember-bootstrap/templates/components/bs-popover'], function (exports, _ember, _emberBootstrapComponentsBsContextualHelp, _emberBootstrapTemplatesComponentsBsPopover) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   Component that implements Bootstrap [popovers](http://getbootstrap.com/javascript/#popovers).
  
   By default it will attach its listeners (click) to the parent DOM element to trigger
   the popover:
  
   ```hbs
   <button class="btn">
     {{#bs-popover title="This is a title"}}and this the body{{/bs-popover}}
   </button>
   ```
  
   ### Trigger
  
   The trigger element is the DOM element that will cause the popover to be shown when one of the trigger events occur on
   that element. By default the trigger element is the parent DOM element of the component, and the trigger event will be
   "click".
  
   The `triggerElement` property accepts any jQuery selector to attach the popover to any other existing DOM element.
   With the special value "parentView" you can attach the popover to the DOM element of the parent component:
  
   ```hbs
   {{#my-component}}
     {{#bs-popover triggerElement="parentView"}}This is a popover{{/bs-popover}}
   {{/my-component}}
   ```
  
   To customize the events that will trigger the popover use the `triggerEvents` property, that accepts an array or a
   string of events, with "hover", "focus" and "click" being supported.
  
   ### Placement options
  
   By default the popover will show up to the right of the trigger element. Use the `placement` property to change that
   ("top", "bottom", "left" and "right"). To make sure the popover will not exceed the viewport (see Advanced customization)
   you can set `autoPlacement` to true. A popover with `placement="right" will be placed to the right if there is enough
   space, otherwise to the left.
  
   ### Advanced customization
  
   Several other properties allow for some advanced customization:
   * `visible` to show/hide the popover programmatically
   * `fade` to disable the fade in transition
   * `delay` (or `delayShow` and `delayHide`) to add a delay
   * `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`
  
   See the individual API docs for each property.
  
   ### Actions
  
   When you want to react on the popover being shown or hidden, you can use one of the following supported actions:
   * `onShow`
   * `onShown`
   * `onHide`
   * `onHidden`
  
   @class Popover
   @namespace Components
   @extends Components.ContextualHelp
   @public
   */
  exports['default'] = _emberBootstrapComponentsBsContextualHelp['default'].extend({
    layout: _emberBootstrapTemplatesComponentsBsPopover['default'],

    /**
     * @property placement
     * @type string
     * @default 'right'
     * @public
     */
    placement: 'right',

    /**
     * @property triggerEvents
     * @type array|string
     * @default 'click'
     * @public
     */
    triggerEvents: 'click',

    /**
     * The jQuery object of the arrow element.
     *
     * @property arrowElement
     * @type object
     * @readonly
     * @private
     */
    arrowElement: computed('overlayElement', function () {
      return this.get('overlayElement').find('.arrow');
    })
  });
});
define('ember-bootstrap/components/bs-progress-bar', ['exports', 'ember', 'ember-bootstrap/mixins/type-class'], function (exports, _ember, _emberBootstrapMixinsTypeClass) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
  
   Component to display a Bootstrap progress bar, see http://getbootstrap.com/components/#progress.
  
   ### Usage
  
   Always wrap the progress bar in a [Components.Progress](Components.Progress.html) component. Use the `value`
   property to control the progress bar's width. To apply the different styling options supplied by Bootstrap, use the
   appropriate properties like `type`, `showLabel`, `striped` or `animate`.
  
   ```hbs
   {{#bs-progress}}
     {{bs-progress-bar value=progressValue minValue=0 maxValue=10 showLabel=true type="danger"}}
   {{/bs-progress}}
   ```
  
   ### Stacked
  
   You can place multiple progress bar components in a single [Components.Progress](Components.Progress.html) to
   create a stack of progress bars as seen in http://getbootstrap.com/components/#progress-stacked.
  
   ```hbs
   {{#bs-progress}}
     {{bs-progress-bar value=progressValue1 type="success"}}
     {{bs-progress-bar value=progressValue2 type="warning"}}
     {{bs-progress-bar value=progressValue3 type="danger"}}
   {{/bs-progress}}
   ```
  
   @class ProgressBar
   @namespace Components
   @extends Ember.Component
   @uses Mixins.TypeClass
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsTypeClass['default'], {
    classNames: ['progress-bar'],
    classNameBindings: ['progressBarStriped', 'active'],

    attributeBindings: ['style', 'ariaValuenow', 'ariaValuemin', 'ariaValuemax'],

    /**
     * @property classTypePrefix
     * @type String
     * @default 'progress-bar'
     * @protected
     */
    classTypePrefix: 'progress-bar',

    /**
     * The lower limit of the value range
     *
     * @property minValue
     * @type number
     * @default 0
     * @public
     */
    minValue: 0,

    /**
     * The upper limit of the value range
     *
     * @property maxValue
     * @type number
     * @default 100
     * @public
     */
    maxValue: 100,

    /**
     * The value the progress bar should represent
     *
     * @property value
     * @type number
     * @default 0
     * @public
     */
    value: 0,

    /**
     If true a label will be shown inside the progress bar.
      By default it will be the percentage corresponding to the `value` property, rounded to `roundDigits` digits.
     You can customize it by using the component with a block template, which the component yields the percentage
     value to:
      ```hbs
     {{#bs-progress}}
       {{#bs-progress-bar value=progressValue as |percent|}}{{progressValue}} ({{percent}}%){{/bs-progress-bar}}
     {{/bs-progress}}
     ```
      @property showLabel
     @type boolean
     @default false
     @public
     */
    showLabel: false,

    /**
     * Create a striped effect, see http://getbootstrap.com/components/#progress-striped
     *
     * @property striped
     * @type boolean
     * @default false
     * @public
     */
    striped: false,

    /**
     * Animate the stripes, see http://getbootstrap.com/components/#progress-animated
     *
     * @property animate
     * @type boolean
     * @default false
     * @public
     */
    animate: false,

    /**
     * Specify to how many digits the progress bar label should be rounded.
     *
     * @property roundDigits
     * @type number
     * @default 0
     * @public
     */
    roundDigits: 0,

    progressBarStriped: computed.alias('striped'),
    active: computed.alias('animate'),

    ariaValuenow: computed.alias('value'),
    ariaValuemin: computed.alias('minValue'),
    ariaValuemax: computed.alias('maxValue'),

    /**
     * The percentage of `value`
     *
     * @property percent
     * @type number
     * @protected
     * @readonly
     */
    percent: computed('value', 'minValue', 'maxValue', function () {
      var value = parseFloat(this.get('value'));
      var minValue = parseFloat(this.get('minValue'));
      var maxValue = parseFloat(this.get('maxValue'));

      return Math.min(Math.max((value - minValue) / (maxValue - minValue), 0), 1) * 100;
    }),

    /**
     * The percentage of `value`, rounded to `roundDigits` digits
     *
     * @property percentRounded
     * @type number
     * @protected
     * @readonly
     */
    percentRounded: computed('percent', 'roundDigits', function () {
      var roundFactor = Math.pow(10, this.get('roundDigits'));
      return Math.round(this.get('percent') * roundFactor) / roundFactor;
    }),

    /**
     * @property style
     * @type string
     * @private
     * @readonly
     */
    style: computed('percent', function () {
      var percent = this.get('percent');
      return new _ember['default'].String.htmlSafe('width: ' + percent + '%');
    })

  });
});
define('ember-bootstrap/components/bs-progress', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   Use to group one (or more) [Components.ProgressBar](Components.ProgressBar.html) components inside it.
  
   @class Progress
   @namespace Components
   @extends Ember.Component
   @public
   */
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['progress']
  });
});
define('ember-bootstrap/components/bs-select', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   Selectbox component.
  
   #### Deprecated ####
  
   Usage of this component is deprecated. Please use one of the better alternatives for select boxes in Ember, as one of
   those: https://www.emberaddons.com/?query=select%20component.
  
   If you use it with a FormElement component as in `{{bs-form-element controlType="select" ... }}`, then see the section
   on custom Controls in [Components.FormElement](Components.FormElement.html) to learn how to replace this with an external
   select component.
  
   @class Select
   @namespace Components
   @extends Ember.Component
   @deprecated
   @public
   */
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'select',
    classNames: ['form-control'],

    attributeBindings: ['disabled', 'required'],
    disabled: false,
    required: false,

    content: null,
    prompt: null,
    optionValuePath: 'id',
    optionLabelPath: 'title',
    action: _ember['default'].K, // action to fire on change

    value: null,

    init: function init() {
      this._super.apply(this, arguments);

      _ember['default'].deprecate('bs-select is deprecated and will be removed in the future. Please use a dedicated addon for select box components', false, {
        url: 'http://kaliber5.github.io/ember-bootstrap/api/classes/Components.Select.html',
        until: '0.8.0',
        id: 'ember-bootstrap.component.select'
      });

      if (!this.get('content')) {
        this.set('content', []);
      }
    },

    change: function change() {
      var selectEl = this.$().get(0);
      var selectedIndex = selectEl.selectedIndex;

      var content = this.get('content');

      // decrement index by 1 if we have a prompt
      var hasPrompt = !!this.get('prompt');
      var contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;

      var selection = content[contentIndex];

      // set the local, shadowed selection to avoid leaking
      // changes to `selection` out via 2-way binding
      this.set('value', selection);

      var changeCallback = this.get('action');
      changeCallback(selection);
    }
  });
});
define('ember-bootstrap/components/bs-tab-pane', ['exports', 'ember', 'ember-bootstrap/templates/components/bs-tab-pane', 'ember-bootstrap/mixins/component-child', 'ember-bootstrap/components/bs-tab'], function (exports, _ember, _emberBootstrapTemplatesComponentsBsTabPane, _emberBootstrapMixinsComponentChild, _emberBootstrapComponentsBsTab) {
  'use strict';

  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;

  /**
   The tab pane of a tab component.
   See [Components.Tab](Components.Tab.html) for examples.
  
   @class TabPane
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentChild
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentChild['default'], {
    layout: _emberBootstrapTemplatesComponentsBsTabPane['default'],
    classNameBindings: ['active', 'fade', 'in'],
    classNames: ['tab-pane'],
    ariaRole: 'tabpanel',

    /**
     * True if this pane is active (visible)
     *
     * @property isActive
     * @type boolean
     * @protected
     */
    isActive: computed('tab.activeId', 'elementId', function () {
      return this.get('tab.activeId') === this.get('elementId');
    }),

    /**
     * Used to apply Bootstrap's "active" class
     *
     * @property active
     * @type boolean
     * @default false
     * @protected
     */
    active: false,

    /**
     * Used to apply Bootstrap's "in" class
     *
     * @property in
     * @type boolean
     * @default false
     * @protected
     */
    'in': false,

    /**
     * Use CSS transitions when showing/hiding the pane?
     *
     * @property usesTransition
     * @type boolean
     * @readonly
     * @protected
     */
    usesTransition: computed('fade', function () {
      return _ember['default'].$.support.transition && this.get('fade');
    }),

    /**
     * The parent [Components.Tab](Components.Tab.html) instance.
     *
     * @property tab
     * @type {Components.Tab}
     * @protected
     */
    tab: computed(function () {
      return this.nearestOfType(_emberBootstrapComponentsBsTab['default']);
    }),

    /**
     * The title for this tab pane. This is used by the `bs-tab` component to automatically generate
     * the tab navigation.
     * See the [Components.Tab](Components.Tab.html) for examples.
     *
     * @property title
     * @type string
     * @default null
     * @public
     */
    title: null,

    /**
     * An optional group title used by the `bs-tab` component to group all panes with the same group title
     * under a common drop down in the tab navigation.
     * See the [Components.Tab](Components.Tab.html) for examples.
     *
     * @property groupTitle
     * @type string
     * @default null
     * @public
     */
    groupTitle: null,

    /**
     * Use fade animation when switching tabs.
     *
     * @property fade
     * @type boolean
     * @readonly
     * @protected
     */
    fade: computed.readOnly('tab.fade'),

    /**
     * The duration of the fade out animation
     *
     * @property fadeDuration
     * @type integer
     * @readonly
     * @protected
     */
    fadeDuration: computed.readOnly('tab.fadeDuration'),

    /**
     * Show the pane
     *
     * @method show
     * @protected
     */
    show: function show() {
      if (this.get('usesTransition')) {
        this.$().one('bsTransitionEnd', _ember['default'].run.bind(this, function () {
          if (!this.get('isDestroyed')) {
            this.setProperties({
              active: true,
              'in': true
            });
          }
        })).emulateTransitionEnd(this.get('fadeDuration'));
      } else {
        this.set('active', true);
      }
    },

    /**
     * Hide the pane
     *
     * @method hide
     * @protected
     */
    hide: function hide() {
      if (this.get('usesTransition')) {
        this.$().one('bsTransitionEnd', _ember['default'].run.bind(this, function () {
          if (!this.get('isDestroyed')) {
            this.set('active', false);
          }
        })).emulateTransitionEnd(this.get('fadeDuration'));
        this.set('in', false);
      } else {
        this.set('active', false);
      }
    },

    _showHide: observer('isActive', function () {
      if (this.get('isActive')) {
        this.show();
      } else {
        this.hide();
      }
    }),

    init: function init() {
      this._super.apply(this, arguments);
      _ember['default'].run.scheduleOnce('afterRender', this, function () {
        // isActive comes from parent component, so only available after render...
        this.set('active', this.get('isActive'));
        this.set('in', this.get('isActive') && this.get('fade'));
      });
    }

  });
});
define('ember-bootstrap/components/bs-tab', ['exports', 'ember', 'ember-bootstrap/templates/components/bs-tab', 'ember-bootstrap/mixins/component-parent', 'ember-bootstrap/components/bs-tab-pane'], function (exports, _ember, _emberBootstrapTemplatesComponentsBsTab, _emberBootstrapMixinsComponentParent, _emberBootstrapComponentsBsTabPane) {
  'use strict';

  var computed = _ember['default'].computed;
  var isPresent = _ember['default'].isPresent;
  var A = _ember['default'].A;

  /**
   Tab component for dynamic tab functionality that mimics the behaviour of Bootstrap's tab.js plugin,
   see http://getbootstrap.com/javascript/#tabs
  
   ### Usage
  
   Just nest any number of [Components.TabPane](Components.TabPane.html) components that hold the tab content.
   The tab navigation is automatically generated from the tab panes' `title` property:
  
   ```hbs
   {{#bs-tab type=type.id}}
     {{#bs-tab-pane title="Tab 1"}}
       <p>...</p>
     {{/bs-tab-pane}}
     {{#bs-tab-pane title="Tab 2"}}
       <p>...</p>
     {{/bs-tab-pane}}
   {{/bs-tab}}
   ```
  
   ### Groupable (dropdown) tabs
  
   Bootstrap's support for dropdown menus as tab navigation is mimiced by the use of the `groupTitle` property.
   All panes with the same `groupTitle` will be put inside the menu of a [Components.Dropdown](Components.Dropdown.html)
   component with `groupTitle` being the dropdown's title:
  
   ```hbs
   {{#bs-tab type=type.id}}
      {{#bs-tab-pane title="Tab 1"}}
        <p>...</p>
      {{/bs-tab-pane}}
      {{#bs-tab-pane title="Tab 2"}}
        <p>...</p>
      {{/bs-tab-pane}}
      {{#bs-tab-pane title="Tab 3" groupTitle="Dropdown"}}
        <p>...</p>
      {{/bs-tab-pane}}
      {{#bs-tab-pane title="Tab 4" groupTitle="Dropdown"}}
        <p>...</p>
      {{/bs-tab-pane}}
   {{/bs-tab}}
   ```
  
   ### Custom tabs
  
   When having the tab pane's `title` as the tab navigation title is not sufficient, for example because you want to
   integrate some other dynamic content, maybe even other components in the tab navigation item, then you have to setup
   your navigation by yourself.
  
   Set `customTabs` to true to deactivate the automatic tab navigation generation. Then setup your navigation, probably
   using a [Components.Nav](Components.Nav.html) component. The tab component yields the `activeId` property as well as
   its `select` action, which you would have to use to manually set the `active` state of the navigation items and to
   trigger the selection of the different tab panes, using their ids:
  
   ```hbs
   {{#bs-tab customTabs=true as |activeId select|}}
      {{#bs-nav type="tabs"}}
          {{#bs-nav-item active=(bs-eq activeId "pane1")}}<a href="#pane1" role="tab" {{action select "pane1"}}>Tab 1</a>{{/bs-nav-item}}
          {{#bs-nav-item active=(bs-eq activeId "pane2")}}<a href="#pane1" role="tab" {{action select "pane2"}}>Tab 2 <span class="badge">{{badge}}</span></a>{{/bs-nav-item}}
      {{/bs-nav}}
  
      <div class="tab-content">
      {{#bs-tab-pane elementId="pane1" title="Tab 1"}}
          <p>...</p>
      {{/bs-tab-pane}}
      {{#bs-tab-pane elementId="pane2" title="Tab 2"}}
          <p>...</p>
      {{/bs-tab-pane}}
      </div>
   {{/bs-tab}}
   ```
  
   Note that the `bs-eq` helper used in the example above is a private helper, which is not guaranteed to be available for
   the future. Better use the corresponding `eq` helper of the
   [ember-truth-helpers](https://github.com/jmurphyau/ember-truth-helpers) addon for example!
  
   ### Routable tabs
  
   The tab component purpose is to have panes of content, that are all in DOM at the same time and that are activated and
   deactivated dynamically, just as the  original Bootstrap implementation.
  
   If you want to have the content delivered through individual sub routes, just use
   the [Components.Nav](Components.Nav.html) component and an `{{outlet}}` that show the nested routes' content:
  
   ```hbs
   <div>
     {{#bs-nav type="tabs"}}
       {{#bs-nav-item}}{{#link-to "tabs.index"}}Tab 1{{/link-to}}{{/bs-nav-item}}
       {{#bs-nav-item}}{{#link-to "tabs.other"}}Tab 2{{/link-to}}{{/bs-nav-item}}
     {{/bs-nav}}
     {{outlet}}
   </div>
   ```
  
   @class Tab
   @namespace Components
   @extends Ember.Component
   @uses Mixins.ComponentParent
   @public
   */
  exports['default'] = _ember['default'].Component.extend(_emberBootstrapMixinsComponentParent['default'], {
    layout: _emberBootstrapTemplatesComponentsBsTab['default'],

    /**
     * Type of nav, either "pills" or "tabs"
     *
     * @property type
     * @type String
     * @default 'tabs'
     * @public
     */
    type: 'tabs',

    /**
     * By default the tabs will be automatically generated using the available [TabPane](Components.TabPane.html)
     * components. If set to true, you can deactivate this and setup the tabs manually. See the example above.
     *
     * @property customTabs
     * @type boolean
     * @default false
     * @public
     */
    customTabs: false,

    /**
     * The id (`elementId`) of the active [TabPane](Components.TabPane.html).
     * By default the first tab will be active, but this can be changed by setting this property
     *
     * ```hbs
     * {{#bs-tab activeId="pane2"}}
     *   {{#bs-tab-pane id="pane1" title="Tab 1"}}
     *      ...
     *   {{/bs-tab-pane}}
     *   {{#bs-tab-pane id="pane1" title="Tab 1"}}
     *     ...
     *   {{/bs-tab-pane}}
     * {{/bs-tab}}
     * ```
     *
     * @property activeId
     * @type string
     * @public
     */
    activeId: computed.oneWay('childPanes.firstObject.elementId'),

    /**
     * Set to false to disable the fade animation when switching tabs.
     *
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * The duration of the fade animation
     *
     * @property fadeDuration
     * @type integer
     * @default 150
     * @public
     */
    fadeDuration: 150,

    /**
     * action is called when switching the active tab, with the new and previous pane id
     *
     * @event action
     * @public
     */
    action: null,

    /**
     * All `TabPane` child components
     *
     * @property childPanes
     * @type array
     * @readonly
     * @private
     */
    childPanes: computed.filter('children', function (view) {
      return view instanceof _emberBootstrapComponentsBsTabPane['default'];
    }),

    /**
     * Array of objects that define the tab structure
     *
     * @property navItems
     * @type array
     * @readonly
     * @private
     */
    navItems: computed('childPanes.@each.{elementId,title,group}', function () {
      var items = A();
      this.get('childPanes').forEach(function (pane) {
        var groupTitle = pane.get('groupTitle');
        var item = pane.getProperties('elementId', 'title');
        if (isPresent(groupTitle)) {
          var group = items.findBy('groupTitle', groupTitle);
          if (group) {
            group.children.push(item);
            group.childIds.push(item.elementId);
          } else {
            items.push({
              isGroup: true,
              groupTitle: groupTitle,
              children: A([item]),
              childIds: A([item.elementId])
            });
          }
        } else {
          items.push(item);
        }
      });
      return items;
    }),

    actions: {
      select: function select(id) {
        var previous = this.get('activeId');
        this.set('activeId', id);
        this.sendAction('action', id, previous);
      }
    }
  });
});
define('ember-bootstrap/components/bs-textarea', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   Extends Ember.TextArea to add Bootstrap's 'form-control' class.
  
   @class Textarea
   @namespace Components
   @extends Ember.TextArea
   @public
   */
  exports['default'] = _ember['default'].TextArea.extend({
    classNames: ['form-control']
  });
});
define('ember-bootstrap/components/bs-tooltip-element', ['exports', 'ember', 'ember-bootstrap/templates/components/bs-tooltip-element'], function (exports, _ember, _emberBootstrapTemplatesComponentsBsTooltipElement) {
  'use strict';

  /**
   Internal component for tooltip's markup. Should not be used directly.
  
   @class TooltipElement
   @namespace Components
   @extends Ember.Component
   @private
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberBootstrapTemplatesComponentsBsTooltipElement['default'],

    classNames: ['tooltip'],
    classNameBindings: ['placement', 'in', 'fade'],
    ariaRole: 'tooltip',

    /**
     * @property placement
     * @type string
     * @default 'top'
     * @public
     */
    placement: 'top',

    /**
     * @property fade
     * @type boolean
     * @default true
     * @public
     */
    fade: true,

    /**
     * @property in
     * @type boolean
     * @default false
     * @public
     */
    'in': false
  });
});
define('ember-bootstrap/components/bs-tooltip', ['exports', 'ember', 'ember-bootstrap/components/bs-contextual-help', 'ember-bootstrap/templates/components/bs-tooltip'], function (exports, _ember, _emberBootstrapComponentsBsContextualHelp, _emberBootstrapTemplatesComponentsBsTooltip) {
  'use strict';

  var computed = _ember['default'].computed;

  /**
   Component that implements Bootstrap [tooltips](http://getbootstrap.com/javascript/#tooltips).
  
   By default it will attach its listeners (mouseover and focus) to the parent DOM element to trigger
   the tooltip:
  
   ```hbs
   <button class="btn">
     {{bs-tooltip title="This is a tooltip"}}
   </button>
   ```
  
   You can also use the component in a block form to set the title:
  
   ```hbs
   <button class="btn">
     {{#bs-tooltip}}This is a tooltip{{/bs-tooltip}}
   </button>
   ```
  
   ### Trigger
  
   The trigger element is the DOM element that will cause the tooltip to be shown when one of the trigger events occur on
   that element. By default the trigger element is the parent DOM element of the component, and the trigger events will be
   "hover" and "focus".
  
   The `triggerElement` property accepts any jQuery selector to attach the tooltip to any other existing DOM element.
   With the special value "parentView" you can attach the tooltip to the DOM element of the parent component:
  
   ```hbs
   {{#my-component}}
     {{bs-tooltip title="This is a tooltip" triggerElement="parentView"}}
   {{/my-component}}
   ```
  
   To customize the events that will trigger the tooltip use the `triggerEvents` property, that accepts an array or a
   string of events, with "hover", "focus" and "click" being supported.
  
   ### Placement options
  
   By default the tooltip will show up on top of the trigger element. Use the `placement` property to change that
   ("top", "bottom", "left" and "right"). To make sure the tooltip will not exceed the viewport (see Advanced customization)
   you can set `autoPlacement` to true. A tooltip with `placement="right" will be placed to the right if there is enough
   space, otherwise to the left.
  
   ### Advanced customization
  
   Several other properties allow for some advanced customization:
   * `visible` to show/hide the tooltip programmatically
   * `fade` to disable the fade in transition
   * `delay` (or `delayShow` and `delayHide`) to add a delay
   * `viewportSelector` and `viewportPadding` to customize the viewport that affects `autoPlacement`
  
   See the individual API docs for each property.
  
   ### Actions
  
   When you want to react on the tooltip being shown or hidden, you can use one of the following supported actions:
   * `onShow`
   * `onShown`
   * `onHide`
   * `onHidden`
  
   @class Tooltip
   @namespace Components
   @extends Components.ContextualHelp
   @public
   */
  exports['default'] = _emberBootstrapComponentsBsContextualHelp['default'].extend({
    layout: _emberBootstrapTemplatesComponentsBsTooltip['default'],

    /**
     * The jQuery object of the arrow element.
     *
     * @property arrowElement
     * @type object
     * @readonly
     * @private
     */
    arrowElement: computed('overlayElement', function () {
      return this.get('overlayElement').find('.tooltip-arrow');
    })
  });
});
define('ember-bootstrap/config', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var Config = _ember['default'].Object.extend();

  Config.reopenClass({
    formValidationSuccessIcon: 'glyphicon glyphicon-ok',
    formValidationErrorIcon: 'glyphicon glyphicon-remove',
    formValidationWarningIcon: 'glyphicon glyphicon-warning-sign',
    formValidationInfoIcon: 'glyphicon glyphicon-info-sign',
    insertEmberWormholeElementToDom: true,

    load: function load() {
      var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      for (var property in config) {
        if (this.hasOwnProperty(property) && typeof this[property] !== 'function') {
          this[property] = config[property];
        }
      }
    }
  });

  exports['default'] = Config;
});
define('ember-bootstrap/helpers/bs-contains', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.bsContains = bsContains;

  var isArray = _ember['default'].isArray;
  var A = _ember['default'].A;

  function bsContains(params /*, hash*/) {
    return isArray(params[0]) ? A(params[0]).includes(params[1]) : false;
  }

  exports['default'] = _ember['default'].Helper.helper(bsContains);
});
define('ember-bootstrap/helpers/bs-eq', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.eq = eq;

  function eq(params) {
    return params[0] === params[1];
  }

  exports['default'] = _ember['default'].Helper.helper(eq);
});
define('ember-bootstrap/helpers/bs-not', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.not = not;

  function not(params /*, hash*/) {
    return !params[0];
  }

  exports['default'] = _ember['default'].Helper.helper(not);
});
define('ember-bootstrap/helpers/bs-read-path', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.readPath = readPath;

  function readPath(params /*, hash*/) {
    return _ember['default'].get(params[0], params[1]);
  }

  exports['default'] = _ember['default'].Helper.helper(readPath);
});
define('ember-bootstrap/initializers/bootstrap-linkto', ['exports', 'ember', 'ember-bootstrap/mixins/component-child'], function (exports, _ember, _emberBootstrapMixinsComponentChild) {
  'use strict';

  exports.initialize = initialize;

  var LinkComponent = _ember['default'].LinkComponent;

  function initialize() /* application */{
    if (!_emberBootstrapMixinsComponentChild['default'].detect(LinkComponent)) {
      LinkComponent.reopen(_emberBootstrapMixinsComponentChild['default']);
    }
  }

  exports['default'] = {
    name: 'bootstrap-linkto',
    initialize: initialize
  };
});
define('ember-bootstrap/initializers/modals-container', ['exports', 'ember-bootstrap/config'], function (exports, _emberBootstrapConfig) {
  'use strict';

  /*globals document */
  var hasDOM = typeof document !== 'undefined';

  function appendContainerElement(rootElementId, id) {
    if (!hasDOM) {
      return;
    }

    var rootEl = document.querySelector(rootElementId);
    var modalContainerEl = document.createElement('div');
    modalContainerEl.id = id;
    rootEl.appendChild(modalContainerEl);
  }

  function initialize() {
    if (!_emberBootstrapConfig['default'].insertEmberWormholeElementToDom) {
      return;
    }
    var application = arguments[1] || arguments[0];
    var modalContainerElId = 'ember-bootstrap-modal-container';
    appendContainerElement(application.rootElement, modalContainerElId);
  }

  exports['default'] = {
    name: 'modals-container',
    initialize: initialize
  };
});
define('ember-bootstrap/mixins/component-child', ['exports', 'ember', 'ember-bootstrap/mixins/component-parent'], function (exports, _ember, _emberBootstrapMixinsComponentParent) {
  'use strict';

  /**
   * Mixin for components that act as a child component in a parent-child relationship of components
   *
   * @class ComponentChild
   * @namespace Mixins
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create({

    /**
     * flag to check if component has already been rendered, for the `_willRender` event handler
     * @property _didInsert
     * @type boolean
     * @private
     */
    _didInsert: false,

    /**
     * Register ourself as a child at the parent component
     * We use the `willRender` event here to also support the fastboot environment, where there is no `didInsertElement`
     *
     * @method _willRender
     * @private
     */
    _willRender: _ember['default'].on('willRender', function () {
      if (!this._didInsert) {
        this._didInsert = true;
        var _parent = this.nearestOfType(_emberBootstrapMixinsComponentParent['default']);
        if (_parent) {
          _parent.registerChild(this);
          this.set('_parent', _parent);
        }
      }
    }),

    /**
     * stores the parent in didInsertElement hook as a work-a-round for
     * https://github.com/emberjs/ember.js/issues/12080
     *
     * @property _parent
     * @private
     */
    _parent: null,

    /**
     * Unregister form the parent component
     *
     * @method _willDestroyElement
     * @private
     */
    _willDestroyElement: _ember['default'].on('willDestroyElement', function () {
      var parent = this.nearestOfType(_emberBootstrapMixinsComponentParent['default']) || this.get('_parent');
      if (parent) {
        parent.removeChild(this);
      }
    })
  });
});
define('ember-bootstrap/mixins/component-parent', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * Mixin for components that act as a parent component in a parent-child relationship of components
   *
   * @class ComponentParent
   * @namespace Mixins
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create({

    /**
     * Array of registered child components
     *
     * @property children
     * @type array
     * @protected
     */
    children: null,

    _onInit: _ember['default'].on('init', function () {
      this.set('children', _ember['default'].A());
    }),

    /**
     * Register a component as a child of this parent
     *
     * @method registerChild
     * @param child
     * @public
     */
    registerChild: function registerChild(child) {
      _ember['default'].run.schedule('sync', this, function () {
        this.get('children').addObject(child);
      });
    },

    /**
     * Remove the child component from this parent component
     *
     * @method removeChild
     * @param child
     * @public
     */
    removeChild: function removeChild(child) {
      this.get('children').removeObject(child);
    }
  });
});
define('ember-bootstrap/mixins/dropdown-toggle', ['exports', 'ember', 'ember-bootstrap/mixins/component-child'], function (exports, _ember, _emberBootstrapMixinsComponentChild) {
  'use strict';

  /**
   * Mixin for components that act as dropdown toggles.
   *
   * @class DropdownToggle
   * @namespace Mixins
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create(_emberBootstrapMixinsComponentChild['default'], {
    classNames: ['dropdown-toggle'],

    /**
     * @property ariaRole
     * @default button
     * @type string
     * @protected
     */
    ariaRole: 'button',

    targetObject: _ember['default'].computed.alias('parentView'),

    /**
     * The default action is set to "toggleDropdown" on the parent {{#crossLink "Components.Dropdown"}}{{/crossLink}}
     *
     * @property action
     * @default toggleDropdown
     * @type string
     * @protected
     */
    action: 'toggleDropdown'
  });
});
define('ember-bootstrap/mixins/modal-closer', ['exports', 'ember', 'ember-bootstrap/components/bs-modal'], function (exports, _ember, _emberBootstrapComponentsBsModal) {
  'use strict';

  /**
   * @class ModalCloser
   * @namespace Mixins
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create({
    targetObject: _ember['default'].computed(function () {
      return this.nearestOfType(_emberBootstrapComponentsBsModal['default']);
    }).volatile(),

    action: 'close',

    actions: {
      close: function close() {
        this.sendAction();
      }
    }
  });
});
define('ember-bootstrap/mixins/size-class', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * Mixin to set the appropriate class for components with different sizes.
   *
   *
   * @class SizeClass
   * @namespace Mixins
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create({
    /**
     * Prefix for the size class, e.g. "btn" for button size classes ("btn-lg", "btn-sm" etc.)
     *
     * @property classTypePrefix
     * @type string
     * @required
     * @protected
     */
    classTypePrefix: null,

    classNameBindings: ['sizeClass'],

    sizeClass: _ember['default'].computed('size', function () {
      var prefix = this.get('classTypePrefix');
      var size = this.get('size');
      return _ember['default'].isBlank(size) ? null : prefix + '-' + size;
    }),

    /**
     * Property for size styling, set to 'lg', 'sm' or 'xs'
     *
     * Also see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)
     *
     * @property size
     * @type String
     * @public
     */
    size: null
  });
});
define('ember-bootstrap/mixins/sub-component', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * @class SubComponent
   * @namespace Mixins
   * @deprecated
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create({
    targetObject: _ember['default'].computed.alias('parentView')
  });
});
define('ember-bootstrap/mixins/type-class', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * Mixin to set the appropriate class for components with differently styled types ("success", "danger" etc.)
   *
   * @class TypeClass
   * @namespace Mixins
   * @private
   */
  exports['default'] = _ember['default'].Mixin.create({
    /**
     * Prefix for the type class, e.g. "btn" for button type classes ("btn-primary2 etc.)
     *
     * @property classTypePrefix
     * @type string
     * @required
     * @protected
     */
    classTypePrefix: null,

    classNameBindings: ['typeClass'],

    typeClass: _ember['default'].computed('type', function () {
      var prefix = this.get('classTypePrefix');
      var type = this.get('type') || 'default';
      return prefix + '-' + type;
    }),

    /**
     * Property for type styling
     *
     * For the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without "btn-" prefix)
     *
     * @property type
     * @type String
     * @default 'default'
     * @public
     */
    type: 'default'
  });
});
define("ember-bootstrap/templates/components/bs-nav-item", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-nav-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-nav", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-nav.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-navbar-content", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-navbar-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-navbar-nav", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-navbar-nav.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-navbar-toggle", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-navbar-toggle.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-navbar", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-navbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["subexpr", "if", [["get", "fluid", ["loc", [null, [1, 16], [1, 21]]], 0, 0, 0, 0], "container-fluid", "container"], [], ["loc", [null, [null, null], [1, 53]]], 0, 0], 0, 0, 0, 0], ["content", "yield", ["loc", [null, [2, 4], [2, 13]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-popover-element", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "modules/ember-bootstrap/templates/components/bs-popover-element.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h3");
          dom.setAttribute(el1, "class", "popover-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [3, 26], [3, 35]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 44
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-popover-element.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "arrow");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "popover-content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasTitle", ["loc", [null, [2, 6], [2, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]], ["content", "yield", ["loc", [null, [5, 29], [5, 38]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-bootstrap/templates/components/bs-popover", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 12
                  },
                  "end": {
                    "line": 8,
                    "column": 12
                  }
                },
                "moduleName": "modules/ember-bootstrap/templates/components/bs-popover.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "yield", ["loc", [null, [7, 16], [7, 25]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 10,
                    "column": 12
                  }
                },
                "moduleName": "modules/ember-bootstrap/templates/components/bs-popover.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "title", ["loc", [null, [9, 16], [9, 25]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "modules/ember-bootstrap/templates/components/bs-popover.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [6, 18], [6, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [6, 12], [10, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "modules/ember-bootstrap/templates/components/bs-popover.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "bs-popover-element", [], ["id", ["subexpr", "@mut", [["get", "overlayId", ["loc", [null, [5, 33], [5, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "placement", ["subexpr", "@mut", [["get", "_placement", ["loc", [null, [5, 53], [5, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "fade", ["subexpr", "@mut", [["get", "fade", ["loc", [null, [5, 69], [5, 73]]], 0, 0, 0, 0]], [], [], 0, 0], "in", ["subexpr", "@mut", [["get", "in", ["loc", [null, [5, 77], [5, 79]]], 0, 0, 0, 0]], [], [], 0, 0], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 86], [5, 91]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [5, 8], [11, 31]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "modules/ember-bootstrap/templates/components/bs-popover.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "ember-wormhole", [], ["to", "ember-bootstrap-modal-container", "renderInPlace", ["subexpr", "@mut", [["get", "_renderInPlace", ["loc", [null, [3, 73], [3, 87]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [3, 4], [13, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 7
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-popover.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "inDom", ["loc", [null, [1, 6], [1, 11]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [15, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-bootstrap/templates/components/bs-tab-pane", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-tab-pane.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-tab", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "activeId", ["loc", [null, [2, 10], [2, 18]]], 0, 0, 0, 0], ["subexpr", "action", ["select"], [], ["loc", [null, [2, 19], [2, 36]]], 0, 0]], [], ["loc", [null, [2, 2], [2, 38]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.7.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 8,
                        "column": 10
                      },
                      "end": {
                        "line": 8,
                        "column": 80
                      }
                    },
                    "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode(" ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "caret");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    return morphs;
                  },
                  statements: [["content", "item.groupTitle", ["loc", [null, [8, 33], [8, 52]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.7.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 10,
                          "column": 12
                        },
                        "end": {
                          "line": 12,
                          "column": 12
                        }
                      },
                      "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
                    },
                    isEmpty: false,
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("              ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      var el2 = dom.createElement("a");
                      dom.setAttribute(el2, "role", "tab");
                      var el3 = dom.createComment("");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element1 = dom.childAt(fragment, [1]);
                      var element2 = dom.childAt(element1, [0]);
                      var morphs = new Array(4);
                      morphs[0] = dom.createAttrMorph(element1, 'class');
                      morphs[1] = dom.createAttrMorph(element2, 'href');
                      morphs[2] = dom.createElementMorph(element2);
                      morphs[3] = dom.createMorphAt(element2, 0, 0);
                      return morphs;
                    },
                    statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "bs-eq", [["get", "activeId", ["loc", [null, [11, 37], [11, 45]]], 0, 0, 0, 0], ["get", "subItem.elementId", ["loc", [null, [11, 46], [11, 63]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 30], [11, 64]]], 0, 0], "active"], [], ["loc", [null, [11, 25], [11, 75]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", ["#", ["get", "subItem.elementId", ["loc", [null, [11, 89], [11, 106]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["select", ["get", "subItem.elementId", ["loc", [null, [11, 139], [11, 156]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 121], [11, 158]]], 0, 0], ["content", "subItem.title", ["loc", [null, [11, 159], [11, 176]]], 0, 0, 0, 0]],
                    locals: ["subItem"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.7.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 9,
                        "column": 10
                      },
                      "end": {
                        "line": 13,
                        "column": 10
                      }
                    },
                    "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "each", [["get", "item.children", ["loc", [null, [10, 20], [10, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 12], [12, 21]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.7.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 7,
                      "column": 8
                    },
                    "end": {
                      "line": 14,
                      "column": 8
                    }
                  },
                  "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "bs-dropdown-toggle", [], [], 0, null, ["loc", [null, [8, 10], [8, 103]]]], ["block", "bs-dropdown-menu", [], [], 1, null, ["loc", [null, [9, 10], [13, 31]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 6
                  },
                  "end": {
                    "line": 15,
                    "column": 6
                  }
                },
                "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "bs-dropdown", [], ["tagName", "li", "class", ["subexpr", "if", [["subexpr", "bs-contains", [["get", "item.childIds", ["loc", [null, [7, 59], [7, 72]]], 0, 0, 0, 0], ["get", "activeId", ["loc", [null, [7, 73], [7, 81]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 46], [7, 82]]], 0, 0], "active"], [], ["loc", [null, [7, 42], [7, 92]]], 0, 0]], 0, null, ["loc", [null, [7, 8], [14, 24]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.7.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 8
                    },
                    "end": {
                      "line": 16,
                      "column": 157
                    }
                  },
                  "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "role", "tab");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [0]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element0, 'href');
                  morphs[1] = dom.createElementMorph(element0);
                  morphs[2] = dom.createMorphAt(element0, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "href", ["concat", ["#", ["get", "item.elementId", ["loc", [null, [16, 75], [16, 89]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["select", ["get", "item.elementId", ["loc", [null, [16, 122], [16, 136]]], 0, 0, 0, 0]], [], ["loc", [null, [16, 104], [16, 138]]], 0, 0], ["content", "item.title", ["loc", [null, [16, 139], [16, 153]]], 0, 0, 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 17,
                    "column": 6
                  }
                },
                "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "bs-nav-item", [], ["active", ["subexpr", "bs-eq", [["get", "item.elementId", ["loc", [null, [16, 37], [16, 51]]], 0, 0, 0, 0], ["get", "activeId", ["loc", [null, [16, 52], [16, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [16, 30], [16, 61]]], 0, 0]], 0, null, ["loc", [null, [16, 8], [16, 173]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "item.isGroup", ["loc", [null, [6, 12], [6, 24]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [6, 6], [17, 13]]]]],
            locals: ["item"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "navItems", ["loc", [null, [5, 12], [5, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 4], [18, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "tab-content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "bs-nav", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [4, 17], [4, 21]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [4, 2], [19, 13]]]], ["inline", "yield", [["get", "activeId", ["loc", [null, [22, 12], [22, 20]]], 0, 0, 0, 0], ["subexpr", "action", ["select"], [], ["loc", [null, [22, 21], [22, 38]]], 0, 0]], [], ["loc", [null, [22, 4], [22, 40]]], 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 7
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-tab.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "customTabs", ["loc", [null, [1, 6], [1, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [24, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-bootstrap/templates/components/bs-tooltip-element", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 6
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip-element.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "tooltip-arrow");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "tooltip-inner");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-bootstrap/templates/components/bs-tooltip", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 12
                  },
                  "end": {
                    "line": 8,
                    "column": 12
                  }
                },
                "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "yield", ["loc", [null, [7, 16], [7, 25]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 10,
                    "column": 12
                  }
                },
                "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "title", ["loc", [null, [9, 16], [9, 25]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [6, 18], [6, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [6, 12], [10, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "bs-tooltip-element", [], ["id", ["subexpr", "@mut", [["get", "overlayId", ["loc", [null, [5, 33], [5, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "placement", ["subexpr", "@mut", [["get", "_placement", ["loc", [null, [5, 53], [5, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "fade", ["subexpr", "@mut", [["get", "fade", ["loc", [null, [5, 69], [5, 73]]], 0, 0, 0, 0]], [], [], 0, 0], "in", ["subexpr", "@mut", [["get", "in", ["loc", [null, [5, 77], [5, 79]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [5, 8], [11, 31]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "ember-wormhole", [], ["to", "ember-bootstrap-modal-container", "renderInPlace", ["subexpr", "@mut", [["get", "_renderInPlace", ["loc", [null, [3, 73], [3, 87]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [3, 4], [13, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 7
          }
        },
        "moduleName": "modules/ember-bootstrap/templates/components/bs-tooltip.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "inDom", ["loc", [null, [1, 6], [1, 11]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [15, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('ember-bootstrap/utils/get-calculated-offset', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = getCalculatedOffset;

  var assert = _ember['default'].assert;

  function getCalculatedOffset(placement, pos, actualWidth, actualHeight) {
    switch (placement) {
      case 'bottom':
        return { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 };
      case 'top':
        return { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 };
      case 'left':
        return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth };
      case 'right':
        return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
      default:
        assert('position must be one of bottom|top|left|right', false);
    }
  }
});
define('ember-bootstrap/utils/get-parent', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = getParent;

  var get = _ember['default'].get;
  var $ = _ember['default'].$;

  function getParent(view) {
    if (get(view, 'tagName') === '') {
      // Beware: use of private API! :(
      if (_ember['default'].ViewUtils && _ember['default'].ViewUtils.getViewBounds) {
        return $(_ember['default'].ViewUtils.getViewBounds(view).parentElement);
      } else {
        return $(view._renderNode.contextualElement);
      }
    } else {
      return view.$().parent();
    }
  }
});
define('ember-bootstrap/utils/get-position', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = getPosition;

  var $ = _ember['default'].$;

  function getPosition($element) {
    var el = $element.get(0);
    var isBody = el.tagName === 'BODY';

    var elRect = el.getBoundingClientRect();

    // not needed as we won't support IE8
    //
    // if (elRect.width == null) {
    //   // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
    //   elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    // }

    var isSvg = window.SVGElement && el instanceof window.SVGElement;
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset = isBody ? { top: 0, left: 0 } : isSvg ? null : $element.offset();
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;

    return $.extend({}, elRect, scroll, outerDims, elOffset);
  }
});
define('ember-c3/components/c3-chart', ['exports', 'ember'], function (exports, _ember) {
  /* global c3*/
  'use strict';

  /**
    C3 Chart component
  */
  exports['default'] = _ember['default'].Component.extend({
    /**
      Element tag name
    */
    tagName: 'div',

    /**
      Element classes
    */
    classNames: ['c3-chart-component'],

    /**
      The data to display
    */
    data: {},

    /**
      Axis specifications
    */
    axis: {},

    /**
      Region specifications
    */
    regions: {},

    /*
    Type of chart
    */
    bar: {},
    pie: {},
    donut: {},
    gauge: {},

    /**
      Grid lines
    */
    grid: {},

    /**
      Legend
    */
    legend: {},

    /**
      Tooltip
    */
    tooltip: {},

    /**
      Subchart
    */
    subchart: {},

    /**
      Zoom
    */
    zoom: {},

    /**
      Point
    */
    point: {},

    /**
      Line
    */
    line: {},

    /**
      Area
    */
    area: {},

    /**
      Size
    */
    size: {},

    /**
      Padding
    */
    padding: {},

    /**
      Color
    */
    color: {},

    /**
      Transition
    */
    transition: {},

    /**
     */
    _chart: undefined,

    /**
      The Chart
    */
    chart: _ember['default'].computed('config', function () {
      var self = this;

      if (_ember['default'].isEmpty(self.get('_chart'))) {
        // Empty, create it.
        var container = self.$().get(0);
        if (_ember['default'].isEmpty(container)) {
          return undefined;
        } else {
          var config = self.get('_config');
          var chart = c3.generate(config);
          self.set('_chart', chart);
          return chart;
        }
      } else {
        // Editor is already created and cached.
        return self.get('_chart');
      }
    }),

    _config: _ember['default'].computed('data', 'axis', 'regions', 'bar', 'pie', 'donut', 'gauge', 'grid', 'legend', 'tooltip', 'subchart', 'zoom', 'point', 'line', 'area', 'size', 'padding', 'color', 'transition', function () {
      var self = this;
      var c = self.getProperties(['data', 'axis', 'regions', 'bar', 'pie', 'donut', 'gauge', 'grid', 'legend', 'tooltip', 'subchart', 'zoom', 'point', 'line', 'area', 'size', 'padding', 'color', 'transition']);

      _ember['default'].A(['oninit', 'onrendered', 'onmouseover', 'onmouseout', 'onresize', 'onresized']).forEach(function (eventname) {
        c[eventname] = function () {
          self.sendAction(eventname, this);
        };
      });

      c.bindto = self.$().get(0);
      return c;
    }),

    /**
      Data Observer
    */
    dataDidChange: _ember['default'].observer('data', function () {
      // console.log('data');
      var self = this;
      var chart = self.get('chart');
      if (_ember['default'].isEmpty(chart)) {
        return;
      }
      var data = self.get('data');
      if (_ember['default'].isEmpty(data)) {
        return;
      }
      // console.log('data', data, chart);
      chart.load(data);
    }),
    /**
    See https://github.com/emberjs/ember.js/issues/10661
    and http://stackoverflow.com/a/25523850/2578205
    */
    didInsertElement: function didInsertElement() {
      // console.log('didInsertElement', this, controller);
      var controller = this.get('targetObject');
      // Find the key on the controller for the data passed to this component
      // See http://stackoverflow.com/a/9907509/2578205
      var propertyKey;
      var data = this.get('data');
      for (var prop in controller) {
        if (controller.hasOwnProperty(prop)) {
          if (controller[prop] === data) {
            propertyKey = prop;
            break;
          }
        }
      }
      if (_ember['default'].isEmpty(propertyKey)) {
        // console.log('Could not find propertyKey', data);
      } else {
          // console.log('Found key!', propertyKey, data);
          controller.addObserver(propertyKey, this, this.dataDidChange);
        }
      this.dataDidChange();
    }

  });
});
define('ember-cli-app-version/components/app-version', ['exports', 'ember', 'ember-cli-app-version/templates/app-version'], function (exports, _ember, _emberCliAppVersionTemplatesAppVersion) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    layout: _emberCliAppVersionTemplatesAppVersion['default']
  });
});
define('ember-cli-app-version/initializer-factory', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = initializerFactory;

  var classify = _ember['default'].String.classify;

  function initializerFactory(name, version) {
    var registered = false;

    return function () {
      if (!registered && name && version) {
        var appName = classify(name);
        _ember['default'].libraries.register(appName, version);
        registered = true;
      }
    };
  }
});
define("ember-cli-app-version/templates/app-version", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-cli-app-version/templates/app-version.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "version", ["loc", [null, [1, 0], [1, 11]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-cli-bootstrap-datepicker/components/bootstrap-datepicker-inline', ['exports', 'ember', 'ember-cli-bootstrap-datepicker/components/datepicker-support'], function (exports, _ember, _emberCliBootstrapDatepickerComponentsDatepickerSupport) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend(_emberCliBootstrapDatepickerComponentsDatepickerSupport['default'], {
    tagName: 'div'
  });
});
define('ember-cli-bootstrap-datepicker/components/bootstrap-datepicker', ['exports', 'ember', 'ember-cli-bootstrap-datepicker/components/datepicker-support'], function (exports, _ember, _emberCliBootstrapDatepickerComponentsDatepickerSupport) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend(_emberCliBootstrapDatepickerComponentsDatepickerSupport['default'], {
    instrumentDisplay: '{{input type="text"}}',

    classNames: ['ember-text-field'],

    tagName: 'input',

    attributeBindings: ['accesskey', 'autocomplete', 'autofocus', 'contenteditable', 'contextmenu', 'dir', 'disabled', 'draggable', 'dropzone', 'form', 'hidden', 'id', 'lang', 'list', 'max', 'min', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'step', 'tabindex', 'title', 'translate', 'type'],

    type: 'text'
  });
});
define('ember-cli-bootstrap-datepicker/components/datepicker-support', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = _ember['default'].Mixin.create({
    mustUpdateInput: true,
    value: null,
    // add the observed properties
    minViewMode: undefined,
    format: undefined,
    language: undefined,
    startDate: undefined,
    endDate: undefined,
    customParser: function customParser(value) {
      return value;
    },

    setupBootstrapDatepicker: _ember['default'].on('didInsertElement', function () {
      var _this = this;

      this.$().datepicker({
        autoclose: this.get('autoclose'),
        calendarWeeks: this.get('calendarWeeks'),
        clearBtn: this.get('clearBtn'),
        container: this.get('widgetContainer'),
        daysOfWeekDisabled: this.get('daysOfWeekDisabled'),
        defaultViewDate: this.get('defaultViewDate'),
        disableTouchKeyboard: this.get('disableTouchKeyboard'),
        enableOnReadonly: this.get('enableOnReadonly'),
        endDate: this.get('endDate'),
        forceParse: this.get('forceParse'),
        format: this._toString(this.get('format')),
        immediateUpdates: this.get('immediateUpdates'),
        keyboardNavigation: this.get('keyboardNavigation'),
        language: this.get('language') || undefined,
        maxViewMode: this.get('maxViewMode'),
        minViewMode: this.get('minViewMode'),
        multidate: this.get('multidate'),
        multidateSeparator: this.get('multidateSeparator'),
        orientation: this.get('orientation'),
        showOnFocus: this.get('showOnFocus'),
        startDate: this.get('startDate'),
        startView: this.get('startView'),
        todayBtn: this.get('todayBtn'),
        todayHighlight: this.get('todayHighlight'),
        toggleActive: this.get('toggleActive'),
        weekStart: this.get('weekStart'),
        datesDisabled: this.get('datesDisabled')
      }).on('changeDate', function (event) {
        _ember['default'].run(function () {
          _this._didChangeDate(event);
        });
      }).on('changeMonth', function (event) {
        _this.sendAction('changeMonth', event.date);
      }).on('focusout', function (event) {
        _this.sendAction('focus-out', _this, event);
      }).on('focusin', function (event) {
        _this.sendAction('focus-in', _this, event);
      }).on('clearDate', function (event) {
        _ember['default'].run(function () {
          _this._didChangeDate(event);
        });
      }).on('show', function () {
        _this.sendAction('show');
      }).on('hide', function () {
        _this.sendAction('hide');
      });

      this._updateDatepicker();
    }),

    teardownBootstrapDatepicker: _ember['default'].on('willDestroyElement', function () {
      this.$().datepicker('remove');
    }),

    didChangeValue: _ember['default'].observer('value', function () {
      this._updateDatepicker();
    }),

    _didChangeDate: function _didChangeDate(event) {
      var value = null;

      if (event.date) {
        if (this.get('multidate')) {
          value = this.$().datepicker('getDates');
        } else {
          value = this.$().datepicker('getDate');
        }
      }

      this.set('mustUpdateInput', false);
      this.set('value', value);
      if (event.type === 'clearDate') {
        this.sendAction('clearDate');
      } else {
        this.sendAction('changeDate', value);
      }
    },

    _addObservers: _ember['default'].on('didInsertElement', function () {
      this.addObserver('language', function () {
        this.$().datepicker('remove');
        this.setupBootstrapDatepicker();
      });

      this.addObserver('startDate', function () {
        this.$().datepicker('setStartDate', this.get('startDate'));
        this._updateDatepicker();
      });

      this.addObserver('endDate', function () {
        this.$().datepicker('setEndDate', this.get('endDate'));
        this._updateDatepicker();
      });

      this.addObserver('datesDisabled', function () {
        this.$().datepicker('setDatesDisabled', this.get('datesDisabled'));
        this._updateDatepicker();
      });

      this.addObserver('minViewMode', function () {
        this.$().datepicker('minViewMode', this.get('minViewMode'));
        this.$().data('datepicker')._process_options({ minViewMode: this.get('minViewMode') });
        this._updateDatepicker();
      });

      this.addObserver('format', function () {
        var format = this._toString(this.get('format'));
        this.$().datepicker('format', format);
        this.$().data('datepicker')._process_options({ format: format });
        this._updateDatepicker();
      });
    }),

    _updateDatepicker: function _updateDatepicker() {
      var _this2 = this;

      var element = this.$(),
          value = this.get('value'),
          customParser = this.get('customParser'),
          dates = [];

      if (!this.get('mustUpdateInput')) {
        this.set('mustUpdateInput', true);
        return;
      }

      value = customParser(value);

      switch (_ember['default'].typeOf(value)) {
        case 'array':
          dates = value;
          break;
        case 'date':
          dates = [value];
          break;
        default:
          dates = [null];
      }
      dates = dates.map(function (date) {
        return _ember['default'].isNone(date) ? null : _this2._getDateCloneWithNoTime(date);
      });

      element.datepicker.apply(element, Array.prototype.concat.call(['update'], dates));
    },

    // HACK: Have to reset time to 00:00:00 because of the bug in
    //       bootstrap-datepicker
    //       Issue: http://git.io/qH7Hlg
    _getDateCloneWithNoTime: function _getDateCloneWithNoTime(date) {
      var clone = new Date(date.getTime());

      clone.setHours(0);
      clone.setMinutes(0);
      clone.setSeconds(0);
      clone.setMilliseconds(0);

      return clone;
    },

    /**
     * Fix Issue #59
     * _toString Checks and converts the input object and returns  a String if it is required and feasible
     * @param  {Object} obj The object to check
     * @return {Object} The object as a String
     */
    _toString: function _toString(obj) {
      if (typeof obj !== typeof Undefined && obj !== typeof String) {
        if (typeof obj.toString === typeof Function) {
          obj = obj.toString();
        } else {
          // No toString() method available - There is nothing else that can be done
          throw new Error("At _toString() (datepicker-support.js) - No toString() method available for the passed object.");
        }
      }
      return obj;
    }
  });
});
define('ember-cli-mirage/assert', ['exports'], function (exports) {
  'use strict';

  exports['default'] = assert;
  exports.MirageError = MirageError;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
  function assert(bool, text) {
    if (typeof bool === 'string' && !text) {
      throw new MirageError(bool);
    }

    if (!bool) {
      throw new MirageError(text.replace(/^ +/gm, '') || 'Assertion failed');
    }
  }

  /**
    @public
    Copied from ember-metal/error
  */

  function MirageError() {
    var tmp = Error.apply(this, arguments);

    for (var idx = 0; idx < errorProps.length; idx++) {
      var prop = errorProps[idx];

      if (['description', 'message', 'stack'].indexOf(prop) > -1) {
        this[prop] = 'Mirage: ' + tmp[prop];
      } else {
        this[prop] = tmp[prop];
      }
    }

    console.error(this.message);
    console.error(this);
  }

  MirageError.prototype = Object.create(Error.prototype);
});
define('ember-cli-mirage/db-collection', ['exports', 'lodash/object/assign', 'lodash/lang/isEqual', 'lodash/collection/sortBy'], function (exports, _lodashObjectAssign, _lodashLangIsEqual, _lodashCollectionSortBy) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function duplicate(data) {
    if (Array.isArray(data)) {
      return data.map(duplicate);
    } else {
      return (0, _lodashObjectAssign['default'])({}, data);
    }
  }

  function isNumber(n) {
    return (+n).toString() === n.toString();
  }

  /**
   *  A collection of db records i.e. a database table.
   *  @class DbCollection
   *  @constructor
   *  @public
   */

  var DbCollection = (function () {
    function DbCollection(name, initialData) {
      _classCallCheck(this, DbCollection);

      this.name = name;
      this._records = [];
      this.identityManager = new IdentityManager();

      if (initialData) {
        this.insert(initialData);
      }
    }

    /**
     * Returns a copy of the data, to prevent inadvertent data manipulation.
     * @method all
     * @public
     */

    _createClass(DbCollection, [{
      key: 'all',
      value: function all() {
        return duplicate(this._records);
      }

      /**
       * Inserts `data` into the collection. `data` can be a single object
       * or an array of objects. Returns the inserted record.
       * @method insert
       * @param data
       * @public
       */
    }, {
      key: 'insert',
      value: function insert(data) {
        if (!Array.isArray(data)) {
          return this._insertRecord(data);
        } else {
          // Need to sort in order to ensure IDs inserted in the correct order
          return (0, _lodashCollectionSortBy['default'])(data, 'id').map(this._insertRecord, this);
        }
      }

      /**
       * Returns a single record from the `collection` if `ids` is a single
       * id, or an array of records if `ids` is an array of ids. Note
       * each id can be an int or a string, but integer ids as strings
       * (e.g. the string “1”) will be treated as integers.
       * @method find
       * @param ids
       * @public
       */
    }, {
      key: 'find',
      value: function find(ids) {
        if (Array.isArray(ids)) {
          var records = this._findRecords(ids).filter(Boolean).map(duplicate); // Return a copy

          return records;
        } else {
          var record = this._findRecord(ids);
          if (!record) {
            return null;
          }

          // Return a copy
          return duplicate(record);
        }
      }

      /**
       * Returns the first model from `collection` that matches the
       * key-value pairs in the `query` object. Note that a string
       * comparison is used. `query` is a POJO.
       * @method find
       * @param query
       * @public
       */
    }, {
      key: 'findBy',
      value: function findBy(query) {
        var record = this._findRecordBy(query);
        if (!record) {
          return null;
        }

        // Return a copy
        return duplicate(record);
      }

      /**
       * Returns an array of models from `collection` that match the
       * key-value pairs in the `query` object. Note that a string
       * comparison is used. `query` is a POJO.
       * @method where
       * @param query
       * @public
       */
    }, {
      key: 'where',
      value: function where(query) {
        return this._findRecordsWhere(query).map(duplicate);
      }

      /**
       * Finds the first record matching the provided query in
       * `collection`, or creates a new record using a merge of the
       * `query` and optional `attributesForCreate`.
       * @method firstOrCreate
       * @param query
       * @param attributesForCreate
       * @public
       */
    }, {
      key: 'firstOrCreate',
      value: function firstOrCreate(query) {
        var attributesForCreate = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var queryResult = this.where(query);

        var _queryResult = _slicedToArray(queryResult, 1);

        var record = _queryResult[0];

        if (record) {
          return record;
        } else {
          var mergedAttributes = (0, _lodashObjectAssign['default'])(attributesForCreate, query);
          var createdRecord = this.insert(mergedAttributes);

          return createdRecord;
        }
      }

      /**
       * Updates one or more records in collection.
       * If attrs is the only arg present, updates all records
       * in the collection according to the key-value pairs in attrs.
       * If target is present, restricts updates to those that
       * match target. If target is a number or string, finds a
       * single record whose id is target to update. If target is
       * a POJO, queries collection for records that match the
       * key-value pairs in target, and updates their attrs.
       * Returns the updated record or records.
       * @method update
       * @param target
       * @param attrs
       * @public
       */
    }, {
      key: 'update',
      value: function update(target, attrs) {
        var _this = this;

        var records = undefined;

        if (typeof attrs === 'undefined') {
          var _ret = (function () {
            attrs = target;
            var changedRecords = [];

            _this._records.forEach(function (record) {
              var oldRecord = (0, _lodashObjectAssign['default'])({}, record);

              _this._updateRecord(record, attrs);

              if (!(0, _lodashLangIsEqual['default'])(oldRecord, record)) {
                changedRecords.push(record);
              }
            });

            return {
              v: changedRecords
            };
          })();

          if (typeof _ret === 'object') return _ret.v;
        } else if (typeof target === 'number' || typeof target === 'string') {
          var id = target;
          var record = this._findRecord(id);

          this._updateRecord(record, attrs);

          return record;
        } else if (Array.isArray(target)) {
          var ids = target;
          records = this._findRecords(ids);

          records.forEach(function (record) {
            _this._updateRecord(record, attrs);
          });

          return records;
        } else if (typeof target === 'object') {
          var query = target;
          records = this._findRecordsWhere(query);

          records.forEach(function (record) {
            _this._updateRecord(record, attrs);
          });

          return records;
        }
      }

      /**
       * Removes one or more records in `collection`.
       * If `target` is undefined, removes all records.
       * If `target` is a number or string, removes a
       * single record using `target` as id. If `target` is
       * a POJO, queries `collection` for records that
       * match the key-value pairs in `target`, and
       * removes them from the collection.
       * @method remove
       * @param target
       * @public
       */
    }, {
      key: 'remove',
      value: function remove(target) {
        var _this2 = this;

        var records = undefined;

        if (typeof target === 'undefined') {
          this._records = [];
          this.identityManager.reset();
        } else if (typeof target === 'number' || typeof target === 'string') {
          var record = this._findRecord(target);
          var index = this._records.indexOf(record);
          this._records.splice(index, 1);
        } else if (Array.isArray(target)) {
          records = this._findRecords(target);
          records.forEach(function (record) {
            var index = _this2._records.indexOf(record);
            _this2._records.splice(index, 1);
          });
        } else if (typeof target === 'object') {
          records = this._findRecordsWhere(target);
          records.forEach(function (record) {
            var index = _this2._records.indexOf(record);
            _this2._records.splice(index, 1);
          });
        }
      }

      /*
        Private methods.
         These return the actual db objects, whereas the public
        API query methods return copies.
      */

      /**
       * @method _findRecord
       * @param id
       * @private
       */
    }, {
      key: '_findRecord',
      value: function _findRecord(id) {
        id = id.toString();

        var _records$filter = this._records.filter(function (obj) {
          return obj.id === id;
        });

        var _records$filter2 = _slicedToArray(_records$filter, 1);

        var record = _records$filter2[0];

        return record;
      }

      /**
       * @method _findRecordBy
       * @param query
       * @private
       */
    }, {
      key: '_findRecordBy',
      value: function _findRecordBy(query) {
        return this._findRecordsWhere(query)[0];
      }

      /**
       * @method _findRecords
       * @param ids
       * @private
       */
    }, {
      key: '_findRecords',
      value: function _findRecords(ids) {
        return ids.map(this._findRecord, this);
      }

      /**
       * @method _findRecordsWhere
       * @param query
       * @private
       */
    }, {
      key: '_findRecordsWhere',
      value: function _findRecordsWhere(query) {
        var records = this._records;

        function defaultQueryFunction(record) {
          var keys = Object.keys(query);

          return keys.every(function (key) {
            return String(record[key]) === String(query[key]);
          });
        }

        var queryFunction = typeof query === 'object' ? defaultQueryFunction : query;

        return records.filter(queryFunction);
      }

      /**
       * @method _insertRecord
       * @param data
       * @private
       */
    }, {
      key: '_insertRecord',
      value: function _insertRecord(data) {
        var attrs = duplicate(data);

        if (attrs && (attrs.id === undefined || attrs.id === null)) {
          attrs.id = this.identityManager.fetch();
        } else {
          attrs.id = attrs.id.toString();

          this.identityManager.set(attrs.id);
        }

        this._records.push(attrs);

        return duplicate(attrs);
      }

      /**
       * @method _updateRecord
       * @param record
       * @param attrs
       * @private
       */
    }, {
      key: '_updateRecord',
      value: function _updateRecord(record, attrs) {
        var targetId = attrs && attrs.hasOwnProperty('id') ? attrs.id.toString() : null;
        var currentId = record.id;

        if (targetId && currentId !== targetId) {
          throw new Error('Updating the ID of a record is not permitted');
        }

        for (var attr in attrs) {
          if (attr === 'id') {
            continue;
          }

          record[attr] = attrs[attr];
        }
      }
    }]);

    return DbCollection;
  })();

  var IdentityManager = (function () {
    function IdentityManager() {
      _classCallCheck(this, IdentityManager);

      this._nextId = 1;
      this._ids = {};
    }

    _createClass(IdentityManager, [{
      key: 'get',
      value: function get() {
        return this._nextId;
      }
    }, {
      key: 'set',
      value: function set(n) {
        if (this._ids[n]) {
          throw new Error('Attempting to use the ID ' + n + ', but it\'s already been used');
        }

        if (isNumber(n) && +n >= this._nextId) {
          this._nextId = +n + 1;
        }

        this._ids[n] = true;
      }
    }, {
      key: 'inc',
      value: function inc() {
        var nextValue = this.get() + 1;

        this._nextId = nextValue;

        return nextValue;
      }
    }, {
      key: 'fetch',
      value: function fetch() {
        var id = this.get();

        this._ids[id] = true;

        this.inc();

        return id.toString();
      }
    }, {
      key: 'reset',
      value: function reset() {
        this._nextId = 1;
        this._ids = {};
      }
    }]);

    return IdentityManager;
  })();

  exports['default'] = DbCollection;
  exports.IdentityManager = IdentityManager;
});
define('ember-cli-mirage/db', ['exports', 'ember-cli-mirage/db-collection'], function (exports, _emberCliMirageDbCollection) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  /**
   * The db, an identity map.
   * @class Db
   * @constructor
   * @public
   */

  var Db = (function () {
    function Db(initialData) {
      _classCallCheck(this, Db);

      this._collections = [];

      if (initialData) {
        this.loadData(initialData);
      }
    }

    /**
     * @method loadData
     * @param data
     * @public
     */

    _createClass(Db, [{
      key: 'loadData',
      value: function loadData(data) {
        for (var key in data) {
          this.createCollection(key, data[key]);
        }
      }

      /**
       * @method createCollection
       * @param name
       * @param initialData
       * @public
       */
    }, {
      key: 'createCollection',
      value: function createCollection(name, initialData) {
        var _this = this;

        if (!this[name]) {
          (function () {
            var newCollection = new _emberCliMirageDbCollection['default'](name, initialData);

            Object.defineProperty(_this, name, {
              get: function get() {
                var recordsCopy = newCollection.all();

                ['insert', 'find', 'findBy', 'where', 'update', 'remove', 'firstOrCreate'].forEach(function (method) {
                  recordsCopy[method] = function () {
                    return newCollection[method].apply(newCollection, arguments);
                  };
                });

                return recordsCopy;
              }
            });

            _this._collections.push(newCollection);
          })();
        } else if (initialData) {
          this[name].insert(initialData);
        }

        return this;
      }

      /**
       * @method createCollections
       * @param ...collections
       * @public
       */
    }, {
      key: 'createCollections',
      value: function createCollections() {
        var _this2 = this;

        for (var _len = arguments.length, collections = Array(_len), _key = 0; _key < _len; _key++) {
          collections[_key] = arguments[_key];
        }

        collections.forEach(function (c) {
          return _this2.createCollection(c);
        });
      }

      /**
       * @method emptyData
       * @public
       */
    }, {
      key: 'emptyData',
      value: function emptyData() {
        this._collections.forEach(function (c) {
          return c.remove();
        });
      }
    }]);

    return Db;
  })();

  exports['default'] = Db;
});
define('ember-cli-mirage/factory', ['exports', 'lodash/object/assign', 'lodash/lang/isFunction', 'lodash/object/mapValues', 'ember-cli-mirage/utils/reference-sort', 'lodash/lang/isPlainObject'], function (exports, _lodashObjectAssign, _lodashLangIsFunction, _lodashObjectMapValues, _emberCliMirageUtilsReferenceSort, _lodashLangIsPlainObject) {
  'use strict';

  var Factory = function Factory() {
    this.build = function (sequence) {
      var _this = this;

      var object = {};
      var topLevelAttrs = (0, _lodashObjectAssign['default'])({}, this.attrs);
      delete topLevelAttrs.afterCreate;
      Object.keys(topLevelAttrs).forEach(function (attr) {
        if (Factory.isTrait.call(_this, attr)) {
          delete topLevelAttrs[attr];
        }
      });
      var keys = sortAttrs(topLevelAttrs, sequence);

      keys.forEach(function (key) {
        var buildAttrs = undefined;
        var buildSingleValue = undefined;

        buildAttrs = function (attrs) {
          return (0, _lodashObjectMapValues['default'])(attrs, buildSingleValue);
        };

        buildSingleValue = function (value) {
          if (Array.isArray(value)) {
            return value.map(buildSingleValue);
          } else if ((0, _lodashLangIsPlainObject['default'])(value)) {
            return buildAttrs(value);
          } else if ((0, _lodashLangIsFunction['default'])(value)) {
            return value.call(topLevelAttrs, sequence);
          } else {
            return value;
          }
        };

        var value = topLevelAttrs[key];
        if ((0, _lodashLangIsFunction['default'])(value)) {
          object[key] = value.call(object, sequence);
        } else {
          object[key] = buildSingleValue(value);
        }
      });

      return object;
    };
  };

  Factory.extend = function (attrs) {
    // Merge the new attributes with existing ones. If conflict, new ones win.
    var newAttrs = (0, _lodashObjectAssign['default'])({}, this.attrs, attrs);

    var Subclass = function Subclass() {
      this.attrs = newAttrs;
      Factory.call(this);
    };

    // Copy extend
    Subclass.extend = Factory.extend;
    Subclass.extractAfterCreateCallbacks = Factory.extractAfterCreateCallbacks;
    Subclass.isTrait = Factory.isTrait;

    // Store a reference on the class for future subclasses
    Subclass.attrs = newAttrs;

    return Subclass;
  };

  Factory.extractAfterCreateCallbacks = function () {
    var _this2 = this;

    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var traits = _ref.traits;

    var afterCreateCallbacks = [];
    var attrs = this.attrs || {};
    var traitCandidates = undefined;

    if (attrs.afterCreate) {
      afterCreateCallbacks.push(attrs.afterCreate);
    }

    if (Array.isArray(traits)) {
      traitCandidates = traits;
    } else {
      traitCandidates = Object.keys(attrs);
    }

    traitCandidates.filter(function (attr) {
      return _this2.isTrait(attr) && attrs[attr].extension.afterCreate;
    }).forEach(function (attr) {
      afterCreateCallbacks.push(attrs[attr].extension.afterCreate);
    });

    return afterCreateCallbacks;
  };

  Factory.isTrait = function (attrName) {
    var attrs = this.attrs;

    return (0, _lodashLangIsPlainObject['default'])(attrs[attrName]) && attrs[attrName].__isTrait__ === true;
  };

  function sortAttrs(attrs, sequence) {
    var Temp = function Temp() {};
    var obj = new Temp();
    var refs = [];
    var property = undefined;

    Object.keys(attrs).forEach(function (key) {
      Object.defineProperty(obj.constructor.prototype, key, {
        get: function get() {
          refs.push([property, key]);
        },
        enumerable: false,
        configurable: true
      });
    });

    Object.keys(attrs).forEach(function (key) {
      var value = attrs[key];
      property = key;

      if (typeof value === 'function') {
        value.call(obj, sequence);
      }

      refs.push([key]);
    });

    return (0, _emberCliMirageUtilsReferenceSort['default'])(refs);
  }

  exports['default'] = Factory;
});
define("ember-cli-mirage/faker", ["exports"], function (exports) {
  "use strict";

  var list = {
    random: function random() {
      var items = arguments.length > 0 ? arguments : [];

      return function () {
        return faker.random.arrayElement(items);
      };
    },

    cycle: function cycle() {
      var items = arguments.length > 0 ? arguments : [];

      return function (i) {
        return items[i % items.length];
      };
    }
  };

  faker.list = list;

  faker.random.number.range = function (min, max) {
    return function () /* i */{
      return Math.random() * (max - min) + min;
    };
  };

  exports["default"] = faker;
});
define('ember-cli-mirage/index', ['exports', 'ember-cli-mirage/factory', 'ember-cli-mirage/trait', 'ember-cli-mirage/response', 'ember-cli-mirage/faker', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/orm/collection', 'ember-cli-mirage/serializer', 'ember-cli-mirage/serializers/active-model-serializer', 'ember-cli-mirage/serializers/json-api-serializer', 'ember-cli-mirage/serializers/rest-serializer', 'ember-cli-mirage/orm/associations/has-many', 'ember-cli-mirage/orm/associations/belongs-to'], function (exports, _emberCliMirageFactory, _emberCliMirageTrait, _emberCliMirageResponse, _emberCliMirageFaker, _emberCliMirageOrmModel, _emberCliMirageOrmCollection, _emberCliMirageSerializer, _emberCliMirageSerializersActiveModelSerializer, _emberCliMirageSerializersJsonApiSerializer, _emberCliMirageSerializersRestSerializer, _emberCliMirageOrmAssociationsHasMany, _emberCliMirageOrmAssociationsBelongsTo) {
  'use strict';

  var _bind = Function.prototype.bind;

  function hasMany() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new (_bind.apply(_emberCliMirageOrmAssociationsHasMany['default'], [null].concat(args)))();
  }
  function belongsTo() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return new (_bind.apply(_emberCliMirageOrmAssociationsBelongsTo['default'], [null].concat(args)))();
  }

  exports.Factory = _emberCliMirageFactory['default'];
  exports.trait = _emberCliMirageTrait['default'];
  exports.Response = _emberCliMirageResponse['default'];
  exports.faker = _emberCliMirageFaker['default'];
  exports.Model = _emberCliMirageOrmModel['default'];
  exports.Collection = _emberCliMirageOrmCollection['default'];
  exports.Serializer = _emberCliMirageSerializer['default'];
  exports.ActiveModelSerializer = _emberCliMirageSerializersActiveModelSerializer['default'];
  exports.JSONAPISerializer = _emberCliMirageSerializersJsonApiSerializer['default'];
  exports.RestSerializer = _emberCliMirageSerializersRestSerializer['default'];
  exports.hasMany = hasMany;
  exports.belongsTo = belongsTo;
  exports['default'] = {
    Factory: _emberCliMirageFactory['default'],
    Response: _emberCliMirageResponse['default'],
    hasMany: hasMany,
    belongsTo: belongsTo
  };
});
define('ember-cli-mirage/orm/associations/association', ['exports'], function (exports) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var Association = function Association(modelName, opts) {
    _classCallCheck(this, Association);

    if (typeof modelName === 'object') {
      // Received opts only
      this.modelName = undefined;
      this.opts = modelName;
    } else {
      // The modelName of the association
      this.modelName = modelName;
      this.opts = opts || {};
    }

    // The key pointing to the association
    this.key = '';

    // The modelName that owns this association
    this.ownerModelName = '';
  };

  exports['default'] = Association;
});
define('ember-cli-mirage/orm/associations/belongs-to', ['exports', 'ember-cli-mirage/orm/associations/association', 'lodash/object/assign', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/utils/normalize-name', 'ember-cli-mirage/assert'], function (exports, _emberCliMirageOrmAssociationsAssociation, _lodashObjectAssign, _emberCliMirageUtilsInflector, _emberCliMirageUtilsNormalizeName, _emberCliMirageAssert) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  /**
   * @class BelongsTo
   * @extends Association
   * @constructor
   * @public
   */

  var BelongsTo = (function (_Association) {
    _inherits(BelongsTo, _Association);

    function BelongsTo() {
      _classCallCheck(this, BelongsTo);

      _get(Object.getPrototypeOf(BelongsTo.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(BelongsTo, [{
      key: 'getForeignKeyArray',

      /*
        The belongsTo association adds a fk to the owner of the association
      */
      /**
       * @method getForeignKeyArray
       * @return {Array} Array of camelized name of the model owning the association
       * and foreign key for the association
       * @public
       */
      value: function getForeignKeyArray() {
        return [(0, _emberCliMirageUtilsInflector.camelize)(this.ownerModelName), this.getForeignKey()];
      }

      /**
       * @method getForeignKey
       * @return {String} Foreign key for the association
       * @public
       */
    }, {
      key: 'getForeignKey',
      value: function getForeignKey() {
        return (0, _emberCliMirageUtilsInflector.camelize)(this.key) + 'Id';
      }

      /**
       * registers belongs-to association defined by given key on given model,
       * defines getters / setters for associated parent and associated parent's id,
       * adds methods for creating unsaved parent record and creating a saved one
       *
       * @method addMethodsToModelClass
       * @param {Function} ModelClass
       * @param {String} key
       * @param {Schema} schema
       * @public
       */
    }, {
      key: 'addMethodsToModelClass',
      value: function addMethodsToModelClass(ModelClass, key, schema) {
        var modelPrototype = ModelClass.prototype;
        var association = this;
        var foreignKey = this.getForeignKey();

        var associationHash = {};
        associationHash[key] = this;
        modelPrototype.belongsToAssociations = (0, _lodashObjectAssign['default'])(modelPrototype.belongsToAssociations, associationHash);
        modelPrototype.associationKeys.push(key);
        modelPrototype.associationIdKeys.push(foreignKey);

        Object.defineProperty(modelPrototype, this.getForeignKey(), {

          /*
            object.parentId
              - returns the associated parent's id
          */
          get: function get() {
            return this.attrs[foreignKey];
          },

          /*
            object.parentId = (parentId)
              - sets the associated parent (via id)
          */
          set: function set(id) {
            (0, _emberCliMirageAssert['default'])(!id || schema.db[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].find(id), 'Couldn\'t find ' + association.modelName + ' with id = ' + id);

            this.attrs[foreignKey] = id;
            return this;
          }
        });

        Object.defineProperty(modelPrototype, key, {
          /*
            object.parent
              - returns the associated parent
          */
          get: function get() {
            var foreignKeyId = this[foreignKey];
            if (foreignKeyId != null) {
              association._tempParent = null;
              return schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].find(foreignKeyId);
            } else if (association._tempParent) {
              return association._tempParent;
            } else {
              return null;
            }
          },

          /*
            object.parent = (parentModel)
              - sets the associated parent (via model)
          */
          set: function set(newModel) {
            if (newModel && newModel.isNew()) {
              this[foreignKey] = null;
              association._tempParent = newModel;
            } else if (newModel) {
              association._tempParent = null;
              this[foreignKey] = newModel.id;
            } else {
              association._tempParent = null;
              this[foreignKey] = null;
            }
          }
        });

        /*
          object.newParent
            - creates a new unsaved associated parent
        */
        modelPrototype['new' + (0, _emberCliMirageUtilsInflector.capitalize)(key)] = function (attrs) {
          var parent = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)]['new'](attrs);

          this[key] = parent;

          return parent;
        };

        /*
          object.createParent
            - creates a new saved associated parent, and immediately persists both models
        */
        modelPrototype['create' + (0, _emberCliMirageUtilsInflector.capitalize)(key)] = function (attrs) {
          var parent = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].create(attrs);

          this[key] = parent;
          this.save();

          return parent;
        };
      }
    }]);

    return BelongsTo;
  })(_emberCliMirageOrmAssociationsAssociation['default']);

  exports['default'] = BelongsTo;
});
define('ember-cli-mirage/orm/associations/has-many', ['exports', 'ember-cli-mirage/orm/associations/association', 'ember-cli-mirage/orm/collection', 'lodash/object/assign', 'lodash/array/compact', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/utils/normalize-name', 'ember-cli-mirage/assert'], function (exports, _emberCliMirageOrmAssociationsAssociation, _emberCliMirageOrmCollection, _lodashObjectAssign, _lodashArrayCompact, _emberCliMirageUtilsInflector, _emberCliMirageUtilsNormalizeName, _emberCliMirageAssert) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x3, _x4, _x5) {
    var _again = true;_function: while (_again) {
      var object = _x3,
          property = _x4,
          receiver = _x5;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x3 = parent;_x4 = property;_x5 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  // jscs:disable requireParenthesesAroundArrowParam

  /**
   * @class HasMany
   * @extends Association
   * @constructor
   * @public
   */

  var HasMany = (function (_Association) {
    _inherits(HasMany, _Association);

    function HasMany() {
      _classCallCheck(this, HasMany);

      _get(Object.getPrototypeOf(HasMany.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(HasMany, [{
      key: 'getForeignKeyArray',

      /**
       * @method getForeignKeyArray
       * @return {Array} Array of camelized model name of associated objects
       * and foreign key for the object owning the association
       * @public
       */
      value: function getForeignKeyArray() {
        return [(0, _emberCliMirageUtilsInflector.camelize)(this.modelName), this.getForeignKey()];
      }

      /**
       * @method getForeignKey
       * @return {String} Foreign key for the object owning the association
       * @public
       */
    }, {
      key: 'getForeignKey',
      value: function getForeignKey() {
        return (this.opts.inverse || (0, _emberCliMirageUtilsInflector.camelize)(this.ownerModelName)) + 'Id';
      }

      /**
       * Registers has-many association defined by given key on given model,
       * defines getters / setters for associated records and associated records' ids,
       * adds methods for creating unsaved child records and creating saved ones
       *
       * @method addMethodsToModelClass
       * @param {Function} ModelClass
       * @param {String} key
       * @param {Schema} schema
       * @public
       */
    }, {
      key: 'addMethodsToModelClass',
      value: function addMethodsToModelClass(ModelClass, key, schema) {
        var modelPrototype = ModelClass.prototype;
        this._model = modelPrototype;
        this._key = key;

        var association = this;
        var foreignKey = this.getForeignKey();
        var relationshipIdsKey = (0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.singularize)(association.key)) + 'Ids';
        var associationHash = _defineProperty({}, key, this);

        modelPrototype.hasManyAssociations = (0, _lodashObjectAssign['default'])(modelPrototype.hasManyAssociations, associationHash);
        modelPrototype.associationKeys.push(key);
        modelPrototype.associationIdKeys.push(relationshipIdsKey);

        Object.defineProperty(modelPrototype, relationshipIdsKey, {

          /*
            object.childrenIds
              - returns an array of the associated children's ids
          */
          get: function get() {
            var children = association._cachedChildren || new _emberCliMirageOrmCollection['default'](association.modelName);

            if (!this.isNew()) {
              var query = _defineProperty({}, foreignKey, this.id);
              var savedChildren = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].where(query);

              children.mergeCollection(savedChildren);
            }

            return children.models.map(function (model) {
              return model.id;
            });
          },

          /*
            object.childrenIds = ([childrenIds...])
              - sets the associated parent (via id)
          */
          set: function set(ids) {
            ids = ids || [];

            if (this.isNew()) {
              association._cachedChildren = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].find(ids);
            } else {
              // Set current children's fk to null
              var query = _defineProperty({}, foreignKey, this.id);
              schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].where(query).update(foreignKey, null);

              // Associate the new childrens to this model
              schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].find(ids).update(foreignKey, this.id);

              // Clear out any old cached children
              association._cachedChildren = new _emberCliMirageOrmCollection['default'](association.modelName);
            }

            return this;
          }
        });

        Object.defineProperty(modelPrototype, key, {

          /*
            object.children
              - returns an array of associated children
          */
          get: function get() {
            var temporaryChildren = association._cachedChildren || new _emberCliMirageOrmCollection['default'](association.modelName);

            if (this.isNew()) {
              return temporaryChildren;
            } else {
              var query = _defineProperty({}, foreignKey, this.id);
              var savedChildren = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].where(query);

              return savedChildren.mergeCollection(temporaryChildren);
            }
          },

          /*
            object.children = [model1, model2, ...]
              - sets the associated children (via array of models)
              - note: this method will persist unsaved chidren
                + (why? because rails does)
          */
          set: function set(models) {
            models = models ? (0, _lodashArrayCompact['default'])(models) : [];

            if (this.isNew()) {
              association._cachedChildren = models instanceof _emberCliMirageOrmCollection['default'] ? models : new _emberCliMirageOrmCollection['default'](association.modelName, models);
            } else {

              // Set current children's fk to null
              var query = _defineProperty({}, foreignKey, this.id);
              schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].where(query).update(foreignKey, null);

              // Save any children that are new
              models.filter(function (model) {
                return model.isNew();
              }).forEach(function (model) {
                return model.save();
              });

              // Associate the new children to this model
              schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].find(models.map(function (m) {
                return m.id;
              })).update(foreignKey, this.id);

              // Clear out any old cached children
              association._cachedChildren = new _emberCliMirageOrmCollection['default'](association.modelName);
            }
          }
        });

        /*
          object.newChild
            - creates a new unsaved associated child
        */
        modelPrototype['new' + (0, _emberCliMirageUtilsInflector.capitalize)((0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.singularize)(association.key)))] = function () {
          var attrs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          if (!this.isNew()) {
            attrs = (0, _lodashObjectAssign['default'])(attrs, _defineProperty({}, foreignKey, this.id));
          }

          var child = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)]['new'](attrs);

          association._cachedChildren = association._cachedChildren || new _emberCliMirageOrmCollection['default'](association.modelName);
          association._cachedChildren.models.push(child);

          return child;
        };

        /*
          object.createChild
            - creates an associated child, persists directly to db, and
              updates the association's foreign key
            - parent must be saved
        */
        modelPrototype['create' + (0, _emberCliMirageUtilsInflector.capitalize)((0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.singularize)(association.key)))] = function () {
          var attrs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          (0, _emberCliMirageAssert['default'])(!this.isNew(), 'You cannot call create unless the parent is saved');

          var augmentedAttrs = (0, _lodashObjectAssign['default'])(attrs, _defineProperty({}, foreignKey, this.id));
          var child = schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(association.modelName)].create(augmentedAttrs);

          return child;
        };
      }
    }]);

    return HasMany;
  })(_emberCliMirageOrmAssociationsAssociation['default']);

  exports['default'] = HasMany;
});
define('ember-cli-mirage/orm/collection', ['exports', 'lodash/collection/invoke', 'ember-cli-mirage/assert'], function (exports, _lodashCollectionInvoke, _emberCliMirageAssert) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  /**
   * An array of models, returned from one of the schema query
   * methods (all, find, where). Knows how to update and destroy its models.
   * @class Collection
   * @constructor
   * @public
   */

  var Collection = (function () {
    function Collection(modelName) {
      var models = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      _classCallCheck(this, Collection);

      (0, _emberCliMirageAssert['default'])(modelName && typeof modelName === 'string', 'You must pass a `modelName` into a Collection');

      this.modelName = modelName;
      this.models = models;
    }

    /**
     * Updates each model in the collection (persisting immediately to the db).
     * @method update
     * @param key
     * @param val
     * @return this
     * @public
     */

    _createClass(Collection, [{
      key: 'update',
      value: function update() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _lodashCollectionInvoke['default'].apply(undefined, [this.models, 'update'].concat(args));

        return this;
      }

      /**
       * Destroys the db record for all models in the collection.
       * @method destroy
       * @return this
       * @public
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        (0, _lodashCollectionInvoke['default'])(this.models, 'destroy');

        return this;
      }

      /**
       * Saves all models in the collection.
       * @method save
       * @return this
       * @public
       */
    }, {
      key: 'save',
      value: function save() {
        (0, _lodashCollectionInvoke['default'])(this.models, 'save');

        return this;
      }

      /**
       * Reloads each model in the collection.
       * @method reload
       * @return this
       * @public
       */
    }, {
      key: 'reload',
      value: function reload() {
        (0, _lodashCollectionInvoke['default'])(this.models, 'reload');

        return this;
      }

      /**
       * @method filter
       * @param f
       * @return {Collection}
       * @public
       */
    }, {
      key: 'filter',
      value: function filter(f) {
        var filteredModels = this.models.filter(f);

        return new Collection(this.modelName, filteredModels);
      }

      /**
       * @method sort
       * @param f
       * @return {Collection}
       * @public
       */
    }, {
      key: 'sort',
      value: function sort(f) {
        var sortedModels = this.models.concat().sort(f);

        return new Collection(this.modelName, sortedModels);
      }

      /**
       * @method mergeCollection
       * @param collection
       * @return this
       * @public
       */
    }, {
      key: 'mergeCollection',
      value: function mergeCollection(collection) {
        this.models = this.models.concat(collection.models);

        return this;
      }

      /**
       * Simple string representation of the collection and id.
       * @method toString
       * @return {String}
       * @public
       */
    }, {
      key: 'toString',
      value: function toString() {
        return 'collection:' + this.modelName + '(' + this.models.map(function (m) {
          return m.id;
        }).join(',') + ')';
      }
    }]);

    return Collection;
  })();

  exports['default'] = Collection;
});
define('ember-cli-mirage/orm/model', ['exports', 'ember-cli-mirage/utils/normalize-name', 'ember-cli-mirage/utils/extend', 'ember-cli-mirage/assert', 'ember-cli-mirage/orm/collection'], function (exports, _emberCliMirageUtilsNormalizeName, _emberCliMirageUtilsExtend, _emberCliMirageAssert, _emberCliMirageOrmCollection) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  // jscs:disable requireParenthesesAroundArrowParam

  /*
    The Model class. Notes:
  
    - We need to pass in modelName, because models are created with
      .extend and anonymous functions, so you cannot use
      reflection to find the name of the constructor.
  */

  /*
    Constructor
  */

  var Model = (function () {
    function Model(schema, modelName, attrs, fks) {
      _classCallCheck(this, Model);

      (0, _emberCliMirageAssert['default'])(schema, 'A model requires a schema');
      (0, _emberCliMirageAssert['default'])(modelName, 'A model requires a modelName');

      this._schema = schema;
      this.modelName = modelName;
      this.fks = fks || [];
      attrs = attrs || {};

      this._setupAttrs(attrs);
      this._setupRelationships(attrs);

      return this;
    }

    /**
     * Creates or saves the model.
     * @method save
     * @return this
     * @public
     */

    _createClass(Model, [{
      key: 'save',
      value: function save() {
        var collection = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(this.modelName);

        if (this.isNew()) {
          // Update the attrs with the db response
          this.attrs = this._schema.db[collection].insert(this.attrs);

          // Ensure the id getter/setter is set
          this._definePlainAttribute('id');
        } else {
          this._schema.db[collection].update(this.attrs.id, this.attrs);
        }

        // Update associated children
        this._saveAssociations();

        return this;
      }

      /**
       * Update the record in the db.
       * @method update
       * @param {String} key
       * @param {String} val
       * @return this
       * @public
       */
    }, {
      key: 'update',
      value: function update(key, val) {
        var attrs = undefined;
        if (key == null) {
          return this;
        }

        if (typeof key === 'object') {
          attrs = key;
        } else {
          (attrs = {})[key] = val;
        }

        Object.keys(attrs).forEach(function (attr) {
          this._definePlainAttribute(attr);
          this[attr] = attrs[attr];
        }, this);

        this.save();

        return this;
      }

      /**
       * Destroys the db record
       * @method destroy
       * @public
       */
    }, {
      key: 'destroy',
      value: function destroy() {
        var collection = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(this.modelName);
        this._schema.db[collection].remove(this.attrs.id);
      }

      /**
       * Boolean, true if the model has not been persisted yet to the db.
       *
       * Originally this method simply checked if the model had an id; however,
       * we let people create models with pre-specified ids. So, we have to
       * check whether the record is in the actual databse or not.
       *
       * @method isNew
       * @return {Boolean}
       * @public
       */
    }, {
      key: 'isNew',
      value: function isNew() {
        var hasDbRecord = false;
        var hasId = this.attrs.id !== undefined && this.attrs.id !== null;

        if (hasId) {
          var collectionName = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(this.modelName);
          var record = this._schema.db[collectionName].find(this.attrs.id);
          if (record) {
            hasDbRecord = true;
          }
        }

        return !hasDbRecord;
      }

      /**
       * Boolean, opposite of `isNew`
       * @method isSaved
       * @return {Boolean}
       * @public
       */
    }, {
      key: 'isSaved',
      value: function isSaved() {
        return !this.isNew();
      }

      /**
       * Reload a model’s data from the database.
       * @method reload
       * @return this
       * @public
       */
    }, {
      key: 'reload',
      value: function reload() {
        var collection = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(this.modelName);
        var attrs = this._schema.db[collection].find(this.id);

        Object.keys(attrs).filter(function (attr) {
          return attr !== 'id';
        }).forEach(function (attr) {
          this[attr] = attrs[attr];
        }, this);

        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.attrs;
      }

      // Private

      /**
       * model.attrs represents the persistable attributes, i.e. your db
       * table fields.
       * @method _setupAttrs
       * @param attrs
       * @private
       */
    }, {
      key: '_setupAttrs',
      value: function _setupAttrs(attrs) {
        var _this = this;

        // Verify no undefined associations are passed in
        Object.keys(attrs).filter(function (key) {
          var value = attrs[key];
          return value instanceof Model || value instanceof _emberCliMirageOrmCollection['default'];
        }).forEach(function (key) {
          var modelOrCollection = attrs[key];

          (0, _emberCliMirageAssert['default'])(_this.associationKeys.indexOf(key) > -1, 'You\'re trying to create a ' + _this.modelName + ' model and you passed in a ' + modelOrCollection.toString() + ' under the ' + key + ' key, but you haven\'t defined that key as an association on your model.');
        });

        // Filter out association keys
        var hash = Object.keys(attrs).reduce(function (memo, key) {
          if (_this.associationKeys.indexOf(key) === -1 && _this.associationIdKeys.indexOf(key) === -1) {
            memo[key] = attrs[key];
          }
          return memo;
        }, {});

        // Ensure fks are there
        this.fks.map(function (fk) {
          hash[fk] = attrs[fk] || null;
        });

        this.attrs = hash;

        // define plain getter/setters for non-association keys
        Object.keys(hash).forEach(function (attr) {
          if (this.associationKeys.indexOf(attr) === -1 && this.associationIdKeys.indexOf(attr) === -1) {
            this._definePlainAttribute(attr);
          }
        }, this);
      }

      /**
       * Define getter/setter for a plain attribute
       * @method _definePlainAttribute
       * @param attr
       * @private
       */
    }, {
      key: '_definePlainAttribute',
      value: function _definePlainAttribute(attr) {

        // Ensure the property hasn't already been defined
        var existingProperty = Object.getOwnPropertyDescriptor(this, attr);
        if (existingProperty && existingProperty.get) {
          return;
        }

        // Ensure the attribute is on the attrs hash
        if (!this.attrs.hasOwnProperty(attr)) {
          this.attrs[attr] = null;
        }

        // Define the getter/setter
        Object.defineProperty(this, attr, {
          get: function get() {
            return this.attrs[attr];
          },
          set: function set(val) {
            this.attrs[attr] = val;return this;
          }
        });
      }

      /**
       * @method _setupRelationships
       * @param attrs
       * @private
       */
    }, {
      key: '_setupRelationships',
      value: function _setupRelationships(attrs) {
        var _this2 = this;

        // Only want association keys and fks
        var hash = Object.keys(attrs).reduce(function (memo, attr) {
          if (_this2.associationKeys.indexOf(attr) > -1 || _this2.associationIdKeys.indexOf(attr) > -1 || _this2.fks.indexOf(attr) > -1) {
            memo[attr] = attrs[attr];
          }
          return memo;
        }, {});

        Object.keys(hash).forEach(function (attr) {
          this[attr] = hash[attr];
        }, this);
      }

      /**
       * Update associated children when saving a collection
       * @method _saveAssociations
       * @private
       */
    }, {
      key: '_saveAssociations',
      value: function _saveAssociations() {
        var _this3 = this;

        Object.keys(this.belongsToAssociations).forEach(function (key) {
          var association = _this3.belongsToAssociations[key];
          var parent = _this3[key];
          if (parent && parent.isNew()) {
            var fk = association.getForeignKey();
            parent.save();
            _this3.update(fk, parent.id);
          }
        });

        Object.keys(this.hasManyAssociations).forEach(function (key) {
          var association = _this3.hasManyAssociations[key];
          var children = _this3[key];
          children.update(association.getForeignKey(), _this3.id);
        });
      }

      /**
       * Simple string representation of the model and id.
       * @method toString
       * @return {String}
       * @public
       */
    }, {
      key: 'toString',
      value: function toString() {
        return 'model:' + this.modelName + '(' + this.id + ')';
      }
    }]);

    return Model;
  })();

  Model.extend = _emberCliMirageUtilsExtend['default'];

  exports['default'] = Model;
});
define('ember-cli-mirage/orm/schema', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/utils/normalize-name', 'ember-cli-mirage/orm/associations/association', 'ember-cli-mirage/orm/collection', 'lodash/object/forIn', 'lodash/collection/includes', 'ember-cli-mirage/assert'], function (exports, _emberCliMirageUtilsInflector, _emberCliMirageUtilsNormalizeName, _emberCliMirageOrmAssociationsAssociation, _emberCliMirageOrmCollection, _lodashObjectForIn, _lodashCollectionIncludes, _emberCliMirageAssert) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  /**
   * @class Schema
   * @constructor
   * @public
   */

  var Schema = (function () {
    function Schema(db) {
      var modelsMap = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _classCallCheck(this, Schema);

      (0, _emberCliMirageAssert['default'])(db, 'A schema requires a db');

      this.db = db;
      this._registry = {};
      this.registerModels(modelsMap);
    }

    /**
     * @method registerModels
     * @param hash
     * @public
     */

    _createClass(Schema, [{
      key: 'registerModels',
      value: function registerModels() {
        var _this = this;

        var hash = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        (0, _lodashObjectForIn['default'])(hash, function (model, key) {
          _this.registerModel(key, hash[key]);
        });
      }

      /**
       * @method registerModel
       * @param type
       * @param ModelClass
       * @public
       */
    }, {
      key: 'registerModel',
      value: function registerModel(type, ModelClass) {
        var _this2 = this;

        var camelizedModelName = (0, _emberCliMirageUtilsInflector.camelize)(type);
        var modelName = (0, _emberCliMirageUtilsInflector.dasherize)(camelizedModelName);

        // Avoid mutating original class, because we may want to reuse it across many tests
        ModelClass = ModelClass.extend();

        // Store model & fks in registry
        this._registry[camelizedModelName] = this._registry[camelizedModelName] || { 'class': null, foreignKeys: [] }; // we may have created this key before, if another model added fks to it
        this._registry[camelizedModelName]['class'] = ModelClass;

        // Set up associations
        ModelClass.prototype.hasManyAssociations = {}; // a registry of the model's hasMany associations. Key is key from model definition, value is association instance itself
        ModelClass.prototype.belongsToAssociations = {}; // a registry of the model's belongsTo associations. Key is key from model definition, value is association instance itself
        ModelClass.prototype.associationKeys = []; // ex: address.user, user.addresses
        ModelClass.prototype.associationIdKeys = []; // ex: address.user_id, user.address_ids. may or may not be a fk.

        var fksAddedFromThisModel = {};
        for (var associationProperty in ModelClass.prototype) {
          if (ModelClass.prototype[associationProperty] instanceof _emberCliMirageOrmAssociationsAssociation['default']) {
            var association = ModelClass.prototype[associationProperty];
            association.key = associationProperty;
            association.modelName = association.modelName || (0, _emberCliMirageUtilsNormalizeName.toModelName)(associationProperty);
            association.ownerModelName = modelName;

            // Update the registry with this association's foreign keys. This is
            // essentially our "db migration", since we must know about the fks.

            var _association$getForeignKeyArray = association.getForeignKeyArray();

            var _association$getForeignKeyArray2 = _slicedToArray(_association$getForeignKeyArray, 2);

            var fkHolder = _association$getForeignKeyArray2[0];
            var fk = _association$getForeignKeyArray2[1];

            fksAddedFromThisModel[fkHolder] = fksAddedFromThisModel[fkHolder] || [];
            (0, _emberCliMirageAssert['default'])(!(0, _lodashCollectionIncludes['default'])(fksAddedFromThisModel[fkHolder], fk), 'Your \'' + type + '\' model definition has multiple possible inverse relationships of type \'' + fkHolder + '\'.\n\n          Please read the associations guide and specify explicit inverses: http://www.ember-cli-mirage.com/docs/v0.2.x/models/#associations');
            fksAddedFromThisModel[fkHolder].push(fk);

            this._addForeignKeyToRegistry(fkHolder, fk);

            // Augment the Model's class with any methods added by this association
            association.addMethodsToModelClass(ModelClass, associationProperty, this);
          }
        }

        // Create a db collection for this model, if doesn't exist
        var collection = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(modelName);
        if (!this.db[collection]) {
          this.db.createCollection(collection);
        }

        // Create the entity methods
        this[collection] = {
          camelizedModelName: camelizedModelName,
          'new': function _new(attrs) {
            return _this2['new'](camelizedModelName, attrs);
          },
          create: function create(attrs) {
            return _this2.create(camelizedModelName, attrs);
          },
          all: function all(attrs) {
            return _this2.all(camelizedModelName, attrs);
          },
          find: function find(attrs) {
            return _this2.find(camelizedModelName, attrs);
          },
          findBy: function findBy(attrs) {
            return _this2.findBy(camelizedModelName, attrs);
          },
          where: function where(attrs) {
            return _this2.where(camelizedModelName, attrs);
          },
          first: function first(attrs) {
            return _this2.first(camelizedModelName, attrs);
          }
        };

        return this;
      }

      /**
       * @method new
       * @param type
       * @param attrs
       * @public
       */
    }, {
      key: 'new',
      value: function _new(type, attrs) {
        return this._instantiateModel((0, _emberCliMirageUtilsInflector.dasherize)(type), attrs);
      }

      /**
       * @method create
       * @param type
       * @param attrs
       * @public
       */
    }, {
      key: 'create',
      value: function create(type, attrs) {
        return this['new'](type, attrs).save();
      }

      /**
       * @method all
       * @param type
       * @public
       */
    }, {
      key: 'all',
      value: function all(type) {
        var collection = this._collectionForType(type);

        return this._hydrate(collection, (0, _emberCliMirageUtilsInflector.dasherize)(type));
      }

      /**
       * @method find
       * @param type
       * @param ids
       * @public
       */
    }, {
      key: 'find',
      value: function find(type, ids) {
        var collection = this._collectionForType(type);
        var records = collection.find(ids);

        if (Array.isArray(ids)) {
          (0, _emberCliMirageAssert['default'])(records.length === ids.length, 'Couldn\'t find all ' + (0, _emberCliMirageUtilsInflector.pluralize)(type) + ' with ids: (' + ids.join(',') + ') (found ' + records.length + ' results, but was looking for ' + ids.length + ')');
        }

        return this._hydrate(records, (0, _emberCliMirageUtilsInflector.dasherize)(type));
      }

      /**
       * @method findBy
       * @param type
       * @param attributeName
       * @public
       */
    }, {
      key: 'findBy',
      value: function findBy(type, query) {
        var collection = this._collectionForType(type);
        var records = collection.findBy(query);

        return this._hydrate(records, (0, _emberCliMirageUtilsInflector.dasherize)(type));
      }

      /**
       * @method where
       * @param type
       * @param query
       * @public
       */
    }, {
      key: 'where',
      value: function where(type, query) {
        var collection = this._collectionForType(type);
        var records = collection.where(query);

        return this._hydrate(records, (0, _emberCliMirageUtilsInflector.dasherize)(type));
      }

      /**
       * @method first
       * @param type
       * @public
       */
    }, {
      key: 'first',
      value: function first(type) {
        var collection = this._collectionForType(type);

        var _collection = _slicedToArray(collection, 1);

        var record = _collection[0];

        return this._hydrate(record, (0, _emberCliMirageUtilsInflector.dasherize)(type));
      }

      /*
        Private methods
      */

      /**
       * @method _collectionForType
       * @param type
       * @private
       */
    }, {
      key: '_collectionForType',
      value: function _collectionForType(type) {
        var collection = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(type);
        (0, _emberCliMirageAssert['default'])(this.db[collection], 'You\'re trying to find model(s) of type ' + type + ' but this collection doesn\'t exist in the database.');

        return this.db[collection];
      }

      /**
       * @method _addForeignKeyToRegistry
       * @param type
       * @param fk
       * @private
       */
    }, {
      key: '_addForeignKeyToRegistry',
      value: function _addForeignKeyToRegistry(type, fk) {
        this._registry[type] = this._registry[type] || { 'class': null, foreignKeys: [] };

        var fks = this._registry[type].foreignKeys;
        if (!(0, _lodashCollectionIncludes['default'])(fks, fk)) {
          fks.push(fk);
        }
      }

      /**
       * @method _instantiateModel
       * @param modelName
       * @param attrs
       * @private
       */
    }, {
      key: '_instantiateModel',
      value: function _instantiateModel(modelName, attrs) {
        var ModelClass = this._modelFor(modelName);
        var fks = this._foreignKeysFor(modelName);

        return new ModelClass(this, modelName, attrs, fks);
      }

      /**
       * @method _modelFor
       * @param modelName
       * @private
       */
    }, {
      key: '_modelFor',
      value: function _modelFor(modelName) {
        return this._registry[(0, _emberCliMirageUtilsInflector.camelize)(modelName)]['class'];
      }

      /**
       * @method _foreignKeysFor
       * @param modelName
       * @private
       */
    }, {
      key: '_foreignKeysFor',
      value: function _foreignKeysFor(modelName) {
        return this._registry[(0, _emberCliMirageUtilsInflector.camelize)(modelName)].foreignKeys;
      }

      /**
       * Takes a record and returns a model, or an array of records
       * and returns a collection.
       * @method _hydrate
       * @param records
       * @param modelName
       * @private
       */
    }, {
      key: '_hydrate',
      value: function _hydrate(records, modelName) {
        if (Array.isArray(records)) {
          var models = records.map(function (record) {
            return this._instantiateModel(modelName, record);
          }, this);
          return new _emberCliMirageOrmCollection['default'](modelName, models);
        } else if (records) {
          return this._instantiateModel(modelName, records);
        } else {
          return null;
        }
      }
    }]);

    return Schema;
  })();

  exports['default'] = Schema;
});
define('ember-cli-mirage/response', ['exports'], function (exports) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var Response = (function () {
    function Response(code) {
      var headers = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var data = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      _classCallCheck(this, Response);

      this.code = code;
      this.headers = headers;
      this.data = data;
    }

    _createClass(Response, [{
      key: 'toRackResponse',
      value: function toRackResponse() {
        var headers = this.headers;

        if (!headers.hasOwnProperty('Content-Type')) {
          headers['Content-Type'] = 'application/json';
        }

        return [this.code, this.headers, this.data];
      }
    }]);

    return Response;
  })();

  exports['default'] = Response;
});
define('ember-cli-mirage/route-handler', ['exports', 'ember', 'ember-cli-mirage/assert', 'ember-cli-mirage/response', 'ember-cli-mirage/route-handlers/function', 'ember-cli-mirage/route-handlers/object', 'ember-cli-mirage/route-handlers/shorthands/get', 'ember-cli-mirage/route-handlers/shorthands/post', 'ember-cli-mirage/route-handlers/shorthands/put', 'ember-cli-mirage/route-handlers/shorthands/delete', 'ember-cli-mirage/route-handlers/shorthands/head'], function (exports, _ember, _emberCliMirageAssert, _emberCliMirageResponse, _emberCliMirageRouteHandlersFunction, _emberCliMirageRouteHandlersObject, _emberCliMirageRouteHandlersShorthandsGet, _emberCliMirageRouteHandlersShorthandsPost, _emberCliMirageRouteHandlersShorthandsPut, _emberCliMirageRouteHandlersShorthandsDelete, _emberCliMirageRouteHandlersShorthandsHead) {
  'use strict';

  var _bind = Function.prototype.bind;

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var Promise = _ember['default'].RSVP.Promise;
  var isBlank = _ember['default'].isBlank;
  var typeOf = _ember['default'].typeOf;

  function isNotBlankResponse(response) {
    return response && !(typeOf(response) === 'object' && Object.keys(response).length === 0) && (Array.isArray(response) || !isBlank(response));
  }

  var DEFAULT_CODES = { get: 200, put: 204, post: 201, 'delete': 204 };

  function createHandler(_ref) {
    var verb = _ref.verb;
    var schema = _ref.schema;
    var serializerOrRegistry = _ref.serializerOrRegistry;
    var path = _ref.path;
    var rawHandler = _ref.rawHandler;
    var options = _ref.options;

    var handler = undefined;
    var args = [schema, serializerOrRegistry, rawHandler, path, options];
    var type = typeOf(rawHandler);

    if (type === 'function') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersFunction['default'], [null].concat(args)))();
    } else if (type === 'object') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersObject['default'], [null].concat(args)))();
    } else if (verb === 'get') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersShorthandsGet['default'], [null].concat(args)))();
    } else if (verb === 'post') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersShorthandsPost['default'], [null].concat(args)))();
    } else if (verb === 'put' || verb === 'patch') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersShorthandsPut['default'], [null].concat(args)))();
    } else if (verb === 'delete') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersShorthandsDelete['default'], [null].concat(args)))();
    } else if (verb === 'head') {
      handler = new (_bind.apply(_emberCliMirageRouteHandlersShorthandsHead['default'], [null].concat(args)))();
    }
    return handler;
  }

  var RouteHandler = (function () {
    function RouteHandler(_ref2) {
      var schema = _ref2.schema;
      var verb = _ref2.verb;
      var rawHandler = _ref2.rawHandler;
      var customizedCode = _ref2.customizedCode;
      var options = _ref2.options;
      var path = _ref2.path;
      var serializerOrRegistry = _ref2.serializerOrRegistry;

      _classCallCheck(this, RouteHandler);

      this.verb = verb;
      this.customizedCode = customizedCode;
      this.serializerOrRegistry = serializerOrRegistry;
      this.handler = createHandler({ verb: verb, schema: schema, path: path, serializerOrRegistry: serializerOrRegistry, rawHandler: rawHandler, options: options });
    }

    _createClass(RouteHandler, [{
      key: 'handle',
      value: function handle(request) {
        var _this = this;

        return new Promise(function (resolve) {
          _this._getMirageResponseForRequest(request).then(function (mirageResponse) {
            _this.serialize(mirageResponse, request).then(function (serializedMirageResponse) {
              resolve(serializedMirageResponse.toRackResponse());
            });
          });
        });
      }
    }, {
      key: '_getMirageResponseForRequest',
      value: function _getMirageResponseForRequest(request) {
        var result = undefined;
        try {
          /*
           We need to do this for the #serialize convenience method. Probably is
           a better way.
          */
          if (this.handler instanceof _emberCliMirageRouteHandlersFunction['default']) {
            this.handler.setRequest(request);
          }

          result = this.handler.handle(request);
        } catch (e) {
          if (e instanceof _emberCliMirageAssert.MirageError) {
            throw e;
          } else {
            var message = typeOf(e) === 'string' ? e : e.message;
            throw new _emberCliMirageAssert.MirageError('Your handler for the url ' + request.url + ' threw an error: ' + message);
          }
        }

        return this._toMirageResponse(result);
      }
    }, {
      key: '_toMirageResponse',
      value: function _toMirageResponse(result) {
        var _this2 = this;

        var mirageResponse = undefined;

        return new Promise(function (resolve) {
          Promise.resolve(result).then(function (response) {
            if (response instanceof _emberCliMirageResponse['default']) {
              mirageResponse = result;
            } else {
              var code = _this2._getCodeForResponse(response);
              mirageResponse = new _emberCliMirageResponse['default'](code, {}, response);
            }
            resolve(mirageResponse);
          });
        });
      }
    }, {
      key: '_getCodeForResponse',
      value: function _getCodeForResponse(response) {
        var code = undefined;
        if (this.customizedCode) {
          code = this.customizedCode;
        } else {
          code = DEFAULT_CODES[this.verb];
          if (code === 204 && isNotBlankResponse(response)) {
            code = 200;
          }
        }
        return code;
      }
    }, {
      key: 'serialize',
      value: function serialize(mirageResponsePromise, request) {
        var _this3 = this;

        return new Promise(function (resolve) {
          Promise.resolve(mirageResponsePromise).then(function (mirageResponse) {
            mirageResponse.data = _this3.serializerOrRegistry.serialize(mirageResponse.data, request);
            resolve(mirageResponse);
          });
        });
      }
    }]);

    return RouteHandler;
  })();

  exports['default'] = RouteHandler;
});
define('ember-cli-mirage/route-handlers/base', ['exports', 'ember-cli-mirage/assert', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageAssert, _emberCliMirageUtilsInflector) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var BaseRouteHandler = (function () {
    function BaseRouteHandler() {
      _classCallCheck(this, BaseRouteHandler);
    }

    _createClass(BaseRouteHandler, [{
      key: 'getModelClassFromPath',
      value: function getModelClassFromPath(fullPath) {
        if (!fullPath) {
          return;
        }
        var path = fullPath.split('/');
        var lastPath = undefined;
        while (path.length > 0) {
          lastPath = path.splice(-1)[0];
          if (lastPath && lastPath !== ':id') {
            break;
          }
        }
        var modelName = (0, _emberCliMirageUtilsInflector.dasherize)((0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.singularize)(lastPath)));
        return modelName;
      }
    }, {
      key: '_getIdForRequest',
      value: function _getIdForRequest(request, jsonApiDoc) {
        var id = undefined;
        if (request && request.params && request.params.id) {
          id = request.params.id;
        } else if (jsonApiDoc && jsonApiDoc.data && jsonApiDoc.data.id) {
          id = jsonApiDoc.data.id;
        }
        return id;
      }
    }, {
      key: '_getJsonApiDocForRequest',
      value: function _getJsonApiDocForRequest(request, modelName) {
        var body = undefined;
        if (request && request.requestBody) {
          body = JSON.parse(request.requestBody);
        }
        return this.serializerOrRegistry.normalize(body, modelName);
      }
    }, {
      key: '_getAttrsForRequest',
      value: function _getAttrsForRequest(request, modelName) {
        var json = this._getJsonApiDocForRequest(request, modelName);
        var id = this._getIdForRequest(request, json);
        var attrs = {};

        (0, _emberCliMirageAssert['default'])(json.data && (json.data.attributes || json.data.relationships), 'You\'re using a shorthand or #normalizedRequestAttrs, but your serializer\'s normalize function did not return a valid JSON:API document. http://www.ember-cli-mirage.com/docs/v0.2.x/serializers/#normalizejson');

        if (json.data.attributes) {
          attrs = Object.keys(json.data.attributes).reduce(function (sum, key) {
            sum[(0, _emberCliMirageUtilsInflector.camelize)(key)] = json.data.attributes[key];
            return sum;
          }, {});
        }

        if (json.data.relationships) {
          Object.keys(json.data.relationships).forEach(function (key) {
            var relationship = json.data.relationships[key];

            if (!Array.isArray(relationship.data)) {
              attrs[(0, _emberCliMirageUtilsInflector.camelize)(key) + 'Id'] = relationship.data && relationship.data.id;
            }
          }, {});
        }

        if (id) {
          attrs.id = id;
        }

        return attrs;
      }
    }]);

    return BaseRouteHandler;
  })();

  exports['default'] = BaseRouteHandler;
});
define('ember-cli-mirage/route-handlers/function', ['exports', 'ember-cli-mirage/route-handlers/base'], function (exports, _emberCliMirageRouteHandlersBase) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var FunctionRouteHandler = (function (_BaseRouteHandler) {
    _inherits(FunctionRouteHandler, _BaseRouteHandler);

    function FunctionRouteHandler(schema, serializerOrRegistry, userFunction) {
      _classCallCheck(this, FunctionRouteHandler);

      _get(Object.getPrototypeOf(FunctionRouteHandler.prototype), 'constructor', this).call(this);
      this.schema = schema;
      this.serializerOrRegistry = serializerOrRegistry;
      this.userFunction = userFunction;
    }

    _createClass(FunctionRouteHandler, [{
      key: 'handle',
      value: function handle(request) {
        return this.userFunction(this.schema, request);
      }
    }, {
      key: 'setRequest',
      value: function setRequest(request) {
        this.request = request;
      }
    }, {
      key: 'serialize',
      value: function serialize(response, serializerType) {
        var serializer = undefined;

        if (serializerType) {
          serializer = this.serializerOrRegistry.serializerFor(serializerType, { explicit: true });
        } else {
          serializer = this.serializerOrRegistry;
        }

        return serializer.serialize(response, this.request);
      }
    }, {
      key: 'normalizedRequestAttrs',
      value: function normalizedRequestAttrs() {
        var modelName = this.getModelClassFromPath(this.request.url);

        return this._getAttrsForRequest(this.request, modelName);
      }
    }]);

    return FunctionRouteHandler;
  })(_emberCliMirageRouteHandlersBase['default']);

  exports['default'] = FunctionRouteHandler;
});
define("ember-cli-mirage/route-handlers/object", ["exports"], function (exports) {
  "use strict";

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ObjectRouteHandler = (function () {
    function ObjectRouteHandler(schema, serializerOrRegistry, object) {
      _classCallCheck(this, ObjectRouteHandler);

      this.schema = schema;
      this.serializerOrRegistry = serializerOrRegistry;
      this.object = object;
    }

    _createClass(ObjectRouteHandler, [{
      key: "handle",
      value: function handle() /* request */{
        return this.object;
      }
    }]);

    return ObjectRouteHandler;
  })();

  exports["default"] = ObjectRouteHandler;
});
define('ember-cli-mirage/route-handlers/shorthands/base', ['exports', 'ember-cli-mirage/utils/normalize-name', 'ember-cli-mirage/route-handlers/base'], function (exports, _emberCliMirageUtilsNormalizeName, _emberCliMirageRouteHandlersBase) {
  'use strict';

  var _get = function get(_x2, _x3, _x4) {
    var _again = true;_function: while (_again) {
      var object = _x2,
          property = _x3,
          receiver = _x4;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x2 = parent;_x3 = property;_x4 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var BaseShorthandRouteHandler = (function (_BaseRouteHandler) {
    _inherits(BaseShorthandRouteHandler, _BaseRouteHandler);

    function BaseShorthandRouteHandler(schema, serializerOrRegistry, shorthand, path) {
      var _this = this;

      var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

      _classCallCheck(this, BaseShorthandRouteHandler);

      _get(Object.getPrototypeOf(BaseShorthandRouteHandler.prototype), 'constructor', this).call(this);
      shorthand = shorthand || this.getModelClassFromPath(path);
      this.schema = schema;
      this.serializerOrRegistry = serializerOrRegistry;
      this.shorthand = shorthand;
      this.options = options;

      var type = Array.isArray(shorthand) ? 'array' : typeof shorthand;
      if (type === 'string') {
        (function () {
          var modelClass = _this.schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(shorthand)];
          _this.handle = function (request) {
            return _this.handleStringShorthand(request, modelClass);
          };
        })();
      } else if (type === 'array') {
        (function () {
          var modelClasses = shorthand.map(function (modelName) {
            return _this.schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(modelName)];
          });
          _this.handle = function (request) {
            return _this.handleArrayShorthand(request, modelClasses);
          };
        })();
      }
    }

    // handleStringShorthand() {
    //
    // }
    //
    // handleArrayShorthand() {
    //
    // }

    return BaseShorthandRouteHandler;
  })(_emberCliMirageRouteHandlersBase['default']);

  exports['default'] = BaseShorthandRouteHandler;
});
define('ember-cli-mirage/route-handlers/shorthands/delete', ['exports', 'ember-cli-mirage/assert', 'ember-cli-mirage/route-handlers/shorthands/base', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageAssert, _emberCliMirageRouteHandlersShorthandsBase, _emberCliMirageUtilsInflector) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  // jscs:disable requireParenthesesAroundArrowParam

  var DeleteShorthandRouteHandler = (function (_BaseShorthandRouteHandler) {
    _inherits(DeleteShorthandRouteHandler, _BaseShorthandRouteHandler);

    function DeleteShorthandRouteHandler() {
      _classCallCheck(this, DeleteShorthandRouteHandler);

      _get(Object.getPrototypeOf(DeleteShorthandRouteHandler.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(DeleteShorthandRouteHandler, [{
      key: 'handleStringShorthand',

      /*
        Remove the model from the db of type *camelizedModelName*.
         This would remove the user with id :id:
          Ex: this.del('/contacts/:id', 'user');
      */
      value: function handleStringShorthand(request, modelClass) {
        var modelName = this.shorthand;
        var camelizedModelName = (0, _emberCliMirageUtilsInflector.camelize)(modelName);
        (0, _emberCliMirageAssert['default'])(modelClass, 'The route handler for ' + request.url + ' is trying to access the ' + camelizedModelName + ' model, but that model doesn\'t exist. Create it using \'ember g mirage-model ' + modelName + '\'.');

        var id = this._getIdForRequest(request);
        return modelClass.find(id).destroy();
      }

      /*
        Remove the model and child related models from the db.
         This would remove the contact with id `:id`, and well
        as this contact's addresses and phone numbers.
          Ex: this.del('/contacts/:id', ['contact', 'addresses', 'numbers');
      */
    }, {
      key: 'handleArrayShorthand',
      value: function handleArrayShorthand(request, modelClasses) {
        var id = this._getIdForRequest(request);

        var parent = modelClasses[0].find(id);
        var childTypes = modelClasses.slice(1).map(function (modelClass) {
          return (0, _emberCliMirageUtilsInflector.pluralize)(modelClass.camelizedModelName);
        });

        // Delete related children
        childTypes.forEach(function (type) {
          return parent[type].destroy();
        });
        parent.destroy();
      }
    }]);

    return DeleteShorthandRouteHandler;
  })(_emberCliMirageRouteHandlersShorthandsBase['default']);

  exports['default'] = DeleteShorthandRouteHandler;
});
define('ember-cli-mirage/route-handlers/shorthands/get', ['exports', 'ember-cli-mirage/assert', 'ember-cli-mirage/route-handlers/shorthands/base', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageAssert, _emberCliMirageRouteHandlersShorthandsBase, _emberCliMirage, _emberCliMirageUtilsInflector) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var GetShorthandRouteHandler = (function (_BaseShorthandRouteHandler) {
    _inherits(GetShorthandRouteHandler, _BaseShorthandRouteHandler);

    function GetShorthandRouteHandler() {
      _classCallCheck(this, GetShorthandRouteHandler);

      _get(Object.getPrototypeOf(GetShorthandRouteHandler.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(GetShorthandRouteHandler, [{
      key: 'handleStringShorthand',

      /*
        Retrieve a model/collection from the db.
         Examples:
          this.get('/contacts', 'contact');
          this.get('/contacts/:id', 'contact');
      */
      value: function handleStringShorthand(request, modelClass) {
        var modelName = this.shorthand;
        var camelizedModelName = (0, _emberCliMirageUtilsInflector.camelize)(modelName);

        (0, _emberCliMirageAssert['default'])(modelClass, 'The route handler for ' + request.url + ' is trying to access the ' + camelizedModelName + ' model, but that model doesn\'t exist. Create it using \'ember g mirage-model ' + modelName + '\'.');

        var id = this._getIdForRequest(request);
        if (id) {
          var model = modelClass.find(id);
          if (!model) {
            return new _emberCliMirage.Response(404);
          } else {
            return model;
          }
        } else if (this.options.coalesce && request.queryParams && request.queryParams.ids) {
          return modelClass.find(request.queryParams.ids);
        } else {
          return modelClass.all();
        }
      }

      /*
        Retrieve an array of collections from the db.
         Ex: this.get('/home', ['contacts', 'pictures']);
      */
    }, {
      key: 'handleArrayShorthand',
      value: function handleArrayShorthand(request, modelClasses) {
        var keys = this.shorthand;
        var id = this._getIdForRequest(request);

        /*
        If the first key is singular and we have an id param in
        the request, we're dealing with the version of the shorthand
        that has a parent model and several has-many relationships.
        We throw an error, because the serializer is the appropriate
        place for this now.
        */
        (0, _emberCliMirageAssert['default'])(!id || (0, _emberCliMirageUtilsInflector.singularize)(keys[0]) !== keys[0], 'It looks like you\'re using the "Single record with\n      related records" version of the array shorthand, in addition to opting\n      in to the model layer. This shorthand was made when there was no\n      serializer layer. Now that you\'re using models, please ensure your\n      relationships are defined, and create a serializer for the parent\n      model, adding the relationships there.');

        return modelClasses.map(function (modelClass) {
          return modelClass.all();
        });
      }
    }]);

    return GetShorthandRouteHandler;
  })(_emberCliMirageRouteHandlersShorthandsBase['default']);

  exports['default'] = GetShorthandRouteHandler;
});
define('ember-cli-mirage/route-handlers/shorthands/head', ['exports', 'ember-cli-mirage/assert', 'ember-cli-mirage/route-handlers/shorthands/base', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageAssert, _emberCliMirageRouteHandlersShorthandsBase, _emberCliMirage, _emberCliMirageUtilsInflector) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var HeadShorthandRouteHandler = (function (_BaseShorthandRouteHandler) {
    _inherits(HeadShorthandRouteHandler, _BaseShorthandRouteHandler);

    function HeadShorthandRouteHandler() {
      _classCallCheck(this, HeadShorthandRouteHandler);

      _get(Object.getPrototypeOf(HeadShorthandRouteHandler.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(HeadShorthandRouteHandler, [{
      key: 'handleStringShorthand',

      /*
        Retrieve a model/collection from the db.
         Examples:
          this.head('/contacts', 'contact');
          this.head('/contacts/:id', 'contact');
      */
      value: function handleStringShorthand(request, modelClass) {
        var modelName = this.shorthand;
        var camelizedModelName = (0, _emberCliMirageUtilsInflector.camelize)(modelName);

        (0, _emberCliMirageAssert['default'])(modelClass, 'The route handler for ' + request.url + ' is trying to access the ' + camelizedModelName + ' model, but that model doesn\'t exist. Create it using \'ember g mirage-model ' + modelName + '\'.');

        var id = this._getIdForRequest(request);
        if (id) {
          var model = modelClass.find(id);
          if (!model) {
            return new _emberCliMirage.Response(404);
          } else {
            return new _emberCliMirage.Response(204);
          }
        } else if (this.options.coalesce && request.queryParams && request.queryParams.ids) {
          var model = modelClass.find(request.queryParams.ids);

          if (!model) {
            return new _emberCliMirage.Response(404);
          } else {
            return new _emberCliMirage.Response(204);
          }
        } else {
          return new _emberCliMirage.Response(204);
        }
      }
    }]);

    return HeadShorthandRouteHandler;
  })(_emberCliMirageRouteHandlersShorthandsBase['default']);

  exports['default'] = HeadShorthandRouteHandler;
});
define('ember-cli-mirage/route-handlers/shorthands/post', ['exports', 'ember-cli-mirage/assert', 'ember-cli-mirage/route-handlers/shorthands/base', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageAssert, _emberCliMirageRouteHandlersShorthandsBase, _emberCliMirageUtilsInflector) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var PostShorthandRouteHandler = (function (_BaseShorthandRouteHandler) {
    _inherits(PostShorthandRouteHandler, _BaseShorthandRouteHandler);

    function PostShorthandRouteHandler() {
      _classCallCheck(this, PostShorthandRouteHandler);

      _get(Object.getPrototypeOf(PostShorthandRouteHandler.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(PostShorthandRouteHandler, [{
      key: 'handleStringShorthand',

      /*
        Push a new model of type *camelizedModelName* to the db.
         For example, this will push a 'user':
          this.post('/contacts', 'user');
      */

      value: function handleStringShorthand(request, modelClass) {
        var modelName = this.shorthand;
        var camelizedModelName = (0, _emberCliMirageUtilsInflector.camelize)(modelName);
        (0, _emberCliMirageAssert['default'])(modelClass, 'The route handler for ' + request.url + ' is trying to access the ' + camelizedModelName + ' model, but that model doesn\'t exist. Create it using \'ember g mirage-model ' + modelName + '\'.');

        var attrs = this._getAttrsForRequest(request, modelClass.camelizedModelName);
        return modelClass.create(attrs);
      }
    }]);

    return PostShorthandRouteHandler;
  })(_emberCliMirageRouteHandlersShorthandsBase['default']);

  exports['default'] = PostShorthandRouteHandler;
});
define('ember-cli-mirage/route-handlers/shorthands/put', ['exports', 'ember-cli-mirage/assert', 'ember-cli-mirage/route-handlers/shorthands/base', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageAssert, _emberCliMirageRouteHandlersShorthandsBase, _emberCliMirageUtilsInflector) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  var _get = function get(_x, _x2, _x3) {
    var _again = true;_function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
        }
      } else if ('value' in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var PutShorthandRouteHandler = (function (_BaseShorthandRouteHandler) {
    _inherits(PutShorthandRouteHandler, _BaseShorthandRouteHandler);

    function PutShorthandRouteHandler() {
      _classCallCheck(this, PutShorthandRouteHandler);

      _get(Object.getPrototypeOf(PutShorthandRouteHandler.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(PutShorthandRouteHandler, [{
      key: 'handleStringShorthand',

      /*
        Update an object from the db, specifying the type.
           this.put('/contacts/:id', 'user');
      */
      value: function handleStringShorthand(request, modelClass) {
        var modelName = this.shorthand;
        var camelizedModelName = (0, _emberCliMirageUtilsInflector.camelize)(modelName);

        (0, _emberCliMirageAssert['default'])(modelClass, 'The route handler for ' + request.url + ' is trying to access the ' + camelizedModelName + ' model, but that model doesn\'t exist. Create it using \'ember g mirage-model ' + modelName + '\'.');

        var id = this._getIdForRequest(request);
        var attrs = this._getAttrsForRequest(request, modelClass.camelizedModelName);

        return modelClass.find(id).update(attrs);
      }
    }]);

    return PutShorthandRouteHandler;
  })(_emberCliMirageRouteHandlersShorthandsBase['default']);

  exports['default'] = PutShorthandRouteHandler;
});
define('ember-cli-mirage/serializer-registry', ['exports', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/orm/collection', 'ember-cli-mirage/serializer', 'ember-cli-mirage/serializers/json-api-serializer', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/assert', 'lodash/object/assign'], function (exports, _emberCliMirageOrmModel, _emberCliMirageOrmCollection, _emberCliMirageSerializer, _emberCliMirageSerializersJsonApiSerializer, _emberCliMirageUtilsInflector, _emberCliMirageAssert, _lodashObjectAssign) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  // jscs:disable requireParenthesesAroundArrowParam

  var SerializerRegistry = (function () {
    function SerializerRegistry(schema) {
      var serializerMap = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _classCallCheck(this, SerializerRegistry);

      this.schema = schema;
      this._serializerMap = serializerMap;
    }

    _createClass(SerializerRegistry, [{
      key: 'normalize',
      value: function normalize(payload, modelName) {
        return this.serializerFor(modelName).normalize(payload);
      }
    }, {
      key: 'serialize',
      value: function serialize(response, request) {
        var _this = this;

        this.request = request;

        if (this._isModelOrCollection(response)) {
          var serializer = this.serializerFor(response.modelName);

          return serializer.serialize(response, request);
        } else if (Array.isArray(response) && response.filter(this._isCollection).length) {
          return response.reduce(function (json, collection) {
            var serializer = _this.serializerFor(collection.modelName);

            if (serializer.embed) {
              json[(0, _emberCliMirageUtilsInflector.pluralize)(collection.modelName)] = serializer.serialize(collection, request);
            } else {
              json = (0, _lodashObjectAssign['default'])(json, serializer.serialize(collection, request));
            }

            return json;
          }, {});
        } else {
          return response;
        }
      }
    }, {
      key: 'serializerFor',
      value: function serializerFor(type) {
        var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var _ref$explicit = _ref.explicit;
        var explicit = _ref$explicit === undefined ? false : _ref$explicit;

        var SerializerForResponse = this._serializerMap && this._serializerMap[(0, _emberCliMirageUtilsInflector.camelize)(type)];

        if (explicit) {
          (0, _emberCliMirageAssert['default'])(!!SerializerForResponse, 'You passed in ' + type + ' as an explicit serializer type but that serializer doesn\'t exist. Try running `ember g mirage-serializer ' + type + '`.');
        } else {
          SerializerForResponse = SerializerForResponse || this._serializerMap.application || _emberCliMirageSerializer['default'];

          (0, _emberCliMirageAssert['default'])(!SerializerForResponse || SerializerForResponse.prototype.embed || SerializerForResponse.prototype.root || new SerializerForResponse() instanceof _emberCliMirageSerializersJsonApiSerializer['default'], 'You cannot have a serializer that sideloads (embed: false) and disables the root (root: false).');
        }

        return new SerializerForResponse(this, type, this.request);
      }
    }, {
      key: '_isModel',
      value: function _isModel(object) {
        return object instanceof _emberCliMirageOrmModel['default'];
      }
    }, {
      key: '_isCollection',
      value: function _isCollection(object) {
        return object instanceof _emberCliMirageOrmCollection['default'];
      }
    }, {
      key: '_isModelOrCollection',
      value: function _isModelOrCollection(object) {
        return this._isModel(object) || this._isCollection(object);
      }
    }, {
      key: 'registerSerializers',
      value: function registerSerializers(newSerializerMaps) {
        var currentSerializerMap = this._serializerMap || {};
        this._serializerMap = (0, _lodashObjectAssign['default'])(currentSerializerMap, newSerializerMaps);
      }
    }]);

    return SerializerRegistry;
  })();

  exports['default'] = SerializerRegistry;
});
define('ember-cli-mirage/serializer', ['exports', 'ember-cli-mirage/orm/model', 'ember-cli-mirage/orm/collection', 'ember-cli-mirage/utils/extend', 'ember-cli-mirage/utils/inflector', 'lodash/lang/isFunction', 'lodash/lang/isArray', 'lodash/lang/isEmpty', 'lodash/collection/includes', 'lodash/object/assign', 'lodash/object/get', 'lodash'], function (exports, _emberCliMirageOrmModel, _emberCliMirageOrmCollection, _emberCliMirageUtilsExtend, _emberCliMirageUtilsInflector, _lodashLangIsFunction, _lodashLangIsArray, _lodashLangIsEmpty, _lodashCollectionIncludes, _lodashObjectAssign, _lodashObjectGet, _lodash) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var Serializer = (function () {
    function Serializer(registry, type, request) {
      _classCallCheck(this, Serializer);

      this.registry = registry;
      this.type = type;
      this.request = request;
    }

    // Defaults

    /**
     * Override this method to implement your own custom
     * serialize function. `primaryResource` is whatever was returned
     * from your route handler, and request is the Pretender
     * request object. Returns a plain JavaScript object or
     * array, which Mirage uses as the response data to your
     * Ember app’s XHR request. You can also override this method,
     * call super, and manipulate the data before Mirage responds
     * with it. This is a great place to add metadata, or for
     * one-off operations that don’t fit neatly into any of
     * Mirage’s other abstractions.
     * @method serialize
     * @param response
     * @param request
     * @public
     */

    _createClass(Serializer, [{
      key: 'serialize',
      value: function serialize(primaryResource, request) {
        return this.buildPayload(primaryResource);
      }
    }, {
      key: 'buildPayload',
      value: function buildPayload(primaryResource, toInclude, didSerialize, json) {
        if (!primaryResource && (0, _lodashLangIsEmpty['default'])(toInclude)) {
          return json;
        } else if (primaryResource) {
          var _getHashForPrimaryResource = this.getHashForPrimaryResource(primaryResource);

          var _getHashForPrimaryResource2 = _slicedToArray(_getHashForPrimaryResource, 2);

          var resourceHash = _getHashForPrimaryResource2[0];
          var newIncludes = _getHashForPrimaryResource2[1];

          var newDidSerialize = this.isCollection(primaryResource) ? primaryResource.models : [primaryResource];

          return this.buildPayload(undefined, newIncludes, newDidSerialize, resourceHash);
        } else {
          var nextIncludedResource = toInclude.shift();

          var _getHashForIncludedResource = this.getHashForIncludedResource(nextIncludedResource);

          var _getHashForIncludedResource2 = _slicedToArray(_getHashForIncludedResource, 2);

          var resourceHash = _getHashForIncludedResource2[0];
          var newIncludes = _getHashForIncludedResource2[1];

          var newToInclude = newIncludes.filter(function (resource) {
            return !(0, _lodashCollectionIncludes['default'])(didSerialize.map(function (m) {
              return m.toString();
            }), resource.toString());
          }).concat(toInclude);
          var newDidSerialize = (this.isCollection(nextIncludedResource) ? nextIncludedResource.models : [nextIncludedResource]).concat(didSerialize);
          var newJson = this.mergePayloads(json, resourceHash);

          return this.buildPayload(undefined, newToInclude, newDidSerialize, newJson);
        }
      }
    }, {
      key: 'getHashForPrimaryResource',
      value: function getHashForPrimaryResource(resource) {
        var _getHashForResource = this.getHashForResource(resource);

        var _getHashForResource2 = _slicedToArray(_getHashForResource, 2);

        var hash = _getHashForResource2[0];
        var addToIncludes = _getHashForResource2[1];

        var hashWithRoot = undefined;

        if (this.root) {
          var serializer = this.serializerFor(resource.modelName);
          var rootKey = serializer.keyForResource(resource);
          hashWithRoot = _defineProperty({}, rootKey, hash);
        } else {
          hashWithRoot = hash;
        }

        return [hashWithRoot, addToIncludes];
      }
    }, {
      key: 'getHashForIncludedResource',
      value: function getHashForIncludedResource(resource) {
        var serializer = this.serializerFor(resource.modelName);

        var _serializer$getHashForResource = serializer.getHashForResource(resource);

        var _serializer$getHashForResource2 = _slicedToArray(_serializer$getHashForResource, 2);

        var hash = _serializer$getHashForResource2[0];
        var addToIncludes = _serializer$getHashForResource2[1];

        // Included resources always have a root, and are always pushed to an array.
        var rootKey = serializer.keyForRelationship(resource.modelName);
        var hashWithRoot = (0, _lodashLangIsArray['default'])(hash) ? _defineProperty({}, rootKey, hash) : _defineProperty({}, rootKey, [hash]);

        return [hashWithRoot, addToIncludes];
      }
    }, {
      key: 'getHashForResource',
      value: function getHashForResource(resource) {
        var removeForeignKeys = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        var _this = this;

        var didSerialize = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
        var lookupSerializer = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

        var hash = undefined;
        var serializer = lookupSerializer ? this.serializerFor(resource.modelName) : this; // this is used for embedded responses

        if (this.isModel(resource)) {
          hash = serializer._hashForModel(resource, removeForeignKeys, didSerialize);
        } else {
          hash = resource.models.map(function (m) {
            return serializer._hashForModel(m, removeForeignKeys, didSerialize);
          });
        }

        if (this.embed) {
          return [hash];
        } else {
          var addToIncludes = (0, _lodash['default'])(serializer.getKeysForIncluded()).map(function (key) {
            if (_this.isCollection(resource)) {
              return resource.models.map(function (m) {
                return m[key];
              });
            } else {
              return resource[key];
            }
          }).flatten().compact().uniq(function (m) {
            return m.toString();
          }).value();

          return [hash, addToIncludes];
        }
      }

      /*
        Merges new resource hash into json. If json already has root key,
        pushes value of resourceHash onto that key.
         For example,
             json = {
              post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },
              comments: [
                { id: 1, text: 'foo' }
              ]
            };
             resourceHash = {
              comments: [
                { id: 2, text: 'bar' }
              ]
            };
         would yield
             {
              post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },
              comments: [
                { id: 1, text: 'foo' },
                { id: 2, text: 'bar' }
              ]
            };
       */
    }, {
      key: 'mergePayloads',
      value: function mergePayloads(json, resourceHash) {
        var newJson = undefined;

        var _Object$keys = Object.keys(resourceHash);

        var _Object$keys2 = _slicedToArray(_Object$keys, 1);

        var resourceHashKey = _Object$keys2[0];

        if (json[resourceHashKey]) {
          newJson = json;
          newJson[resourceHashKey] = json[resourceHashKey].concat(resourceHash[resourceHashKey]);
        } else {
          newJson = (0, _lodashObjectAssign['default'])(json, resourceHash);
        }

        return newJson;
      }
    }, {
      key: 'keyForResource',
      value: function keyForResource(resource) {
        var modelName = resource.modelName;

        return this.isModel(resource) ? this.keyForModel(modelName) : this.keyForCollection(modelName);
      }

      /**
       * Used to define a custom key when serializing a
       * primary model of modelName `modelName`.
       * @method keyForModel
       * @param modelName
       * @public
       */
    }, {
      key: 'keyForModel',
      value: function keyForModel(modelName) {
        return (0, _emberCliMirageUtilsInflector.camelize)(modelName);
      }

      /**
       * Used to customize the key when serializing a primary
       * collection. By default this pluralizes the return
       * value of `keyForModel`.
       * @method keyForCollection
       * @param modelName
       * @public
       */
    }, {
      key: 'keyForCollection',
      value: function keyForCollection(modelName) {
        return (0, _emberCliMirageUtilsInflector.pluralize)(this.keyForModel(modelName));
      }
    }, {
      key: '_hashForModel',
      value: function _hashForModel(model, removeForeignKeys) {
        var _this2 = this;

        var didSerialize = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        var attrs = this._attrsForModel(model);

        if (removeForeignKeys) {
          model.fks.forEach(function (fk) {
            delete attrs[fk];
          });
        }

        if (this.embed) {
          var _ret = (function () {
            var newDidSerialize = (0, _lodashObjectAssign['default'])({}, didSerialize);
            newDidSerialize[model.modelName] = newDidSerialize[model.modelName] || {};
            newDidSerialize[model.modelName][model.id] = true;

            _this2.getKeysForIncluded().forEach(function (key) {
              var associatedResource = model[key];
              if (!(0, _lodashObjectGet['default'])(newDidSerialize, associatedResource.modelName + '.' + associatedResource.id)) {
                var _getHashForResource3 = _this2.getHashForResource(associatedResource, true, newDidSerialize, true);

                var _getHashForResource32 = _slicedToArray(_getHashForResource3, 1);

                var associatedResourceHash = _getHashForResource32[0];

                var formattedKey = _this2.keyForResource(associatedResource);
                attrs[formattedKey] = associatedResourceHash;

                if (_this2.isModel(associatedResource)) {
                  var fk = (0, _emberCliMirageUtilsInflector.camelize)(associatedResource.modelName) + 'Id';
                  delete attrs[fk];
                }
              }
            });

            return {
              v: attrs
            };
          })();

          if (typeof _ret === 'object') return _ret.v;
        } else {
          return this._maybeAddAssociationIds(model, attrs);
        }
      }

      /**
       * @method _attrsForModel
       * @param model
       * @private
       */
    }, {
      key: '_attrsForModel',
      value: function _attrsForModel(model) {
        var removeForeignKeys = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        var attrs = {};

        if (this.attrs) {
          attrs = this.attrs.reduce(function (memo, attr) {
            memo[attr] = model[attr];
            return memo;
          }, {});
        } else {
          attrs = (0, _lodashObjectAssign['default'])(attrs, model.attrs);
        }

        if (removeForeignKeys) {
          model.fks.forEach(function (key) {
            return delete attrs[key];
          });
        }

        return this._formatAttributeKeys(attrs);
      }

      /**
       * @method _maybeAddAssociationIds
       * @param model
       * @param attrs
       * @private
       */
    }, {
      key: '_maybeAddAssociationIds',
      value: function _maybeAddAssociationIds(model, attrs) {
        var _this3 = this;

        var newHash = (0, _lodashObjectAssign['default'])({}, attrs);

        if (this.serializeIds === 'always') {
          model.associationKeys.forEach(function (key) {
            var association = model[key];
            if (_this3.isCollection(association)) {
              var formattedKey = _this3.keyForRelationshipIds(key);
              newHash[formattedKey] = model[key].models.map(function (m) {
                return m.id;
              });
            }
          });
        } else if (this.serializeIds === 'included') {
          this.getKeysForIncluded().forEach(function (key) {
            var association = model[key];
            if (_this3.isCollection(association)) {
              var formattedKey = _this3.keyForRelationshipIds(key);
              newHash[formattedKey] = model[key].models.map(function (m) {
                return m.id;
              });
            }
          });
        }

        return newHash;
      }

      /**
       * Used to customize how a model’s attribute is
       * formatted in your JSON payload.
       * @method keyForAttribute
       * @param attr
       * @public
       */
    }, {
      key: 'keyForAttribute',
      value: function keyForAttribute(attr) {
        return attr;
      }

      /**
       * Use this hook to format the key for collections
       * related to this model.
       *
       * For example, if you're serializing an author that
       * side loads many `blogPosts`, you would get `blogPost`
       * as an argument, and whatever you return would
       * end up as the collection key in your JSON:
       *
       * keyForRelationship(type) {
       *   return dasherize(type);
       * }
       *
       * {
       *   author: {...},
       *   'blog-posts': [...]
       * }
       * @method keyForRelationship
       * @param modelName
       * @public
       */
    }, {
      key: 'keyForRelationship',
      value: function keyForRelationship(modelName) {
        return (0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.pluralize)(modelName));
      }

      /**
       * Use this hook to format the key for relationship ids
       * in this model's JSON representation.
       *
       * For example, if you're serializing an author that
       * side loads many `blogPosts`, you would get `blogPost`
       * as an argument, and whatever you return would
       * end up as part of the `author` JSON:
       *
       * keyForRelationshipIds(type) {
       *   return dasherize(type) + '-ids';
       * }
       *
       * {
       *   author: {
       *     ...,
       *     'blog-post-ids': [1, 2, 3]
       *   },
       *   'blog-posts': [...]
       * }
       * @method keyForRelationshipIds
       * @param modelName
       * @public
       */
    }, {
      key: 'keyForRelationshipIds',
      value: function keyForRelationshipIds(relationshipName) {
        return (0, _emberCliMirageUtilsInflector.singularize)((0, _emberCliMirageUtilsInflector.camelize)(relationshipName)) + 'Ids';
      }

      /**
       * This method is used by the POST and PUT shorthands. These shorthands
       * expect a valid JSON:API document as part of the request, so that
       * they know how to create or update the appropriate resouce. The normalize
       * method allows you to transform your request body into a JSON:API
       * document, which lets you take advantage of the shorthands when you
       * otherwise may not be able to.
       *
       * Note that this method is a noop if you’re using JSON:API already,
       * since request payloads sent along with POST and PUT requests will
       * already be in the correct format.
       * @method normalize
       * @param json
       * @public
       */
    }, {
      key: 'normalize',
      value: function normalize(json) {
        return json;
      }

      /**
       * @method isModel
       * @param object
       * @return {Boolean}
       * @public
       */
    }, {
      key: 'isModel',
      value: function isModel(object) {
        return object instanceof _emberCliMirageOrmModel['default'];
      }

      /**
       * @method isCollection
       * @param object
       * @return {Boolean}
       * @public
       */
    }, {
      key: 'isCollection',
      value: function isCollection(object) {
        return object instanceof _emberCliMirageOrmCollection['default'];
      }

      /**
       * @method isModelOrCollection
       * @param object
       * @return {Boolean}
       * @public
       */
    }, {
      key: 'isModelOrCollection',
      value: function isModelOrCollection(object) {
        return this.isModel(object) || this.isCollection(object);
      }

      /**
       * @method serializerFor
       * @param type
       * @public
       */
    }, {
      key: 'serializerFor',
      value: function serializerFor(type) {
        return this.registry.serializerFor(type);
      }
    }, {
      key: 'getKeysForIncluded',
      value: function getKeysForIncluded() {
        return (0, _lodashLangIsFunction['default'])(this.include) ? this.include(this.request) : this.include;
      }

      /**
       * @method _formatAttributeKeys
       * @param attrs
       * @private
       */
    }, {
      key: '_formatAttributeKeys',
      value: function _formatAttributeKeys(attrs) {
        var formattedAttrs = {};

        for (var key in attrs) {
          var formattedKey = this.keyForAttribute(key);
          formattedAttrs[formattedKey] = attrs[key];
        }

        return formattedAttrs;
      }
    }]);

    return Serializer;
  })();

  Serializer.prototype.include = [];
  Serializer.prototype.root = true;
  Serializer.prototype.embed = false;
  Serializer.prototype.serializeIds = 'included'; // can be 'included', 'always', or 'never'

  Serializer.extend = _emberCliMirageUtilsExtend['default'];

  exports['default'] = Serializer;
});
define('ember-cli-mirage/serializers/active-model-serializer', ['exports', 'ember-cli-mirage/serializer', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageSerializer, _emberCliMirageUtilsInflector) {
  // jscs:disable requireArrayDestructuring, requireParenthesesAroundArrowParam
  'use strict';

  exports['default'] = _emberCliMirageSerializer['default'].extend({

    keyForModel: function keyForModel(type) {
      return (0, _emberCliMirageUtilsInflector.underscore)(type);
    },

    keyForAttribute: function keyForAttribute(attr) {
      return (0, _emberCliMirageUtilsInflector.underscore)(attr);
    },

    keyForRelationship: function keyForRelationship(type) {
      return (0, _emberCliMirageUtilsInflector.pluralize)((0, _emberCliMirageUtilsInflector.underscore)(type));
    },

    keyForRelationshipIds: function keyForRelationshipIds(type) {
      return (0, _emberCliMirageUtilsInflector.underscore)((0, _emberCliMirageUtilsInflector.singularize)(type)) + '_ids';
    },

    normalize: function normalize(payload) {
      var type = Object.keys(payload)[0];
      var attrs = payload[type];

      var jsonApiPayload = {
        data: {
          type: (0, _emberCliMirageUtilsInflector.pluralize)(type),
          attributes: {}
        }
      };
      if (attrs.id) {
        jsonApiPayload.data.id = attrs.id;
      }
      Object.keys(attrs).forEach(function (key) {
        if (key !== 'id') {
          jsonApiPayload.data.attributes[(0, _emberCliMirageUtilsInflector.dasherize)(key)] = attrs[key];
        }
      });

      return jsonApiPayload;
    }

  });
});
define('ember-cli-mirage/serializers/json-api-serializer', ['exports', 'ember-cli-mirage/serializer', 'ember-cli-mirage/utils/inflector', 'lodash/object/get', 'lodash'], function (exports, _emberCliMirageSerializer, _emberCliMirageUtilsInflector, _lodashObjectGet, _lodash) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = _emberCliMirageSerializer['default'].extend({

    keyForModel: function keyForModel(modelName) {
      return (0, _emberCliMirageUtilsInflector.dasherize)(modelName);
    },

    keyForCollection: function keyForCollection(modelName) {
      return (0, _emberCliMirageUtilsInflector.dasherize)(modelName);
    },

    keyForAttribute: function keyForAttribute(attr) {
      return (0, _emberCliMirageUtilsInflector.dasherize)(attr);
    },

    keyForRelationship: function keyForRelationship(key) {
      return (0, _emberCliMirageUtilsInflector.dasherize)(key);
    },

    getHashForPrimaryResource: function getHashForPrimaryResource(resource) {
      var resourceHash = this.getHashForResource(resource);
      var hashWithRoot = { data: resourceHash };
      var addToIncludes = this.getAddToIncludesForResource(resource);

      return [hashWithRoot, addToIncludes];
    },

    getHashForIncludedResource: function getHashForIncludedResource(resource) {
      var hash = this.getHashForResource(resource);
      var hashWithRoot = { included: this.isModel(resource) ? [hash] : hash };
      var addToIncludes = [];

      if (!this.hasQueryParamIncludes()) {
        addToIncludes = this.getAddToIncludesForResource(resource);
      }

      return [hashWithRoot, addToIncludes];
    },

    getHashForResource: function getHashForResource(resource) {
      var _this = this;

      var hash = undefined;

      if (this.isModel(resource)) {
        hash = this._getResourceObjectForModel(resource);
      } else {
        hash = resource.models.map(function (m) {
          return _this._getResourceObjectForModel(m);
        });
      }

      return hash;
    },

    /*
      Returns a flat unique list of resources that need to be added to includes
    */
    getAddToIncludesForResource: function getAddToIncludesForResource(resource) {
      var relationshipPaths = undefined;

      if ((0, _lodashObjectGet['default'])(this, 'request.queryParams.include')) {
        relationshipPaths = this.request.queryParams.include.split(',');
      } else {
        var serializer = this.serializerFor(resource.modelName);
        relationshipPaths = serializer.getKeysForIncluded();
      }

      return this.getAddToIncludesForResourceAndPaths(resource, relationshipPaths);
    },

    getAddToIncludesForResourceAndPaths: function getAddToIncludesForResourceAndPaths(resource, relationshipPaths) {
      var _this2 = this;

      var includes = [];

      relationshipPaths.forEach(function (path) {
        var relationshipNames = path.split('.');
        var newIncludes = _this2.getIncludesForResourceAndPath.apply(_this2, [resource].concat(_toConsumableArray(relationshipNames)));
        includes.push(newIncludes);
      });

      return (0, _lodash['default'])(includes).flatten().compact().uniq(function (m) {
        return m.toString();
      }).value();
    },

    getIncludesForResourceAndPath: function getIncludesForResourceAndPath(resource) {
      var _this3 = this;

      for (var _len = arguments.length, names = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        names[_key - 1] = arguments[_key];
      }

      var nameForCurrentResource = (0, _emberCliMirageUtilsInflector.camelize)(names.shift());
      var includes = [];
      var modelsToAdd = [];

      if (this.isModel(resource)) {
        var relationship = resource[nameForCurrentResource];

        if (this.isModel(relationship)) {
          modelsToAdd = [relationship];
        } else if (this.isCollection(relationship)) {
          modelsToAdd = relationship.models;
        }
      } else {
        resource.models.forEach(function (model) {
          var relationship = model[nameForCurrentResource];

          if (_this3.isModel(relationship)) {
            modelsToAdd.push(relationship);
          } else if (_this3.isCollection(relationship)) {
            modelsToAdd = modelsToAdd.concat(relationship.models);
          }
        });
      }

      includes = includes.concat(modelsToAdd);

      if (names.length) {
        modelsToAdd.forEach(function (model) {
          includes = includes.concat(_this3.getIncludesForResourceAndPath.apply(_this3, [model].concat(names)));
        });
      }

      return includes;
    },

    _getResourceObjectForModel: function _getResourceObjectForModel(model) {
      var _this4 = this;

      var attrs = this._attrsForModel(model, true);
      delete attrs.id;

      var hash = {
        type: this.typeKeyForModel(model),
        id: model.id,
        attributes: attrs
      };

      model.associationKeys.forEach(function (key) {
        var relationship = model[key];
        var relationshipKey = _this4.keyForRelationship(key);
        var relationshipHash = undefined;
        hash.relationships = hash.relationships || {};

        if (_this4.hasLinksForRelationship(model, key)) {
          var serializer = _this4.serializerFor(model.modelName);
          var links = serializer.links(model);
          relationshipHash = { links: links[key] };
        } else {
          var data = null;

          if (_this4.isModel(relationship)) {
            data = {
              type: _this4.typeKeyForModel(relationship),
              id: relationship.id
            };
          } else if (_this4.isCollection(relationship)) {
            data = relationship.models.map(function (model) {
              return {
                type: _this4.typeKeyForModel(model),
                id: model.id
              };
            });
          }

          relationshipHash = { data: data };
        }

        hash.relationships[relationshipKey] = relationshipHash;
      });

      return hash;
    },

    hasLinksForRelationship: function hasLinksForRelationship(model, relationshipKey) {
      var serializer = this.serializerFor(model.modelName);
      var links = undefined;
      if (serializer.links) {
        links = serializer.links(model);

        return links[relationshipKey] != null;
      }
    },

    getQueryParamIncludes: function getQueryParamIncludes() {
      return (0, _lodashObjectGet['default'])(this, 'request.queryParams.include');
    },

    hasQueryParamIncludes: function hasQueryParamIncludes() {
      return !!this.getQueryParamIncludes();
    },

    typeKeyForModel: function typeKeyForModel(model) {
      return (0, _emberCliMirageUtilsInflector.dasherize)((0, _emberCliMirageUtilsInflector.pluralize)(model.modelName));
    }

  });
});
define('ember-cli-mirage/serializers/rest-serializer', ['exports', 'ember-cli-mirage/serializers/active-model-serializer', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageSerializersActiveModelSerializer, _emberCliMirageUtilsInflector) {
  'use strict';

  exports['default'] = _emberCliMirageSerializersActiveModelSerializer['default'].extend({

    keyForModel: function keyForModel(type) {
      return (0, _emberCliMirageUtilsInflector.camelize)(type);
    },

    keyForAttribute: function keyForAttribute(attr) {
      return (0, _emberCliMirageUtilsInflector.camelize)(attr);
    },

    keyForRelationship: function keyForRelationship(type) {
      return (0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.pluralize)(type));
    },

    keyForRelationshipIds: function keyForRelationshipIds(type) {
      return (0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.singularize)(type)) + 'Ids';
    }
  });
});
define('ember-cli-mirage/server', ['exports', 'ember-cli-mirage/utils/inflector', 'ember-cli-mirage/utils/normalize-name', 'ember', 'pretender', 'ember-cli-mirage/db', 'ember-cli-mirage/orm/schema', 'ember-cli-mirage/assert', 'ember-cli-mirage/serializer-registry', 'ember-cli-mirage/route-handler', 'lodash/object/pick', 'lodash/object/assign', 'lodash/collection/find', 'lodash/lang/isPlainObject'], function (exports, _emberCliMirageUtilsInflector, _emberCliMirageUtilsNormalizeName, _ember, _pretender, _emberCliMirageDb, _emberCliMirageOrmSchema, _emberCliMirageAssert, _emberCliMirageSerializerRegistry, _emberCliMirageRouteHandler, _lodashObjectPick, _lodashObjectAssign, _lodashCollectionFind, _lodashLangIsPlainObject) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  // jscs:disable requireParenthesesAroundArrowParam

  var Promise = _ember['default'].RSVP.Promise;

  function createPretender(server) {
    return new _pretender['default'](function () {
      this.passthroughRequest = function (verb, path, request) {
        if (server.shouldLog()) {
          console.log('Passthrough request: ' + verb.toUpperCase() + ' ' + request.url);
        }
      };

      this.handledRequest = function (verb, path, request) {
        if (server.shouldLog()) {
          console.log('Mirage: [' + request.status + '] ' + verb.toUpperCase() + ' ' + request.url);
          var responseText = request.responseText;

          var loggedResponse = undefined;

          try {
            loggedResponse = JSON.parse(responseText);
          } catch (e) {
            loggedResponse = responseText;
          }

          console.log(loggedResponse);
        }
      };

      this.unhandledRequest = function (verb, path) {
        path = decodeURI(path);
        (0, _emberCliMirageAssert['default'])('Your Ember app tried to ' + verb + ' \'' + path + '\',\n         but there was no route defined to handle this request.\n         Define a route that matches this path in your\n         mirage/config.js file. Did you forget to add your namespace?');
      };
    });
  }

  var defaultRouteOptions = {
    coalesce: false,
    timing: undefined
  };

  var defaultPassthroughs = ['http://localhost:0/chromecheckurl'];
  exports.defaultPassthroughs = defaultPassthroughs;

  function isOption(option) {
    if (!option || typeof option !== 'object') {
      return false;
    }

    var allOptions = Object.keys(defaultRouteOptions);
    var optionKeys = Object.keys(option);
    for (var i = 0; i < optionKeys.length; i++) {
      var key = optionKeys[i];
      if (allOptions.indexOf(key) > -1) {
        return true;
      }
    }
    return false;
  }

  /*
    Args can be of the form
      [options]
      [object, code]
      [function, code]
      [shorthand, options]
      [shorthand, code, options]
      with all optional. This method returns an array of
      [handler (i.e. the function, object or shorthand), code, options].
  */

  function extractRouteArguments(args) {
    var _args$splice = args.splice(-1);

    var _args$splice2 = _slicedToArray(_args$splice, 1);

    var lastArg = _args$splice2[0];

    if (isOption(lastArg)) {
      lastArg = (0, _lodashObjectAssign['default'])({}, defaultRouteOptions, lastArg);
    } else {
      args.push(lastArg);
      lastArg = defaultRouteOptions;
    }
    var t = 2 - args.length;
    while (t-- > 0) {
      args.push(undefined);
    }
    args.push(lastArg);
    return args;
  }

  var Server = (function () {
    function Server() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      _classCallCheck(this, Server);

      this.config(options);
    }

    _createClass(Server, [{
      key: 'config',
      value: function config() {
        var _config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var didOverrideConfig = _config.environment && this.environment && this.environment !== _config.environment;
        (0, _emberCliMirageAssert['default'])(!didOverrideConfig, 'You cannot modify Mirage\'s environment once the server is created');
        this.environment = _config.environment || 'development';

        this.options = _config;

        this.timing = this.timing || _config.timing || 400;
        this.namespace = this.namespace || _config.namespace || '';
        this.urlPrefix = this.urlPrefix || _config.urlPrefix || '';

        this._defineRouteHandlerHelpers();

        this.db = this.db || new _emberCliMirageDb['default']();
        if (this.schema) {
          this.schema.registerModels(_config.models);
          this.serializerOrRegistry.registerSerializers(_config.serializers || {});
        } else {
          this.schema = new _emberCliMirageOrmSchema['default'](this.db, _config.models);
          this.serializerOrRegistry = new _emberCliMirageSerializerRegistry['default'](this.schema, _config.serializers);
        }

        var hasFactories = this._hasModulesOfType(_config, 'factories');
        var hasDefaultScenario = _config.scenarios && _config.scenarios.hasOwnProperty('default');

        this.pretender = this.pretender || createPretender(this);

        if (_config.baseConfig) {
          this.loadConfig(_config.baseConfig);
        }

        if (this.isTest()) {
          if (_config.testConfig) {
            this.loadConfig(_config.testConfig);
          }

          window.server = this; // TODO: Better way to inject server into test env
        }

        if (this.isTest() && hasFactories) {
          this.loadFactories(_config.factories);
        } else if (!this.isTest() && hasDefaultScenario) {
          this.loadFactories(_config.factories);
          _config.scenarios['default'](this);
        } else {
          this.loadFixtures();
        }

        if (_config.useDefaultPassthroughs) {
          this._configureDefaultPassthroughs();
        }
      }
    }, {
      key: 'isTest',
      value: function isTest() {
        return this.environment === 'test';
      }
    }, {
      key: 'shouldLog',
      value: function shouldLog() {
        return typeof this.logging !== 'undefined' ? this.logging : !this.isTest();
      }
    }, {
      key: 'loadConfig',
      value: function loadConfig(config) {
        config.call(this);
        this.timing = this.isTest() ? 0 : this.timing || 0;
      }
    }, {
      key: 'passthrough',
      value: function passthrough() {
        var _this = this;

        for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
          paths[_key] = arguments[_key];
        }

        var verbs = ['get', 'post', 'put', 'delete', 'patch'];
        var lastArg = paths[paths.length - 1];

        if (paths.length === 0) {
          // paths = ['http://localhost:7357'];
          paths = ['/**', '/'];
        } else if (Array.isArray(lastArg)) {
          verbs = paths.pop();
        }

        verbs.forEach(function (verb) {
          paths.forEach(function (path) {
            var fullPath = _this._getFullPath(path);
            _this.pretender[verb](fullPath, _this.pretender.passthrough);
          });
        });
      }
    }, {
      key: 'loadFixtures',
      value: function loadFixtures() {
        var fixtures = this.options.fixtures;

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (args.length) {
          var camelizedArgs = args.map(_emberCliMirageUtilsInflector.camelize);
          fixtures = _lodashObjectPick['default'].apply(undefined, [fixtures].concat(_toConsumableArray(camelizedArgs)));
        }

        this.db.loadData(fixtures);
      }

      /*
        Factory methods
      */
    }, {
      key: 'loadFactories',
      value: function loadFactories() {
        var _this2 = this;

        var factoryMap = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        // Store a reference to the factories
        var currentFactoryMap = this._factoryMap || {};
        this._factoryMap = (0, _lodashObjectAssign['default'])(currentFactoryMap, factoryMap);

        // Create a collection for each factory
        Object.keys(factoryMap).forEach(function (type) {
          var collectionName = (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(type);
          _this2.db.createCollection(collectionName);
        });
      }
    }, {
      key: 'factoryFor',
      value: function factoryFor(type) {
        var camelizedType = (0, _emberCliMirageUtilsInflector.camelize)(type);

        if (this._factoryMap && this._factoryMap[camelizedType]) {
          return this._factoryMap[camelizedType];
        }
      }
    }, {
      key: 'build',
      value: function build(type) {
        var _this3 = this;

        for (var _len3 = arguments.length, traitsAndOverrides = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          traitsAndOverrides[_key3 - 1] = arguments[_key3];
        }

        var traits = traitsAndOverrides.filter(function (arg) {
          return arg && typeof arg === 'string';
        });
        var overrides = (0, _lodashCollectionFind['default'])(traitsAndOverrides, function (arg) {
          return (0, _lodashLangIsPlainObject['default'])(arg);
        });
        var camelizedType = (0, _emberCliMirageUtilsInflector.camelize)(type);

        // Store sequence for factory type as instance variable
        this.factorySequences = this.factorySequences || {};
        this.factorySequences[camelizedType] = this.factorySequences[camelizedType] + 1 || 0;

        var OriginalFactory = this.factoryFor(type);
        if (OriginalFactory) {
          var _ret = (function () {
            var attrs = OriginalFactory.attrs;

            traits.forEach(function (traitName) {
              if (!OriginalFactory.isTrait(traitName)) {
                throw new Error('\'' + traitName + '\' trait is not registered in \'' + type + '\' factory');
              }
            });

            var allExtensions = traits.map(function (traitName) {
              // throw error if not registered
              return attrs[traitName].extension;
            });
            allExtensions.push(overrides || {});
            var mergedExtensions = allExtensions.reduce(function (accum, extension) {
              return (0, _lodashObjectAssign['default'])(accum, extension);
            }, {});

            var Factory = OriginalFactory.extend(mergedExtensions);
            var factory = new Factory();

            var sequence = _this3.factorySequences[camelizedType];
            return {
              v: factory.build(sequence)
            };
          })();

          if (typeof _ret === 'object') return _ret.v;
        } else {
          return overrides;
        }
      }
    }, {
      key: 'buildList',
      value: function buildList(type, amount) {
        var list = [];

        for (var _len4 = arguments.length, traitsAndOverrides = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
          traitsAndOverrides[_key4 - 2] = arguments[_key4];
        }

        for (var i = 0; i < amount; i++) {
          list.push(this.build.apply(this, [type].concat(traitsAndOverrides)));
        }

        return list;
      }

      // When there is a Model defined, we should return an instance
      // of it instead of returning the bare attributes.
    }, {
      key: 'create',
      value: function create(type) {
        var _this4 = this;

        for (var _len5 = arguments.length, options = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          options[_key5 - 1] = arguments[_key5];
        }

        var traits = options.filter(function (arg) {
          return arg && typeof arg === 'string';
        });
        var overrides = (0, _lodashCollectionFind['default'])(options, function (arg) {
          return (0, _lodashLangIsPlainObject['default'])(arg);
        });
        var collectionFromCreateList = (0, _lodashCollectionFind['default'])(options, function (arg) {
          return arg && Array.isArray(arg);
        });

        var attrs = this.build.apply(this, [type].concat(_toConsumableArray(traits), [overrides]));
        var modelOrRecord = undefined;

        if (this.schema && this.schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(type)]) {
          var modelClass = this.schema[(0, _emberCliMirageUtilsNormalizeName.toCollectionName)(type)];

          modelOrRecord = modelClass.create(attrs);
        } else {
          var collection = undefined,
              collectionName = undefined;

          if (collectionFromCreateList) {
            collection = collectionFromCreateList;
          } else {
            collectionName = this.schema ? (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(type) : (0, _emberCliMirageUtilsInflector.pluralize)(type);
            collection = this.db[collectionName];
          }

          (0, _emberCliMirageAssert['default'])(collection, 'You called server.create(' + type + ') but no model or factory was found. Try `ember g mirage-model ' + type + '`.');
          modelOrRecord = collection.insert(attrs);
        }

        var OriginalFactory = this.factoryFor(type);
        if (OriginalFactory) {
          OriginalFactory.extractAfterCreateCallbacks({ traits: traits }).forEach(function (afterCreate) {
            afterCreate(modelOrRecord, _this4);
          });
        }

        return modelOrRecord;
      }
    }, {
      key: 'createList',
      value: function createList(type, amount) {
        var list = [];
        var collectionName = this.schema ? (0, _emberCliMirageUtilsNormalizeName.toCollectionName)(type) : (0, _emberCliMirageUtilsInflector.pluralize)(type);
        var collection = this.db[collectionName];

        for (var _len6 = arguments.length, traitsAndOverrides = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
          traitsAndOverrides[_key6 - 2] = arguments[_key6];
        }

        for (var i = 0; i < amount; i++) {
          list.push(this.create.apply(this, [type].concat(traitsAndOverrides, [collection])));
        }

        return list;
      }
    }, {
      key: 'shutdown',
      value: function shutdown() {
        this.pretender.shutdown();
        if (this.environment === 'test') {
          window.server = undefined;
        }
      }
    }, {
      key: 'resource',
      value: function resource(resourceName) {
        var _this5 = this;

        var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        var only = _ref.only;
        var except = _ref.except;

        only = only || [];
        except = except || [];

        if (only.length > 0 && except.length > 0) {
          throw 'cannot use both :only and :except options';
        }

        var actionsMethodsAndsPathsMappings = {
          index: { methods: ['get'], path: '/' + resourceName },
          show: { methods: ['get'], path: '/' + resourceName + '/:id' },
          create: { methods: ['post'], path: '/' + resourceName },
          update: { methods: ['put', 'patch'], path: '/' + resourceName + '/:id' },
          'delete': { methods: ['del'], path: '/' + resourceName + '/:id' }
        };

        var allActions = Object.keys(actionsMethodsAndsPathsMappings);
        var actions = only.length > 0 && only || except.length > 0 && allActions.filter(function (action) {
          return except.indexOf(action) === -1;
        }) || allActions;

        actions.forEach(function (action) {
          var methodsWithPath = actionsMethodsAndsPathsMappings[action];

          methodsWithPath.methods.forEach(function (method) {
            return _this5[method](methodsWithPath.path);
          });
        });
      }
    }, {
      key: '_defineRouteHandlerHelpers',
      value: function _defineRouteHandlerHelpers() {
        var _this6 = this;

        [['get'], ['post'], ['put'], ['delete', 'del'], ['patch'], ['head']].forEach(function (_ref2) {
          var _ref22 = _slicedToArray(_ref2, 2);

          var verb = _ref22[0];
          var alias = _ref22[1];

          _this6[verb] = function (path) {
            for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
              args[_key7 - 1] = arguments[_key7];
            }

            var _extractRouteArguments = extractRouteArguments(args);

            var _extractRouteArguments2 = _slicedToArray(_extractRouteArguments, 3);

            var rawHandler = _extractRouteArguments2[0];
            var customizedCode = _extractRouteArguments2[1];
            var options = _extractRouteArguments2[2];

            _this6._registerRouteHandler(verb, path, rawHandler, customizedCode, options);
          };

          if (alias) {
            _this6[alias] = _this6[verb];
          }
        });
      }
    }, {
      key: '_serialize',
      value: function _serialize(body) {
        if (body) {
          return typeof body !== 'string' ? JSON.stringify(body) : body;
        } else {
          return '{"error": "not found"}';
        }
      }
    }, {
      key: '_registerRouteHandler',
      value: function _registerRouteHandler(verb, path, rawHandler, customizedCode, options) {
        var _this7 = this;

        var routeHandler = new _emberCliMirageRouteHandler['default']({
          schema: this.schema,
          verb: verb, rawHandler: rawHandler, customizedCode: customizedCode, options: options, path: path,
          serializerOrRegistry: this.serializerOrRegistry
        });

        var fullPath = this._getFullPath(path);
        var timing = options.timing !== undefined ? options.timing : function () {
          return _this7.timing;
        };

        this.pretender[verb](fullPath, function (request) {
          return new Promise(function (resolve) {
            Promise.resolve(routeHandler.handle(request)).then(function (mirageResponse) {
              var _mirageResponse = _slicedToArray(mirageResponse, 3);

              var code = _mirageResponse[0];
              var headers = _mirageResponse[1];
              var response = _mirageResponse[2];

              resolve([code, headers, _this7._serialize(response)]);
            });
          });
        }, timing);
      }
    }, {
      key: '_hasModulesOfType',
      value: function _hasModulesOfType(modules, type) {
        var modulesOfType = modules[type];
        return modulesOfType ? Object.keys(modulesOfType).length > 0 : false;
      }

      /*
        Builds a full path for Pretender to monitor based on the `path` and
        configured options (`urlPrefix` and `namespace`).
      */
    }, {
      key: '_getFullPath',
      value: function _getFullPath(path) {
        path = path[0] === '/' ? path.slice(1) : path;
        var fullPath = '';
        var urlPrefix = this.urlPrefix ? this.urlPrefix.trim() : '';
        var namespace = this.namespace ? this.namespace.trim() : '';

        // check to see if path is a FQDN. if so, ignore any urlPrefix/namespace that was set
        if (/^https?:\/\//.test(path)) {
          fullPath += path;
        } else {

          // otherwise, if there is a urlPrefix, use that as the beginning of the path
          if (!!urlPrefix.length) {
            fullPath += urlPrefix[urlPrefix.length - 1] === '/' ? urlPrefix : urlPrefix + '/';
          }

          // add the namespace to the path
          fullPath += namespace;

          // add a trailing slash to the path if it doesn't already contain one
          if (fullPath[fullPath.length - 1] !== '/') {
            fullPath += '/';
          }

          // finally add the configured path
          fullPath += path;
        }

        return fullPath;
      }
    }, {
      key: '_configureDefaultPassthroughs',
      value: function _configureDefaultPassthroughs() {
        var _this8 = this;

        defaultPassthroughs.forEach(function (passthroughUrl) {
          _this8.passthrough(passthroughUrl);
        });
      }
    }]);

    return Server;
  })();

  exports['default'] = Server;
});
define("ember-cli-mirage/trait", ["exports"], function (exports) {
  "use strict";

  var trait = function trait(extension) {
    var __isTrait__ = true;
    return {
      extension: extension,
      __isTrait__: __isTrait__
    };
  };

  exports["default"] = trait;
});
define('ember-cli-mirage/utils/extend', ['exports', 'lodash/object/assign', 'lodash/object/has'], function (exports, _lodashObjectAssign, _lodashObjectHas) {
  'use strict';

  exports['default'] = function (protoProps, staticProps) {
    var parent = this;
    var child = undefined;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && (0, _lodashObjectHas['default'])(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function () {
        return parent.apply(this, arguments);
      };
    }

    // Add static properties to the constructor function, if supplied.

    (0, _lodashObjectAssign['default'])(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function Surrogate() {
      this.constructor = child;
    };

    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) {
      (0, _lodashObjectAssign['default'])(child.prototype, protoProps);
    }
    // if (protoProps) { _assign(child.prototype, protoProps); }

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };
});
define('ember-cli-mirage/utils/inflector', ['exports', 'ember', 'ember-inflector'], function (exports, _ember, _emberInflector) {
  // jscs:disable disallowVar, requireObjectDestructuring, disallowDirectPropertyAccess
  'use strict';

  Object.defineProperty(exports, 'singularize', {
    enumerable: true,
    get: function get() {
      return _emberInflector.singularize;
    }
  });
  Object.defineProperty(exports, 'pluralize', {
    enumerable: true,
    get: function get() {
      return _emberInflector.pluralize;
    }
  });

  var capitalize = _ember['default'].String.capitalize;
  exports.capitalize = capitalize;

  var camelize = _ember['default'].String.camelize;
  exports.camelize = camelize;

  var dasherize = _ember['default'].String.dasherize;
  exports.dasherize = dasherize;

  var underscore = _ember['default'].String.underscore;
  exports.underscore = underscore;
});
define('ember-cli-mirage/utils/normalize-name', ['exports', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirageUtilsInflector) {
  'use strict';

  exports.toCollectionName = toCollectionName;
  exports.toModelName = toModelName;

  function toCollectionName(type) {
    var modelName = (0, _emberCliMirageUtilsInflector.dasherize)(type);
    return (0, _emberCliMirageUtilsInflector.camelize)((0, _emberCliMirageUtilsInflector.pluralize)(modelName));
  }

  function toModelName(type) {
    var modelName = (0, _emberCliMirageUtilsInflector.dasherize)(type);
    return (0, _emberCliMirageUtilsInflector.singularize)(modelName);
  }
});
define('ember-cli-mirage/utils/read-modules', ['exports', 'ember', 'lodash/string/camelCase', 'ember-cli-mirage/utils/inflector'], function (exports, _ember, _lodashStringCamelCase, _emberCliMirageUtilsInflector) {
  'use strict';

  // jscs:disable
  /* global requirejs, require */
  /*jslint node: true */
  // jscs:enable
  'use strict';var assert = _ember['default'].assert;

  /*
    This function looks through all files that have been loaded by Ember CLI and
    finds the ones under /mirage/[factories, fixtures, scenarios, models]/, and exports
    a hash containing the names of the files as keys and the data as values.
  */

  exports['default'] = function (prefix) {
    var modules = ['factories', 'fixtures', 'scenarios', 'models', 'serializers'];
    var mirageModuleRegExp = new RegExp('^' + prefix + '/mirage/(' + modules.join('|') + ')');
    var modulesMap = modules.reduce(function (memo, name) {
      memo[name] = {};
      return memo;
    }, {});

    Object.keys(requirejs.entries).filter(function (key) {
      return mirageModuleRegExp.test(key);
    }).forEach(function (moduleName) {
      if (moduleName.match('.jshint')) {
        // ignore autogenerated .jshint files
        return;
      }
      var moduleParts = moduleName.split('/');
      var moduleType = moduleParts[moduleParts.length - 2];
      var moduleKey = moduleParts[moduleParts.length - 1];
      assert('Subdirectories under i' + moduleType + ' are not supported', moduleParts[moduleParts.length - 3] === 'mirage');

      if (moduleType === 'scenario') {
        assert('Only scenario/default.js is supported at this time.', moduleKey !== 'default');
      }

      /*
        Ensure fixture keys are pluralized
      */
      if (moduleType === 'fixtures') {
        moduleKey = (0, _emberCliMirageUtilsInflector.pluralize)(moduleKey);
      }

      var module = require(moduleName, null, null, true);
      if (!module) {
        throw new Error(moduleName + ' must export a ' + moduleType);
      }

      var data = module['default'];

      modulesMap[moduleType][(0, _lodashStringCamelCase['default'])(moduleKey)] = data;
    });

    return modulesMap;
  };
});
define('ember-cli-mirage/utils/reference-sort', ['exports', 'lodash/array/uniq', 'lodash/array/flatten'], function (exports, _lodashArrayUniq, _lodashArrayFlatten) {
  // jscs:disable disallowVar, requireArrayDestructuring
  'use strict';

  exports['default'] = function (edges) {
    var nodes = (0, _lodashArrayUniq['default'])((0, _lodashArrayFlatten['default'])(edges));
    var cursor = nodes.length;
    var sorted = new Array(cursor);
    var visited = {};
    var i = cursor;

    var visit = function visit(node, i, predecessors) {

      if (predecessors.indexOf(node) >= 0) {
        throw new Error('Cyclic dependency in properties ' + JSON.stringify(predecessors));
      }

      if (visited[i]) {
        return;
      } else {
        visited[i] = true;
      }

      var outgoing = edges.filter(function (edge) {
        return edge && edge[0] === node;
      });

      if (i = outgoing.length) {
        var preds = predecessors.concat(node);
        do {
          var pair = outgoing[--i];
          var child = pair[1];
          if (child) {
            visit(child, nodes.indexOf(child), preds);
          }
        } while (i);
      }

      sorted[--cursor] = node;
    };

    while (i--) {
      if (!visited[i]) {
        visit(nodes[i], i, []);
      }
    }

    return sorted.reverse();
  };
});
define('ember-cli-mirage/utils/uuid', ['exports'], function (exports) {
  // jscs:disable
  /*
    UUID generator
  */
  'use strict';

  exports['default'] = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };
});
define('ember-computed-decorators/decorator-alias', ['exports', 'ember-computed-decorators/utils/extract-value'], function (exports, _emberComputedDecoratorsUtilsExtractValue) {
  'use strict';

  exports['default'] = decoratorAlias;

  function decoratorAlias(fn, errorMessage) {
    return function () {
      for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }

      // determine if user called as @computed('blah', 'blah') or @computed
      if (params.length === 0) {
        throw new Error(errorMessage);
      } else {
        return function (target, key, desc) {
          return {
            enumerable: desc.enumerable,
            configurable: desc.configurable,
            writable: desc.writable,
            initializer: function initializer() {
              var value = (0, _emberComputedDecoratorsUtilsExtractValue['default'])(desc);
              return fn.apply(null, params.concat(value));
            }
          };
        };
      }
    };
  }
});
define('ember-computed-decorators/ember-data', ['exports', 'ember-data', 'ember-computed-decorators/macro-alias'], function (exports, _emberData, _emberComputedDecoratorsMacroAlias) {
  'use strict';

  var attr = (0, _emberComputedDecoratorsMacroAlias['default'])(_emberData['default'].attr);
  exports.attr = attr;

  var hasMany = (0, _emberComputedDecoratorsMacroAlias['default'])(_emberData['default'].hasMany);
  exports.hasMany = hasMany;

  var belongsTo = (0, _emberComputedDecoratorsMacroAlias['default'])(_emberData['default'].belongsTo);
  exports.belongsTo = belongsTo;
});
define('ember-computed-decorators/index', ['exports', 'ember', 'ember-computed-decorators/utils/handle-descriptor', 'ember-computed-decorators/utils/is-descriptor', 'ember-computed-decorators/utils/extract-value', 'ember-computed-decorators/decorator-alias', 'ember-computed-decorators/macro-alias'], function (exports, _ember, _emberComputedDecoratorsUtilsHandleDescriptor, _emberComputedDecoratorsUtilsIsDescriptor, _emberComputedDecoratorsUtilsExtractValue, _emberComputedDecoratorsDecoratorAlias, _emberComputedDecoratorsMacroAlias) {
  'use strict';

  var _slice = Array.prototype.slice;

  exports['default'] = computedDecorator;
  exports.readOnly = readOnly;

  function computedDecorator() {
    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    // determine if user called as @computed('blah', 'blah') or @computed
    if ((0, _emberComputedDecoratorsUtilsIsDescriptor['default'])(params[params.length - 1])) {
      return _emberComputedDecoratorsUtilsHandleDescriptor['default'].apply(undefined, arguments);
    } else {
      return function () /* target, key, desc */{
        return _emberComputedDecoratorsUtilsHandleDescriptor['default'].apply(undefined, _slice.call(arguments).concat([params]));
      };
    }
  }

  function readOnly(target, name, desc) {
    return {
      writable: false,
      enumerable: desc.enumerable,
      configurable: desc.configurable,
      initializer: function initializer() {
        var value = (0, _emberComputedDecoratorsUtilsExtractValue['default'])(desc);
        return value.readOnly();
      }
    };
  }

  var on = (0, _emberComputedDecoratorsDecoratorAlias['default'])(_ember['default'].on, 'Can not `on` without event names');
  exports.on = on;

  var observes = (0, _emberComputedDecoratorsDecoratorAlias['default'])(_ember['default'].observer, 'Can not `observe` without property names');exports.observes = observes;

  var alias = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.alias);
  exports.alias = alias;

  var and = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.and);
  exports.and = and;

  var bool = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.bool);
  exports.bool = bool;

  var collect = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.collect);
  exports.collect = collect;

  var empty = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.empty);
  exports.empty = empty;

  var equal = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.equal);
  exports.equal = equal;

  var filter = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.filter);
  exports.filter = filter;

  var filterBy = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.filterBy);
  exports.filterBy = filterBy;

  var gt = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.gt);
  exports.gt = gt;

  var gte = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.gte);
  exports.gte = gte;

  var intersect = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.intersect);
  exports.intersect = intersect;

  var lt = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.lt);
  exports.lt = lt;

  var lte = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.lte);
  exports.lte = lte;

  var map = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.map);
  exports.map = map;

  var mapBy = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.mapBy);
  exports.mapBy = mapBy;

  var match = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.match);
  exports.match = match;

  var max = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.max);
  exports.max = max;

  var min = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.min);
  exports.min = min;

  var none = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.none);
  exports.none = none;

  var not = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.not);
  exports.not = not;

  var notEmpty = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.notEmpty);
  exports.notEmpty = notEmpty;

  var oneWay = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.oneWay);
  exports.oneWay = oneWay;

  var or = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.or);
  exports.or = or;

  var reads = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.reads);
  exports.reads = reads;

  var setDiff = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.setDiff);
  exports.setDiff = setDiff;

  var sort = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.sort);
  exports.sort = sort;

  var sum = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.sum);
  exports.sum = sum;

  var union = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.union);
  exports.union = union;

  var uniq = (0, _emberComputedDecoratorsMacroAlias['default'])(_ember['default'].computed.uniq);
  exports.uniq = uniq;
});
define('ember-computed-decorators/macro-alias', ['exports', 'ember-computed-decorators/utils/is-descriptor'], function (exports, _emberComputedDecoratorsUtilsIsDescriptor) {
  'use strict';

  exports['default'] = macroAlias;

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function handleDescriptor(target, property, desc, fn) {
    var params = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];

    return {
      enumerable: desc.enumerable,
      configurable: desc.configurable,
      writable: desc.writable,
      initializer: function initializer() {
        return fn.apply(undefined, _toConsumableArray(params));
      }
    };
  }
  function macroAlias(fn) {
    return function () {
      for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }

      if ((0, _emberComputedDecoratorsUtilsIsDescriptor['default'])(params[params.length - 1])) {
        return handleDescriptor.apply(undefined, params.concat([fn]));
      } else {
        return function (target, property, desc) {
          return handleDescriptor(target, property, desc, fn, params);
        };
      }
    };
  }
});
define('ember-computed-decorators/utils/extract-value', ['exports'], function (exports) {
  'use strict';

  exports['default'] = extractValue;

  function extractValue(desc) {
    return desc.value || typeof desc.initializer === 'function' && desc.initializer();
  }
});
define('ember-computed-decorators/utils/handle-descriptor', ['exports', 'ember', 'ember-computed-decorators/utils/extract-value'], function (exports, _ember, _emberComputedDecoratorsUtilsExtractValue) {
  'use strict';

  exports['default'] = handleDescriptor;

  var computed = _ember['default'].computed;
  var expandProperties = _ember['default'].expandProperties;
  var get = _ember['default'].get;

  function handleDescriptor(target, key, desc) {
    var params = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];

    return {
      enumerable: desc.enumerable,
      configurable: desc.configurable,
      writeable: desc.writeable,
      initializer: function initializer() {
        var computedDescriptor = undefined;

        if (desc.writable) {
          var val = (0, _emberComputedDecoratorsUtilsExtractValue['default'])(desc);
          if (typeof val === 'object') {
            var value = {};
            if (val.get) {
              value.get = callUserSuppliedGet(params, val.get);
            }
            if (val.set) {
              value.set = callUserSuppliedSet(params, val.set);
            }
            computedDescriptor = value;
          } else {
            computedDescriptor = callUserSuppliedGet(params, val);
          }
        } else {
          throw new Error('ember-computed-decorators does not support using getters and setters');
        }

        return computed.apply(null, params.concat(computedDescriptor));
      }
    };
  }

  function expandPropertyList(propertyList) {
    return propertyList.reduce(function (newPropertyList, property) {
      var atEachIndex = property.indexOf('.@each');
      if (atEachIndex !== -1) {
        return newPropertyList.concat(property.slice(0, atEachIndex));
      } else if (property.slice(-2) === '[]') {
        return newPropertyList.concat(property.slice(0, -3));
      }

      expandProperties(property, function (expandedProperties) {
        newPropertyList = newPropertyList.concat(expandedProperties);
      });

      return newPropertyList;
    }, []);
  }

  function callUserSuppliedGet(params, func) {
    var expandedParams = expandPropertyList(params);
    return function () {
      var _this = this;

      var paramValues = expandedParams.map(function (p) {
        return get(_this, p);
      });

      return func.apply(this, paramValues);
    };
  }

  function callUserSuppliedSet(params, func) {
    var expandedParams = expandPropertyList(params);
    return function (key, value) {
      var _this2 = this;

      var paramValues = expandedParams.map(function (p) {
        return get(_this2, p);
      });
      paramValues.unshift(value);

      return func.apply(this, paramValues);
    };
  }
});
define('ember-computed-decorators/utils/is-descriptor', ['exports'], function (exports) {
  'use strict';

  exports['default'] = isDescriptor;

  function isDescriptor(item) {
    return item && typeof item === 'object' && 'writable' in item && 'enumerable' in item && 'configurable' in item;
  }
});
define('ember-data-has-many-query/belongs-to-sticky', ['exports', 'ember', 'ember-data', 'ember-data-has-many-query/property-names'], function (exports, _ember, _emberData, _emberDataHasManyQueryPropertyNames) {
  'use strict';

  var _slice = Array.prototype.slice;

  var recordHasId = function recordHasId(record) {
    return record && record.get('id');
  };

  /**
   * Create an extension to the `DS.belongsTo` computed property that returns a cached
   * record if the current associated belongsTo record doesn't have an id.
   *
   * This may be useful if querying a hasMany relationship multiple times and storing
   * the results, as each query will reset the ManyArray and therefore remove the inverse
   * belongsTo association. Defining a relationship as `belongsToSticky` will keep the
   * associated record even if it is removed from the ManyArray.
   *
   * @returns {Ember.computed} relationship
   */
  var belongsToSticky = function belongsToSticky() {
    var computed = _emberData['default'].belongsTo.apply(_emberData['default'], arguments);
    var meta = computed.meta();
    meta.sticky = true;
    return _ember['default'].computed({
      get: function get(key) {
        var _computed$_getter;

        var value = (_computed$_getter = computed._getter).call.apply(_computed$_getter, [this].concat(_slice.call(arguments)));
        if (recordHasId(value)) {
          return value;
        }
        return this.get((0, _emberDataHasManyQueryPropertyNames.stickyPropertyName)(key)) || value;
      },
      set: function set(key) {
        var _computed$_setter;

        this.set((0, _emberDataHasManyQueryPropertyNames.stickyPropertyName)(key), undefined);
        return (_computed$_setter = computed._setter).call.apply(_computed$_setter, [this].concat(_slice.call(arguments)));
      }
    }).meta(meta);
  };

  exports.recordHasId = recordHasId;
  exports['default'] = belongsToSticky;
});
define('ember-data-has-many-query/index', ['exports', 'ember-data-has-many-query/mixins/model', 'ember-data-has-many-query/mixins/rest-adapter', 'ember-data-has-many-query/belongs-to-sticky'], function (exports, _emberDataHasManyQueryMixinsModel, _emberDataHasManyQueryMixinsRestAdapter, _emberDataHasManyQueryBelongsToSticky) {
  'use strict';

  var RelationshipQuery = function RelationshipQuery() {
    this.ModelMixin = _emberDataHasManyQueryMixinsModel['default'];
    this.RESTAdapterMixin = _emberDataHasManyQueryMixinsRestAdapter['default'];
    this.belongsToSticky = _emberDataHasManyQueryBelongsToSticky['default'];
  };

  var relationshipQuery = new RelationshipQuery();

  exports.ModelMixin = _emberDataHasManyQueryMixinsModel['default'];
  exports.RESTAdapterMixin = _emberDataHasManyQueryMixinsRestAdapter['default'];
  exports.belongsToSticky = _emberDataHasManyQueryBelongsToSticky['default'];
  exports['default'] = relationshipQuery;
});
define('ember-data-has-many-query/mixins/model', ['exports', 'ember', 'ember-data', 'ember-data-has-many-query/property-names', 'ember-data-has-many-query/belongs-to-sticky'], function (exports, _ember, _emberData, _emberDataHasManyQueryPropertyNames, _emberDataHasManyQueryBelongsToSticky) {
  'use strict';

  /**
   * Mixin for DS.Model extensions.
   */
  exports['default'] = _ember['default'].Mixin.create({
    /**
     * Query a HasMany/BelongsTo relationship link.
     *
     * If you do something like this:
     * ```javascript
     * post.query('comments', { page: 1 });
     * ```
     *
     * The call made to the server will look something like this:
     * ```
     * Started GET "/api/v1/post/1/comments?page=1"
     * ```
     *
     * @param {String} propertyName Relationship property name
     * @param {Object} params Query parameters
     * @returns {Ember.RSVP.Promise}
     */
    query: function query(propertyName, params) {
      var self = this;

      //set the query params as a property on this record
      var _queryParamPropertyName = (0, _emberDataHasManyQueryPropertyNames.queryParamPropertyName)(propertyName);
      this.set(_queryParamPropertyName, params);

      //abort the last query request for this property
      var _ajaxOptionsPropertyName = (0, _emberDataHasManyQueryPropertyNames.ajaxOptionsPropertyName)(propertyName);
      var lastAjaxOptions = this.get(_ajaxOptionsPropertyName);
      if (lastAjaxOptions && lastAjaxOptions.jqXHR) {
        lastAjaxOptions.jqXHR.abort();
      }

      //get the relationship value, reloading if necessary
      var value = this.reloadRelationship(propertyName);

      //return the promise, clearing the query params and ajax options properties
      return value['catch'](function (error) {
        if (error instanceof _emberData['default'].AbortError) {
          //ignore aborted requests
          return;
        }
        throw error;
      })['finally'](function () {
        self.set(_queryParamPropertyName, undefined);
        self.set(_ajaxOptionsPropertyName, undefined);
      });
    },

    /**
     * Get the relationship property for the given property name, reloading the async relationship if necessary.
     *
     * @param propertyName Relationship property name
     * @returns {Ember.RSVP.Promise}
     */
    reloadRelationship: function reloadRelationship(propertyName) {
      //find out what kind of relationship this is
      var relationshipsByName = this.get('constructor.relationshipsByName');
      var relationship = relationshipsByName && relationshipsByName.get(propertyName);
      var isHasMany = relationship && relationship.kind === 'hasMany';

      var self = this;
      var reference = isHasMany ? this.hasMany(propertyName) : this.belongsTo(propertyName);
      return new _ember['default'].RSVP.Promise(function (resolve) {
        //run.next, so that aborted promise gets rejected before starting another
        _ember['default'].run.next(this, function () {
          var isLoaded = reference.value() !== null;
          if (isLoaded) {
            resolve(reference.reload());
          } else {
            //isLoaded is false when the last query resulted in an error, so if this load
            //results in an error again, reload the reference to query the server again
            var promise = reference.load()['catch'](function (error) {
              var _lastWasErrorPropertyName = (0, _emberDataHasManyQueryPropertyNames.lastWasErrorPropertyName)(propertyName);
              if (self.get(_lastWasErrorPropertyName)) {
                //last access to this property resulted in an error, so reload
                return reference.reload();
              }
              //mark this result as an error for next time the property is queried
              self.set(_lastWasErrorPropertyName, true);
              throw error;
            });
            resolve(promise);
          }
        });
      });
    },

    notifyBelongsToChanged: function notifyBelongsToChanged(key) {
      //called when a belongsTo property changes
      this._super.apply(this, arguments);

      //if a belongsTo relationship attribute has changed, and the new record has an id,
      //store the record in a property so that the belongsToSticky can return if it required
      var value = this.get(key);
      if ((0, _emberDataHasManyQueryBelongsToSticky.recordHasId)(value)) {
        var meta = this.constructor.metaForProperty(key);
        if (meta.sticky) {
          this.set((0, _emberDataHasManyQueryPropertyNames.stickyPropertyName)(key), value);
        }
      }
    }
  });
});
define('ember-data-has-many-query/mixins/rest-adapter', ['exports', 'ember', 'ember-data-has-many-query/property-names'], function (exports, _ember, _emberDataHasManyQueryPropertyNames) {
  'use strict';

  var evaluateFunctions = function evaluateFunctions(object, record) {
    if (_ember['default'].isArray(object)) {
      object.forEach(function (element) {
        if (typeof element === 'object') {
          evaluateFunctions(element, record);
        }
      });
    } else if (!_ember['default'].isNone(object)) {
      Object.keys(object).forEach(function (key) {
        if (!object.hasOwnProperty(key)) {
          return;
        }
        var value = object[key];
        if (typeof value === 'function') {
          object[key] = value.apply(record);
        } else if (typeof value === 'object') {
          evaluateFunctions(value, record);
        }
      });
    }
  };

  /**
   * Mixin for DS.RESTAdapter.
   */
  exports['default'] = _ember['default'].Mixin.create({
    findHasMany: function findHasMany(store, snapshot, url, relationship) {
      var id = snapshot.id;
      var type = snapshot.modelName;

      url = this.urlPrefix(url, this.buildURL(type, id, null, 'findHasMany'));
      var query = this.buildRelationshipQuery(snapshot, relationship);

      var options = { data: query };
      snapshot.record.set((0, _emberDataHasManyQueryPropertyNames.ajaxOptionsPropertyName)(relationship.key), options);
      return this.ajax(url, 'GET', options);
    },
    findBelongsTo: function findBelongsTo(store, snapshot, url, relationship) {
      var id = snapshot.id;
      var type = snapshot.modelName;

      url = this.urlPrefix(url, this.buildURL(type, id, null, 'findBelongsTo'));
      var query = this.buildRelationshipQuery(snapshot, relationship);

      var options = { data: query };
      snapshot.record.set((0, _emberDataHasManyQueryPropertyNames.ajaxOptionsPropertyName)(relationship.key), options);
      return this.ajax(url, 'GET', options);
    },
    buildRelationshipQuery: function buildRelationshipQuery(snapshot, relationship) {
      var data = {};

      //add query parameters from the model mixin's query function
      var queryParams = snapshot.record.get((0, _emberDataHasManyQueryPropertyNames.queryParamPropertyName)(relationship.key));
      if (!_ember['default'].isEmpty(queryParams)) {
        data = jQuery.extend(true, data, queryParams);
      }

      //add query parameters defined in the model itself by the 'parameters' option
      var relationshipParams = relationship.options.parameters;
      if (!_ember['default'].isEmpty(relationshipParams)) {
        data = jQuery.extend(true, data, relationshipParams);
      }

      //replace any functions in the data with their return value
      evaluateFunctions(data, snapshot.record);
      return data;
    },
    ajaxOptions: function ajaxOptions() {
      var ajaxOptions = this._super.apply(this, arguments);
      var defaultBeforeSend = ajaxOptions.beforeSend || function () {};
      ajaxOptions.beforeSend = function (jqXHR) {
        defaultBeforeSend.apply(undefined, arguments);
        //store the jqXHR in the options object, which in turn is stored in the model itself, so the model mixin can abort it
        ajaxOptions.jqXHR = jqXHR;
      };
      return ajaxOptions;
    }
  });
});
define('ember-data-has-many-query/property-names', ['exports'], function (exports) {
  'use strict';

  var queryParamPropertyName = function queryParamPropertyName(key) {
    return '__' + key + 'QueryParams';
  };

  var lastWasErrorPropertyName = function lastWasErrorPropertyName(key) {
    return '__' + key + 'LastWasError';
  };

  var ajaxOptionsPropertyName = function ajaxOptionsPropertyName(key) {
    return '__' + key + 'AjaxOptions';
  };

  var stickyPropertyName = function stickyPropertyName(key) {
    return '__' + key + 'BelongsToSticky';
  };

  exports.queryParamPropertyName = queryParamPropertyName;
  exports.lastWasErrorPropertyName = lastWasErrorPropertyName;
  exports.ajaxOptionsPropertyName = ajaxOptionsPropertyName;
  exports.stickyPropertyName = stickyPropertyName;
});
define("ember-data/-private/adapters", ["exports", "ember-data/adapters/json-api", "ember-data/adapters/rest"], function (exports, _emberDataAdaptersJsonApi, _emberDataAdaptersRest) {
  /**
    @module ember-data
  */

  "use strict";

  exports.JSONAPIAdapter = _emberDataAdaptersJsonApi["default"];
  exports.RESTAdapter = _emberDataAdaptersRest["default"];
});
define('ember-data/-private/adapters/build-url-mixin', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var get = _ember['default'].get;

  /**
  
    WARNING: This interface is likely to change in order to accomodate https://github.com/emberjs/rfcs/pull/4
  
    ## Using BuildURLMixin
  
    To use url building, include the mixin when extending an adapter, and call `buildURL` where needed.
    The default behaviour is designed for RESTAdapter.
  
    ### Example
  
    ```javascript
    export default DS.Adapter.extend(BuildURLMixin, {
      findRecord: function(store, type, id, snapshot) {
        var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');
        return this.ajax(url, 'GET');
      }
    });
    ```
  
    ### Attributes
  
    The `host` and `namespace` attributes will be used if defined, and are optional.
  
    @class BuildURLMixin
    @namespace DS
  */
  exports['default'] = _ember['default'].Mixin.create({
    /**
      Builds a URL for a given type and optional ID.
       By default, it pluralizes the type's name (for example, 'post'
      becomes 'posts' and 'person' becomes 'people'). To override the
      pluralization see [pathForType](#method_pathForType).
       If an ID is specified, it adds the ID to the path generated
      for the type, separated by a `/`.
       When called by RESTAdapter.findMany() the `id` and `snapshot` parameters
      will be arrays of ids and snapshots.
       @method buildURL
      @param {String} modelName
      @param {(String|Array|Object)} id single id or array of ids or query
      @param {(DS.Snapshot|Array)} snapshot single snapshot or array of snapshots
      @param {String} requestType
      @param {Object} query object of query parameters to send for query requests.
      @return {String} url
    */
    buildURL: function buildURL(modelName, id, snapshot, requestType, query) {
      switch (requestType) {
        case 'findRecord':
          return this.urlForFindRecord(id, modelName, snapshot);
        case 'findAll':
          return this.urlForFindAll(modelName, snapshot);
        case 'query':
          return this.urlForQuery(query, modelName);
        case 'queryRecord':
          return this.urlForQueryRecord(query, modelName);
        case 'findMany':
          return this.urlForFindMany(id, modelName, snapshot);
        case 'findHasMany':
          return this.urlForFindHasMany(id, modelName, snapshot);
        case 'findBelongsTo':
          return this.urlForFindBelongsTo(id, modelName, snapshot);
        case 'createRecord':
          return this.urlForCreateRecord(modelName, snapshot);
        case 'updateRecord':
          return this.urlForUpdateRecord(id, modelName, snapshot);
        case 'deleteRecord':
          return this.urlForDeleteRecord(id, modelName, snapshot);
        default:
          return this._buildURL(modelName, id);
      }
    },

    /**
      @method _buildURL
      @private
      @param {String} modelName
      @param {String} id
      @return {String} url
    */
    _buildURL: function _buildURL(modelName, id) {
      var url = [];
      var host = get(this, 'host');
      var prefix = this.urlPrefix();
      var path;

      if (modelName) {
        path = this.pathForType(modelName);
        if (path) {
          url.push(path);
        }
      }

      if (id) {
        url.push(encodeURIComponent(id));
      }
      if (prefix) {
        url.unshift(prefix);
      }

      url = url.join('/');
      if (!host && url && url.charAt(0) !== '/') {
        url = '/' + url;
      }

      return url;
    },

    /**
     * @method urlForFindRecord
     * @param {String} id
     * @param {String} modelName
     * @param {DS.Snapshot} snapshot
     * @return {String} url
     */
    urlForFindRecord: function urlForFindRecord(id, modelName, snapshot) {
      return this._buildURL(modelName, id);
    },

    /**
     * @method urlForFindAll
     * @param {String} modelName
     * @param {DS.SnapshotRecordArray} snapshot
     * @return {String} url
     */
    urlForFindAll: function urlForFindAll(modelName, snapshot) {
      return this._buildURL(modelName);
    },

    /**
     * @method urlForQuery
     * @param {Object} query
     * @param {String} modelName
     * @return {String} url
     */
    urlForQuery: function urlForQuery(query, modelName) {
      return this._buildURL(modelName);
    },

    /**
     * @method urlForQueryRecord
     * @param {Object} query
     * @param {String} modelName
     * @return {String} url
     */
    urlForQueryRecord: function urlForQueryRecord(query, modelName) {
      return this._buildURL(modelName);
    },

    /**
     * @method urlForFindMany
     * @param {Array} ids
     * @param {String} modelName
     * @param {Array} snapshots
     * @return {String} url
     */
    urlForFindMany: function urlForFindMany(ids, modelName, snapshots) {
      return this._buildURL(modelName);
    },

    /**
     * @method urlForFindHasMany
     * @param {String} id
     * @param {String} modelName
     * @param {DS.Snapshot} snapshot
     * @return {String} url
     */
    urlForFindHasMany: function urlForFindHasMany(id, modelName, snapshot) {
      return this._buildURL(modelName, id);
    },

    /**
     * @method urlForFindBelongsTo
     * @param {String} id
     * @param {String} modelName
     * @param {DS.Snapshot} snapshot
     * @return {String} url
     */
    urlForFindBelongsTo: function urlForFindBelongsTo(id, modelName, snapshot) {
      return this._buildURL(modelName, id);
    },

    /**
     * @method urlForCreateRecord
     * @param {String} modelName
     * @param {DS.Snapshot} snapshot
     * @return {String} url
     */
    urlForCreateRecord: function urlForCreateRecord(modelName, snapshot) {
      return this._buildURL(modelName);
    },

    /**
     * @method urlForUpdateRecord
     * @param {String} id
     * @param {String} modelName
     * @param {DS.Snapshot} snapshot
     * @return {String} url
     */
    urlForUpdateRecord: function urlForUpdateRecord(id, modelName, snapshot) {
      return this._buildURL(modelName, id);
    },

    /**
     * @method urlForDeleteRecord
     * @param {String} id
     * @param {String} modelName
     * @param {DS.Snapshot} snapshot
     * @return {String} url
     */
    urlForDeleteRecord: function urlForDeleteRecord(id, modelName, snapshot) {
      return this._buildURL(modelName, id);
    },

    /**
      @method urlPrefix
      @private
      @param {String} path
      @param {String} parentURL
      @return {String} urlPrefix
    */
    urlPrefix: function urlPrefix(path, parentURL) {
      var host = get(this, 'host');
      var namespace = get(this, 'namespace');

      if (!host || host === '/') {
        host = '';
      }

      if (path) {
        // Protocol relative url
        if (/^\/\//.test(path) || /http(s)?:\/\//.test(path)) {
          // Do nothing, the full host is already included.
          return path;

          // Absolute path
        } else if (path.charAt(0) === '/') {
            return '' + host + path;
            // Relative path
          } else {
              return parentURL + '/' + path;
            }
      }

      // No path provided
      var url = [];
      if (host) {
        url.push(host);
      }
      if (namespace) {
        url.push(namespace);
      }
      return url.join('/');
    },

    /**
      Determines the pathname for a given type.
       By default, it pluralizes the type's name (for example,
      'post' becomes 'posts' and 'person' becomes 'people').
       ### Pathname customization
       For example if you have an object LineItem with an
      endpoint of "/line_items/".
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.RESTAdapter.extend({
        pathForType: function(modelName) {
          var decamelized = Ember.String.decamelize(modelName);
          return Ember.String.pluralize(decamelized);
        }
      });
      ```
       @method pathForType
      @param {String} modelName
      @return {String} path
    **/
    pathForType: function pathForType(modelName) {
      var camelized = _ember['default'].String.camelize(modelName);
      return _ember['default'].String.pluralize(camelized);
    }
  });
});
define('ember-data/-private/core', ['exports', 'ember', 'ember-data/version'], function (exports, _ember, _emberDataVersion) {
  'use strict';

  /**
    @module ember-data
  */

  /**
    All Ember Data classes, methods and functions are defined inside of this namespace.
  
    @class DS
    @static
  */

  /**
    @property VERSION
    @type String
    @static
  */
  var DS = _ember['default'].Namespace.create({
    VERSION: _emberDataVersion['default'],
    name: "DS"
  });

  if (_ember['default'].libraries) {
    _ember['default'].libraries.registerCoreLibrary('Ember Data', DS.VERSION);
  }

  exports['default'] = DS;
});
define('ember-data/-private/debug', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.assert = assert;
  exports.debug = debug;
  exports.deprecate = deprecate;
  exports.info = info;
  exports.runInDebug = runInDebug;
  exports.warn = warn;
  exports.debugSeal = debugSeal;
  exports.assertPolymorphicType = assertPolymorphicType;

  function assert() {
    return _ember['default'].assert.apply(_ember['default'], arguments);
  }

  function debug() {
    return _ember['default'].debug.apply(_ember['default'], arguments);
  }

  function deprecate() {
    return _ember['default'].deprecate.apply(_ember['default'], arguments);
  }

  function info() {
    return _ember['default'].info.apply(_ember['default'], arguments);
  }

  function runInDebug() {
    return _ember['default'].runInDebug.apply(_ember['default'], arguments);
  }

  function warn() {
    return _ember['default'].warn.apply(_ember['default'], arguments);
  }

  function debugSeal() {
    return _ember['default'].debugSeal.apply(_ember['default'], arguments);
  }

  function checkPolymorphic(typeClass, addedRecord) {
    if (typeClass.__isMixin) {
      //TODO Need to do this in order to support mixins, should convert to public api
      //once it exists in Ember
      return typeClass.__mixin.detect(addedRecord.type.PrototypeMixin);
    }
    if (_ember['default'].MODEL_FACTORY_INJECTIONS) {
      typeClass = typeClass.superclass;
    }
    return typeClass.detect(addedRecord.type);
  }

  /*
    Assert that `addedRecord` has a valid type so it can be added to the
    relationship of the `record`.
  
    The assert basically checks if the `addedRecord` can be added to the
    relationship (specified via `relationshipMeta`) of the `record`.
  
    This utility should only be used internally, as both record parameters must
    be an InternalModel and the `relationshipMeta` needs to be the meta
    information about the relationship, retrieved via
    `record.relationshipFor(key)`.
  
    @method assertPolymorphicType
    @param {InternalModel} record
    @param {RelationshipMeta} relationshipMeta retrieved via
           `record.relationshipFor(key)`
    @param {InternalModel} addedRecord record which
           should be added/set for the relationship
  */

  function assertPolymorphicType(record, relationshipMeta, addedRecord) {
    var addedType = addedRecord.type.modelName;
    var recordType = record.type.modelName;
    var key = relationshipMeta.key;
    var typeClass = record.store.modelFor(relationshipMeta.type);

    var assertionMessage = 'You cannot add a record of type \'' + addedType + '\' to the \'' + recordType + '.' + key + '\' relationship (only \'' + typeClass.modelName + '\' allowed)';

    assert(assertionMessage, checkPolymorphic(typeClass, addedRecord));
  }
});
define('ember-data/-private/ext/date', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  /**
    @module ember-data
  */

  'use strict';

  /**
     Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
  
     © 2011 Colin Snover <http://zetafleet.com>
  
     Released under MIT license.
  
     @class Date
     @namespace Ember
     @static
     @deprecated
  */
  _ember['default'].Date = _ember['default'].Date || {};

  var origParse = Date.parse;
  var numericKeys = [1, 4, 5, 6, 7, 10, 11];

  var parseDate = function parseDate(date) {
    var timestamp, struct;
    var minutesOffset = 0;

    // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
    // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
    // implementations could be faster
    //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
    if (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?:(\d{2}))?)?)?$/.exec(date)) {
      // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
      for (var i = 0, k; k = numericKeys[i]; ++i) {
        struct[k] = +struct[k] || 0;
      }

      // allow undefined days and months
      struct[2] = (+struct[2] || 1) - 1;
      struct[3] = +struct[3] || 1;

      if (struct[8] !== 'Z' && struct[9] !== undefined) {
        minutesOffset = struct[10] * 60 + struct[11];

        if (struct[9] === '+') {
          minutesOffset = 0 - minutesOffset;
        }
      }

      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    } else {
      timestamp = origParse ? origParse(date) : NaN;
    }

    return timestamp;
  };

  exports.parseDate = parseDate;

  _ember['default'].Date.parse = function (date) {
    // throw deprecation
    (0, _emberDataPrivateDebug.deprecate)('Ember.Date.parse is deprecated because Safari 5-, IE8-, and\n      Firefox 3.6- are no longer supported (see\n      https://github.com/csnover/js-iso8601 for the history of this issue).\n      Please use Date.parse instead', false, {
      id: 'ds.ember.date.parse-deprecate',
      until: '3.0.0'
    });

    return parseDate(date);
  };

  if (_ember['default'].EXTEND_PROTOTYPES === true || _ember['default'].EXTEND_PROTOTYPES.Date) {
    (0, _emberDataPrivateDebug.deprecate)('Overriding Date.parse with Ember.Date.parse is deprecated. Please set ENV.EmberENV.EXTEND_PROTOTYPES.Date to false in config/environment.js\n\n\n// config/environment.js\nENV = {\n  EmberENV: {\n    EXTEND_PROTOTYPES: {\n      Date: false,\n    }\n  }\n}\n', false, {
      id: 'ds.date.parse-deprecate',
      until: '3.0.0'
    });
    Date.parse = parseDate;
  }
});
define('ember-data/-private/features', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = isEnabled;

  function isEnabled() {
    var _Ember$FEATURES;

    return (_Ember$FEATURES = _ember['default'].FEATURES).isEnabled.apply(_Ember$FEATURES, arguments);
  }
});
define('ember-data/-private/global', ['exports'], function (exports) {
  /* globals global, window, self */

  // originally from https://github.com/emberjs/ember.js/blob/c0bd26639f50efd6a03ee5b87035fd200e313b8e/packages/ember-environment/lib/global.js

  // from lodash to catch fake globals
  'use strict';

  function checkGlobal(value) {
    return value && value.Object === Object ? value : undefined;
  }

  // element ids can ruin global miss checks
  function checkElementIdShadowing(value) {
    return value && value.nodeType === undefined ? value : undefined;
  }

  // export real global
  exports['default'] = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || new Function('return this')();
  // eval outside of strict mode
});
define("ember-data/-private/initializers/data-adapter", ["exports", "ember-data/-private/system/debug/debug-adapter"], function (exports, _emberDataPrivateSystemDebugDebugAdapter) {
  "use strict";

  exports["default"] = initializeDebugAdapter;

  /*
    Configures a registry with injections on Ember applications
    for the Ember-Data store. Accepts an optional namespace argument.
  
    @method initializeDebugAdapter
    @param {Ember.Registry} registry
  */
  function initializeDebugAdapter(registry) {
    registry.register('data-adapter:main', _emberDataPrivateSystemDebugDebugAdapter["default"]);
  }
});
define('ember-data/-private/initializers/store-injections', ['exports'], function (exports) {
  'use strict';

  exports['default'] = initializeStoreInjections;

  /*
    Configures a registry with injections on Ember applications
    for the Ember-Data store. Accepts an optional namespace argument.
  
    @method initializeStoreInjections
    @param {Ember.Registry} registry
  */
  function initializeStoreInjections(registry) {
    // registry.injection for Ember < 2.1.0
    // application.inject for Ember 2.1.0+
    var inject = registry.inject || registry.injection;
    inject.call(registry, 'controller', 'store', 'service:store');
    inject.call(registry, 'route', 'store', 'service:store');
    inject.call(registry, 'data-adapter', 'store', 'service:store');
  }
});
define("ember-data/-private/initializers/store", ["exports", "ember-data/-private/system/store", "ember-data/-private/serializers", "ember-data/-private/adapters"], function (exports, _emberDataPrivateSystemStore, _emberDataPrivateSerializers, _emberDataPrivateAdapters) {
  "use strict";

  exports["default"] = initializeStore;

  function has(applicationOrRegistry, fullName) {
    if (applicationOrRegistry.has) {
      // < 2.1.0
      return applicationOrRegistry.has(fullName);
    } else {
      // 2.1.0+
      return applicationOrRegistry.hasRegistration(fullName);
    }
  }

  /*
    Configures a registry for use with an Ember-Data
    store. Accepts an optional namespace argument.
  
    @method initializeStore
    @param {Ember.Registry} registry
  */
  function initializeStore(registry) {
    // registry.optionsForType for Ember < 2.1.0
    // application.registerOptionsForType for Ember 2.1.0+
    var registerOptionsForType = registry.registerOptionsForType || registry.optionsForType;
    registerOptionsForType.call(registry, 'serializer', { singleton: false });
    registerOptionsForType.call(registry, 'adapter', { singleton: false });

    registry.register('serializer:-default', _emberDataPrivateSerializers.JSONSerializer);
    registry.register('serializer:-rest', _emberDataPrivateSerializers.RESTSerializer);
    registry.register('adapter:-rest', _emberDataPrivateAdapters.RESTAdapter);

    registry.register('adapter:-json-api', _emberDataPrivateAdapters.JSONAPIAdapter);
    registry.register('serializer:-json-api', _emberDataPrivateSerializers.JSONAPISerializer);

    if (!has(registry, 'service:store')) {
      registry.register('service:store', _emberDataPrivateSystemStore["default"]);
    }
  }
});
define('ember-data/-private/initializers/transforms', ['exports', 'ember-data/-private/transforms'], function (exports, _emberDataPrivateTransforms) {
  'use strict';

  exports['default'] = initializeTransforms;

  /*
    Configures a registry for use with Ember-Data
    transforms.
  
    @method initializeTransforms
    @param {Ember.Registry} registry
  */
  function initializeTransforms(registry) {
    registry.register('transform:boolean', _emberDataPrivateTransforms.BooleanTransform);
    registry.register('transform:date', _emberDataPrivateTransforms.DateTransform);
    registry.register('transform:number', _emberDataPrivateTransforms.NumberTransform);
    registry.register('transform:string', _emberDataPrivateTransforms.StringTransform);
  }
});
define('ember-data/-private/instance-initializers/initialize-store-service', ['exports'], function (exports) {
  'use strict';

  exports['default'] = initializeStoreService;

  /*
   Configures a registry for use with an Ember-Data
   store.
  
   @method initializeStoreService
   @param {Ember.ApplicationInstance} applicationOrRegistry
   */
  function initializeStoreService(application) {
    var container = application.lookup ? application : application.container;
    // Eagerly generate the store so defaultStore is populated.
    container.lookup('service:store');
  }
});
define("ember-data/-private/serializers", ["exports", "ember-data/serializers/json-api", "ember-data/serializers/json", "ember-data/serializers/rest"], function (exports, _emberDataSerializersJsonApi, _emberDataSerializersJson, _emberDataSerializersRest) {
  /**
    @module ember-data
  */

  "use strict";

  exports.JSONAPISerializer = _emberDataSerializersJsonApi["default"];
  exports.JSONSerializer = _emberDataSerializersJson["default"];
  exports.RESTSerializer = _emberDataSerializersRest["default"];
});
define("ember-data/-private/system/clone-null", ["exports", "ember-data/-private/system/empty-object"], function (exports, _emberDataPrivateSystemEmptyObject) {
  "use strict";

  exports["default"] = cloneNull;

  function cloneNull(source) {
    var clone = new _emberDataPrivateSystemEmptyObject["default"]();
    for (var key in source) {
      clone[key] = source[key];
    }
    return clone;
  }
});
define('ember-data/-private/system/coerce-id', ['exports'], function (exports) {
  'use strict';

  exports['default'] = coerceId;

  // Used by the store to normalize IDs entering the store.  Despite the fact
  // that developers may provide IDs as numbers (e.g., `store.findRecord('person', 1)`),
  // it is important that internally we use strings, since IDs may be serialized
  // and lose type information.  For example, Ember's router may put a record's
  // ID into the URL, and if we later try to deserialize that URL and find the
  // corresponding record, we will not know if it is a string or a number.

  function coerceId(id) {
    return id === null || id === undefined || id === '' ? null : id + '';
  }
});
define("ember-data/-private/system/debug", ["exports", "ember-data/-private/system/debug/debug-adapter"], function (exports, _emberDataPrivateSystemDebugDebugAdapter) {
  /**
    @module ember-data
  */

  "use strict";

  exports["default"] = _emberDataPrivateSystemDebugDebugAdapter["default"];
});
define('ember-data/-private/system/debug/debug-adapter', ['exports', 'ember', 'ember-data/model'], function (exports, _ember, _emberDataModel) {
  /**
    @module ember-data
  */
  'use strict';

  var get = _ember['default'].get;
  var capitalize = _ember['default'].String.capitalize;
  var underscore = _ember['default'].String.underscore;
  var assert = _ember['default'].assert;

  /*
    Extend `Ember.DataAdapter` with ED specific code.
  
    @class DebugAdapter
    @namespace DS
    @extends Ember.DataAdapter
    @private
  */
  exports['default'] = _ember['default'].DataAdapter.extend({
    getFilters: function getFilters() {
      return [{ name: 'isNew', desc: 'New' }, { name: 'isModified', desc: 'Modified' }, { name: 'isClean', desc: 'Clean' }];
    },

    detect: function detect(typeClass) {
      return typeClass !== _emberDataModel['default'] && _emberDataModel['default'].detect(typeClass);
    },

    columnsForType: function columnsForType(typeClass) {
      var columns = [{
        name: 'id',
        desc: 'Id'
      }];
      var count = 0;
      var self = this;
      get(typeClass, 'attributes').forEach(function (meta, name) {
        if (count++ > self.attributeLimit) {
          return false;
        }
        var desc = capitalize(underscore(name).replace('_', ' '));
        columns.push({ name: name, desc: desc });
      });
      return columns;
    },

    getRecords: function getRecords(modelClass, modelName) {
      if (arguments.length < 2) {
        // Legacy Ember.js < 1.13 support
        var containerKey = modelClass._debugContainerKey;
        if (containerKey) {
          var match = containerKey.match(/model:(.*)/);
          if (match) {
            modelName = match[1];
          }
        }
      }
      assert("Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support", !!modelName);
      return this.get('store').peekAll(modelName);
    },

    getRecordColumnValues: function getRecordColumnValues(record) {
      var _this = this;

      var count = 0;
      var columnValues = { id: get(record, 'id') };

      record.eachAttribute(function (key) {
        if (count++ > _this.attributeLimit) {
          return false;
        }
        var value = get(record, key);
        columnValues[key] = value;
      });
      return columnValues;
    },

    getRecordKeywords: function getRecordKeywords(record) {
      var keywords = [];
      var keys = _ember['default'].A(['id']);
      record.eachAttribute(function (key) {
        return keys.push(key);
      });
      keys.forEach(function (key) {
        return keywords.push(get(record, key));
      });
      return keywords;
    },

    getRecordFilterValues: function getRecordFilterValues(record) {
      return {
        isNew: record.get('isNew'),
        isModified: record.get('hasDirtyAttributes') && !record.get('isNew'),
        isClean: !record.get('hasDirtyAttributes')
      };
    },

    getRecordColor: function getRecordColor(record) {
      var color = 'black';
      if (record.get('isNew')) {
        color = 'green';
      } else if (record.get('hasDirtyAttributes')) {
        color = 'blue';
      }
      return color;
    },

    observeRecord: function observeRecord(record, recordUpdated) {
      var releaseMethods = _ember['default'].A();
      var keysToObserve = _ember['default'].A(['id', 'isNew', 'hasDirtyAttributes']);

      record.eachAttribute(function (key) {
        return keysToObserve.push(key);
      });
      var adapter = this;

      keysToObserve.forEach(function (key) {
        var handler = function handler() {
          recordUpdated(adapter.wrapRecord(record));
        };
        _ember['default'].addObserver(record, key, handler);
        releaseMethods.push(function () {
          _ember['default'].removeObserver(record, key, handler);
        });
      });

      var release = function release() {
        releaseMethods.forEach(function (fn) {
          return fn();
        });
      };

      return release;
    }
  });
});
define('ember-data/-private/system/debug/debug-info', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = _ember['default'].Mixin.create({

    /**
      Provides info about the model for debugging purposes
      by grouping the properties into more semantic groups.
       Meant to be used by debugging tools such as the Chrome Ember Extension.
       - Groups all attributes in "Attributes" group.
      - Groups all belongsTo relationships in "Belongs To" group.
      - Groups all hasMany relationships in "Has Many" group.
      - Groups all flags in "Flags" group.
      - Flags relationship CPs as expensive properties.
       @method _debugInfo
      @for DS.Model
      @private
    */
    _debugInfo: function _debugInfo() {
      var attributes = ['id'];
      var relationships = { belongsTo: [], hasMany: [] };
      var expensiveProperties = [];

      this.eachAttribute(function (name, meta) {
        return attributes.push(name);
      });

      this.eachRelationship(function (name, relationship) {
        relationships[relationship.kind].push(name);
        expensiveProperties.push(name);
      });

      var groups = [{
        name: 'Attributes',
        properties: attributes,
        expand: true
      }, {
        name: 'Belongs To',
        properties: relationships.belongsTo,
        expand: true
      }, {
        name: 'Has Many',
        properties: relationships.hasMany,
        expand: true
      }, {
        name: 'Flags',
        properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid']
      }];

      return {
        propertyInfo: {
          // include all other mixins / properties (not just the grouped ones)
          includeOtherProperties: true,
          groups: groups,
          // don't pre-calculate unless cached
          expensiveProperties: expensiveProperties
        }
      };
    }
  });
});
define("ember-data/-private/system/empty-object", ["exports"], function (exports) {
  "use strict";

  exports["default"] = EmptyObject;

  // This exists because `Object.create(null)` is absurdly slow compared
  // to `new EmptyObject()`. In either case, you want a null prototype
  // when you're treating the object instances as arbitrary dictionaries
  // and don't want your keys colliding with build-in methods on the
  // default object prototype.
  var proto = Object.create(null, {
    // without this, we will always still end up with (new
    // EmptyObject()).constructor === Object
    constructor: {
      value: undefined,
      enumerable: false,
      writable: true
    }
  });
  function EmptyObject() {}

  EmptyObject.prototype = proto;
});
define('ember-data/-private/system/is-array-like', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = isArrayLike;

  /*
    We're using this to detect arrays and "array-like" objects.
  
    This is a copy of the `isArray` method found in `ember-runtime/utils` as we're
    currently unable to import non-exposed modules.
  
    This method was previously exposed as `Ember.isArray` but since
    https://github.com/emberjs/ember.js/pull/11463 `Ember.isArray` is an alias of
    `Array.isArray` hence removing the "array-like" part.
   */
  function isArrayLike(obj) {
    if (!obj || obj.setInterval) {
      return false;
    }
    if (Array.isArray(obj)) {
      return true;
    }
    if (_ember['default'].Array.detect(obj)) {
      return true;
    }

    var type = _ember['default'].typeOf(obj);
    if ('array' === type) {
      return true;
    }
    if (obj.length !== undefined && 'object' === type) {
      return true;
    }
    return false;
  }
});
define("ember-data/-private/system/many-array", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/promise-proxies", "ember-data/-private/system/store/common"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemStoreCommon) {
  /**
    @module ember-data
  */
  "use strict";

  var get = _ember["default"].get;
  var set = _ember["default"].set;

  /**
    A `ManyArray` is a `MutableArray` that represents the contents of a has-many
    relationship.
  
    The `ManyArray` is instantiated lazily the first time the relationship is
    requested.
  
    ### Inverses
  
    Often, the relationships in Ember Data applications will have
    an inverse. For example, imagine the following models are
    defined:
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      comments: DS.hasMany('comment')
    });
    ```
  
    ```app/models/comment.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```
  
    If you created a new instance of `App.Post` and added
    a `App.Comment` record to its `comments` has-many
    relationship, you would expect the comment's `post`
    property to be set to the post that contained
    the has-many.
  
    We call the record to which a relationship belongs the
    relationship's _owner_.
  
    @class ManyArray
    @namespace DS
    @extends Ember.Object
    @uses Ember.MutableArray, Ember.Evented
  */
  exports["default"] = _ember["default"].Object.extend(_ember["default"].MutableArray, _ember["default"].Evented, {
    init: function init() {
      this._super.apply(this, arguments);
      this.currentState = _ember["default"].A([]);
    },

    record: null,

    canonicalState: null,
    currentState: null,

    length: 0,

    objectAt: function objectAt(index) {
      //Ember observers such as 'firstObject', 'lastObject' might do out of bounds accesses
      if (!this.currentState[index]) {
        return undefined;
      }
      return this.currentState[index].getRecord();
    },

    flushCanonical: function flushCanonical() {
      //TODO make this smarter, currently its plenty stupid
      var toSet = this.canonicalState.filter(function (internalModel) {
        return !internalModel.isDeleted();
      });

      //a hack for not removing new records
      //TODO remove once we have proper diffing
      var newRecords = this.currentState.filter(
      // only add new records which are not yet in the canonical state of this
      // relationship (a new record can be in the canonical state if it has
      function (internalModel) {
        return internalModel.isNew() && toSet.indexOf(internalModel) === -1;
      });
      toSet = toSet.concat(newRecords);
      var oldLength = this.length;
      this.arrayContentWillChange(0, this.length, toSet.length);
      // It’s possible the parent side of the relationship may have been unloaded by this point
      if ((0, _emberDataPrivateSystemStoreCommon._objectIsAlive)(this)) {
        this.set('length', toSet.length);
      }
      this.currentState = toSet;
      this.arrayContentDidChange(0, oldLength, this.length);
      //TODO Figure out to notify only on additions and maybe only if unloaded
      this.relationship.notifyHasManyChanged();
      this.record.updateRecordArrays();
    },
    /**
      `true` if the relationship is polymorphic, `false` otherwise.
       @property {Boolean} isPolymorphic
      @private
    */
    isPolymorphic: false,

    /**
      The loading state of this array
       @property {Boolean} isLoaded
    */
    isLoaded: false,

    /**
      The relationship which manages this array.
       @property {ManyRelationship} relationship
      @private
    */
    relationship: null,

    /**
      Metadata associated with the request for async hasMany relationships.
       Example
       Given that the server returns the following JSON payload when fetching a
      hasMany relationship:
       ```js
      {
        "comments": [{
          "id": 1,
          "comment": "This is the first comment",
        }, {
          // ...
        }],
         "meta": {
          "page": 1,
          "total": 5
        }
      }
      ```
       You can then access the metadata via the `meta` property:
       ```js
      post.get('comments').then(function(comments) {
        var meta = comments.get('meta');
         // meta.page => 1
        // meta.total => 5
      });
      ```
       @property {Object} meta
      @public
    */
    meta: null,

    internalReplace: function internalReplace(idx, amt, objects) {
      if (!objects) {
        objects = [];
      }
      this.arrayContentWillChange(idx, amt, objects.length);
      this.currentState.splice.apply(this.currentState, [idx, amt].concat(objects));
      this.set('length', this.currentState.length);
      this.arrayContentDidChange(idx, amt, objects.length);
      if (objects) {
        //TODO(Igor) probably needed only for unloaded records
        this.relationship.notifyHasManyChanged();
      }
      this.record.updateRecordArrays();
    },

    //TODO(Igor) optimize
    internalRemoveRecords: function internalRemoveRecords(records) {
      var index;
      for (var i = 0; i < records.length; i++) {
        index = this.currentState.indexOf(records[i]);
        this.internalReplace(index, 1);
      }
    },

    //TODO(Igor) optimize
    internalAddRecords: function internalAddRecords(records, idx) {
      if (idx === undefined) {
        idx = this.currentState.length;
      }
      this.internalReplace(idx, 0, records);
    },

    replace: function replace(idx, amt, objects) {
      var records;
      if (amt > 0) {
        records = this.currentState.slice(idx, idx + amt);
        this.get('relationship').removeRecords(records);
      }
      if (objects) {
        this.get('relationship').addRecords(objects.map(function (obj) {
          return obj._internalModel;
        }), idx);
      }
    },
    /**
      Used for async `hasMany` arrays
      to keep track of when they will resolve.
       @property {Ember.RSVP.Promise} promise
      @private
    */
    promise: null,

    /**
      @method loadingRecordsCount
      @param {Number} count
      @private
    */
    loadingRecordsCount: function loadingRecordsCount(count) {
      this.loadingRecordsCount = count;
    },

    /**
      @method loadedRecord
      @private
    */
    loadedRecord: function loadedRecord() {
      this.loadingRecordsCount--;
      if (this.loadingRecordsCount === 0) {
        set(this, 'isLoaded', true);
        this.trigger('didLoad');
      }
    },

    /**
      @method reload
      @public
    */
    reload: function reload() {
      return this.relationship.reload();
    },

    /**
      Saves all of the records in the `ManyArray`.
       Example
       ```javascript
      store.findRecord('inbox', 1).then(function(inbox) {
        inbox.get('messages').then(function(messages) {
          messages.forEach(function(message) {
            message.set('isRead', true);
          });
          messages.save()
        });
      });
      ```
       @method save
      @return {DS.PromiseArray} promise
    */
    save: function save() {
      var manyArray = this;
      var promiseLabel = "DS: ManyArray#save " + get(this, 'type');
      var promise = _ember["default"].RSVP.all(this.invoke("save"), promiseLabel).then(function (array) {
        return manyArray;
      }, null, "DS: ManyArray#save return ManyArray");

      return _emberDataPrivateSystemPromiseProxies.PromiseArray.create({ promise: promise });
    },

    /**
      Create a child record within the owner
       @method createRecord
      @private
      @param {Object} hash
      @return {DS.Model} record
    */
    createRecord: function createRecord(hash) {
      var store = get(this, 'store');
      var type = get(this, 'type');
      var record;

      (0, _emberDataPrivateDebug.assert)("You cannot add '" + type.modelName + "' records to this polymorphic relationship.", !get(this, 'isPolymorphic'));
      record = store.createRecord(type.modelName, hash);
      this.pushObject(record);

      return record;
    }
  });
});
// been 'acknowleged' to be in the relationship via a store.push)
define("ember-data/-private/system/model", ["exports", "ember-data/-private/system/model/model", "ember-data/attr", "ember-data/-private/system/model/states", "ember-data/-private/system/model/errors"], function (exports, _emberDataPrivateSystemModelModel, _emberDataAttr, _emberDataPrivateSystemModelStates, _emberDataPrivateSystemModelErrors) {
  /**
    @module ember-data
  */

  "use strict";

  exports.RootState = _emberDataPrivateSystemModelStates["default"];
  exports.attr = _emberDataAttr["default"];
  exports.Errors = _emberDataPrivateSystemModelErrors["default"];
  exports["default"] = _emberDataPrivateSystemModelModel["default"];
});
define("ember-data/-private/system/model/attr", ["exports", "ember", "ember-data/-private/debug"], function (exports, _ember, _emberDataPrivateDebug) {
  "use strict";

  var get = _ember["default"].get;
  var Map = _ember["default"].Map;

  /**
    @module ember-data
  */

  /**
    @class Model
    @namespace DS
  */

  var AttrClassMethodsMixin = _ember["default"].Mixin.create({
    /**
      A map whose keys are the attributes of the model (properties
      described by DS.attr) and whose values are the meta object for the
      property.
       Example
       ```app/models/person.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        firstName: attr('string'),
        lastName: attr('string'),
        birthday: attr('date')
      });
      ```
       ```javascript
      import Ember from 'ember';
      import Person from 'app/models/person';
       var attributes = Ember.get(Person, 'attributes')
       attributes.forEach(function(meta, name) {
        console.log(name, meta);
      });
       // prints:
      // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
      // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
      // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
      ```
       @property attributes
      @static
      @type {Ember.Map}
      @readOnly
    */
    attributes: _ember["default"].computed(function () {
      var _this = this;

      var map = Map.create();

      this.eachComputedProperty(function (name, meta) {
        if (meta.isAttribute) {
          (0, _emberDataPrivateDebug.assert)("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from " + _this.toString(), name !== 'id');

          meta.name = name;
          map.set(name, meta);
        }
      });

      return map;
    }).readOnly(),

    /**
      A map whose keys are the attributes of the model (properties
      described by DS.attr) and whose values are type of transformation
      applied to each attribute. This map does not include any
      attributes that do not have an transformation type.
       Example
       ```app/models/person.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        firstName: attr(),
        lastName: attr('string'),
        birthday: attr('date')
      });
      ```
       ```javascript
      import Ember from 'ember';
      import Person from 'app/models/person';
       var transformedAttributes = Ember.get(Person, 'transformedAttributes')
       transformedAttributes.forEach(function(field, type) {
        console.log(field, type);
      });
       // prints:
      // lastName string
      // birthday date
      ```
       @property transformedAttributes
      @static
      @type {Ember.Map}
      @readOnly
    */
    transformedAttributes: _ember["default"].computed(function () {
      var map = Map.create();

      this.eachAttribute(function (key, meta) {
        if (meta.type) {
          map.set(key, meta.type);
        }
      });

      return map;
    }).readOnly(),

    /**
      Iterates through the attributes of the model, calling the passed function on each
      attribute.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(name, meta);
      ```
       - `name` the name of the current property in the iteration
      - `meta` the meta object for the attribute property in the iteration
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context.
       Example
       ```javascript
      import DS from 'ember-data';
       var Person = DS.Model.extend({
        firstName: attr('string'),
        lastName: attr('string'),
        birthday: attr('date')
      });
       Person.eachAttribute(function(name, meta) {
        console.log(name, meta);
      });
       // prints:
      // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
      // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
      // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
     ```
       @method eachAttribute
      @param {Function} callback The callback to execute
      @param {Object} [binding] the value to which the callback's `this` should be bound
      @static
    */
    eachAttribute: function eachAttribute(callback, binding) {
      get(this, 'attributes').forEach(function (meta, name) {
        callback.call(binding, name, meta);
      });
    },

    /**
      Iterates through the transformedAttributes of the model, calling
      the passed function on each attribute. Note the callback will not be
      called for any attributes that do not have an transformation type.
       The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(name, type);
      ```
       - `name` the name of the current property in the iteration
      - `type` a string containing the name of the type of transformed
        applied to the attribute
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context.
       Example
       ```javascript
      import DS from 'ember-data';
       var Person = DS.Model.extend({
        firstName: attr(),
        lastName: attr('string'),
        birthday: attr('date')
      });
       Person.eachTransformedAttribute(function(name, type) {
        console.log(name, type);
      });
       // prints:
      // lastName string
      // birthday date
     ```
       @method eachTransformedAttribute
      @param {Function} callback The callback to execute
      @param {Object} [binding] the value to which the callback's `this` should be bound
      @static
    */
    eachTransformedAttribute: function eachTransformedAttribute(callback, binding) {
      get(this, 'transformedAttributes').forEach(function (type, name) {
        callback.call(binding, name, type);
      });
    }
  });

  exports.AttrClassMethodsMixin = AttrClassMethodsMixin;

  var AttrInstanceMethodsMixin = _ember["default"].Mixin.create({
    eachAttribute: function eachAttribute(callback, binding) {
      this.constructor.eachAttribute(callback, binding);
    }
  });
  exports.AttrInstanceMethodsMixin = AttrInstanceMethodsMixin;
});
define('ember-data/-private/system/model/errors', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  'use strict';

  var get = _ember['default'].get;
  var set = _ember['default'].set;
  var isEmpty = _ember['default'].isEmpty;
  var makeArray = _ember['default'].makeArray;

  var MapWithDefault = _ember['default'].MapWithDefault;

  /**
  @module ember-data
  */

  /**
    Holds validation errors for a given record, organized by attribute names.
  
    Every `DS.Model` has an `errors` property that is an instance of
    `DS.Errors`. This can be used to display validation error
    messages returned from the server when a `record.save()` rejects.
  
    For Example, if you had a `User` model that looked like this:
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      username: attr('string'),
      email: attr('string')
    });
    ```
    And you attempted to save a record that did not validate on the backend:
  
    ```javascript
    var user = store.createRecord('user', {
      username: 'tomster',
      email: 'invalidEmail'
    });
    user.save();
    ```
  
    Your backend would be expected to return an error response that described
    the problem, so that error messages can be generated on the app.
  
    API responses will be translated into instances of `DS.Errors` differently,
    depending on the specific combination of adapter and serializer used. You
    may want to check the documentation or the source code of the libraries
    that you are using, to know how they expect errors to be communicated.
  
    Errors can be displayed to the user by accessing their property name
    to get an array of all the error objects for that property. Each
    error object is a JavaScript object with two keys:
  
    - `message` A string containing the error message from the backend
    - `attribute` The name of the property associated with this error message
  
    ```handlebars
    <label>Username: {{input value=username}} </label>
    {{#each model.errors.username as |error|}}
      <div class="error">
        {{error.message}}
      </div>
    {{/each}}
  
    <label>Email: {{input value=email}} </label>
    {{#each model.errors.email as |error|}}
      <div class="error">
        {{error.message}}
      </div>
    {{/each}}
    ```
  
    You can also access the special `messages` property on the error
    object to get an array of all the error strings.
  
    ```handlebars
    {{#each model.errors.messages as |message|}}
      <div class="error">
        {{message}}
      </div>
    {{/each}}
    ```
  
    @class Errors
    @namespace DS
    @extends Ember.Object
    @uses Ember.Enumerable
    @uses Ember.Evented
   */
  exports['default'] = _ember['default'].ArrayProxy.extend(_ember['default'].Evented, {
    /**
      Register with target handler
       @method registerHandlers
      @param {Object} target
      @param {Function} becameInvalid
      @param {Function} becameValid
      @deprecated
    */
    registerHandlers: function registerHandlers(target, becameInvalid, becameValid) {
      (0, _emberDataPrivateDebug.deprecate)('Record errors will no longer be evented.', false, {
        id: 'ds.errors.registerHandlers',
        until: '3.0.0'
      });

      this._registerHandlers(target, becameInvalid, becameValid);
    },

    /**
      Register with target handler
       @method _registerHandlers
      @private
    */
    _registerHandlers: function _registerHandlers(target, becameInvalid, becameValid) {
      this.on('becameInvalid', target, becameInvalid);
      this.on('becameValid', target, becameValid);
    },

    /**
      @property errorsByAttributeName
      @type {Ember.MapWithDefault}
      @private
    */
    errorsByAttributeName: _ember['default'].computed(function () {
      return MapWithDefault.create({
        defaultValue: function defaultValue() {
          return _ember['default'].A();
        }
      });
    }),

    /**
      Returns errors for a given attribute
       ```javascript
      var user = store.createRecord('user', {
        username: 'tomster',
        email: 'invalidEmail'
      });
      user.save().catch(function(){
        user.get('errors').errorsFor('email'); // returns:
        // [{attribute: "email", message: "Doesn't look like a valid email."}]
      });
      ```
       @method errorsFor
      @param {String} attribute
      @return {Array}
    */
    errorsFor: function errorsFor(attribute) {
      return get(this, 'errorsByAttributeName').get(attribute);
    },

    /**
      An array containing all of the error messages for this
      record. This is useful for displaying all errors to the user.
       ```handlebars
      {{#each model.errors.messages as |message|}}
        <div class="error">
          {{message}}
        </div>
      {{/each}}
      ```
       @property messages
      @type {Array}
    */
    messages: _ember['default'].computed.mapBy('content', 'message'),

    /**
      @property content
      @type {Array}
      @private
    */
    content: _ember['default'].computed(function () {
      return _ember['default'].A();
    }),

    /**
      @method unknownProperty
      @private
    */
    unknownProperty: function unknownProperty(attribute) {
      var errors = this.errorsFor(attribute);
      if (isEmpty(errors)) {
        return null;
      }
      return errors;
    },

    /**
      Total number of errors.
       @property length
      @type {Number}
      @readOnly
    */

    /**
      @property isEmpty
      @type {Boolean}
      @readOnly
    */
    isEmpty: _ember['default'].computed.not('length').readOnly(),

    /**
      Adds error messages to a given attribute and sends
      `becameInvalid` event to the record.
       Example:
       ```javascript
      if (!user.get('username') {
        user.get('errors').add('username', 'This field is required');
      }
      ```
       @method add
      @param {String} attribute
      @param {(Array|String)} messages
      @deprecated
    */
    add: function add(attribute, messages) {
      (0, _emberDataPrivateDebug.warn)('Interacting with a record errors object will no longer change the record state.', false, {
        id: 'ds.errors.add'
      });

      var wasEmpty = get(this, 'isEmpty');

      this._add(attribute, messages);

      if (wasEmpty && !get(this, 'isEmpty')) {
        this.trigger('becameInvalid');
      }
    },

    /**
      Adds error messages to a given attribute without sending event.
       @method _add
      @private
    */
    _add: function _add(attribute, messages) {
      messages = this._findOrCreateMessages(attribute, messages);
      this.addObjects(messages);
      get(this, 'errorsByAttributeName').get(attribute).addObjects(messages);

      this.notifyPropertyChange(attribute);
    },

    /**
      @method _findOrCreateMessages
      @private
    */
    _findOrCreateMessages: function _findOrCreateMessages(attribute, messages) {
      var errors = this.errorsFor(attribute);
      var messagesArray = makeArray(messages);
      var _messages = new Array(messagesArray.length);

      for (var i = 0; i < messagesArray.length; i++) {
        var message = messagesArray[i];
        var err = errors.findBy('message', message);
        if (err) {
          _messages[i] = err;
        } else {
          _messages[i] = {
            attribute: attribute,
            message: message
          };
        }
      }

      return _messages;
    },

    /**
      Removes all error messages from the given attribute and sends
      `becameValid` event to the record if there no more errors left.
       Example:
       ```app/models/user.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        email: DS.attr('string'),
        twoFactorAuth: DS.attr('boolean'),
        phone: DS.attr('string')
      });
      ```
       ```app/routes/user/edit.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        actions: {
          save: function(user) {
             if (!user.get('twoFactorAuth')) {
               user.get('errors').remove('phone');
             }
             user.save();
           }
        }
      });
      ```
       @method remove
      @param {String} attribute
      @deprecated
    */
    remove: function remove(attribute) {
      (0, _emberDataPrivateDebug.warn)('Interacting with a record errors object will no longer change the record state.', false, {
        id: 'ds.errors.remove'
      });

      if (get(this, 'isEmpty')) {
        return;
      }

      this._remove(attribute);

      if (get(this, 'isEmpty')) {
        this.trigger('becameValid');
      }
    },

    /**
      Removes all error messages from the given attribute without sending event.
       @method _remove
      @private
    */
    _remove: function _remove(attribute) {
      if (get(this, 'isEmpty')) {
        return;
      }

      var content = this.rejectBy('attribute', attribute);
      set(this, 'content', content);
      get(this, 'errorsByAttributeName')['delete'](attribute);

      this.notifyPropertyChange(attribute);
    },

    /**
      Removes all error messages and sends `becameValid` event
      to the record.
       Example:
       ```app/routes/user/edit.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        actions: {
          retrySave: function(user) {
             user.get('errors').clear();
             user.save();
           }
        }
      });
      ```
       @method clear
      @deprecated
    */
    clear: function clear() {
      (0, _emberDataPrivateDebug.warn)('Interacting with a record errors object will no longer change the record state.', false, {
        id: 'ds.errors.clear'
      });

      if (get(this, 'isEmpty')) {
        return;
      }

      this._clear();
      this.trigger('becameValid');
    },

    /**
      Removes all error messages.
      to the record.
       @method _clear
      @private
    */
    _clear: function _clear() {
      if (get(this, 'isEmpty')) {
        return;
      }

      var errorsByAttributeName = get(this, 'errorsByAttributeName');
      var attributes = _ember['default'].A();

      errorsByAttributeName.forEach(function (_, attribute) {
        attributes.push(attribute);
      });

      errorsByAttributeName.clear();
      attributes.forEach(function (attribute) {
        this.notifyPropertyChange(attribute);
      }, this);

      _ember['default'].ArrayProxy.prototype.clear.call(this);
    },

    /**
      Checks if there is error messages for the given attribute.
       ```app/routes/user/edit.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        actions: {
          save: function(user) {
             if (user.get('errors').has('email')) {
               return alert('Please update your email before attempting to save.');
             }
             user.save();
           }
        }
      });
      ```
       @method has
      @param {String} attribute
      @return {Boolean} true if there some errors on given attribute
    */
    has: function has(attribute) {
      return !isEmpty(this.errorsFor(attribute));
    }
  });
});
define("ember-data/-private/system/model/internal-model", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/model/states", "ember-data/-private/system/relationships/state/create", "ember-data/-private/system/snapshot", "ember-data/-private/system/empty-object", "ember-data/-private/features", "ember-data/-private/utils", "ember-data/-private/system/references"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemModelStates, _emberDataPrivateSystemRelationshipsStateCreate, _emberDataPrivateSystemSnapshot, _emberDataPrivateSystemEmptyObject, _emberDataPrivateFeatures, _emberDataPrivateUtils, _emberDataPrivateSystemReferences) {
  "use strict";

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  })();

  exports["default"] = InternalModel;

  var Promise = _ember["default"].RSVP.Promise;
  var get = _ember["default"].get;
  var set = _ember["default"].set;
  var copy = _ember["default"].copy;
  var assign = _ember["default"].assign || _ember["default"].merge;

  var _extractPivotNameCache = new _emberDataPrivateSystemEmptyObject["default"]();
  var _splitOnDotCache = new _emberDataPrivateSystemEmptyObject["default"]();

  function splitOnDot(name) {
    return _splitOnDotCache[name] || (_splitOnDotCache[name] = name.split('.'));
  }

  function extractPivotName(name) {
    return _extractPivotNameCache[name] || (_extractPivotNameCache[name] = splitOnDot(name)[0]);
  }

  function retrieveFromCurrentState(key) {
    return function () {
      return get(this.currentState, key);
    };
  }

  /*
    `InternalModel` is the Model class that we use internally inside Ember Data to represent models.
    Internal ED methods should only deal with `InternalModel` objects. It is a fast, plain Javascript class.
  
    We expose `DS.Model` to application code, by materializing a `DS.Model` from `InternalModel` lazily, as
    a performance optimization.
  
    `InternalModel` should never be exposed to application code. At the boundaries of the system, in places
    like `find`, `push`, etc. we convert between Models and InternalModels.
  
    We need to make sure that the properties from `InternalModel` are correctly exposed/proxied on `Model`
    if they are needed.
  
    @private
    @class InternalModel
  */
  function InternalModel(type, id, store, _, data) {
    this.type = type;
    this.id = id;
    this.store = store;
    this._data = data || new _emberDataPrivateSystemEmptyObject["default"]();
    this.modelName = type.modelName;
    this.dataHasInitialized = false;
    //Look into making this lazy
    this._deferredTriggers = [];
    this._attributes = new _emberDataPrivateSystemEmptyObject["default"]();
    this._inFlightAttributes = new _emberDataPrivateSystemEmptyObject["default"]();
    this._relationships = new _emberDataPrivateSystemRelationshipsStateCreate["default"](this);
    this._recordArrays = undefined;
    this.currentState = _emberDataPrivateSystemModelStates["default"].empty;
    this.recordReference = new _emberDataPrivateSystemReferences.RecordReference(store, this);
    this.references = {};
    this.isReloading = false;
    this.isError = false;
    this.error = null;
    this.__ember_meta__ = null;
    this[_ember["default"].GUID_KEY] = _ember["default"].guidFor(this);
    /*
      implicit relationships are relationship which have not been declared but the inverse side exists on
      another record somewhere
      For example if there was
       ```app/models/comment.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        name: DS.attr()
      })
      ```
       but there is also
       ```app/models/post.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        name: DS.attr(),
        comments: DS.hasMany('comment')
      })
      ```
       would have a implicit post relationship in order to be do things like remove ourselves from the post
      when we are deleted
    */
    this._implicitRelationships = new _emberDataPrivateSystemEmptyObject["default"]();
  }

  InternalModel.prototype = {
    isEmpty: retrieveFromCurrentState('isEmpty'),
    isLoading: retrieveFromCurrentState('isLoading'),
    isLoaded: retrieveFromCurrentState('isLoaded'),
    hasDirtyAttributes: retrieveFromCurrentState('hasDirtyAttributes'),
    isSaving: retrieveFromCurrentState('isSaving'),
    isDeleted: retrieveFromCurrentState('isDeleted'),
    isNew: retrieveFromCurrentState('isNew'),
    isValid: retrieveFromCurrentState('isValid'),
    dirtyType: retrieveFromCurrentState('dirtyType'),

    constructor: InternalModel,
    materializeRecord: function materializeRecord() {
      (0, _emberDataPrivateDebug.assert)("Materialized " + this.modelName + " record with id:" + this.id + "more than once", this.record === null || this.record === undefined);

      // lookupFactory should really return an object that creates
      // instances with the injections applied
      var createOptions = {
        store: this.store,
        _internalModel: this,
        id: this.id,
        currentState: get(this, 'currentState'),
        isError: this.isError,
        adapterError: this.error
      };

      if (_ember["default"].setOwner) {
        // ensure that `Ember.getOwner(this)` works inside a model instance
        _ember["default"].setOwner(createOptions, (0, _emberDataPrivateUtils.getOwner)(this.store));
      } else {
        createOptions.container = this.store.container;
      }

      this.record = this.type._create(createOptions);

      this._triggerDeferredTriggers();
    },

    recordObjectWillDestroy: function recordObjectWillDestroy() {
      this.record = null;
    },

    deleteRecord: function deleteRecord() {
      this.send('deleteRecord');
    },

    save: function save(options) {
      var promiseLabel = "DS: Model#save " + this;
      var resolver = _ember["default"].RSVP.defer(promiseLabel);

      this.store.scheduleSave(this, resolver, options);
      return resolver.promise;
    },

    startedReloading: function startedReloading() {
      this.isReloading = true;
      if (this.record) {
        set(this.record, 'isReloading', true);
      }
    },

    finishedReloading: function finishedReloading() {
      this.isReloading = false;
      if (this.record) {
        set(this.record, 'isReloading', false);
      }
    },

    reload: function reload() {
      this.startedReloading();
      var record = this;
      var promiseLabel = "DS: Model#reload of " + this;
      return new Promise(function (resolve) {
        record.send('reloadRecord', resolve);
      }, promiseLabel).then(function () {
        record.didCleanError();
        return record;
      }, function (error) {
        record.didError(error);
        throw error;
      }, "DS: Model#reload complete, update flags")["finally"](function () {
        record.finishedReloading();
        record.updateRecordArrays();
      });
    },

    getRecord: function getRecord() {
      if (!this.record) {
        this.materializeRecord();
      }
      return this.record;
    },

    unloadRecord: function unloadRecord() {
      this.send('unloadRecord');
    },

    eachRelationship: function eachRelationship(callback, binding) {
      return this.type.eachRelationship(callback, binding);
    },

    eachAttribute: function eachAttribute(callback, binding) {
      return this.type.eachAttribute(callback, binding);
    },

    inverseFor: function inverseFor(key) {
      return this.type.inverseFor(key);
    },

    setupData: function setupData(data) {
      var changedKeys = this._changedKeys(data.attributes);
      assign(this._data, data.attributes);
      this.pushedData();
      if (this.record) {
        this.record._notifyProperties(changedKeys);
      }
      this.didInitalizeData();
    },

    becameReady: function becameReady() {
      _ember["default"].run.schedule('actions', this.store.recordArrayManager, this.store.recordArrayManager.recordWasLoaded, this);
    },

    didInitalizeData: function didInitalizeData() {
      if (!this.dataHasInitialized) {
        this.becameReady();
        this.dataHasInitialized = true;
      }
    },

    destroy: function destroy() {
      if (this.record) {
        return this.record.destroy();
      }
    },

    /*
      @method createSnapshot
      @private
    */
    createSnapshot: function createSnapshot(options) {
      return new _emberDataPrivateSystemSnapshot["default"](this, options);
    },

    /*
      @method loadingData
      @private
      @param {Promise} promise
    */
    loadingData: function loadingData(promise) {
      this.send('loadingData', promise);
    },

    /*
      @method loadedData
      @private
    */
    loadedData: function loadedData() {
      this.send('loadedData');
      this.didInitalizeData();
    },

    /*
      @method notFound
      @private
    */
    notFound: function notFound() {
      this.send('notFound');
    },

    /*
      @method pushedData
      @private
    */
    pushedData: function pushedData() {
      this.send('pushedData');
    },

    flushChangedAttributes: function flushChangedAttributes() {
      this._inFlightAttributes = this._attributes;
      this._attributes = new _emberDataPrivateSystemEmptyObject["default"]();
    },

    hasChangedAttributes: function hasChangedAttributes() {
      return Object.keys(this._attributes).length > 0;
    },

    /*
      Checks if the attributes which are considered as changed are still
      different to the state which is acknowledged by the server.
       This method is needed when data for the internal model is pushed and the
      pushed data might acknowledge dirty attributes as confirmed.
       @method updateChangedAttributes
      @private
     */
    updateChangedAttributes: function updateChangedAttributes() {
      var changedAttributes = this.changedAttributes();
      var changedAttributeNames = Object.keys(changedAttributes);

      for (var i = 0, _length = changedAttributeNames.length; i < _length; i++) {
        var attribute = changedAttributeNames[i];

        var _changedAttributes$attribute = _slicedToArray(changedAttributes[attribute], 2);

        var oldData = _changedAttributes$attribute[0];
        var newData = _changedAttributes$attribute[1];

        if (oldData === newData) {
          delete this._attributes[attribute];
        }
      }
    },

    /*
      Returns an object, whose keys are changed properties, and value is an
      [oldProp, newProp] array.
       @method changedAttributes
      @private
    */
    changedAttributes: function changedAttributes() {
      var oldData = this._data;
      var currentData = this._attributes;
      var inFlightData = this._inFlightAttributes;
      var newData = assign(copy(inFlightData), currentData);
      var diffData = new _emberDataPrivateSystemEmptyObject["default"]();

      var newDataKeys = Object.keys(newData);

      for (var i = 0, _length2 = newDataKeys.length; i < _length2; i++) {
        var key = newDataKeys[i];
        diffData[key] = [oldData[key], newData[key]];
      }

      return diffData;
    },

    /*
      @method adapterWillCommit
      @private
    */
    adapterWillCommit: function adapterWillCommit() {
      this.send('willCommit');
    },

    /*
      @method adapterDidDirty
      @private
    */
    adapterDidDirty: function adapterDidDirty() {
      this.send('becomeDirty');
      this.updateRecordArraysLater();
    },

    /*
      @method send
      @private
      @param {String} name
      @param {Object} context
    */
    send: function send(name, context) {
      var currentState = get(this, 'currentState');

      if (!currentState[name]) {
        this._unhandledEvent(currentState, name, context);
      }

      return currentState[name](this, context);
    },

    notifyHasManyAdded: function notifyHasManyAdded(key, record, idx) {
      if (this.record) {
        this.record.notifyHasManyAdded(key, record, idx);
      }
    },

    notifyHasManyRemoved: function notifyHasManyRemoved(key, record, idx) {
      if (this.record) {
        this.record.notifyHasManyRemoved(key, record, idx);
      }
    },

    notifyBelongsToChanged: function notifyBelongsToChanged(key, record) {
      if (this.record) {
        this.record.notifyBelongsToChanged(key, record);
      }
    },

    notifyPropertyChange: function notifyPropertyChange(key) {
      if (this.record) {
        this.record.notifyPropertyChange(key);
      }
    },

    rollbackAttributes: function rollbackAttributes() {
      var dirtyKeys = Object.keys(this._attributes);

      this._attributes = new _emberDataPrivateSystemEmptyObject["default"]();

      if (get(this, 'isError')) {
        this._inFlightAttributes = new _emberDataPrivateSystemEmptyObject["default"]();
        this.didCleanError();
      }

      //Eventually rollback will always work for relationships
      //For now we support it only out of deleted state, because we
      //have an explicit way of knowing when the server acked the relationship change
      if (this.isDeleted()) {
        //TODO: Should probably move this to the state machine somehow
        this.becameReady();
      }

      if (this.isNew()) {
        this.clearRelationships();
      }

      if (this.isValid()) {
        this._inFlightAttributes = new _emberDataPrivateSystemEmptyObject["default"]();
      }

      this.send('rolledBack');

      this.record._notifyProperties(dirtyKeys);
    },

    /*
      @method transitionTo
      @private
      @param {String} name
    */
    transitionTo: function transitionTo(name) {
      // POSSIBLE TODO: Remove this code and replace with
      // always having direct reference to state objects

      var pivotName = extractPivotName(name);
      var currentState = get(this, 'currentState');
      var state = currentState;

      do {
        if (state.exit) {
          state.exit(this);
        }
        state = state.parentState;
      } while (!state.hasOwnProperty(pivotName));

      var path = splitOnDot(name);
      var setups = [];
      var enters = [];
      var i, l;

      for (i = 0, l = path.length; i < l; i++) {
        state = state[path[i]];

        if (state.enter) {
          enters.push(state);
        }
        if (state.setup) {
          setups.push(state);
        }
      }

      for (i = 0, l = enters.length; i < l; i++) {
        enters[i].enter(this);
      }

      set(this, 'currentState', state);
      //TODO Consider whether this is the best approach for keeping these two in sync
      if (this.record) {
        set(this.record, 'currentState', state);
      }

      for (i = 0, l = setups.length; i < l; i++) {
        setups[i].setup(this);
      }

      this.updateRecordArraysLater();
    },

    _unhandledEvent: function _unhandledEvent(state, name, context) {
      var errorMessage = "Attempted to handle event `" + name + "` ";
      errorMessage += "on " + String(this) + " while in state ";
      errorMessage += state.stateName + ". ";

      if (context !== undefined) {
        errorMessage += "Called with " + _ember["default"].inspect(context) + ".";
      }

      throw new _ember["default"].Error(errorMessage);
    },

    triggerLater: function triggerLater() {
      var length = arguments.length;
      var args = new Array(length);

      for (var i = 0; i < length; i++) {
        args[i] = arguments[i];
      }

      if (this._deferredTriggers.push(args) !== 1) {
        return;
      }
      _ember["default"].run.scheduleOnce('actions', this, '_triggerDeferredTriggers');
    },

    _triggerDeferredTriggers: function _triggerDeferredTriggers() {
      //TODO: Before 1.0 we want to remove all the events that happen on the pre materialized record,
      //but for now, we queue up all the events triggered before the record was materialized, and flush
      //them once we have the record
      if (!this.record) {
        return;
      }
      for (var i = 0, l = this._deferredTriggers.length; i < l; i++) {
        this.record.trigger.apply(this.record, this._deferredTriggers[i]);
      }

      this._deferredTriggers.length = 0;
    },
    /*
      @method clearRelationships
      @private
    */
    clearRelationships: function clearRelationships() {
      var _this = this;

      this.eachRelationship(function (name, relationship) {
        if (_this._relationships.has(name)) {
          var rel = _this._relationships.get(name);
          rel.clear();
          rel.destroy();
        }
      });
      Object.keys(this._implicitRelationships).forEach(function (key) {
        _this._implicitRelationships[key].clear();
        _this._implicitRelationships[key].destroy();
      });
    },

    /*
      When a find request is triggered on the store, the user can optionally pass in
      attributes and relationships to be preloaded. These are meant to behave as if they
      came back from the server, except the user obtained them out of band and is informing
      the store of their existence. The most common use case is for supporting client side
      nested URLs, such as `/posts/1/comments/2` so the user can do
      `store.findRecord('comment', 2, { preload: { post: 1 } })` without having to fetch the post.
       Preloaded data can be attributes and relationships passed in either as IDs or as actual
      models.
       @method _preloadData
      @private
      @param {Object} preload
    */
    _preloadData: function _preloadData(preload) {
      var _this2 = this;

      //TODO(Igor) consider the polymorphic case
      Object.keys(preload).forEach(function (key) {
        var preloadValue = get(preload, key);
        var relationshipMeta = _this2.type.metaForProperty(key);
        if (relationshipMeta.isRelationship) {
          _this2._preloadRelationship(key, preloadValue);
        } else {
          _this2._data[key] = preloadValue;
        }
      });
    },

    _preloadRelationship: function _preloadRelationship(key, preloadValue) {
      var relationshipMeta = this.type.metaForProperty(key);
      var type = relationshipMeta.type;
      if (relationshipMeta.kind === 'hasMany') {
        this._preloadHasMany(key, preloadValue, type);
      } else {
        this._preloadBelongsTo(key, preloadValue, type);
      }
    },

    _preloadHasMany: function _preloadHasMany(key, preloadValue, type) {
      (0, _emberDataPrivateDebug.assert)("You need to pass in an array to set a hasMany property on a record", Array.isArray(preloadValue));
      var recordsToSet = new Array(preloadValue.length);

      for (var i = 0; i < preloadValue.length; i++) {
        var recordToPush = preloadValue[i];
        recordsToSet[i] = this._convertStringOrNumberIntoInternalModel(recordToPush, type);
      }

      //We use the pathway of setting the hasMany as if it came from the adapter
      //because the user told us that they know this relationships exists already
      this._relationships.get(key).updateRecordsFromAdapter(recordsToSet);
    },

    _preloadBelongsTo: function _preloadBelongsTo(key, preloadValue, type) {
      var recordToSet = this._convertStringOrNumberIntoInternalModel(preloadValue, type);

      //We use the pathway of setting the hasMany as if it came from the adapter
      //because the user told us that they know this relationships exists already
      this._relationships.get(key).setRecord(recordToSet);
    },

    _convertStringOrNumberIntoInternalModel: function _convertStringOrNumberIntoInternalModel(value, type) {
      if (typeof value === 'string' || typeof value === 'number') {
        return this.store._internalModelForId(type, value);
      }
      if (value._internalModel) {
        return value._internalModel;
      }
      return value;
    },

    /*
      @method updateRecordArrays
      @private
    */
    updateRecordArrays: function updateRecordArrays() {
      this._updatingRecordArraysLater = false;
      this.store.dataWasUpdated(this.type, this);
    },

    setId: function setId(id) {
      (0, _emberDataPrivateDebug.assert)('A record\'s id cannot be changed once it is in the loaded state', this.id === null || this.id === id || this.isNew());
      this.id = id;
      if (this.record.get('id') !== id) {
        this.record.set('id', id);
      }
    },

    didError: function didError(error) {
      this.error = error;
      this.isError = true;

      if (this.record) {
        this.record.setProperties({
          isError: true,
          adapterError: error
        });
      }
    },

    didCleanError: function didCleanError() {
      this.error = null;
      this.isError = false;

      if (this.record) {
        this.record.setProperties({
          isError: false,
          adapterError: null
        });
      }
    },
    /*
      If the adapter did not return a hash in response to a commit,
      merge the changed attributes and relationships into the existing
      saved data.
       @method adapterDidCommit
    */
    adapterDidCommit: function adapterDidCommit(data) {
      if (data) {
        data = data.attributes;
      }

      this.didCleanError();
      var changedKeys = this._changedKeys(data);

      assign(this._data, this._inFlightAttributes);
      if (data) {
        assign(this._data, data);
      }

      this._inFlightAttributes = new _emberDataPrivateSystemEmptyObject["default"]();

      this.send('didCommit');
      this.updateRecordArraysLater();

      if (!data) {
        return;
      }

      this.record._notifyProperties(changedKeys);
    },

    /*
      @method updateRecordArraysLater
      @private
    */
    updateRecordArraysLater: function updateRecordArraysLater() {
      // quick hack (something like this could be pushed into run.once
      if (this._updatingRecordArraysLater) {
        return;
      }
      this._updatingRecordArraysLater = true;
      _ember["default"].run.schedule('actions', this, this.updateRecordArrays);
    },

    addErrorMessageToAttribute: function addErrorMessageToAttribute(attribute, message) {
      var record = this.getRecord();
      get(record, 'errors')._add(attribute, message);
    },

    removeErrorMessageFromAttribute: function removeErrorMessageFromAttribute(attribute) {
      var record = this.getRecord();
      get(record, 'errors')._remove(attribute);
    },

    clearErrorMessages: function clearErrorMessages() {
      var record = this.getRecord();
      get(record, 'errors')._clear();
    },

    hasErrors: function hasErrors() {
      var record = this.getRecord();
      var errors = get(record, 'errors');

      return !_ember["default"].isEmpty(errors);
    },

    // FOR USE DURING COMMIT PROCESS

    /*
      @method adapterDidInvalidate
      @private
    */
    adapterDidInvalidate: function adapterDidInvalidate(errors) {
      var attribute;

      for (attribute in errors) {
        if (errors.hasOwnProperty(attribute)) {
          this.addErrorMessageToAttribute(attribute, errors[attribute]);
        }
      }

      this.send('becameInvalid');

      this._saveWasRejected();
    },

    /*
      @method adapterDidError
      @private
    */
    adapterDidError: function adapterDidError(error) {
      this.send('becameError');
      this.didError(error);
      this._saveWasRejected();
    },

    _saveWasRejected: function _saveWasRejected() {
      var keys = Object.keys(this._inFlightAttributes);
      for (var i = 0; i < keys.length; i++) {
        if (this._attributes[keys[i]] === undefined) {
          this._attributes[keys[i]] = this._inFlightAttributes[keys[i]];
        }
      }
      this._inFlightAttributes = new _emberDataPrivateSystemEmptyObject["default"]();
    },

    /*
      Ember Data has 3 buckets for storing the value of an attribute on an internalModel.
       `_data` holds all of the attributes that have been acknowledged by
      a backend via the adapter. When rollbackAttributes is called on a model all
      attributes will revert to the record's state in `_data`.
       `_attributes` holds any change the user has made to an attribute
      that has not been acknowledged by the adapter. Any values in
      `_attributes` are have priority over values in `_data`.
       `_inFlightAttributes`. When a record is being synced with the
      backend the values in `_attributes` are copied to
      `_inFlightAttributes`. This way if the backend acknowledges the
      save but does not return the new state Ember Data can copy the
      values from `_inFlightAttributes` to `_data`. Without having to
      worry about changes made to `_attributes` while the save was
      happenign.
        Changed keys builds a list of all of the values that may have been
      changed by the backend after a successful save.
       It does this by iterating over each key, value pair in the payload
      returned from the server after a save. If the `key` is found in
      `_attributes` then the user has a local changed to the attribute
      that has not been synced with the server and the key is not
      included in the list of changed keys.
    
      If the value, for a key differs from the value in what Ember Data
      believes to be the truth about the backend state (A merger of the
      `_data` and `_inFlightAttributes` objects where
      `_inFlightAttributes` has priority) then that means the backend
      has updated the value and the key is added to the list of changed
      keys.
       @method _changedKeys
      @private
    */
    _changedKeys: function _changedKeys(updates) {
      var changedKeys = [];

      if (updates) {
        var original, i, value, key;
        var keys = Object.keys(updates);
        var length = keys.length;

        original = assign(new _emberDataPrivateSystemEmptyObject["default"](), this._data);
        original = assign(original, this._inFlightAttributes);

        for (i = 0; i < length; i++) {
          key = keys[i];
          value = updates[key];

          // A value in _attributes means the user has a local change to
          // this attributes. We never override this value when merging
          // updates from the backend so we should not sent a change
          // notification if the server value differs from the original.
          if (this._attributes[key] !== undefined) {
            continue;
          }

          if (!_ember["default"].isEqual(original[key], value)) {
            changedKeys.push(key);
          }
        }
      }

      return changedKeys;
    },

    toString: function toString() {
      if (this.record) {
        return this.record.toString();
      } else {
        return "<" + this.modelName + ":" + this.id + ">";
      }
    },

    referenceFor: function referenceFor(type, name) {
      var _this3 = this;

      var reference = this.references[name];

      if (!reference) {
        var relationship = this._relationships.get(name);

        (0, _emberDataPrivateDebug.runInDebug)(function () {
          var modelName = _this3.modelName;
          (0, _emberDataPrivateDebug.assert)("There is no " + type + " relationship named '" + name + "' on a model of type '" + modelName + "'", relationship);

          var actualRelationshipKind = relationship.relationshipMeta.kind;
          (0, _emberDataPrivateDebug.assert)("You tried to get the '" + name + "' relationship on a '" + modelName + "' via record." + type + "('" + name + "'), but the relationship is of type '" + actualRelationshipKind + "'. Use record." + actualRelationshipKind + "('" + name + "') instead.", actualRelationshipKind === type);
        });

        if (type === "belongsTo") {
          reference = new _emberDataPrivateSystemReferences.BelongsToReference(this.store, this, relationship);
        } else if (type === "hasMany") {
          reference = new _emberDataPrivateSystemReferences.HasManyReference(this.store, this, relationship);
        }

        this.references[name] = reference;
      }

      return reference;
    }
  };

  if (false) {
    /*
       Returns the latest truth for an attribute - the canonical value, or the
       in-flight value.
        @method lastAcknowledgedValue
       @private
    */
    InternalModel.prototype.lastAcknowledgedValue = function lastAcknowledgedValue(key) {
      if (key in this._inFlightAttributes) {
        return this._inFlightAttributes[key];
      } else {
        return this._data[key];
      }
    };
  }
});
define("ember-data/-private/system/model/model", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/promise-proxies", "ember-data/-private/system/model/errors", "ember-data/-private/system/debug/debug-info", "ember-data/-private/system/relationships/belongs-to", "ember-data/-private/system/relationships/has-many", "ember-data/-private/system/relationships/ext", "ember-data/-private/system/model/attr", "ember-data/-private/features"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemModelErrors, _emberDataPrivateSystemDebugDebugInfo, _emberDataPrivateSystemRelationshipsBelongsTo, _emberDataPrivateSystemRelationshipsHasMany, _emberDataPrivateSystemRelationshipsExt, _emberDataPrivateSystemModelAttr, _emberDataPrivateFeatures) {
  "use strict";

  /**
    @module ember-data
  */

  var get = _ember["default"].get;

  function intersection(array1, array2) {
    var result = [];
    array1.forEach(function (element) {
      if (array2.indexOf(element) >= 0) {
        result.push(element);
      }
    });

    return result;
  }

  var RESERVED_MODEL_PROPS = ['currentState', 'data', 'store'];

  var retrieveFromCurrentState = _ember["default"].computed('currentState', function (key) {
    return get(this._internalModel.currentState, key);
  }).readOnly();

  /**
  
    The model class that all Ember Data records descend from.
    This is the public API of Ember Data models. If you are using Ember Data
    in your application, this is the class you should use.
    If you are working on Ember Data internals, you most likely want to be dealing
    with `InternalModel`
  
    @class Model
    @namespace DS
    @extends Ember.Object
    @uses Ember.Evented
  */
  var Model = _ember["default"].Object.extend(_ember["default"].Evented, {
    _internalModel: null,
    store: null,

    /**
      If this property is `true` the record is in the `empty`
      state. Empty is the first state all records enter after they have
      been created. Most records created by the store will quickly
      transition to the `loading` state if data needs to be fetched from
      the server or the `created` state if the record is created on the
      client. A record can also enter the empty state if the adapter is
      unable to locate the record.
       @property isEmpty
      @type {Boolean}
      @readOnly
    */
    isEmpty: retrieveFromCurrentState,
    /**
      If this property is `true` the record is in the `loading` state. A
      record enters this state when the store asks the adapter for its
      data. It remains in this state until the adapter provides the
      requested data.
       @property isLoading
      @type {Boolean}
      @readOnly
    */
    isLoading: retrieveFromCurrentState,
    /**
      If this property is `true` the record is in the `loaded` state. A
      record enters this state when its data is populated. Most of a
      record's lifecycle is spent inside substates of the `loaded`
      state.
       Example
       ```javascript
      var record = store.createRecord('model');
      record.get('isLoaded'); // true
       store.findRecord('model', 1).then(function(model) {
        model.get('isLoaded'); // true
      });
      ```
       @property isLoaded
      @type {Boolean}
      @readOnly
    */
    isLoaded: retrieveFromCurrentState,
    /**
      If this property is `true` the record is in the `dirty` state. The
      record has local changes that have not yet been saved by the
      adapter. This includes records that have been created (but not yet
      saved) or deleted.
       Example
       ```javascript
      var record = store.createRecord('model');
      record.get('hasDirtyAttributes'); // true
       store.findRecord('model', 1).then(function(model) {
        model.get('hasDirtyAttributes'); // false
        model.set('foo', 'some value');
        model.get('hasDirtyAttributes'); // true
      });
      ```
       @since 1.13.0
      @property hasDirtyAttributes
      @type {Boolean}
      @readOnly
    */
    hasDirtyAttributes: _ember["default"].computed('currentState.isDirty', function () {
      return this.get('currentState.isDirty');
    }),
    /**
      If this property is `true` the record is in the `saving` state. A
      record enters the saving state when `save` is called, but the
      adapter has not yet acknowledged that the changes have been
      persisted to the backend.
       Example
       ```javascript
      var record = store.createRecord('model');
      record.get('isSaving'); // false
      var promise = record.save();
      record.get('isSaving'); // true
      promise.then(function() {
        record.get('isSaving'); // false
      });
      ```
       @property isSaving
      @type {Boolean}
      @readOnly
    */
    isSaving: retrieveFromCurrentState,
    /**
      If this property is `true` the record is in the `deleted` state
      and has been marked for deletion. When `isDeleted` is true and
      `hasDirtyAttributes` is true, the record is deleted locally but the deletion
      was not yet persisted. When `isSaving` is true, the change is
      in-flight. When both `hasDirtyAttributes` and `isSaving` are false, the
      change has persisted.
       Example
       ```javascript
      var record = store.createRecord('model');
      record.get('isDeleted');    // false
      record.deleteRecord();
       // Locally deleted
      record.get('isDeleted');           // true
      record.get('hasDirtyAttributes');  // true
      record.get('isSaving');            // false
       // Persisting the deletion
      var promise = record.save();
      record.get('isDeleted');    // true
      record.get('isSaving');     // true
       // Deletion Persisted
      promise.then(function() {
        record.get('isDeleted');          // true
        record.get('isSaving');           // false
        record.get('hasDirtyAttributes'); // false
      });
      ```
       @property isDeleted
      @type {Boolean}
      @readOnly
    */
    isDeleted: retrieveFromCurrentState,
    /**
      If this property is `true` the record is in the `new` state. A
      record will be in the `new` state when it has been created on the
      client and the adapter has not yet report that it was successfully
      saved.
       Example
       ```javascript
      var record = store.createRecord('model');
      record.get('isNew'); // true
       record.save().then(function(model) {
        model.get('isNew'); // false
      });
      ```
       @property isNew
      @type {Boolean}
      @readOnly
    */
    isNew: retrieveFromCurrentState,
    /**
      If this property is `true` the record is in the `valid` state.
       A record will be in the `valid` state when the adapter did not report any
      server-side validation failures.
       @property isValid
      @type {Boolean}
      @readOnly
    */
    isValid: retrieveFromCurrentState,
    /**
      If the record is in the dirty state this property will report what
      kind of change has caused it to move into the dirty
      state. Possible values are:
       - `created` The record has been created by the client and not yet saved to the adapter.
      - `updated` The record has been updated by the client and not yet saved to the adapter.
      - `deleted` The record has been deleted by the client and not yet saved to the adapter.
       Example
       ```javascript
      var record = store.createRecord('model');
      record.get('dirtyType'); // 'created'
      ```
       @property dirtyType
      @type {String}
      @readOnly
    */
    dirtyType: retrieveFromCurrentState,

    /**
      If `true` the adapter reported that it was unable to save local
      changes to the backend for any reason other than a server-side
      validation error.
       Example
       ```javascript
      record.get('isError'); // false
      record.set('foo', 'valid value');
      record.save().then(null, function() {
        record.get('isError'); // true
      });
      ```
       @property isError
      @type {Boolean}
      @readOnly
    */
    isError: false,

    /**
      If `true` the store is attempting to reload the record form the adapter.
       Example
       ```javascript
      record.get('isReloading'); // false
      record.reload();
      record.get('isReloading'); // true
      ```
       @property isReloading
      @type {Boolean}
      @readOnly
    */
    isReloading: false,

    /**
      All ember models have an id property. This is an identifier
      managed by an external source. These are always coerced to be
      strings before being used internally. Note when declaring the
      attributes for a model it is an error to declare an id
      attribute.
       ```javascript
      var record = store.createRecord('model');
      record.get('id'); // null
       store.findRecord('model', 1).then(function(model) {
        model.get('id'); // '1'
      });
      ```
       @property id
      @type {String}
    */
    id: null,

    /**
      @property currentState
      @private
      @type {Object}
    */

    /**
      When the record is in the `invalid` state this object will contain
      any errors returned by the adapter. When present the errors hash
      contains keys corresponding to the invalid property names
      and values which are arrays of Javascript objects with two keys:
       - `message` A string containing the error message from the backend
      - `attribute` The name of the property associated with this error message
       ```javascript
      record.get('errors.length'); // 0
      record.set('foo', 'invalid value');
      record.save().catch(function() {
        record.get('errors').get('foo');
        // [{message: 'foo should be a number.', attribute: 'foo'}]
      });
      ```
       The `errors` property us useful for displaying error messages to
      the user.
       ```handlebars
      <label>Username: {{input value=username}} </label>
      {{#each model.errors.username as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      <label>Email: {{input value=email}} </label>
      {{#each model.errors.email as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      ```
        You can also access the special `messages` property on the error
      object to get an array of all the error strings.
       ```handlebars
      {{#each model.errors.messages as |message|}}
        <div class="error">
          {{message}}
        </div>
      {{/each}}
      ```
       @property errors
      @type {DS.Errors}
    */
    errors: _ember["default"].computed(function () {
      var errors = _emberDataPrivateSystemModelErrors["default"].create();

      errors._registerHandlers(this._internalModel, function () {
        this.send('becameInvalid');
      }, function () {
        this.send('becameValid');
      });
      return errors;
    }).readOnly(),

    /**
      This property holds the `DS.AdapterError` object with which
      last adapter operation was rejected.
       @property adapterError
      @type {DS.AdapterError}
    */
    adapterError: null,

    /**
      Create a JSON representation of the record, using the serialization
      strategy of the store's adapter.
      `serialize` takes an optional hash as a parameter, currently
      supported options are:
      - `includeId`: `true` if the record's ID should be included in the
        JSON representation.
       @method serialize
      @param {Object} options
      @return {Object} an object whose values are primitive JSON values only
    */
    serialize: function serialize(options) {
      return this.store.serialize(this, options);
    },

    /**
      Use [DS.JSONSerializer](DS.JSONSerializer.html) to
      get the JSON representation of a record.
       `toJSON` takes an optional hash as a parameter, currently
      supported options are:
       - `includeId`: `true` if the record's ID should be included in the
        JSON representation.
       @method toJSON
      @param {Object} options
      @return {Object} A JSON representation of the object.
    */
    toJSON: function toJSON(options) {
      // container is for lazy transform lookups
      var serializer = this.store.serializerFor('-default');
      var snapshot = this._internalModel.createSnapshot();

      return serializer.serialize(snapshot, options);
    },

    /**
      Fired when the record is ready to be interacted with,
      that is either loaded from the server or created locally.
       @event ready
    */
    ready: _ember["default"].K,

    /**
      Fired when the record is loaded from the server.
       @event didLoad
    */
    didLoad: _ember["default"].K,

    /**
      Fired when the record is updated.
       @event didUpdate
    */
    didUpdate: _ember["default"].K,

    /**
      Fired when a new record is commited to the server.
       @event didCreate
    */
    didCreate: _ember["default"].K,

    /**
      Fired when the record is deleted.
       @event didDelete
    */
    didDelete: _ember["default"].K,

    /**
      Fired when the record becomes invalid.
       @event becameInvalid
    */
    becameInvalid: _ember["default"].K,

    /**
      Fired when the record enters the error state.
       @event becameError
    */
    becameError: _ember["default"].K,

    /**
      Fired when the record is rolled back.
       @event rolledBack
    */
    rolledBack: _ember["default"].K,

    //TODO Do we want to deprecate these?
    /**
      @method send
      @private
      @param {String} name
      @param {Object} context
    */
    send: function send(name, context) {
      return this._internalModel.send(name, context);
    },

    /**
      @method transitionTo
      @private
      @param {String} name
    */
    transitionTo: function transitionTo(name) {
      return this._internalModel.transitionTo(name);
    },

    /**
      Marks the record as deleted but does not save it. You must call
      `save` afterwards if you want to persist it. You might use this
      method if you want to allow the user to still `rollbackAttributes()`
      after a delete it was made.
       Example
       ```app/routes/model/delete.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        actions: {
          softDelete: function() {
            this.controller.get('model').deleteRecord();
          },
          confirm: function() {
            this.controller.get('model').save();
          },
          undo: function() {
            this.controller.get('model').rollbackAttributes();
          }
        }
      });
      ```
       @method deleteRecord
    */
    deleteRecord: function deleteRecord() {
      this._internalModel.deleteRecord();
    },

    /**
      Same as `deleteRecord`, but saves the record immediately.
       Example
       ```app/routes/model/delete.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        actions: {
          delete: function() {
            var controller = this.controller;
            controller.get('model').destroyRecord().then(function() {
              controller.transitionToRoute('model.index');
            });
          }
        }
      });
      ```
       If you pass an object on the `adapterOptions` property of the options
      argument it will be passed to you adapter via the snapshot
       ```js
      record.destroyRecord({ adapterOptions: { subscribe: false } });
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default MyCustomAdapter.extend({
        deleteRecord: function(store, type, snapshot) {
          if (snapshot.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      });
      ```
       @method destroyRecord
      @param {Object} options
      @return {Promise} a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    */
    destroyRecord: function destroyRecord(options) {
      this.deleteRecord();
      return this.save(options);
    },

    /**
      @method unloadRecord
      @private
    */
    unloadRecord: function unloadRecord() {
      if (this.isDestroyed) {
        return;
      }
      this._internalModel.unloadRecord();
    },

    /**
      @method _notifyProperties
      @private
    */
    _notifyProperties: function _notifyProperties(keys) {
      _ember["default"].beginPropertyChanges();
      var key;
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        this.notifyPropertyChange(key);
      }
      _ember["default"].endPropertyChanges();
    },

    /**
      Returns an object, whose keys are changed properties, and value is
      an [oldProp, newProp] array.
       The array represents the diff of the canonical state with the local state
      of the model. Note: if the model is created locally, the canonical state is
      empty since the adapter hasn't acknowledged the attributes yet:
       Example
       ```app/models/mascot.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        name: attr('string'),
        isAdmin: attr('boolean', {
          defaultValue: false
        })
      });
      ```
       ```javascript
      var mascot = store.createRecord('mascot');
       mascot.changedAttributes(); // {}
       mascot.set('name', 'Tomster');
      mascot.changedAttributes(); // { name: [undefined, 'Tomster'] }
       mascot.set('isAdmin', true);
      mascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }
       mascot.save().then(function() {
        mascot.changedAttributes(); // {}
         mascot.set('isAdmin', false);
        mascot.changedAttributes(); // { isAdmin: [true, false] }
      });
      ```
       @method changedAttributes
      @return {Object} an object, whose keys are changed properties,
        and value is an [oldProp, newProp] array.
    */
    changedAttributes: function changedAttributes() {
      return this._internalModel.changedAttributes();
    },

    //TODO discuss with tomhuda about events/hooks
    //Bring back as hooks?
    /**
      @method adapterWillCommit
      @private
    adapterWillCommit: function() {
      this.send('willCommit');
    },
     /**
      @method adapterDidDirty
      @private
    adapterDidDirty: function() {
      this.send('becomeDirty');
      this.updateRecordArraysLater();
    },
    */

    /**
      If the model `hasDirtyAttributes` this function will discard any unsaved
      changes. If the model `isNew` it will be removed from the store.
       Example
       ```javascript
      record.get('name'); // 'Untitled Document'
      record.set('name', 'Doc 1');
      record.get('name'); // 'Doc 1'
      record.rollbackAttributes();
      record.get('name'); // 'Untitled Document'
      ```
       @since 1.13.0
      @method rollbackAttributes
    */
    rollbackAttributes: function rollbackAttributes() {
      this._internalModel.rollbackAttributes();
    },

    /*
      @method _createSnapshot
      @private
    */
    _createSnapshot: function _createSnapshot() {
      return this._internalModel.createSnapshot();
    },

    toStringExtension: function toStringExtension() {
      return get(this, 'id');
    },

    /**
      Save the record and persist any changes to the record to an
      external source via the adapter.
       Example
       ```javascript
      record.set('name', 'Tomster');
      record.save().then(function() {
        // Success callback
      }, function() {
        // Error callback
      });
      ```
      If you pass an object on the `adapterOptions` property of the options
     argument it will be passed to you adapter via the snapshot
       ```js
      record.save({ adapterOptions: { subscribe: false } });
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default MyCustomAdapter.extend({
        updateRecord: function(store, type, snapshot) {
          if (snapshot.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      });
      ```
       @method save
      @param {Object} options
      @return {Promise} a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    */
    save: function save(options) {
      var _this = this;

      return _emberDataPrivateSystemPromiseProxies.PromiseObject.create({
        promise: this._internalModel.save(options).then(function () {
          return _this;
        })
      });
    },

    /**
      Reload the record from the adapter.
       This will only work if the record has already finished loading.
       Example
       ```app/routes/model/view.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        actions: {
          reload: function() {
            this.controller.get('model').reload().then(function(model) {
              // do something with the reloaded model
            });
          }
        }
      });
      ```
       @method reload
      @return {Promise} a promise that will be resolved with the record when the
      adapter returns successfully or rejected if the adapter returns
      with an error.
    */
    reload: function reload() {
      var _this2 = this;

      return _emberDataPrivateSystemPromiseProxies.PromiseObject.create({
        promise: this._internalModel.reload().then(function () {
          return _this2;
        })
      });
    },

    /**
      Override the default event firing from Ember.Evented to
      also call methods with the given name.
       @method trigger
      @private
      @param {String} name
    */
    trigger: function trigger(name) {
      var length = arguments.length;
      var args = new Array(length - 1);

      for (var i = 1; i < length; i++) {
        args[i - 1] = arguments[i];
      }

      _ember["default"].tryInvoke(this, name, args);
      this._super.apply(this, arguments);
    },

    willDestroy: function willDestroy() {
      //TODO Move!
      this._super.apply(this, arguments);
      this._internalModel.clearRelationships();
      this._internalModel.recordObjectWillDestroy();
      //TODO should we set internalModel to null here?
    },

    // This is a temporary solution until we refactor DS.Model to not
    // rely on the data property.
    willMergeMixin: function willMergeMixin(props) {
      var constructor = this.constructor;
      (0, _emberDataPrivateDebug.assert)('`' + intersection(Object.keys(props), RESERVED_MODEL_PROPS)[0] + '` is a reserved property name on DS.Model objects. Please choose a different property name for ' + constructor.toString(), !intersection(Object.keys(props), RESERVED_MODEL_PROPS)[0]);
      (0, _emberDataPrivateDebug.assert)("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from " + constructor.toString(), Object.keys(props).indexOf('id') === -1);
    },

    attr: function attr() {
      (0, _emberDataPrivateDebug.assert)("The `attr` method is not available on DS.Model, a DS.Snapshot was probably expected. Are you passing a DS.Model instead of a DS.Snapshot to your serializer?", false);
    },

    /**
      Get the reference for the specified belongsTo relationship.
       Example
       ```javascript
      // models/blog.js
      export default DS.Model.extend({
        user: DS.belongsTo({ async: true })
      });
       var blog = store.push({
        type: 'blog',
        id: 1,
        relationships: {
          user: { type: 'user', id: 1 }
        }
      });
      var userRef = blog.belongsTo('user');
       // check if the user relationship is loaded
      var isLoaded = userRef.value() !== null;
       // get the record of the reference (null if not yet available)
      var user = userRef.value();
       // get the identifier of the reference
      if (userRef.remoteType() === "id") {
        var id = userRef.id();
      } else if (userRef.remoteType() === "link") {
        var link = userRef.link();
      }
       // load user (via store.findRecord or store.findBelongsTo)
      userRef.load().then(...)
       // or trigger a reload
      userRef.reload().then(...)
       // provide data for reference
      userRef.push({
        type: 'user',
        id: 1,
        attributes: {
          username: "@user"
        }
      }).then(function(user) {
        userRef.value() === user;
      });
      ```
       @method belongsTo
      @param {String} name of the relationship
      @since 2.5.0
      @return {BelongsToReference} reference for this relationship
    */
    belongsTo: function belongsTo(name) {
      return this._internalModel.referenceFor('belongsTo', name);
    },

    /**
      Get the reference for the specified hasMany relationship.
       Example
       ```javascript
      // models/blog.js
      export default DS.Model.extend({
        comments: DS.hasMany({ async: true })
      });
       var blog = store.push({
        type: 'blog',
        id: 1,
        relationships: {
          comments: {
            data: [
              { type: 'comment', id: 1 },
              { type: 'comment', id: 2 }
            ]
          }
        }
      });
      var commentsRef = blog.hasMany('comments');
       // check if the comments are loaded already
      var isLoaded = commentsRef.value() !== null;
       // get the records of the reference (null if not yet available)
      var comments = commentsRef.value();
       // get the identifier of the reference
      if (commentsRef.remoteType() === "ids") {
        var ids = commentsRef.ids();
      } else if (commentsRef.remoteType() === "link") {
        var link = commentsRef.link();
      }
       // load comments (via store.findMany or store.findHasMany)
      commentsRef.load().then(...)
       // or trigger a reload
      commentsRef.reload().then(...)
       // provide data for reference
      commentsRef.push([{ type: 'comment', id: 1 }, { type: 'comment', id: 2 }]).then(function(comments) {
        commentsRef.value() === comments;
      });
      ```
       @method hasMany
      @param {String} name of the relationship
      @since 2.5.0
      @return {HasManyReference} reference for this relationship
    */
    hasMany: function hasMany(name) {
      return this._internalModel.referenceFor('hasMany', name);
    },

    setId: _ember["default"].observer('id', function () {
      this._internalModel.setId(this.get('id'));
    })
  });

  /**
   @property data
   @private
   @type {Object}
   */
  Object.defineProperty(Model.prototype, 'data', {
    get: function get() {
      return this._internalModel._data;
    }
  });

  Model.reopenClass({
    /**
      Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model
      instances from within the store, but if end users accidentally call `create()`
      (instead of `createRecord()`), we can raise an error.
       @method _create
      @private
      @static
    */
    _create: Model.create,

    /**
      Override the class' `create()` method to raise an error. This
      prevents end users from inadvertently calling `create()` instead
      of `createRecord()`. The store is still able to create instances
      by calling the `_create()` method. To create an instance of a
      `DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).
       @method create
      @private
      @static
    */
    create: function create() {
      throw new _ember["default"].Error("You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.");
    },

    /**
     Represents the model's class name as a string. This can be used to look up the model through
     DS.Store's modelFor method.
      `modelName` is generated for you by Ember Data. It will be a lowercased, dasherized string.
     For example:
      ```javascript
     store.modelFor('post').modelName; // 'post'
     store.modelFor('blog-post').modelName; // 'blog-post'
     ```
      The most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload
     keys to underscore (instead of dasherized), you might use the following code:
      ```javascript
     export default var PostSerializer = DS.RESTSerializer.extend({
       payloadKeyFromModelName: function(modelName) {
         return Ember.String.underscore(modelName);
       }
     });
     ```
     @property modelName
     @type String
     @readonly
     @static
    */
    modelName: null
  });

  // if `Ember.setOwner` is defined, accessing `this.container` is
  // deprecated (but functional). In "standard" Ember usage, this
  // deprecation is actually created via an `.extend` of the factory
  // inside the container itself, but that only happens on models
  // with MODEL_FACTORY_INJECTIONS enabled :(
  if (_ember["default"].setOwner) {
    Object.defineProperty(Model.prototype, 'container', {
      configurable: true,
      enumerable: false,
      get: function get() {
        (0, _emberDataPrivateDebug.deprecate)('Using the injected `container` is deprecated. Please use the `getOwner` helper instead to access the owner of this object.', false, { id: 'ember-application.injected-container', until: '3.0.0' });

        return this.store.container;
      }
    });
  }

  if (false) {
    Model.reopen({
      /**
        Discards any unsaved changes to the given attribute.
         Example
         ```javascript
        record.get('name'); // 'Untitled Document'
        record.set('name', 'Doc 1');
        record.get('name'); // 'Doc 1'
        record.resetAttribute('name');
        record.get('name'); // 'Untitled Document'
        ```
         @method resetAttribute
      */
      resetAttribute: function resetAttribute(attributeName) {
        if (attributeName in this._internalModel._attributes) {
          this.set(attributeName, this._internalModel.lastAcknowledgedValue(attributeName));
        }
      }
    });
  }

  Model.reopenClass(_emberDataPrivateSystemRelationshipsExt.RelationshipsClassMethodsMixin);
  Model.reopenClass(_emberDataPrivateSystemModelAttr.AttrClassMethodsMixin);

  exports["default"] = Model.extend(_emberDataPrivateSystemDebugDebugInfo["default"], _emberDataPrivateSystemRelationshipsBelongsTo.BelongsToMixin, _emberDataPrivateSystemRelationshipsExt.DidDefinePropertyMixin, _emberDataPrivateSystemRelationshipsExt.RelationshipsInstanceMethodsMixin, _emberDataPrivateSystemRelationshipsHasMany.HasManyMixin, _emberDataPrivateSystemModelAttr.AttrInstanceMethodsMixin);
});
define('ember-data/-private/system/model/states', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  /**
    @module ember-data
  */
  'use strict';

  var get = _ember['default'].get;
  /*
    This file encapsulates the various states that a record can transition
    through during its lifecycle.
  */
  /**
    ### State
  
    Each record has a `currentState` property that explicitly tracks what
    state a record is in at any given time. For instance, if a record is
    newly created and has not yet been sent to the adapter to be saved,
    it would be in the `root.loaded.created.uncommitted` state.  If a
    record has had local modifications made to it that are in the
    process of being saved, the record would be in the
    `root.loaded.updated.inFlight` state. (This state paths will be
    explained in more detail below.)
  
    Events are sent by the record or its store to the record's
    `currentState` property. How the state reacts to these events is
    dependent on which state it is in. In some states, certain events
    will be invalid and will cause an exception to be raised.
  
    States are hierarchical and every state is a substate of the
    `RootState`. For example, a record can be in the
    `root.deleted.uncommitted` state, then transition into the
    `root.deleted.inFlight` state. If a child state does not implement
    an event handler, the state manager will attempt to invoke the event
    on all parent states until the root state is reached. The state
    hierarchy of a record is described in terms of a path string. You
    can determine a record's current state by getting the state's
    `stateName` property:
  
    ```javascript
    record.get('currentState.stateName');
    //=> "root.created.uncommitted"
     ```
  
    The hierarchy of valid states that ship with ember data looks like
    this:
  
    ```text
    * root
      * deleted
        * saved
        * uncommitted
        * inFlight
      * empty
      * loaded
        * created
          * uncommitted
          * inFlight
        * saved
        * updated
          * uncommitted
          * inFlight
      * loading
    ```
  
    The `DS.Model` states are themselves stateless. What that means is
    that, the hierarchical states that each of *those* points to is a
    shared data structure. For performance reasons, instead of each
    record getting its own copy of the hierarchy of states, each record
    points to this global, immutable shared instance. How does a state
    know which record it should be acting on? We pass the record
    instance into the state's event handlers as the first argument.
  
    The record passed as the first parameter is where you should stash
    state about the record if needed; you should never store data on the state
    object itself.
  
    ### Events and Flags
  
    A state may implement zero or more events and flags.
  
    #### Events
  
    Events are named functions that are invoked when sent to a record. The
    record will first look for a method with the given name on the
    current state. If no method is found, it will search the current
    state's parent, and then its grandparent, and so on until reaching
    the top of the hierarchy. If the root is reached without an event
    handler being found, an exception will be raised. This can be very
    helpful when debugging new features.
  
    Here's an example implementation of a state with a `myEvent` event handler:
  
    ```javascript
    aState: DS.State.create({
      myEvent: function(manager, param) {
        console.log("Received myEvent with", param);
      }
    })
    ```
  
    To trigger this event:
  
    ```javascript
    record.send('myEvent', 'foo');
    //=> "Received myEvent with foo"
    ```
  
    Note that an optional parameter can be sent to a record's `send()` method,
    which will be passed as the second parameter to the event handler.
  
    Events should transition to a different state if appropriate. This can be
    done by calling the record's `transitionTo()` method with a path to the
    desired state. The state manager will attempt to resolve the state path
    relative to the current state. If no state is found at that path, it will
    attempt to resolve it relative to the current state's parent, and then its
    parent, and so on until the root is reached. For example, imagine a hierarchy
    like this:
  
        * created
          * uncommitted <-- currentState
          * inFlight
        * updated
          * inFlight
  
    If we are currently in the `uncommitted` state, calling
    `transitionTo('inFlight')` would transition to the `created.inFlight` state,
    while calling `transitionTo('updated.inFlight')` would transition to
    the `updated.inFlight` state.
  
    Remember that *only events* should ever cause a state transition. You should
    never call `transitionTo()` from outside a state's event handler. If you are
    tempted to do so, create a new event and send that to the state manager.
  
    #### Flags
  
    Flags are Boolean values that can be used to introspect a record's current
    state in a more user-friendly way than examining its state path. For example,
    instead of doing this:
  
    ```javascript
    var statePath = record.get('stateManager.currentPath');
    if (statePath === 'created.inFlight') {
      doSomething();
    }
    ```
  
    You can say:
  
    ```javascript
    if (record.get('isNew') && record.get('isSaving')) {
      doSomething();
    }
    ```
  
    If your state does not set a value for a given flag, the value will
    be inherited from its parent (or the first place in the state hierarchy
    where it is defined).
  
    The current set of flags are defined below. If you want to add a new flag,
    in addition to the area below, you will also need to declare it in the
    `DS.Model` class.
  
  
     * [isEmpty](DS.Model.html#property_isEmpty)
     * [isLoading](DS.Model.html#property_isLoading)
     * [isLoaded](DS.Model.html#property_isLoaded)
     * [isDirty](DS.Model.html#property_isDirty)
     * [isSaving](DS.Model.html#property_isSaving)
     * [isDeleted](DS.Model.html#property_isDeleted)
     * [isNew](DS.Model.html#property_isNew)
     * [isValid](DS.Model.html#property_isValid)
  
    @namespace DS
    @class RootState
  */

  function _didSetProperty(internalModel, context) {
    if (context.value === context.originalValue) {
      delete internalModel._attributes[context.name];
      internalModel.send('propertyWasReset', context.name);
    } else if (context.value !== context.oldValue) {
      internalModel.send('becomeDirty');
    }

    internalModel.updateRecordArraysLater();
  }

  // Implementation notes:
  //
  // Each state has a boolean value for all of the following flags:
  //
  // * isLoaded: The record has a populated `data` property. When a
  //   record is loaded via `store.find`, `isLoaded` is false
  //   until the adapter sets it. When a record is created locally,
  //   its `isLoaded` property is always true.
  // * isDirty: The record has local changes that have not yet been
  //   saved by the adapter. This includes records that have been
  //   created (but not yet saved) or deleted.
  // * isSaving: The record has been committed, but
  //   the adapter has not yet acknowledged that the changes have
  //   been persisted to the backend.
  // * isDeleted: The record was marked for deletion. When `isDeleted`
  //   is true and `isDirty` is true, the record is deleted locally
  //   but the deletion was not yet persisted. When `isSaving` is
  //   true, the change is in-flight. When both `isDirty` and
  //   `isSaving` are false, the change has persisted.
  // * isNew: The record was created on the client and the adapter
  //   did not yet report that it was successfully saved.
  // * isValid: The adapter did not report any server-side validation
  //   failures.

  // The dirty state is a abstract state whose functionality is
  // shared between the `created` and `updated` states.
  //
  // The deleted state shares the `isDirty` flag with the
  // subclasses of `DirtyState`, but with a very different
  // implementation.
  //
  // Dirty states have three child states:
  //
  // `uncommitted`: the store has not yet handed off the record
  //   to be saved.
  // `inFlight`: the store has handed off the record to be saved,
  //   but the adapter has not yet acknowledged success.
  // `invalid`: the record has invalid information and cannot be
  //   sent to the adapter yet.
  var DirtyState = {
    initialState: 'uncommitted',

    // FLAGS
    isDirty: true,

    // SUBSTATES

    // When a record first becomes dirty, it is `uncommitted`.
    // This means that there are local pending changes, but they
    // have not yet begun to be saved, and are not invalid.
    uncommitted: {
      // EVENTS
      didSetProperty: _didSetProperty,

      //TODO(Igor) reloading now triggers a
      //loadingData event, though it seems fine?
      loadingData: _ember['default'].K,

      propertyWasReset: function propertyWasReset(internalModel, name) {
        if (!internalModel.hasChangedAttributes()) {
          internalModel.send('rolledBack');
        }
      },

      pushedData: function pushedData(internalModel) {
        internalModel.updateChangedAttributes();

        if (!internalModel.hasChangedAttributes()) {
          internalModel.transitionTo('loaded.saved');
        }
      },

      becomeDirty: _ember['default'].K,

      willCommit: function willCommit(internalModel) {
        internalModel.transitionTo('inFlight');
      },

      reloadRecord: function reloadRecord(internalModel, resolve) {
        resolve(internalModel.store.reloadRecord(internalModel));
      },

      rolledBack: function rolledBack(internalModel) {
        internalModel.transitionTo('loaded.saved');
      },

      becameInvalid: function becameInvalid(internalModel) {
        internalModel.transitionTo('invalid');
      },

      rollback: function rollback(internalModel) {
        internalModel.rollbackAttributes();
        internalModel.triggerLater('ready');
      }
    },

    // Once a record has been handed off to the adapter to be
    // saved, it is in the 'in flight' state. Changes to the
    // record cannot be made during this window.
    inFlight: {
      // FLAGS
      isSaving: true,

      // EVENTS
      didSetProperty: _didSetProperty,
      becomeDirty: _ember['default'].K,
      pushedData: _ember['default'].K,

      unloadRecord: assertAgainstUnloadRecord,

      // TODO: More robust semantics around save-while-in-flight
      willCommit: _ember['default'].K,

      didCommit: function didCommit(internalModel) {
        var dirtyType = get(this, 'dirtyType');

        internalModel.transitionTo('saved');
        internalModel.send('invokeLifecycleCallbacks', dirtyType);
      },

      becameInvalid: function becameInvalid(internalModel) {
        internalModel.transitionTo('invalid');
        internalModel.send('invokeLifecycleCallbacks');
      },

      becameError: function becameError(internalModel) {
        internalModel.transitionTo('uncommitted');
        internalModel.triggerLater('becameError', internalModel);
      }
    },

    // A record is in the `invalid` if the adapter has indicated
    // the the record failed server-side invalidations.
    invalid: {
      // FLAGS
      isValid: false,

      // EVENTS
      deleteRecord: function deleteRecord(internalModel) {
        internalModel.transitionTo('deleted.uncommitted');
      },

      didSetProperty: function didSetProperty(internalModel, context) {
        internalModel.removeErrorMessageFromAttribute(context.name);

        _didSetProperty(internalModel, context);

        if (!internalModel.hasErrors()) {
          this.becameValid(internalModel);
        }
      },

      becameInvalid: _ember['default'].K,
      becomeDirty: _ember['default'].K,
      pushedData: _ember['default'].K,

      willCommit: function willCommit(internalModel) {
        internalModel.clearErrorMessages();
        internalModel.transitionTo('inFlight');
      },

      rolledBack: function rolledBack(internalModel) {
        internalModel.clearErrorMessages();
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('ready');
      },

      becameValid: function becameValid(internalModel) {
        internalModel.transitionTo('uncommitted');
      },

      invokeLifecycleCallbacks: function invokeLifecycleCallbacks(internalModel) {
        internalModel.triggerLater('becameInvalid', internalModel);
      }
    }
  };

  // The created and updated states are created outside the state
  // chart so we can reopen their substates and add mixins as
  // necessary.

  function deepClone(object) {
    var clone = {};
    var value;

    for (var prop in object) {
      value = object[prop];
      if (value && typeof value === 'object') {
        clone[prop] = deepClone(value);
      } else {
        clone[prop] = value;
      }
    }

    return clone;
  }

  function mixin(original, hash) {
    for (var prop in hash) {
      original[prop] = hash[prop];
    }

    return original;
  }

  function dirtyState(options) {
    var newState = deepClone(DirtyState);
    return mixin(newState, options);
  }

  var createdState = dirtyState({
    dirtyType: 'created',
    // FLAGS
    isNew: true
  });

  createdState.invalid.rolledBack = function (internalModel) {
    internalModel.transitionTo('deleted.saved');
  };
  createdState.uncommitted.rolledBack = function (internalModel) {
    internalModel.transitionTo('deleted.saved');
  };

  var updatedState = dirtyState({
    dirtyType: 'updated'
  });

  function createdStateDeleteRecord(internalModel) {
    internalModel.transitionTo('deleted.saved');
    internalModel.send('invokeLifecycleCallbacks');
  }

  createdState.uncommitted.deleteRecord = createdStateDeleteRecord;

  createdState.invalid.deleteRecord = createdStateDeleteRecord;

  createdState.uncommitted.rollback = function (internalModel) {
    DirtyState.uncommitted.rollback.apply(this, arguments);
    internalModel.transitionTo('deleted.saved');
  };

  createdState.uncommitted.pushedData = function (internalModel) {
    internalModel.transitionTo('loaded.updated.uncommitted');
    internalModel.triggerLater('didLoad');
  };

  createdState.uncommitted.propertyWasReset = _ember['default'].K;

  function assertAgainstUnloadRecord(internalModel) {
    (0, _emberDataPrivateDebug.assert)("You can only unload a record which is not inFlight. `" + internalModel + "`", false);
  }

  updatedState.inFlight.unloadRecord = assertAgainstUnloadRecord;

  updatedState.uncommitted.deleteRecord = function (internalModel) {
    internalModel.transitionTo('deleted.uncommitted');
  };

  var RootState = {
    // FLAGS
    isEmpty: false,
    isLoading: false,
    isLoaded: false,
    isDirty: false,
    isSaving: false,
    isDeleted: false,
    isNew: false,
    isValid: true,

    // DEFAULT EVENTS

    // Trying to roll back if you're not in the dirty state
    // doesn't change your state. For example, if you're in the
    // in-flight state, rolling back the record doesn't move
    // you out of the in-flight state.
    rolledBack: _ember['default'].K,
    unloadRecord: function unloadRecord(internalModel) {
      // clear relationships before moving to deleted state
      // otherwise it fails
      internalModel.clearRelationships();
      internalModel.transitionTo('deleted.saved');
    },

    propertyWasReset: _ember['default'].K,

    // SUBSTATES

    // A record begins its lifecycle in the `empty` state.
    // If its data will come from the adapter, it will
    // transition into the `loading` state. Otherwise, if
    // the record is being created on the client, it will
    // transition into the `created` state.
    empty: {
      isEmpty: true,

      // EVENTS
      loadingData: function loadingData(internalModel, promise) {
        internalModel._loadingPromise = promise;
        internalModel.transitionTo('loading');
      },

      loadedData: function loadedData(internalModel) {
        internalModel.transitionTo('loaded.created.uncommitted');
        internalModel.triggerLater('ready');
      },

      pushedData: function pushedData(internalModel) {
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('didLoad');
        internalModel.triggerLater('ready');
      }
    },

    // A record enters this state when the store asks
    // the adapter for its data. It remains in this state
    // until the adapter provides the requested data.
    //
    // Usually, this process is asynchronous, using an
    // XHR to retrieve the data.
    loading: {
      // FLAGS
      isLoading: true,

      exit: function exit(internalModel) {
        internalModel._loadingPromise = null;
      },

      // EVENTS
      pushedData: function pushedData(internalModel) {
        internalModel.transitionTo('loaded.saved');
        internalModel.triggerLater('didLoad');
        internalModel.triggerLater('ready');
        //TODO this seems out of place here
        internalModel.didCleanError();
      },

      becameError: function becameError(internalModel) {
        internalModel.triggerLater('becameError', internalModel);
      },

      notFound: function notFound(internalModel) {
        internalModel.transitionTo('empty');
      }
    },

    // A record enters this state when its data is populated.
    // Most of a record's lifecycle is spent inside substates
    // of the `loaded` state.
    loaded: {
      initialState: 'saved',

      // FLAGS
      isLoaded: true,

      //TODO(Igor) Reloading now triggers a loadingData event,
      //but it should be ok?
      loadingData: _ember['default'].K,

      // SUBSTATES

      // If there are no local changes to a record, it remains
      // in the `saved` state.
      saved: {
        setup: function setup(internalModel) {
          if (internalModel.hasChangedAttributes()) {
            internalModel.adapterDidDirty();
          }
        },

        // EVENTS
        didSetProperty: _didSetProperty,

        pushedData: _ember['default'].K,

        becomeDirty: function becomeDirty(internalModel) {
          internalModel.transitionTo('updated.uncommitted');
        },

        willCommit: function willCommit(internalModel) {
          internalModel.transitionTo('updated.inFlight');
        },

        reloadRecord: function reloadRecord(internalModel, resolve) {
          resolve(internalModel.store.reloadRecord(internalModel));
        },

        deleteRecord: function deleteRecord(internalModel) {
          internalModel.transitionTo('deleted.uncommitted');
        },

        unloadRecord: function unloadRecord(internalModel) {
          // clear relationships before moving to deleted state
          // otherwise it fails
          internalModel.clearRelationships();
          internalModel.transitionTo('deleted.saved');
        },

        didCommit: function didCommit(internalModel) {
          internalModel.send('invokeLifecycleCallbacks', get(internalModel, 'lastDirtyType'));
        },

        // loaded.saved.notFound would be triggered by a failed
        // `reload()` on an unchanged record
        notFound: _ember['default'].K

      },

      // A record is in this state after it has been locally
      // created but before the adapter has indicated that
      // it has been saved.
      created: createdState,

      // A record is in this state if it has already been
      // saved to the server, but there are new local changes
      // that have not yet been saved.
      updated: updatedState
    },

    // A record is in this state if it was deleted from the store.
    deleted: {
      initialState: 'uncommitted',
      dirtyType: 'deleted',

      // FLAGS
      isDeleted: true,
      isLoaded: true,
      isDirty: true,

      // TRANSITIONS
      setup: function setup(internalModel) {
        internalModel.updateRecordArrays();
      },

      // SUBSTATES

      // When a record is deleted, it enters the `start`
      // state. It will exit this state when the record
      // starts to commit.
      uncommitted: {

        // EVENTS

        willCommit: function willCommit(internalModel) {
          internalModel.transitionTo('inFlight');
        },

        rollback: function rollback(internalModel) {
          internalModel.rollbackAttributes();
          internalModel.triggerLater('ready');
        },

        pushedData: _ember['default'].K,
        becomeDirty: _ember['default'].K,
        deleteRecord: _ember['default'].K,

        rolledBack: function rolledBack(internalModel) {
          internalModel.transitionTo('loaded.saved');
          internalModel.triggerLater('ready');
        }
      },

      // After a record starts committing, but
      // before the adapter indicates that the deletion
      // has saved to the server, a record is in the
      // `inFlight` substate of `deleted`.
      inFlight: {
        // FLAGS
        isSaving: true,

        // EVENTS

        unloadRecord: assertAgainstUnloadRecord,

        // TODO: More robust semantics around save-while-in-flight
        willCommit: _ember['default'].K,
        didCommit: function didCommit(internalModel) {
          internalModel.transitionTo('saved');

          internalModel.send('invokeLifecycleCallbacks');
        },

        becameError: function becameError(internalModel) {
          internalModel.transitionTo('uncommitted');
          internalModel.triggerLater('becameError', internalModel);
        },

        becameInvalid: function becameInvalid(internalModel) {
          internalModel.transitionTo('invalid');
          internalModel.triggerLater('becameInvalid', internalModel);
        }
      },

      // Once the adapter indicates that the deletion has
      // been saved, the record enters the `saved` substate
      // of `deleted`.
      saved: {
        // FLAGS
        isDirty: false,

        setup: function setup(internalModel) {
          internalModel.clearRelationships();
          var store = internalModel.store;
          store._dematerializeRecord(internalModel);
        },

        invokeLifecycleCallbacks: function invokeLifecycleCallbacks(internalModel) {
          internalModel.triggerLater('didDelete', internalModel);
          internalModel.triggerLater('didCommit', internalModel);
        },

        willCommit: _ember['default'].K,

        didCommit: _ember['default'].K
      },

      invalid: {
        isValid: false,

        didSetProperty: function didSetProperty(internalModel, context) {
          internalModel.removeErrorMessageFromAttribute(context.name);

          _didSetProperty(internalModel, context);

          if (!internalModel.hasErrors()) {
            this.becameValid(internalModel);
          }
        },

        becameInvalid: _ember['default'].K,
        becomeDirty: _ember['default'].K,
        deleteRecord: _ember['default'].K,
        willCommit: _ember['default'].K,

        rolledBack: function rolledBack(internalModel) {
          internalModel.clearErrorMessages();
          internalModel.transitionTo('loaded.saved');
          internalModel.triggerLater('ready');
        },

        becameValid: function becameValid(internalModel) {
          internalModel.transitionTo('uncommitted');
        }

      }
    },

    invokeLifecycleCallbacks: function invokeLifecycleCallbacks(internalModel, dirtyType) {
      if (dirtyType === 'created') {
        internalModel.triggerLater('didCreate', internalModel);
      } else {
        internalModel.triggerLater('didUpdate', internalModel);
      }

      internalModel.triggerLater('didCommit', internalModel);
    }
  };

  function wireState(object, parent, name) {
    // TODO: Use Object.create and copy instead
    object = mixin(parent ? Object.create(parent) : {}, object);
    object.parentState = parent;
    object.stateName = name;

    for (var prop in object) {
      if (!object.hasOwnProperty(prop) || prop === 'parentState' || prop === 'stateName') {
        continue;
      }
      if (typeof object[prop] === 'object') {
        object[prop] = wireState(object[prop], object, name + "." + prop);
      }
    }

    return object;
  }

  RootState = wireState(RootState, null, "root");

  exports['default'] = RootState;
});
define('ember-data/-private/system/normalize-link', ['exports'], function (exports) {
  'use strict';

  exports['default'] = _normalizeLink;

  /*
    This method normalizes a link to an "links object". If the passed link is
    already an object it's returned without any modifications.
  
    See http://jsonapi.org/format/#document-links for more information.
  
    @method _normalizeLink
    @private
    @param {String} link
    @return {Object|null}
    @for DS
  */
  function _normalizeLink(link) {
    switch (typeof link) {
      case 'object':
        return link;
      case 'string':
        return { href: link };
    }
    return null;
  }
});
define('ember-data/-private/system/normalize-model-name', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = normalizeModelName;

  // All modelNames are dasherized internally. Changing this function may
  // require changes to other normalization hooks (such as typeForRoot).

  /**
   This method normalizes a modelName into the format Ember Data uses
   internally.
  
    @method normalizeModelName
    @public
    @param {String} modelName
    @return {String} normalizedModelName
    @for DS
  */
  function normalizeModelName(modelName) {
    return _ember['default'].String.dasherize(modelName);
  }
});
define('ember-data/-private/system/ordered-set', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = OrderedSet;

  var EmberOrderedSet = _ember['default'].OrderedSet;
  var guidFor = _ember['default'].guidFor;
  function OrderedSet() {
    this._super$constructor();
  }

  OrderedSet.create = function () {
    var Constructor = this;
    return new Constructor();
  };

  OrderedSet.prototype = Object.create(EmberOrderedSet.prototype);
  OrderedSet.prototype.constructor = OrderedSet;
  OrderedSet.prototype._super$constructor = EmberOrderedSet;

  OrderedSet.prototype.addWithIndex = function (obj, idx) {
    var guid = guidFor(obj);
    var presenceSet = this.presenceSet;
    var list = this.list;

    if (presenceSet[guid] === true) {
      return;
    }

    presenceSet[guid] = true;

    if (idx === undefined || idx === null) {
      list.push(obj);
    } else {
      list.splice(idx, 0, obj);
    }

    this.size += 1;

    return this;
  };
});
define('ember-data/-private/system/promise-proxies', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  'use strict';

  var Promise = _ember['default'].RSVP.Promise;
  var get = _ember['default'].get;

  /**
    A `PromiseArray` is an object that acts like both an `Ember.Array`
    and a promise. When the promise is resolved the resulting value
    will be set to the `PromiseArray`'s `content` property. This makes
    it easy to create data bindings with the `PromiseArray` that will be
    updated when the promise resolves.
  
    For more information see the [Ember.PromiseProxyMixin
    documentation](/api/classes/Ember.PromiseProxyMixin.html).
  
    Example
  
    ```javascript
    var promiseArray = DS.PromiseArray.create({
      promise: $.getJSON('/some/remote/data.json')
    });
  
    promiseArray.get('length'); // 0
  
    promiseArray.then(function() {
      promiseArray.get('length'); // 100
    });
    ```
  
    @class PromiseArray
    @namespace DS
    @extends Ember.ArrayProxy
    @uses Ember.PromiseProxyMixin
  */
  var PromiseArray = _ember['default'].ArrayProxy.extend(_ember['default'].PromiseProxyMixin);

  /**
    A `PromiseObject` is an object that acts like both an `Ember.Object`
    and a promise. When the promise is resolved, then the resulting value
    will be set to the `PromiseObject`'s `content` property. This makes
    it easy to create data bindings with the `PromiseObject` that will
    be updated when the promise resolves.
  
    For more information see the [Ember.PromiseProxyMixin
    documentation](/api/classes/Ember.PromiseProxyMixin.html).
  
    Example
  
    ```javascript
    var promiseObject = DS.PromiseObject.create({
      promise: $.getJSON('/some/remote/data.json')
    });
  
    promiseObject.get('name'); // null
  
    promiseObject.then(function() {
      promiseObject.get('name'); // 'Tomster'
    });
    ```
  
    @class PromiseObject
    @namespace DS
    @extends Ember.ObjectProxy
    @uses Ember.PromiseProxyMixin
  */
  var PromiseObject = _ember['default'].ObjectProxy.extend(_ember['default'].PromiseProxyMixin);

  var promiseObject = function promiseObject(promise, label) {
    return PromiseObject.create({
      promise: Promise.resolve(promise, label)
    });
  };

  var promiseArray = function promiseArray(promise, label) {
    return PromiseArray.create({
      promise: Promise.resolve(promise, label)
    });
  };

  /**
    A PromiseManyArray is a PromiseArray that also proxies certain method calls
    to the underlying manyArray.
    Right now we proxy:
  
      * `reload()`
      * `createRecord()`
      * `on()`
      * `one()`
      * `trigger()`
      * `off()`
      * `has()`
  
    @class PromiseManyArray
    @namespace DS
    @extends Ember.ArrayProxy
  */

  function proxyToContent(method) {
    return function () {
      var content = get(this, 'content');
      return content[method].apply(content, arguments);
    };
  }

  var PromiseManyArray = PromiseArray.extend({
    reload: function reload() {
      //I don't think this should ever happen right now, but worth guarding if we refactor the async relationships
      (0, _emberDataPrivateDebug.assert)('You are trying to reload an async manyArray before it has been created', get(this, 'content'));
      return PromiseManyArray.create({
        promise: get(this, 'content').reload()
      });
    },

    createRecord: proxyToContent('createRecord'),

    on: proxyToContent('on'),

    one: proxyToContent('one'),

    trigger: proxyToContent('trigger'),

    off: proxyToContent('off'),

    has: proxyToContent('has')
  });

  var promiseManyArray = function promiseManyArray(promise, label) {
    return PromiseManyArray.create({
      promise: Promise.resolve(promise, label)
    });
  };

  exports.PromiseArray = PromiseArray;
  exports.PromiseObject = PromiseObject;
  exports.PromiseManyArray = PromiseManyArray;
  exports.promiseArray = promiseArray;
  exports.promiseObject = promiseObject;
  exports.promiseManyArray = promiseManyArray;
});
define("ember-data/-private/system/record-array-manager", ["exports", "ember", "ember-data/-private/system/record-arrays", "ember-data/-private/system/ordered-set"], function (exports, _ember, _emberDataPrivateSystemRecordArrays, _emberDataPrivateSystemOrderedSet) {
  /**
    @module ember-data
  */

  "use strict";

  var MapWithDefault = _ember["default"].MapWithDefault;var get = _ember["default"].get;

  /**
    @class RecordArrayManager
    @namespace DS
    @private
    @extends Ember.Object
  */
  exports["default"] = _ember["default"].Object.extend({
    init: function init() {
      var _this = this;

      this.filteredRecordArrays = MapWithDefault.create({
        defaultValue: function defaultValue() {
          return [];
        }
      });

      this.liveRecordArrays = MapWithDefault.create({
        defaultValue: function defaultValue(typeClass) {
          return _this.createRecordArray(typeClass);
        }
      });

      this.changedRecords = [];
      this._adapterPopulatedRecordArrays = [];
    },

    recordDidChange: function recordDidChange(record) {
      if (this.changedRecords.push(record) !== 1) {
        return;
      }

      _ember["default"].run.schedule('actions', this, this.updateRecordArrays);
    },

    recordArraysForRecord: function recordArraysForRecord(record) {
      record._recordArrays = record._recordArrays || _emberDataPrivateSystemOrderedSet["default"].create();
      return record._recordArrays;
    },

    /**
      This method is invoked whenever data is loaded into the store by the
      adapter or updated by the adapter, or when a record has changed.
       It updates all record arrays that a record belongs to.
       To avoid thrashing, it only runs at most once per run loop.
       @method updateRecordArrays
    */
    updateRecordArrays: function updateRecordArrays() {
      var _this2 = this;

      this.changedRecords.forEach(function (internalModel) {
        if (get(internalModel, 'record.isDestroyed') || get(internalModel, 'record.isDestroying') || get(internalModel, 'currentState.stateName') === 'root.deleted.saved') {
          _this2._recordWasDeleted(internalModel);
        } else {
          _this2._recordWasChanged(internalModel);
        }
      });

      this.changedRecords.length = 0;
    },

    _recordWasDeleted: function _recordWasDeleted(record) {
      var recordArrays = record._recordArrays;

      if (!recordArrays) {
        return;
      }

      recordArrays.forEach(function (array) {
        return array.removeInternalModel(record);
      });

      record._recordArrays = null;
    },

    _recordWasChanged: function _recordWasChanged(record) {
      var _this3 = this;

      var typeClass = record.type;
      var recordArrays = this.filteredRecordArrays.get(typeClass);
      var filter;
      recordArrays.forEach(function (array) {
        filter = get(array, 'filterFunction');
        _this3.updateFilterRecordArray(array, filter, typeClass, record);
      });
    },

    //Need to update live arrays on loading
    recordWasLoaded: function recordWasLoaded(record) {
      var _this4 = this;

      var typeClass = record.type;
      var recordArrays = this.filteredRecordArrays.get(typeClass);
      var filter;

      recordArrays.forEach(function (array) {
        filter = get(array, 'filterFunction');
        _this4.updateFilterRecordArray(array, filter, typeClass, record);
      });

      if (this.liveRecordArrays.has(typeClass)) {
        var liveRecordArray = this.liveRecordArrays.get(typeClass);
        this._addRecordToRecordArray(liveRecordArray, record);
      }
    },
    /**
      Update an individual filter.
       @method updateFilterRecordArray
      @param {DS.FilteredRecordArray} array
      @param {Function} filter
      @param {DS.Model} typeClass
      @param {InternalModel} record
    */
    updateFilterRecordArray: function updateFilterRecordArray(array, filter, typeClass, record) {
      var shouldBeInArray = filter(record.getRecord());
      var recordArrays = this.recordArraysForRecord(record);
      if (shouldBeInArray) {
        this._addRecordToRecordArray(array, record);
      } else {
        recordArrays["delete"](array);
        array.removeInternalModel(record);
      }
    },

    _addRecordToRecordArray: function _addRecordToRecordArray(array, record) {
      var recordArrays = this.recordArraysForRecord(record);
      if (!recordArrays.has(array)) {
        array.addInternalModel(record);
        recordArrays.add(array);
      }
    },

    populateLiveRecordArray: function populateLiveRecordArray(array, modelName) {
      var typeMap = this.store.typeMapFor(modelName);
      var records = typeMap.records;
      var record;

      for (var i = 0; i < records.length; i++) {
        record = records[i];

        if (!record.isDeleted() && !record.isEmpty()) {
          this._addRecordToRecordArray(array, record);
        }
      }
    },

    /**
      This method is invoked if the `filterFunction` property is
      changed on a `DS.FilteredRecordArray`.
       It essentially re-runs the filter from scratch. This same
      method is invoked when the filter is created in th first place.
       @method updateFilter
      @param {Array} array
      @param {String} modelName
      @param {Function} filter
    */
    updateFilter: function updateFilter(array, modelName, filter) {
      var typeMap = this.store.typeMapFor(modelName);
      var records = typeMap.records;
      var record;

      for (var i = 0; i < records.length; i++) {
        record = records[i];

        if (!record.isDeleted() && !record.isEmpty()) {
          this.updateFilterRecordArray(array, filter, modelName, record);
        }
      }
    },

    /**
      Get the `DS.RecordArray` for a type, which contains all loaded records of
      given type.
       @method liveRecordArrayFor
      @param {Class} typeClass
      @return {DS.RecordArray}
    */
    liveRecordArrayFor: function liveRecordArrayFor(typeClass) {
      return this.liveRecordArrays.get(typeClass);
    },

    /**
      Create a `DS.RecordArray` for a type.
       @method createRecordArray
      @param {Class} typeClass
      @return {DS.RecordArray}
    */
    createRecordArray: function createRecordArray(typeClass) {
      var array = _emberDataPrivateSystemRecordArrays.RecordArray.create({
        type: typeClass,
        content: _ember["default"].A(),
        store: this.store,
        isLoaded: true,
        manager: this
      });

      return array;
    },

    /**
      Create a `DS.FilteredRecordArray` for a type and register it for updates.
       @method createFilteredRecordArray
      @param {DS.Model} typeClass
      @param {Function} filter
      @param {Object} query (optional
      @return {DS.FilteredRecordArray}
    */
    createFilteredRecordArray: function createFilteredRecordArray(typeClass, filter, query) {
      var array = _emberDataPrivateSystemRecordArrays.FilteredRecordArray.create({
        query: query,
        type: typeClass,
        content: _ember["default"].A(),
        store: this.store,
        manager: this,
        filterFunction: filter
      });

      this.registerFilteredRecordArray(array, typeClass, filter);

      return array;
    },

    /**
      Create a `DS.AdapterPopulatedRecordArray` for a type with given query.
       @method createAdapterPopulatedRecordArray
      @param {DS.Model} typeClass
      @param {Object} query
      @return {DS.AdapterPopulatedRecordArray}
    */
    createAdapterPopulatedRecordArray: function createAdapterPopulatedRecordArray(typeClass, query) {
      var array = _emberDataPrivateSystemRecordArrays.AdapterPopulatedRecordArray.create({
        type: typeClass,
        query: query,
        content: _ember["default"].A(),
        store: this.store,
        manager: this
      });

      this._adapterPopulatedRecordArrays.push(array);

      return array;
    },

    /**
      Register a RecordArray for a given type to be backed by
      a filter function. This will cause the array to update
      automatically when records of that type change attribute
      values or states.
       @method registerFilteredRecordArray
      @param {DS.RecordArray} array
      @param {DS.Model} typeClass
      @param {Function} filter
    */
    registerFilteredRecordArray: function registerFilteredRecordArray(array, typeClass, filter) {
      var recordArrays = this.filteredRecordArrays.get(typeClass);
      recordArrays.push(array);

      this.updateFilter(array, typeClass, filter);
    },

    /**
      Unregister a RecordArray.
      So manager will not update this array.
       @method unregisterRecordArray
      @param {DS.RecordArray} array
    */
    unregisterRecordArray: function unregisterRecordArray(array) {
      var typeClass = array.type;

      // unregister filtered record array
      var recordArrays = this.filteredRecordArrays.get(typeClass);
      var removedFromFiltered = remove(recordArrays, array);

      // remove from adapter populated record array
      var removedFromAdapterPopulated = remove(this._adapterPopulatedRecordArrays, array);

      if (!removedFromFiltered && !removedFromAdapterPopulated) {

        // unregister live record array
        if (this.liveRecordArrays.has(typeClass)) {
          var liveRecordArrayForType = this.liveRecordArrayFor(typeClass);
          if (array === liveRecordArrayForType) {
            this.liveRecordArrays["delete"](typeClass);
          }
        }
      }
    },

    willDestroy: function willDestroy() {
      this._super.apply(this, arguments);

      this.filteredRecordArrays.forEach(function (value) {
        return flatten(value).forEach(destroy);
      });
      this.liveRecordArrays.forEach(destroy);
      this._adapterPopulatedRecordArrays.forEach(destroy);
    }
  });

  function destroy(entry) {
    entry.destroy();
  }

  function flatten(list) {
    var length = list.length;
    var result = _ember["default"].A();

    for (var i = 0; i < length; i++) {
      result = result.concat(list[i]);
    }

    return result;
  }

  function remove(array, item) {
    var index = array.indexOf(item);

    if (index !== -1) {
      array.splice(index, 1);
      return true;
    }

    return false;
  }
});
define("ember-data/-private/system/record-arrays", ["exports", "ember-data/-private/system/record-arrays/record-array", "ember-data/-private/system/record-arrays/filtered-record-array", "ember-data/-private/system/record-arrays/adapter-populated-record-array"], function (exports, _emberDataPrivateSystemRecordArraysRecordArray, _emberDataPrivateSystemRecordArraysFilteredRecordArray, _emberDataPrivateSystemRecordArraysAdapterPopulatedRecordArray) {
  /**
    @module ember-data
  */

  "use strict";

  exports.RecordArray = _emberDataPrivateSystemRecordArraysRecordArray["default"];
  exports.FilteredRecordArray = _emberDataPrivateSystemRecordArraysFilteredRecordArray["default"];
  exports.AdapterPopulatedRecordArray = _emberDataPrivateSystemRecordArraysAdapterPopulatedRecordArray["default"];
});
define("ember-data/-private/system/record-arrays/adapter-populated-record-array", ["exports", "ember", "ember-data/-private/system/record-arrays/record-array", "ember-data/-private/system/clone-null", "ember-data/-private/features"], function (exports, _ember, _emberDataPrivateSystemRecordArraysRecordArray, _emberDataPrivateSystemCloneNull, _emberDataPrivateFeatures) {
  "use strict";

  /**
    @module ember-data
  */

  var get = _ember["default"].get;

  /**
    Represents an ordered list of records whose order and membership is
    determined by the adapter. For example, a query sent to the adapter
    may trigger a search on the server, whose results would be loaded
    into an instance of the `AdapterPopulatedRecordArray`.
  
    @class AdapterPopulatedRecordArray
    @namespace DS
    @extends DS.RecordArray
  */
  exports["default"] = _emberDataPrivateSystemRecordArraysRecordArray["default"].extend({
    query: null,

    replace: function replace() {
      var type = get(this, 'type').toString();
      throw new Error("The result of a server query (on " + type + ") is immutable.");
    },

    _update: function _update() {
      var store = get(this, 'store');
      var modelName = get(this, 'type.modelName');
      var query = get(this, 'query');

      return store._query(modelName, query, this);
    },

    /**
      @method loadRecords
      @param {Array} records
      @param {Object} payload normalized payload
      @private
    */
    loadRecords: function loadRecords(records, payload) {
      var _this = this;

      //TODO Optimize
      var internalModels = _ember["default"].A(records).mapBy('_internalModel');
      this.setProperties({
        content: _ember["default"].A(internalModels),
        isLoaded: true,
        isUpdating: false,
        meta: (0, _emberDataPrivateSystemCloneNull["default"])(payload.meta)
      });

      if (true) {
        this.set('links', (0, _emberDataPrivateSystemCloneNull["default"])(payload.links));
      }

      internalModels.forEach(function (record) {
        _this.manager.recordArraysForRecord(record).add(_this);
      });

      // TODO: should triggering didLoad event be the last action of the runLoop?
      _ember["default"].run.once(this, 'trigger', 'didLoad');
    }
  });
});
define('ember-data/-private/system/record-arrays/filtered-record-array', ['exports', 'ember', 'ember-data/-private/system/record-arrays/record-array'], function (exports, _ember, _emberDataPrivateSystemRecordArraysRecordArray) {
  'use strict';

  /**
    @module ember-data
  */

  var get = _ember['default'].get;

  /**
    Represents a list of records whose membership is determined by the
    store. As records are created, loaded, or modified, the store
    evaluates them to determine if they should be part of the record
    array.
  
    @class FilteredRecordArray
    @namespace DS
    @extends DS.RecordArray
  */
  exports['default'] = _emberDataPrivateSystemRecordArraysRecordArray['default'].extend({
    /**
      The filterFunction is a function used to test records from the store to
      determine if they should be part of the record array.
       Example
       ```javascript
      var allPeople = store.peekAll('person');
      allPeople.mapBy('name'); // ["Tom Dale", "Yehuda Katz", "Trek Glowacki"]
       var people = store.filter('person', function(person) {
        if (person.get('name').match(/Katz$/)) { return true; }
      });
      people.mapBy('name'); // ["Yehuda Katz"]
       var notKatzFilter = function(person) {
        return !person.get('name').match(/Katz$/);
      };
      people.set('filterFunction', notKatzFilter);
      people.mapBy('name'); // ["Tom Dale", "Trek Glowacki"]
      ```
       @method filterFunction
      @param {DS.Model} record
      @return {Boolean} `true` if the record should be in the array
    */
    filterFunction: null,
    isLoaded: true,

    replace: function replace() {
      var type = get(this, 'type').toString();
      throw new Error("The result of a client-side filter (on " + type + ") is immutable.");
    },

    /**
      @method updateFilter
      @private
    */
    _updateFilter: function _updateFilter() {
      var manager = get(this, 'manager');
      manager.updateFilter(this, get(this, 'type'), get(this, 'filterFunction'));
    },

    updateFilter: _ember['default'].observer('filterFunction', function () {
      _ember['default'].run.once(this, this._updateFilter);
    })
  });
});
define("ember-data/-private/system/record-arrays/record-array", ["exports", "ember", "ember-data/-private/system/promise-proxies", "ember-data/-private/system/snapshot-record-array"], function (exports, _ember, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemSnapshotRecordArray) {
  /**
    @module ember-data
  */

  "use strict";

  var get = _ember["default"].get;
  var set = _ember["default"].set;

  /**
    A record array is an array that contains records of a certain type. The record
    array materializes records as needed when they are retrieved for the first
    time. You should not create record arrays yourself. Instead, an instance of
    `DS.RecordArray` or its subclasses will be returned by your application's store
    in response to queries.
  
    @class RecordArray
    @namespace DS
    @extends Ember.ArrayProxy
    @uses Ember.Evented
  */

  exports["default"] = _ember["default"].ArrayProxy.extend(_ember["default"].Evented, {
    /**
      The model type contained by this record array.
       @property type
      @type DS.Model
    */
    type: null,

    /**
      The array of client ids backing the record array. When a
      record is requested from the record array, the record
      for the client id at the same index is materialized, if
      necessary, by the store.
       @property content
      @private
      @type Ember.Array
    */
    content: null,

    /**
      The flag to signal a `RecordArray` is finished loading data.
       Example
       ```javascript
      var people = store.peekAll('person');
      people.get('isLoaded'); // true
      ```
       @property isLoaded
      @type Boolean
    */
    isLoaded: false,
    /**
      The flag to signal a `RecordArray` is currently loading data.
       Example
       ```javascript
      var people = store.peekAll('person');
      people.get('isUpdating'); // false
      people.update();
      people.get('isUpdating'); // true
      ```
       @property isUpdating
      @type Boolean
    */
    isUpdating: false,

    /**
      The store that created this record array.
       @property store
      @private
      @type DS.Store
    */
    store: null,

    /**
      Retrieves an object from the content by index.
       @method objectAtContent
      @private
      @param {Number} index
      @return {DS.Model} record
    */
    objectAtContent: function objectAtContent(index) {
      var content = get(this, 'content');
      var internalModel = content.objectAt(index);
      return internalModel && internalModel.getRecord();
    },

    /**
      Used to get the latest version of all of the records in this array
      from the adapter.
       Example
       ```javascript
      var people = store.peekAll('person');
      people.get('isUpdating'); // false
       people.update().then(function() {
        people.get('isUpdating'); // false
      });
       people.get('isUpdating'); // true
      ```
       @method update
    */
    update: function update() {
      if (get(this, 'isUpdating')) {
        return;
      }

      this.set('isUpdating', true);
      return this._update();
    },

    /*
      Update this RecordArray and return a promise which resolves once the update
      is finished.
     */
    _update: function _update() {
      var store = get(this, 'store');
      var modelName = get(this, 'type.modelName');

      return store.findAll(modelName, { reload: true });
    },

    /**
      Adds an internal model to the `RecordArray` without duplicates
       @method addInternalModel
      @private
      @param {InternalModel} internalModel
      @param {number} an optional index to insert at
    */
    addInternalModel: function addInternalModel(internalModel, idx) {
      var content = get(this, 'content');
      if (idx === undefined) {
        content.addObject(internalModel);
      } else if (!content.includes(internalModel)) {
        content.insertAt(idx, internalModel);
      }
    },

    /**
      Removes an internalModel to the `RecordArray`.
       @method removeInternalModel
      @private
      @param {InternalModel} internalModel
    */
    removeInternalModel: function removeInternalModel(internalModel) {
      get(this, 'content').removeObject(internalModel);
    },

    /**
      Saves all of the records in the `RecordArray`.
       Example
       ```javascript
      var messages = store.peekAll('message');
      messages.forEach(function(message) {
        message.set('hasBeenSeen', true);
      });
      messages.save();
      ```
       @method save
      @return {DS.PromiseArray} promise
    */
    save: function save() {
      var recordArray = this;
      var promiseLabel = "DS: RecordArray#save " + get(this, 'type');
      var promise = _ember["default"].RSVP.all(this.invoke("save"), promiseLabel).then(function (array) {
        return recordArray;
      }, null, "DS: RecordArray#save return RecordArray");

      return _emberDataPrivateSystemPromiseProxies.PromiseArray.create({ promise: promise });
    },

    _dissociateFromOwnRecords: function _dissociateFromOwnRecords() {
      var _this = this;

      this.get('content').forEach(function (record) {
        var recordArrays = record._recordArrays;

        if (recordArrays) {
          recordArrays["delete"](_this);
        }
      });
    },

    /**
      @method _unregisterFromManager
      @private
    */
    _unregisterFromManager: function _unregisterFromManager() {
      var manager = get(this, 'manager');
      manager.unregisterRecordArray(this);
    },

    willDestroy: function willDestroy() {
      this._unregisterFromManager();
      this._dissociateFromOwnRecords();
      set(this, 'content', undefined);
      set(this, 'length', 0);
      this._super.apply(this, arguments);
    },

    createSnapshot: function createSnapshot(options) {
      var meta = this.get('meta');
      return new _emberDataPrivateSystemSnapshotRecordArray["default"](this, meta, options);
    }
  });
});
define('ember-data/-private/system/references', ['exports', 'ember-data/-private/system/references/record', 'ember-data/-private/system/references/belongs-to', 'ember-data/-private/system/references/has-many'], function (exports, _emberDataPrivateSystemReferencesRecord, _emberDataPrivateSystemReferencesBelongsTo, _emberDataPrivateSystemReferencesHasMany) {
  'use strict';

  exports.RecordReference = _emberDataPrivateSystemReferencesRecord['default'];
  exports.BelongsToReference = _emberDataPrivateSystemReferencesBelongsTo['default'];
  exports.HasManyReference = _emberDataPrivateSystemReferencesHasMany['default'];
});
define('ember-data/-private/system/references/belongs-to', ['exports', 'ember-data/model', 'ember', 'ember-data/-private/system/references/reference', 'ember-data/-private/features', 'ember-data/-private/debug'], function (exports, _emberDataModel, _ember, _emberDataPrivateSystemReferencesReference, _emberDataPrivateFeatures, _emberDataPrivateDebug) {
  'use strict';

  var BelongsToReference = function BelongsToReference(store, parentInternalModel, belongsToRelationship) {
    this._super$constructor(store, parentInternalModel);
    this.belongsToRelationship = belongsToRelationship;
    this.type = belongsToRelationship.relationshipMeta.type;
    this.parent = parentInternalModel.recordReference;

    // TODO inverse
  };

  BelongsToReference.prototype = Object.create(_emberDataPrivateSystemReferencesReference['default'].prototype);
  BelongsToReference.prototype.constructor = BelongsToReference;
  BelongsToReference.prototype._super$constructor = _emberDataPrivateSystemReferencesReference['default'];

  BelongsToReference.prototype.remoteType = function () {
    if (this.belongsToRelationship.link) {
      return "link";
    }

    return "id";
  };

  BelongsToReference.prototype.id = function () {
    var inverseRecord = this.belongsToRelationship.inverseRecord;
    return inverseRecord && inverseRecord.id;
  };

  BelongsToReference.prototype.link = function () {
    return this.belongsToRelationship.link;
  };

  BelongsToReference.prototype.meta = function () {
    return this.belongsToRelationship.meta;
  };

  BelongsToReference.prototype.push = function (objectOrPromise) {
    var _this = this;

    return _ember['default'].RSVP.resolve(objectOrPromise).then(function (data) {
      var record;

      if (data instanceof _emberDataModel['default']) {
        if (false) {
          (0, _emberDataPrivateDebug.deprecate)("BelongsToReference#push(DS.Model) is deprecated. Update relationship via `model.set('relationshipName', value)` instead.", false, {
            id: 'ds.references.belongs-to.push-record',
            until: '3.0'
          });
        }
        record = data;
      } else {
        record = _this.store.push(data);
      }

      (0, _emberDataPrivateDebug.assertPolymorphicType)(_this.internalModel, _this.belongsToRelationship.relationshipMeta, record._internalModel);

      _this.belongsToRelationship.setCanonicalRecord(record._internalModel);

      return record;
    });
  };

  BelongsToReference.prototype.value = function () {
    var inverseRecord = this.belongsToRelationship.inverseRecord;

    if (inverseRecord && inverseRecord.record) {
      return inverseRecord.record;
    }

    return null;
  };

  BelongsToReference.prototype.load = function () {
    var _this2 = this;

    if (this.remoteType() === "id") {
      return this.belongsToRelationship.getRecord();
    }

    if (this.remoteType() === "link") {
      return this.belongsToRelationship.findLink().then(function (internalModel) {
        return _this2.value();
      });
    }
  };

  BelongsToReference.prototype.reload = function () {
    var _this3 = this;

    return this.belongsToRelationship.reload().then(function (internalModel) {
      return _this3.value();
    });
  };

  exports['default'] = BelongsToReference;
});
define('ember-data/-private/system/references/has-many', ['exports', 'ember', 'ember-data/-private/system/references/reference', 'ember-data/-private/debug', 'ember-data/-private/features'], function (exports, _ember, _emberDataPrivateSystemReferencesReference, _emberDataPrivateDebug, _emberDataPrivateFeatures) {
  'use strict';

  var get = _ember['default'].get;

  var HasManyReference = function HasManyReference(store, parentInternalModel, hasManyRelationship) {
    this._super$constructor(store, parentInternalModel);
    this.hasManyRelationship = hasManyRelationship;
    this.type = hasManyRelationship.relationshipMeta.type;
    this.parent = parentInternalModel.recordReference;

    // TODO inverse
  };

  HasManyReference.prototype = Object.create(_emberDataPrivateSystemReferencesReference['default'].prototype);
  HasManyReference.prototype.constructor = HasManyReference;
  HasManyReference.prototype._super$constructor = _emberDataPrivateSystemReferencesReference['default'];

  HasManyReference.prototype.remoteType = function () {
    if (this.hasManyRelationship.link) {
      return "link";
    }

    return "ids";
  };

  HasManyReference.prototype.link = function () {
    return this.hasManyRelationship.link;
  };

  HasManyReference.prototype.ids = function () {
    var members = this.hasManyRelationship.members;
    var ids = members.toArray().map(function (internalModel) {
      return internalModel.id;
    });

    return ids;
  };

  HasManyReference.prototype.meta = function () {
    return this.hasManyRelationship.manyArray.meta;
  };

  HasManyReference.prototype.push = function (objectOrPromise) {
    var _this = this;

    return _ember['default'].RSVP.resolve(objectOrPromise).then(function (payload) {
      var array = payload;

      if (false) {
        (0, _emberDataPrivateDebug.deprecate)("HasManyReference#push(array) is deprecated. Push a JSON-API document instead.", !Array.isArray(payload), {
          id: 'ds.references.has-many.push-array',
          until: '3.0'
        });
      }

      var useLegacyArrayPush = true;
      if (typeof payload === "object" && payload.data) {
        array = payload.data;
        useLegacyArrayPush = array.length && array[0].data;

        if (false) {
          (0, _emberDataPrivateDebug.deprecate)("HasManyReference#push() expects a valid JSON-API document.", !useLegacyArrayPush, {
            id: 'ds.references.has-many.push-invalid-json-api',
            until: '3.0'
          });
        }
      }

      if (!false) {
        useLegacyArrayPush = true;
      }

      var internalModels = undefined;
      if (useLegacyArrayPush) {
        internalModels = array.map(function (obj) {
          var record = _this.store.push(obj);

          (0, _emberDataPrivateDebug.runInDebug)(function () {
            var relationshipMeta = _this.hasManyRelationship.relationshipMeta;
            (0, _emberDataPrivateDebug.assertPolymorphicType)(_this.internalModel, relationshipMeta, record._internalModel);
          });

          return record._internalModel;
        });
      } else {
        var records = _this.store.push(payload);
        internalModels = _ember['default'].A(records).mapBy('_internalModel');

        (0, _emberDataPrivateDebug.runInDebug)(function () {
          internalModels.forEach(function (internalModel) {
            var relationshipMeta = _this.hasManyRelationship.relationshipMeta;
            (0, _emberDataPrivateDebug.assertPolymorphicType)(_this.internalModel, relationshipMeta, internalModel);
          });
        });
      }

      _this.hasManyRelationship.computeChanges(internalModels);

      return _this.hasManyRelationship.manyArray;
    });
  };

  HasManyReference.prototype._isLoaded = function () {
    var hasData = get(this.hasManyRelationship, 'hasData');
    if (!hasData) {
      return false;
    }

    var members = this.hasManyRelationship.members.toArray();
    var isEveryLoaded = members.every(function (internalModel) {
      return internalModel.isLoaded() === true;
    });

    return isEveryLoaded;
  };

  HasManyReference.prototype.value = function () {
    if (this._isLoaded()) {
      return this.hasManyRelationship.manyArray;
    }

    return null;
  };

  HasManyReference.prototype.load = function () {
    if (!this._isLoaded()) {
      return this.hasManyRelationship.getRecords();
    }

    var manyArray = this.hasManyRelationship.manyArray;
    return _ember['default'].RSVP.resolve(manyArray);
  };

  HasManyReference.prototype.reload = function () {
    return this.hasManyRelationship.reload();
  };

  exports['default'] = HasManyReference;
});
define('ember-data/-private/system/references/record', ['exports', 'ember', 'ember-data/-private/system/references/reference'], function (exports, _ember, _emberDataPrivateSystemReferencesReference) {
  'use strict';

  var RecordReference = function RecordReference(store, internalModel) {
    this._super$constructor(store, internalModel);
    this.type = internalModel.modelName;
    this._id = internalModel.id;
  };

  RecordReference.prototype = Object.create(_emberDataPrivateSystemReferencesReference['default'].prototype);
  RecordReference.prototype.constructor = RecordReference;
  RecordReference.prototype._super$constructor = _emberDataPrivateSystemReferencesReference['default'];

  RecordReference.prototype.id = function () {
    return this._id;
  };

  RecordReference.prototype.remoteType = function () {
    return 'identity';
  };

  RecordReference.prototype.push = function (objectOrPromise) {
    var _this = this;

    return _ember['default'].RSVP.resolve(objectOrPromise).then(function (data) {
      var record = _this.store.push(data);
      return record;
    });
  };

  RecordReference.prototype.value = function () {
    return this.internalModel.record;
  };

  RecordReference.prototype.load = function () {
    return this.store.findRecord(this.type, this._id);
  };

  RecordReference.prototype.reload = function () {
    var record = this.value();
    if (record) {
      return record.reload();
    }

    return this.load();
  };

  exports['default'] = RecordReference;
});
define("ember-data/-private/system/references/reference", ["exports"], function (exports) {
  "use strict";

  var Reference = function Reference(store, internalModel) {
    this.store = store;
    this.internalModel = internalModel;
  };

  Reference.prototype = {
    constructor: Reference
  };

  exports["default"] = Reference;
});
define('ember-data/-private/system/relationship-meta', ['exports', 'ember-inflector', 'ember-data/-private/system/normalize-model-name'], function (exports, _emberInflector, _emberDataPrivateSystemNormalizeModelName) {
  'use strict';

  exports.typeForRelationshipMeta = typeForRelationshipMeta;
  exports.relationshipFromMeta = relationshipFromMeta;

  function typeForRelationshipMeta(meta) {
    var modelName;

    modelName = meta.type || meta.key;
    if (meta.kind === 'hasMany') {
      modelName = (0, _emberInflector.singularize)((0, _emberDataPrivateSystemNormalizeModelName['default'])(modelName));
    }
    return modelName;
  }

  function relationshipFromMeta(meta) {
    return {
      key: meta.key,
      kind: meta.kind,
      type: typeForRelationshipMeta(meta),
      options: meta.options,
      parentType: meta.parentType,
      isRelationship: true
    };
  }
});
define("ember-data/-private/system/relationships/belongs-to", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/normalize-model-name"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemNormalizeModelName) {
  "use strict";

  exports["default"] = belongsTo;

  /**
    `DS.belongsTo` is used to define One-To-One and One-To-Many
    relationships on a [DS.Model](/api/data/classes/DS.Model.html).
  
  
    `DS.belongsTo` takes an optional hash as a second parameter, currently
    supported options are:
  
    - `async`: A boolean value used to explicitly declare this to be an async relationship.
    - `inverse`: A string used to identify the inverse property on a
      related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)
  
    #### One-To-One
    To declare a one-to-one relationship between two models, use
    `DS.belongsTo`:
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      profile: DS.belongsTo('profile')
    });
    ```
  
    ```app/models/profile.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      user: DS.belongsTo('user')
    });
    ```
  
    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `DS.belongsTo` in combination with `DS.hasMany`, like this:
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      comments: DS.hasMany('comment')
    });
    ```
  
    ```app/models/comment.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```
  
    You can avoid passing a string as the first parameter. In that case Ember Data
    will infer the type from the key name.
  
    ```app/models/comment.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      post: DS.belongsTo()
    });
    ```
  
    will lookup for a Post type.
  
    @namespace
    @method belongsTo
    @for DS
    @param {String} modelName (optional) type of the relationship
    @param {Object} options (optional) a hash of options
    @return {Ember.computed} relationship
  */
  function belongsTo(modelName, options) {
    var opts, userEnteredModelName;
    if (typeof modelName === 'object') {
      opts = modelName;
      userEnteredModelName = undefined;
    } else {
      opts = options;
      userEnteredModelName = modelName;
    }

    if (typeof userEnteredModelName === 'string') {
      userEnteredModelName = (0, _emberDataPrivateSystemNormalizeModelName["default"])(userEnteredModelName);
    }

    (0, _emberDataPrivateDebug.assert)("The first argument to DS.belongsTo must be a string representing a model type key, not an instance of " + _ember["default"].inspect(userEnteredModelName) + ". E.g., to define a relation to the Person model, use DS.belongsTo('person')", typeof userEnteredModelName === 'string' || typeof userEnteredModelName === 'undefined');

    opts = opts || {};

    var meta = {
      type: userEnteredModelName,
      isRelationship: true,
      options: opts,
      kind: 'belongsTo',
      key: null
    };

    return _ember["default"].computed({
      get: function get(key) {
        if (opts.hasOwnProperty('serialize')) {
          (0, _emberDataPrivateDebug.warn)("You provided a serialize option on the \"" + key + "\" property in the \"" + this._internalModel.modelName + "\" class, this belongs in the serializer. See DS.Serializer and it's implementations http://emberjs.com/api/data/classes/DS.Serializer.html", false, {
            id: 'ds.model.serialize-option-in-belongs-to'
          });
        }

        if (opts.hasOwnProperty('embedded')) {
          (0, _emberDataPrivateDebug.warn)("You provided an embedded option on the \"" + key + "\" property in the \"" + this._internalModel.modelName + "\" class, this belongs in the serializer. See DS.EmbeddedRecordsMixin http://emberjs.com/api/data/classes/DS.EmbeddedRecordsMixin.html", false, {
            id: 'ds.model.embedded-option-in-belongs-to'
          });
        }

        return this._internalModel._relationships.get(key).getRecord();
      },
      set: function set(key, value) {
        if (value === undefined) {
          value = null;
        }
        if (value && value.then) {
          this._internalModel._relationships.get(key).setRecordPromise(value);
        } else if (value) {
          this._internalModel._relationships.get(key).setRecord(value._internalModel);
        } else {
          this._internalModel._relationships.get(key).setRecord(value);
        }

        return this._internalModel._relationships.get(key).getRecord();
      }
    }).meta(meta);
  }

  /*
    These observers observe all `belongsTo` relationships on the record. See
    `relationships/ext` to see how these observers get their dependencies.
  */
  var BelongsToMixin = _ember["default"].Mixin.create({
    notifyBelongsToChanged: function notifyBelongsToChanged(key) {
      this.notifyPropertyChange(key);
    }
  });
  exports.BelongsToMixin = BelongsToMixin;
});
define("ember-data/-private/system/relationships/ext", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/relationship-meta", "ember-data/-private/system/empty-object"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemRelationshipMeta, _emberDataPrivateSystemEmptyObject) {
  "use strict";

  var get = _ember["default"].get;
  var Map = _ember["default"].Map;
  var MapWithDefault = _ember["default"].MapWithDefault;

  var relationshipsDescriptor = _ember["default"].computed(function () {
    if (_ember["default"].testing === true && relationshipsDescriptor._cacheable === true) {
      relationshipsDescriptor._cacheable = false;
    }

    var map = new MapWithDefault({
      defaultValue: function defaultValue() {
        return [];
      }
    });

    // Loop through each computed property on the class
    this.eachComputedProperty(function (name, meta) {
      // If the computed property is a relationship, add
      // it to the map.
      if (meta.isRelationship) {
        meta.key = name;
        var relationshipsForType = map.get((0, _emberDataPrivateSystemRelationshipMeta.typeForRelationshipMeta)(meta));

        relationshipsForType.push({
          name: name,
          kind: meta.kind
        });
      }
    });

    return map;
  }).readOnly();

  var relatedTypesDescriptor = _ember["default"].computed(function () {
    var _this = this;

    if (_ember["default"].testing === true && relatedTypesDescriptor._cacheable === true) {
      relatedTypesDescriptor._cacheable = false;
    }

    var modelName;
    var types = _ember["default"].A();

    // Loop through each computed property on the class,
    // and create an array of the unique types involved
    // in relationships
    this.eachComputedProperty(function (name, meta) {
      if (meta.isRelationship) {
        meta.key = name;
        modelName = (0, _emberDataPrivateSystemRelationshipMeta.typeForRelationshipMeta)(meta);

        (0, _emberDataPrivateDebug.assert)("You specified a hasMany (" + meta.type + ") on " + meta.parentType + " but " + meta.type + " was not found.", modelName);

        if (!types.includes(modelName)) {
          (0, _emberDataPrivateDebug.assert)("Trying to sideload " + name + " on " + _this.toString() + " but the type doesn't exist.", !!modelName);
          types.push(modelName);
        }
      }
    });

    return types;
  }).readOnly();

  var relationshipsByNameDescriptor = _ember["default"].computed(function () {
    if (_ember["default"].testing === true && relationshipsByNameDescriptor._cacheable === true) {
      relationshipsByNameDescriptor._cacheable = false;
    }

    var map = Map.create();

    this.eachComputedProperty(function (name, meta) {
      if (meta.isRelationship) {
        meta.key = name;
        var relationship = (0, _emberDataPrivateSystemRelationshipMeta.relationshipFromMeta)(meta);
        relationship.type = (0, _emberDataPrivateSystemRelationshipMeta.typeForRelationshipMeta)(meta);
        map.set(name, relationship);
      }
    });

    return map;
  }).readOnly();

  /**
    @module ember-data
  */

  /*
    This file defines several extensions to the base `DS.Model` class that
    add support for one-to-many relationships.
  */

  /**
    @class Model
    @namespace DS
  */
  var DidDefinePropertyMixin = _ember["default"].Mixin.create({

    /**
      This Ember.js hook allows an object to be notified when a property
      is defined.
       In this case, we use it to be notified when an Ember Data user defines a
      belongs-to relationship. In that case, we need to set up observers for
      each one, allowing us to track relationship changes and automatically
      reflect changes in the inverse has-many array.
       This hook passes the class being set up, as well as the key and value
      being defined. So, for example, when the user does this:
       ```javascript
      DS.Model.extend({
        parent: DS.belongsTo('user')
      });
      ```
       This hook would be called with "parent" as the key and the computed
      property returned by `DS.belongsTo` as the value.
       @method didDefineProperty
      @param {Object} proto
      @param {String} key
      @param {Ember.ComputedProperty} value
    */
    didDefineProperty: function didDefineProperty(proto, key, value) {
      // Check if the value being set is a computed property.
      if (value instanceof _ember["default"].ComputedProperty) {

        // If it is, get the metadata for the relationship. This is
        // populated by the `DS.belongsTo` helper when it is creating
        // the computed property.
        var meta = value.meta();

        meta.parentType = proto.constructor;
      }
    }
  });

  exports.DidDefinePropertyMixin = DidDefinePropertyMixin;

  /*
    These DS.Model extensions add class methods that provide relationship
    introspection abilities about relationships.
  
    A note about the computed properties contained here:
  
    **These properties are effectively sealed once called for the first time.**
    To avoid repeatedly doing expensive iteration over a model's fields, these
    values are computed once and then cached for the remainder of the runtime of
    your application.
  
    If your application needs to modify a class after its initial definition
    (for example, using `reopen()` to add additional attributes), make sure you
    do it before using your model with the store, which uses these properties
    extensively.
  */

  var RelationshipsClassMethodsMixin = _ember["default"].Mixin.create({

    /**
      For a given relationship name, returns the model type of the relationship.
       For example, if you define a model like this:
       ```app/models/post.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        comments: DS.hasMany('comment')
      });
     ```
       Calling `App.Post.typeForRelationship('comments')` will return `App.Comment`.
       @method typeForRelationship
      @static
      @param {String} name the name of the relationship
      @param {store} store an instance of DS.Store
      @return {DS.Model} the type of the relationship, or undefined
    */
    typeForRelationship: function typeForRelationship(name, store) {
      var relationship = get(this, 'relationshipsByName').get(name);
      return relationship && store.modelFor(relationship.type);
    },

    inverseMap: _ember["default"].computed(function () {
      return new _emberDataPrivateSystemEmptyObject["default"]();
    }),

    /**
      Find the relationship which is the inverse of the one asked for.
       For example, if you define models like this:
       ```app/models/post.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        comments: DS.hasMany('message')
      });
      ```
       ```app/models/message.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        owner: DS.belongsTo('post')
      });
      ```
       App.Post.inverseFor('comments') -> { type: App.Message, name: 'owner', kind: 'belongsTo' }
      App.Message.inverseFor('owner') -> { type: App.Post, name: 'comments', kind: 'hasMany' }
       @method inverseFor
      @static
      @param {String} name the name of the relationship
      @return {Object} the inverse relationship, or null
    */
    inverseFor: function inverseFor(name, store) {
      var inverseMap = get(this, 'inverseMap');
      if (inverseMap[name]) {
        return inverseMap[name];
      } else {
        var inverse = this._findInverseFor(name, store);
        inverseMap[name] = inverse;
        return inverse;
      }
    },

    //Calculate the inverse, ignoring the cache
    _findInverseFor: function _findInverseFor(name, store) {

      var inverseType = this.typeForRelationship(name, store);
      if (!inverseType) {
        return null;
      }

      var propertyMeta = this.metaForProperty(name);
      //If inverse is manually specified to be null, like  `comments: DS.hasMany('message', { inverse: null })`
      var options = propertyMeta.options;
      if (options.inverse === null) {
        return null;
      }

      var inverseName, inverseKind, inverse;

      //If inverse is specified manually, return the inverse
      if (options.inverse) {
        inverseName = options.inverse;
        inverse = _ember["default"].get(inverseType, 'relationshipsByName').get(inverseName);

        (0, _emberDataPrivateDebug.assert)("We found no inverse relationships by the name of '" + inverseName + "' on the '" + inverseType.modelName + "' model. This is most likely due to a missing attribute on your model definition.", !_ember["default"].isNone(inverse));

        inverseKind = inverse.kind;
      } else {
        //No inverse was specified manually, we need to use a heuristic to guess one
        if (propertyMeta.type === propertyMeta.parentType.modelName) {
          (0, _emberDataPrivateDebug.warn)("Detected a reflexive relationship by the name of '" + name + "' without an inverse option. Look at http://emberjs.com/guides/models/defining-models/#toc_reflexive-relation for how to explicitly specify inverses.", false, {
            id: 'ds.model.reflexive-relationship-without-inverse'
          });
        }

        var possibleRelationships = findPossibleInverses(this, inverseType);

        if (possibleRelationships.length === 0) {
          return null;
        }

        var filteredRelationships = possibleRelationships.filter(function (possibleRelationship) {
          var optionsForRelationship = inverseType.metaForProperty(possibleRelationship.name).options;
          return name === optionsForRelationship.inverse;
        });

        (0, _emberDataPrivateDebug.assert)("You defined the '" + name + "' relationship on " + this + ", but you defined the inverse relationships of type " + inverseType.toString() + " multiple times. Look at http://emberjs.com/guides/models/defining-models/#toc_explicit-inverses for how to explicitly specify inverses", filteredRelationships.length < 2);

        if (filteredRelationships.length === 1) {
          possibleRelationships = filteredRelationships;
        }

        (0, _emberDataPrivateDebug.assert)("You defined the '" + name + "' relationship on " + this + ", but multiple possible inverse relationships of type " + this + " were found on " + inverseType + ". Look at http://emberjs.com/guides/models/defining-models/#toc_explicit-inverses for how to explicitly specify inverses", possibleRelationships.length === 1);

        inverseName = possibleRelationships[0].name;
        inverseKind = possibleRelationships[0].kind;
      }

      function findPossibleInverses(type, inverseType, relationshipsSoFar) {
        var possibleRelationships = relationshipsSoFar || [];

        var relationshipMap = get(inverseType, 'relationships');
        if (!relationshipMap) {
          return possibleRelationships;
        }

        var relationships = relationshipMap.get(type.modelName);

        relationships = relationships.filter(function (relationship) {
          var optionsForRelationship = inverseType.metaForProperty(relationship.name).options;

          if (!optionsForRelationship.inverse) {
            return true;
          }

          return name === optionsForRelationship.inverse;
        });

        if (relationships) {
          possibleRelationships.push.apply(possibleRelationships, relationships);
        }

        //Recurse to support polymorphism
        if (type.superclass) {
          findPossibleInverses(type.superclass, inverseType, possibleRelationships);
        }

        return possibleRelationships;
      }

      return {
        type: inverseType,
        name: inverseName,
        kind: inverseKind
      };
    },

    /**
      The model's relationships as a map, keyed on the type of the
      relationship. The value of each entry is an array containing a descriptor
      for each relationship with that type, describing the name of the relationship
      as well as the type.
       For example, given the following model definition:
       ```app/models/blog.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        users: DS.hasMany('user'),
        owner: DS.belongsTo('user'),
        posts: DS.hasMany('post')
      });
      ```
       This computed property would return a map describing these
      relationships, like this:
       ```javascript
      import Ember from 'ember';
      import Blog from 'app/models/blog';
       var relationships = Ember.get(Blog, 'relationships');
      relationships.get(App.User);
      //=> [ { name: 'users', kind: 'hasMany' },
      //     { name: 'owner', kind: 'belongsTo' } ]
      relationships.get(App.Post);
      //=> [ { name: 'posts', kind: 'hasMany' } ]
      ```
       @property relationships
      @static
      @type Ember.Map
      @readOnly
    */

    relationships: relationshipsDescriptor,

    /**
      A hash containing lists of the model's relationships, grouped
      by the relationship kind. For example, given a model with this
      definition:
       ```app/models/blog.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        users: DS.hasMany('user'),
        owner: DS.belongsTo('user'),
         posts: DS.hasMany('post')
      });
      ```
       This property would contain the following:
       ```javascript
      import Ember from 'ember';
      import Blog from 'app/models/blog';
       var relationshipNames = Ember.get(Blog, 'relationshipNames');
      relationshipNames.hasMany;
      //=> ['users', 'posts']
      relationshipNames.belongsTo;
      //=> ['owner']
      ```
       @property relationshipNames
      @static
      @type Object
      @readOnly
    */
    relationshipNames: _ember["default"].computed(function () {
      var names = {
        hasMany: [],
        belongsTo: []
      };

      this.eachComputedProperty(function (name, meta) {
        if (meta.isRelationship) {
          names[meta.kind].push(name);
        }
      });

      return names;
    }),

    /**
      An array of types directly related to a model. Each type will be
      included once, regardless of the number of relationships it has with
      the model.
       For example, given a model with this definition:
       ```app/models/blog.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        users: DS.hasMany('user'),
        owner: DS.belongsTo('user'),
         posts: DS.hasMany('post')
      });
      ```
       This property would contain the following:
       ```javascript
      import Ember from 'ember';
      import Blog from 'app/models/blog';
       var relatedTypes = Ember.get(Blog, 'relatedTypes');
      //=> [ App.User, App.Post ]
      ```
       @property relatedTypes
      @static
      @type Ember.Array
      @readOnly
    */
    relatedTypes: relatedTypesDescriptor,

    /**
      A map whose keys are the relationships of a model and whose values are
      relationship descriptors.
       For example, given a model with this
      definition:
       ```app/models/blog.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        users: DS.hasMany('user'),
        owner: DS.belongsTo('user'),
         posts: DS.hasMany('post')
      });
      ```
       This property would contain the following:
       ```javascript
      import Ember from 'ember';
      import Blog from 'app/models/blog';
       var relationshipsByName = Ember.get(Blog, 'relationshipsByName');
      relationshipsByName.get('users');
      //=> { key: 'users', kind: 'hasMany', type: 'user', options: Object, isRelationship: true }
      relationshipsByName.get('owner');
      //=> { key: 'owner', kind: 'belongsTo', type: 'user', options: Object, isRelationship: true }
      ```
       @property relationshipsByName
      @static
      @type Ember.Map
      @readOnly
    */
    relationshipsByName: relationshipsByNameDescriptor,

    /**
      A map whose keys are the fields of the model and whose values are strings
      describing the kind of the field. A model's fields are the union of all of its
      attributes and relationships.
       For example:
       ```app/models/blog.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        users: DS.hasMany('user'),
        owner: DS.belongsTo('user'),
         posts: DS.hasMany('post'),
         title: DS.attr('string')
      });
      ```
       ```js
      import Ember from 'ember';
      import Blog from 'app/models/blog';
       var fields = Ember.get(Blog, 'fields');
      fields.forEach(function(kind, field) {
        console.log(field, kind);
      });
       // prints:
      // users, hasMany
      // owner, belongsTo
      // posts, hasMany
      // title, attribute
      ```
       @property fields
      @static
      @type Ember.Map
      @readOnly
    */
    fields: _ember["default"].computed(function () {
      var map = Map.create();

      this.eachComputedProperty(function (name, meta) {
        if (meta.isRelationship) {
          map.set(name, meta.kind);
        } else if (meta.isAttribute) {
          map.set(name, 'attribute');
        }
      });

      return map;
    }).readOnly(),

    /**
      Given a callback, iterates over each of the relationships in the model,
      invoking the callback with the name of each relationship and its relationship
      descriptor.
       @method eachRelationship
      @static
      @param {Function} callback the callback to invoke
      @param {any} binding the value to which the callback's `this` should be bound
    */
    eachRelationship: function eachRelationship(callback, binding) {
      get(this, 'relationshipsByName').forEach(function (relationship, name) {
        callback.call(binding, name, relationship);
      });
    },

    /**
      Given a callback, iterates over each of the types related to a model,
      invoking the callback with the related type's class. Each type will be
      returned just once, regardless of how many different relationships it has
      with a model.
       @method eachRelatedType
      @static
      @param {Function} callback the callback to invoke
      @param {any} binding the value to which the callback's `this` should be bound
    */
    eachRelatedType: function eachRelatedType(callback, binding) {
      var relationshipTypes = get(this, 'relatedTypes');

      for (var i = 0; i < relationshipTypes.length; i++) {
        var type = relationshipTypes[i];
        callback.call(binding, type);
      }
    },

    determineRelationshipType: function determineRelationshipType(knownSide, store) {
      var knownKey = knownSide.key;
      var knownKind = knownSide.kind;
      var inverse = this.inverseFor(knownKey, store);
      // let key;
      var otherKind = undefined;

      if (!inverse) {
        return knownKind === 'belongsTo' ? 'oneToNone' : 'manyToNone';
      }

      // key = inverse.name;
      otherKind = inverse.kind;

      if (otherKind === 'belongsTo') {
        return knownKind === 'belongsTo' ? 'oneToOne' : 'manyToOne';
      } else {
        return knownKind === 'belongsTo' ? 'oneToMany' : 'manyToMany';
      }
    }

  });

  exports.RelationshipsClassMethodsMixin = RelationshipsClassMethodsMixin;

  var RelationshipsInstanceMethodsMixin = _ember["default"].Mixin.create({
    /**
      Given a callback, iterates over each of the relationships in the model,
      invoking the callback with the name of each relationship and its relationship
      descriptor.
        The callback method you provide should have the following signature (all
      parameters are optional):
       ```javascript
      function(name, descriptor);
      ```
       - `name` the name of the current property in the iteration
      - `descriptor` the meta object that describes this relationship
       The relationship descriptor argument is an object with the following properties.
      - **key** <span class="type">String</span> the name of this relationship on the Model
     - **kind** <span class="type">String</span> "hasMany" or "belongsTo"
     - **options** <span class="type">Object</span> the original options hash passed when the relationship was declared
     - **parentType** <span class="type">DS.Model</span> the type of the Model that owns this relationship
     - **type** <span class="type">String</span> the type name of the related Model
       Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context.
       Example
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        serialize: function(record, options) {
          var json = {};
           record.eachRelationship(function(name, descriptor) {
            if (descriptor.kind === 'hasMany') {
              var serializedHasManyName = name.toUpperCase() + '_IDS';
              json[serializedHasManyName] = record.get(name).mapBy('id');
            }
          });
           return json;
        }
      });
      ```
       @method eachRelationship
      @param {Function} callback the callback to invoke
      @param {any} binding the value to which the callback's `this` should be bound
    */
    eachRelationship: function eachRelationship(callback, binding) {
      this.constructor.eachRelationship(callback, binding);
    },

    relationshipFor: function relationshipFor(name) {
      return get(this.constructor, 'relationshipsByName').get(name);
    },

    inverseFor: function inverseFor(key) {
      return this.constructor.inverseFor(key, this.store);
    }

  });
  exports.RelationshipsInstanceMethodsMixin = RelationshipsInstanceMethodsMixin;
});
define("ember-data/-private/system/relationships/has-many", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/normalize-model-name", "ember-data/-private/system/is-array-like"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemNormalizeModelName, _emberDataPrivateSystemIsArrayLike) {
  "use strict";

  exports["default"] = hasMany;

  /**
    @module ember-data
  */

  /**
    `DS.hasMany` is used to define One-To-Many and Many-To-Many
    relationships on a [DS.Model](/api/data/classes/DS.Model.html).
  
    `DS.hasMany` takes an optional hash as a second parameter, currently
    supported options are:
  
    - `async`: A boolean value used to explicitly declare this to be an async relationship.
    - `inverse`: A string used to identify the inverse property on a related model.
  
    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `DS.belongsTo` in combination with `DS.hasMany`, like this:
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      comments: DS.hasMany('comment')
    });
    ```
  
    ```app/models/comment.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```
  
    #### Many-To-Many
    To declare a many-to-many relationship between two models, use
    `DS.hasMany`:
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      tags: DS.hasMany('tag')
    });
    ```
  
    ```app/models/tag.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      posts: DS.hasMany('post')
    });
    ```
  
    You can avoid passing a string as the first parameter. In that case Ember Data
    will infer the type from the singularized key name.
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      tags: DS.hasMany()
    });
    ```
  
    will lookup for a Tag type.
  
    #### Explicit Inverses
  
    Ember Data will do its best to discover which relationships map to
    one another. In the one-to-many code above, for example, Ember Data
    can figure out that changing the `comments` relationship should update
    the `post` relationship on the inverse because post is the only
    relationship to that model.
  
    However, sometimes you may have multiple `belongsTo`/`hasManys` for the
    same type. You can specify which property on the related model is
    the inverse using `DS.hasMany`'s `inverse` option:
  
    ```app/models/comment.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      onePost: DS.belongsTo('post'),
      twoPost: DS.belongsTo('post'),
      redPost: DS.belongsTo('post'),
      bluePost: DS.belongsTo('post')
    });
    ```
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      comments: DS.hasMany('comment', {
        inverse: 'redPost'
      })
    });
    ```
  
    You can also specify an inverse on a `belongsTo`, which works how
    you'd expect.
  
    @namespace
    @method hasMany
    @for DS
    @param {String} type (optional) type of the relationship
    @param {Object} options (optional) a hash of options
    @return {Ember.computed} relationship
  */
  function hasMany(type, options) {
    if (typeof type === 'object') {
      options = type;
      type = undefined;
    }

    (0, _emberDataPrivateDebug.assert)("The first argument to DS.hasMany must be a string representing a model type key, not an instance of " + _ember["default"].inspect(type) + ". E.g., to define a relation to the Comment model, use DS.hasMany('comment')", typeof type === 'string' || typeof type === 'undefined');

    options = options || {};

    if (typeof type === 'string') {
      type = (0, _emberDataPrivateSystemNormalizeModelName["default"])(type);
    }

    // Metadata about relationships is stored on the meta of
    // the relationship. This is used for introspection and
    // serialization. Note that `key` is populated lazily
    // the first time the CP is called.
    var meta = {
      type: type,
      isRelationship: true,
      options: options,
      kind: 'hasMany',
      key: null
    };

    return _ember["default"].computed({
      get: function get(key) {
        var relationship = this._internalModel._relationships.get(key);
        return relationship.getRecords();
      },
      set: function set(key, records) {
        (0, _emberDataPrivateDebug.assert)("You must pass an array of records to set a hasMany relationship", (0, _emberDataPrivateSystemIsArrayLike["default"])(records));
        (0, _emberDataPrivateDebug.assert)("All elements of a hasMany relationship must be instances of DS.Model, you passed " + _ember["default"].inspect(records), (function () {
          return _ember["default"].A(records).every(function (record) {
            return record.hasOwnProperty('_internalModel') === true;
          });
        })());

        var relationship = this._internalModel._relationships.get(key);
        relationship.clear();
        relationship.addRecords(_ember["default"].A(records).mapBy('_internalModel'));
        return relationship.getRecords();
      }
    }).meta(meta);
  }

  var HasManyMixin = _ember["default"].Mixin.create({
    notifyHasManyAdded: function notifyHasManyAdded(key) {
      //We need to notifyPropertyChange in the adding case because we need to make sure
      //we fetch the newly added record in case it is unloaded
      //TODO(Igor): Consider whether we could do this only if the record state is unloaded

      //Goes away once hasMany is double promisified
      this.notifyPropertyChange(key);
    }
  });
  exports.HasManyMixin = HasManyMixin;
});
define("ember-data/-private/system/relationships/state/belongs-to", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/promise-proxies", "ember-data/-private/system/relationships/state/relationship"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemRelationshipsStateRelationship) {
  "use strict";

  exports["default"] = BelongsToRelationship;

  function BelongsToRelationship(store, record, inverseKey, relationshipMeta) {
    this._super$constructor(store, record, inverseKey, relationshipMeta);
    this.record = record;
    this.key = relationshipMeta.key;
    this.inverseRecord = null;
    this.canonicalState = null;
  }

  BelongsToRelationship.prototype = Object.create(_emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype);
  BelongsToRelationship.prototype.constructor = BelongsToRelationship;
  BelongsToRelationship.prototype._super$constructor = _emberDataPrivateSystemRelationshipsStateRelationship["default"];

  BelongsToRelationship.prototype.setRecord = function (newRecord) {
    if (newRecord) {
      this.addRecord(newRecord);
    } else if (this.inverseRecord) {
      this.removeRecord(this.inverseRecord);
    }
    this.setHasData(true);
    this.setHasLoaded(true);
  };

  BelongsToRelationship.prototype.setCanonicalRecord = function (newRecord) {
    if (newRecord) {
      this.addCanonicalRecord(newRecord);
    } else if (this.canonicalState) {
      this.removeCanonicalRecord(this.canonicalState);
    }
    this.flushCanonicalLater();
    this.setHasData(true);
    this.setHasLoaded(true);
  };

  BelongsToRelationship.prototype._super$addCanonicalRecord = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.addCanonicalRecord;
  BelongsToRelationship.prototype.addCanonicalRecord = function (newRecord) {
    if (this.canonicalMembers.has(newRecord)) {
      return;
    }

    if (this.canonicalState) {
      this.removeCanonicalRecord(this.canonicalState);
    }

    this.canonicalState = newRecord;
    this._super$addCanonicalRecord(newRecord);
  };

  BelongsToRelationship.prototype._super$flushCanonical = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.flushCanonical;
  BelongsToRelationship.prototype.flushCanonical = function () {
    //temporary fix to not remove newly created records if server returned null.
    //TODO remove once we have proper diffing
    if (this.inverseRecord && this.inverseRecord.isNew() && !this.canonicalState) {
      return;
    }
    this.inverseRecord = this.canonicalState;
    this.record.notifyBelongsToChanged(this.key);
    this._super$flushCanonical();
  };

  BelongsToRelationship.prototype._super$addRecord = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.addRecord;
  BelongsToRelationship.prototype.addRecord = function (newRecord) {
    if (this.members.has(newRecord)) {
      return;
    }

    (0, _emberDataPrivateDebug.assertPolymorphicType)(this.record, this.relationshipMeta, newRecord);

    if (this.inverseRecord) {
      this.removeRecord(this.inverseRecord);
    }

    this.inverseRecord = newRecord;
    this._super$addRecord(newRecord);
    this.record.notifyBelongsToChanged(this.key);
  };

  BelongsToRelationship.prototype.setRecordPromise = function (newPromise) {
    var content = newPromise.get && newPromise.get('content');
    (0, _emberDataPrivateDebug.assert)("You passed in a promise that did not originate from an EmberData relationship. You can only pass promises that come from a belongsTo or hasMany relationship to the get call.", content !== undefined);
    this.setRecord(content ? content._internalModel : content);
  };

  BelongsToRelationship.prototype._super$removeRecordFromOwn = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.removeRecordFromOwn;
  BelongsToRelationship.prototype.removeRecordFromOwn = function (record) {
    if (!this.members.has(record)) {
      return;
    }
    this.inverseRecord = null;
    this._super$removeRecordFromOwn(record);
    this.record.notifyBelongsToChanged(this.key);
  };

  BelongsToRelationship.prototype._super$removeCanonicalRecordFromOwn = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.removeCanonicalRecordFromOwn;
  BelongsToRelationship.prototype.removeCanonicalRecordFromOwn = function (record) {
    if (!this.canonicalMembers.has(record)) {
      return;
    }
    this.canonicalState = null;
    this._super$removeCanonicalRecordFromOwn(record);
  };

  BelongsToRelationship.prototype.findRecord = function () {
    if (this.inverseRecord) {
      return this.store._findByInternalModel(this.inverseRecord);
    } else {
      return _ember["default"].RSVP.Promise.resolve(null);
    }
  };

  BelongsToRelationship.prototype.fetchLink = function () {
    var _this = this;

    return this.store.findBelongsTo(this.record, this.link, this.relationshipMeta).then(function (record) {
      if (record) {
        _this.addRecord(record);
      }
      return record;
    });
  };

  BelongsToRelationship.prototype.getRecord = function () {
    var _this2 = this;

    //TODO(Igor) flushCanonical here once our syncing is not stupid
    if (this.isAsync) {
      var promise;
      if (this.link) {
        if (this.hasLoaded) {
          promise = this.findRecord();
        } else {
          promise = this.findLink().then(function () {
            return _this2.findRecord();
          });
        }
      } else {
        promise = this.findRecord();
      }

      return _emberDataPrivateSystemPromiseProxies.PromiseObject.create({
        promise: promise,
        content: this.inverseRecord ? this.inverseRecord.getRecord() : null
      });
    } else {
      if (this.inverseRecord === null) {
        return null;
      }
      var toReturn = this.inverseRecord.getRecord();
      (0, _emberDataPrivateDebug.assert)("You looked up the '" + this.key + "' relationship on a '" + this.record.type.modelName + "' with id " + this.record.id + " but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.belongsTo({ async: true })`)", toReturn === null || !toReturn.get('isEmpty'));
      return toReturn;
    }
  };

  BelongsToRelationship.prototype.reload = function () {
    // TODO handle case when reload() is triggered multiple times

    if (this.link) {
      return this.fetchLink();
    }

    // reload record, if it is already loaded
    if (this.inverseRecord && this.inverseRecord.record) {
      return this.inverseRecord.record.reload();
    }

    return this.findRecord();
  };
});
define("ember-data/-private/system/relationships/state/create", ["exports", "ember", "ember-data/-private/system/relationships/state/has-many", "ember-data/-private/system/relationships/state/belongs-to", "ember-data/-private/system/empty-object"], function (exports, _ember, _emberDataPrivateSystemRelationshipsStateHasMany, _emberDataPrivateSystemRelationshipsStateBelongsTo, _emberDataPrivateSystemEmptyObject) {
  "use strict";

  exports["default"] = Relationships;

  var get = _ember["default"].get;

  function shouldFindInverse(relationshipMeta) {
    var options = relationshipMeta.options;
    return !(options && options.inverse === null);
  }

  function createRelationshipFor(record, relationshipMeta, store) {
    var inverseKey = undefined;
    var inverse = null;
    if (shouldFindInverse(relationshipMeta)) {
      inverse = record.type.inverseFor(relationshipMeta.key, store);
    }

    if (inverse) {
      inverseKey = inverse.name;
    }

    if (relationshipMeta.kind === 'hasMany') {
      return new _emberDataPrivateSystemRelationshipsStateHasMany["default"](store, record, inverseKey, relationshipMeta);
    } else {
      return new _emberDataPrivateSystemRelationshipsStateBelongsTo["default"](store, record, inverseKey, relationshipMeta);
    }
  }
  function Relationships(record) {
    this.record = record;
    this.initializedRelationships = new _emberDataPrivateSystemEmptyObject["default"]();
  }

  Relationships.prototype.has = function (key) {
    return !!this.initializedRelationships[key];
  };

  Relationships.prototype.get = function (key) {
    var relationships = this.initializedRelationships;
    var relationshipsByName = get(this.record.type, 'relationshipsByName');
    if (!relationships[key] && relationshipsByName.get(key)) {
      relationships[key] = createRelationshipFor(this.record, relationshipsByName.get(key), this.record.store);
    }
    return relationships[key];
  };
});
define("ember-data/-private/system/relationships/state/has-many", ["exports", "ember-data/-private/debug", "ember-data/-private/system/promise-proxies", "ember-data/-private/system/relationships/state/relationship", "ember-data/-private/system/ordered-set", "ember-data/-private/system/many-array"], function (exports, _emberDataPrivateDebug, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemRelationshipsStateRelationship, _emberDataPrivateSystemOrderedSet, _emberDataPrivateSystemManyArray) {
  "use strict";

  exports["default"] = ManyRelationship;

  function ManyRelationship(store, record, inverseKey, relationshipMeta) {
    this._super$constructor(store, record, inverseKey, relationshipMeta);
    this.belongsToType = relationshipMeta.type;
    this.canonicalState = [];
    this.manyArray = _emberDataPrivateSystemManyArray["default"].create({
      canonicalState: this.canonicalState,
      store: this.store,
      relationship: this,
      type: this.store.modelFor(this.belongsToType),
      record: record
    });
    this.isPolymorphic = relationshipMeta.options.polymorphic;
    this.manyArray.isPolymorphic = this.isPolymorphic;
  }

  ManyRelationship.prototype = Object.create(_emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype);
  ManyRelationship.prototype.constructor = ManyRelationship;
  ManyRelationship.prototype._super$constructor = _emberDataPrivateSystemRelationshipsStateRelationship["default"];

  ManyRelationship.prototype.destroy = function () {
    this.manyArray.destroy();
  };

  ManyRelationship.prototype._super$updateMeta = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.updateMeta;
  ManyRelationship.prototype.updateMeta = function (meta) {
    this._super$updateMeta(meta);
    this.manyArray.set('meta', meta);
  };

  ManyRelationship.prototype._super$addCanonicalRecord = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.addCanonicalRecord;
  ManyRelationship.prototype.addCanonicalRecord = function (record, idx) {
    if (this.canonicalMembers.has(record)) {
      return;
    }
    if (idx !== undefined) {
      this.canonicalState.splice(idx, 0, record);
    } else {
      this.canonicalState.push(record);
    }
    this._super$addCanonicalRecord(record, idx);
  };

  ManyRelationship.prototype._super$addRecord = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.addRecord;
  ManyRelationship.prototype.addRecord = function (record, idx) {
    if (this.members.has(record)) {
      return;
    }
    this._super$addRecord(record, idx);
    this.manyArray.internalAddRecords([record], idx);
  };

  ManyRelationship.prototype._super$removeCanonicalRecordFromOwn = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.removeCanonicalRecordFromOwn;
  ManyRelationship.prototype.removeCanonicalRecordFromOwn = function (record, idx) {
    var i = idx;
    if (!this.canonicalMembers.has(record)) {
      return;
    }
    if (i === undefined) {
      i = this.canonicalState.indexOf(record);
    }
    if (i > -1) {
      this.canonicalState.splice(i, 1);
    }
    this._super$removeCanonicalRecordFromOwn(record, idx);
  };

  ManyRelationship.prototype._super$flushCanonical = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.flushCanonical;
  ManyRelationship.prototype.flushCanonical = function () {
    this.manyArray.flushCanonical();
    this._super$flushCanonical();
  };

  ManyRelationship.prototype._super$removeRecordFromOwn = _emberDataPrivateSystemRelationshipsStateRelationship["default"].prototype.removeRecordFromOwn;
  ManyRelationship.prototype.removeRecordFromOwn = function (record, idx) {
    if (!this.members.has(record)) {
      return;
    }
    this._super$removeRecordFromOwn(record, idx);
    if (idx !== undefined) {
      //TODO(Igor) not used currently, fix
      this.manyArray.currentState.removeAt(idx);
    } else {
      this.manyArray.internalRemoveRecords([record]);
    }
  };

  ManyRelationship.prototype.notifyRecordRelationshipAdded = function (record, idx) {
    (0, _emberDataPrivateDebug.assertPolymorphicType)(this.record, this.relationshipMeta, record);

    this.record.notifyHasManyAdded(this.key, record, idx);
  };

  ManyRelationship.prototype.reload = function () {
    var _this = this;

    var manyArrayLoadedState = this.manyArray.get('isLoaded');

    if (this._loadingPromise) {
      if (this._loadingPromise.get('isPending')) {
        return this._loadingPromise;
      }
      if (this._loadingPromise.get('isRejected')) {
        this.manyArray.set('isLoaded', manyArrayLoadedState);
      }
    }

    if (this.link) {
      this._loadingPromise = (0, _emberDataPrivateSystemPromiseProxies.promiseManyArray)(this.fetchLink(), 'Reload with link');
      return this._loadingPromise;
    } else {
      this._loadingPromise = (0, _emberDataPrivateSystemPromiseProxies.promiseManyArray)(this.store.scheduleFetchMany(this.manyArray.toArray()).then(function () {
        return _this.manyArray;
      }), 'Reload with ids');
      return this._loadingPromise;
    }
  };

  ManyRelationship.prototype.computeChanges = function (records) {
    var members = this.canonicalMembers;
    var recordsToRemove = [];
    var length;
    var record;
    var i;

    records = setForArray(records);

    members.forEach(function (member) {
      if (records.has(member)) {
        return;
      }

      recordsToRemove.push(member);
    });

    this.removeCanonicalRecords(recordsToRemove);

    // Using records.toArray() since currently using
    // removeRecord can modify length, messing stuff up
    // forEach since it directly looks at "length" each
    // iteration
    records = records.toArray();
    length = records.length;
    for (i = 0; i < length; i++) {
      record = records[i];
      this.removeCanonicalRecord(record);
      this.addCanonicalRecord(record, i);
    }
  };

  ManyRelationship.prototype.fetchLink = function () {
    var _this2 = this;

    return this.store.findHasMany(this.record, this.link, this.relationshipMeta).then(function (records) {
      if (records.hasOwnProperty('meta')) {
        _this2.updateMeta(records.meta);
      }
      _this2.store._backburner.join(function () {
        _this2.updateRecordsFromAdapter(records);
        _this2.manyArray.set('isLoaded', true);
      });
      return _this2.manyArray;
    });
  };

  ManyRelationship.prototype.findRecords = function () {
    var _this3 = this;

    var manyArray = this.manyArray.toArray();
    var internalModels = new Array(manyArray.length);

    for (var i = 0; i < manyArray.length; i++) {
      internalModels[i] = manyArray[i]._internalModel;
    }

    //TODO CLEANUP
    return this.store.findMany(internalModels).then(function () {
      if (!_this3.manyArray.get('isDestroyed')) {
        //Goes away after the manyArray refactor
        _this3.manyArray.set('isLoaded', true);
      }
      return _this3.manyArray;
    });
  };
  ManyRelationship.prototype.notifyHasManyChanged = function () {
    this.record.notifyHasManyAdded(this.key);
  };

  ManyRelationship.prototype.getRecords = function () {
    var _this4 = this;

    //TODO(Igor) sync server here, once our syncing is not stupid
    if (this.isAsync) {
      var promise;
      if (this.link) {
        if (this.hasLoaded) {
          promise = this.findRecords();
        } else {
          promise = this.findLink().then(function () {
            return _this4.findRecords();
          });
        }
      } else {
        promise = this.findRecords();
      }
      this._loadingPromise = _emberDataPrivateSystemPromiseProxies.PromiseManyArray.create({
        content: this.manyArray,
        promise: promise
      });
      return this._loadingPromise;
    } else {
      (0, _emberDataPrivateDebug.assert)("You looked up the '" + this.key + "' relationship on a '" + this.record.type.modelName + "' with id " + this.record.id + " but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.hasMany({ async: true })`)", this.manyArray.isEvery('isEmpty', false));

      //TODO(Igor) WTF DO I DO HERE?
      if (!this.manyArray.get('isDestroyed')) {
        this.manyArray.set('isLoaded', true);
      }
      return this.manyArray;
    }
  };

  function setForArray(array) {
    var set = new _emberDataPrivateSystemOrderedSet["default"]();

    if (array) {
      for (var i = 0, l = array.length; i < l; i++) {
        set.add(array[i]);
      }
    }

    return set;
  }
});
define("ember-data/-private/system/relationships/state/relationship", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/ordered-set"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemOrderedSet) {
  "use strict";

  exports["default"] = Relationship;

  function Relationship(store, record, inverseKey, relationshipMeta) {
    var async = relationshipMeta.options.async;
    this.members = new _emberDataPrivateSystemOrderedSet["default"]();
    this.canonicalMembers = new _emberDataPrivateSystemOrderedSet["default"]();
    this.store = store;
    this.key = relationshipMeta.key;
    this.inverseKey = inverseKey;
    this.record = record;
    this.isAsync = typeof async === 'undefined' ? true : async;
    this.relationshipMeta = relationshipMeta;
    //This probably breaks for polymorphic relationship in complex scenarios, due to
    //multiple possible modelNames
    this.inverseKeyForImplicit = this.record.constructor.modelName + this.key;
    this.linkPromise = null;
    this.meta = null;
    this.hasData = false;
    this.hasLoaded = false;
  }

  Relationship.prototype = {
    constructor: Relationship,

    destroy: _ember["default"].K,

    updateMeta: function updateMeta(meta) {
      this.meta = meta;
    },

    clear: function clear() {
      var members = this.members.list;
      var member;

      while (members.length > 0) {
        member = members[0];
        this.removeRecord(member);
      }
    },

    removeRecords: function removeRecords(records) {
      var _this = this;

      records.forEach(function (record) {
        return _this.removeRecord(record);
      });
    },

    addRecords: function addRecords(records, idx) {
      var _this2 = this;

      records.forEach(function (record) {
        _this2.addRecord(record, idx);
        if (idx !== undefined) {
          idx++;
        }
      });
    },

    addCanonicalRecords: function addCanonicalRecords(records, idx) {
      for (var i = 0; i < records.length; i++) {
        if (idx !== undefined) {
          this.addCanonicalRecord(records[i], i + idx);
        } else {
          this.addCanonicalRecord(records[i]);
        }
      }
    },

    addCanonicalRecord: function addCanonicalRecord(record, idx) {
      if (!this.canonicalMembers.has(record)) {
        this.canonicalMembers.add(record);
        if (this.inverseKey) {
          record._relationships.get(this.inverseKey).addCanonicalRecord(this.record);
        } else {
          if (!record._implicitRelationships[this.inverseKeyForImplicit]) {
            record._implicitRelationships[this.inverseKeyForImplicit] = new Relationship(this.store, record, this.key, { options: {} });
          }
          record._implicitRelationships[this.inverseKeyForImplicit].addCanonicalRecord(this.record);
        }
      }
      this.flushCanonicalLater();
      this.setHasData(true);
    },

    removeCanonicalRecords: function removeCanonicalRecords(records, idx) {
      for (var i = 0; i < records.length; i++) {
        if (idx !== undefined) {
          this.removeCanonicalRecord(records[i], i + idx);
        } else {
          this.removeCanonicalRecord(records[i]);
        }
      }
    },

    removeCanonicalRecord: function removeCanonicalRecord(record, idx) {
      if (this.canonicalMembers.has(record)) {
        this.removeCanonicalRecordFromOwn(record);
        if (this.inverseKey) {
          this.removeCanonicalRecordFromInverse(record);
        } else {
          if (record._implicitRelationships[this.inverseKeyForImplicit]) {
            record._implicitRelationships[this.inverseKeyForImplicit].removeCanonicalRecord(this.record);
          }
        }
      }
      this.flushCanonicalLater();
    },

    addRecord: function addRecord(record, idx) {
      if (!this.members.has(record)) {
        this.members.addWithIndex(record, idx);
        this.notifyRecordRelationshipAdded(record, idx);
        if (this.inverseKey) {
          record._relationships.get(this.inverseKey).addRecord(this.record);
        } else {
          if (!record._implicitRelationships[this.inverseKeyForImplicit]) {
            record._implicitRelationships[this.inverseKeyForImplicit] = new Relationship(this.store, record, this.key, { options: {} });
          }
          record._implicitRelationships[this.inverseKeyForImplicit].addRecord(this.record);
        }
        this.record.updateRecordArraysLater();
      }
      this.setHasData(true);
    },

    removeRecord: function removeRecord(record) {
      if (this.members.has(record)) {
        this.removeRecordFromOwn(record);
        if (this.inverseKey) {
          this.removeRecordFromInverse(record);
        } else {
          if (record._implicitRelationships[this.inverseKeyForImplicit]) {
            record._implicitRelationships[this.inverseKeyForImplicit].removeRecord(this.record);
          }
        }
      }
    },

    removeRecordFromInverse: function removeRecordFromInverse(record) {
      var inverseRelationship = record._relationships.get(this.inverseKey);
      //Need to check for existence, as the record might unloading at the moment
      if (inverseRelationship) {
        inverseRelationship.removeRecordFromOwn(this.record);
      }
    },

    removeRecordFromOwn: function removeRecordFromOwn(record) {
      this.members["delete"](record);
      this.notifyRecordRelationshipRemoved(record);
      this.record.updateRecordArrays();
    },

    removeCanonicalRecordFromInverse: function removeCanonicalRecordFromInverse(record) {
      var inverseRelationship = record._relationships.get(this.inverseKey);
      //Need to check for existence, as the record might unloading at the moment
      if (inverseRelationship) {
        inverseRelationship.removeCanonicalRecordFromOwn(this.record);
      }
    },

    removeCanonicalRecordFromOwn: function removeCanonicalRecordFromOwn(record) {
      this.canonicalMembers["delete"](record);
      this.flushCanonicalLater();
    },

    flushCanonical: function flushCanonical() {
      this.willSync = false;
      //a hack for not removing new records
      //TODO remove once we have proper diffing
      var newRecords = [];
      for (var i = 0; i < this.members.list.length; i++) {
        if (this.members.list[i].isNew()) {
          newRecords.push(this.members.list[i]);
        }
      }
      //TODO(Igor) make this less abysmally slow
      this.members = this.canonicalMembers.copy();
      for (i = 0; i < newRecords.length; i++) {
        this.members.add(newRecords[i]);
      }
    },

    flushCanonicalLater: function flushCanonicalLater() {
      var _this3 = this;

      if (this.willSync) {
        return;
      }
      this.willSync = true;
      this.store._backburner.join(function () {
        return _this3.store._backburner.schedule('syncRelationships', _this3, _this3.flushCanonical);
      });
    },

    updateLink: function updateLink(link) {
      (0, _emberDataPrivateDebug.warn)("You have pushed a record of type '" + this.record.type.modelName + "' with '" + this.key + "' as a link, but the association is not an async relationship.", this.isAsync, {
        id: 'ds.store.push-link-for-sync-relationship'
      });
      (0, _emberDataPrivateDebug.assert)("You have pushed a record of type '" + this.record.type.modelName + "' with '" + this.key + "' as a link, but the value of that link is not a string.", typeof link === 'string' || link === null);
      if (link !== this.link) {
        this.link = link;
        this.linkPromise = null;
        this.setHasLoaded(false);
        this.record.notifyPropertyChange(this.key);
      }
    },

    findLink: function findLink() {
      if (this.linkPromise) {
        return this.linkPromise;
      } else {
        var promise = this.fetchLink();
        this.linkPromise = promise;
        return promise.then(function (result) {
          return result;
        });
      }
    },

    updateRecordsFromAdapter: function updateRecordsFromAdapter(records) {
      //TODO(Igor) move this to a proper place
      //TODO Once we have adapter support, we need to handle updated and canonical changes
      this.computeChanges(records);
      this.setHasData(true);
      this.setHasLoaded(true);
    },

    notifyRecordRelationshipAdded: _ember["default"].K,
    notifyRecordRelationshipRemoved: _ember["default"].K,

    /*
      `hasData` for a relationship is a flag to indicate if we consider the
      content of this relationship "known". Snapshots uses this to tell the
      difference between unknown (`undefined`) or empty (`null`). The reason for
      this is that we wouldn't want to serialize unknown relationships as `null`
      as that might overwrite remote state.
       All relationships for a newly created (`store.createRecord()`) are
      considered known (`hasData === true`).
     */
    setHasData: function setHasData(value) {
      this.hasData = value;
    },

    /*
      `hasLoaded` is a flag to indicate if we have gotten data from the adapter or
      not when the relationship has a link.
       This is used to be able to tell when to fetch the link and when to return
      the local data in scenarios where the local state is considered known
      (`hasData === true`).
       Updating the link will automatically set `hasLoaded` to `false`.
     */
    setHasLoaded: function setHasLoaded(value) {
      this.hasLoaded = value;
    }
  };
});
define('ember-data/-private/system/snapshot-record-array', ['exports'], function (exports) {
  'use strict';

  exports['default'] = SnapshotRecordArray;

  /**
    @module ember-data
  */

  /**
    @class SnapshotRecordArray
    @namespace DS
    @private
    @constructor
    @param {Array} snapshots An array of snapshots
    @param {Object} meta
  */
  function SnapshotRecordArray(recordArray, meta) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    /**
      An array of snapshots
      @private
      @property _snapshots
      @type {Array}
    */
    this._snapshots = null;
    /**
      An array of records
      @private
      @property _recordArray
      @type {Array}
    */
    this._recordArray = recordArray;
    /**
      Number of records in the array
      @property length
      @type {Number}
    */
    this.length = recordArray.get('length');
    /**
      The type of the underlying records for the snapshots in the array, as a DS.Model
      @property type
      @type {DS.Model}
    */
    this.type = recordArray.get('type');
    /**
      Meta object
      @property meta
      @type {Object}
    */
    this.meta = meta;
    /**
      A hash of adapter options
      @property adapterOptions
      @type {Object}
    */
    this.adapterOptions = options.adapterOptions;

    this.include = options.include;
  }

  /**
    Get snapshots of the underlying record array
    @method snapshots
    @return {Array} Array of snapshots
  */
  SnapshotRecordArray.prototype.snapshots = function () {
    if (this._snapshots) {
      return this._snapshots;
    }
    var recordArray = this._recordArray;
    this._snapshots = recordArray.invoke('createSnapshot');

    return this._snapshots;
  };
});
define("ember-data/-private/system/snapshot", ["exports", "ember", "ember-data/-private/system/empty-object"], function (exports, _ember, _emberDataPrivateSystemEmptyObject) {
  "use strict";

  exports["default"] = Snapshot;

  /**
    @module ember-data
  */

  var get = _ember["default"].get;

  /**
    @class Snapshot
    @namespace DS
    @private
    @constructor
    @param {DS.Model} internalModel The model to create a snapshot from
  */
  function Snapshot(internalModel) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this._attributes = new _emberDataPrivateSystemEmptyObject["default"]();
    this._belongsToRelationships = new _emberDataPrivateSystemEmptyObject["default"]();
    this._belongsToIds = new _emberDataPrivateSystemEmptyObject["default"]();
    this._hasManyRelationships = new _emberDataPrivateSystemEmptyObject["default"]();
    this._hasManyIds = new _emberDataPrivateSystemEmptyObject["default"]();

    var record = internalModel.getRecord();
    this.record = record;
    record.eachAttribute(function (keyName) {
      return _this._attributes[keyName] = get(record, keyName);
    });

    this.id = internalModel.id;
    this._internalModel = internalModel;
    this.type = internalModel.type;
    this.modelName = internalModel.type.modelName;

    /**
      A hash of adapter options
      @property adapterOptions
      @type {Object}
    */
    this.adapterOptions = options.adapterOptions;

    this.include = options.include;

    this._changedAttributes = record.changedAttributes();
  }

  Snapshot.prototype = {
    constructor: Snapshot,

    /**
      The id of the snapshot's underlying record
       Example
       ```javascript
      // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
      postSnapshot.id; // => '1'
      ```
       @property id
      @type {String}
    */
    id: null,

    /**
      The underlying record for this snapshot. Can be used to access methods and
      properties defined on the record.
       Example
       ```javascript
      var json = snapshot.record.toJSON();
      ```
       @property record
      @type {DS.Model}
    */
    record: null,

    /**
      The type of the underlying record for this snapshot, as a DS.Model.
       @property type
      @type {DS.Model}
    */
    type: null,

    /**
      The name of the type of the underlying record for this snapshot, as a string.
       @property modelName
      @type {String}
    */
    modelName: null,

    /**
      Returns the value of an attribute.
       Example
       ```javascript
      // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
      postSnapshot.attr('author'); // => 'Tomster'
      postSnapshot.attr('title'); // => 'Ember.js rocks'
      ```
       Note: Values are loaded eagerly and cached when the snapshot is created.
       @method attr
      @param {String} keyName
      @return {Object} The attribute value or undefined
    */
    attr: function attr(keyName) {
      if (keyName in this._attributes) {
        return this._attributes[keyName];
      }
      throw new _ember["default"].Error("Model '" + _ember["default"].inspect(this.record) + "' has no attribute named '" + keyName + "' defined.");
    },

    /**
      Returns all attributes and their corresponding values.
       Example
       ```javascript
      // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
      postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }
      ```
       @method attributes
      @return {Object} All attributes of the current snapshot
    */
    attributes: function attributes() {
      return _ember["default"].copy(this._attributes);
    },

    /**
      Returns all changed attributes and their old and new values.
       Example
       ```javascript
      // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
      postModel.set('title', 'Ember.js rocks!');
      postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }
      ```
       @method changedAttributes
      @return {Object} All changed attributes of the current snapshot
    */
    changedAttributes: function changedAttributes() {
      var changedAttributes = new _emberDataPrivateSystemEmptyObject["default"]();
      var changedAttributeKeys = Object.keys(this._changedAttributes);

      for (var i = 0, _length = changedAttributeKeys.length; i < _length; i++) {
        var key = changedAttributeKeys[i];
        changedAttributes[key] = _ember["default"].copy(this._changedAttributes[key]);
      }

      return changedAttributes;
    },

    /**
      Returns the current value of a belongsTo relationship.
       `belongsTo` takes an optional hash of options as a second parameter,
      currently supported options are:
      - `id`: set to `true` if you only want the ID of the related record to be
        returned.
       Example
       ```javascript
      // store.push('post', { id: 1, title: 'Hello World' });
      // store.createRecord('comment', { body: 'Lorem ipsum', post: post });
      commentSnapshot.belongsTo('post'); // => DS.Snapshot
      commentSnapshot.belongsTo('post', { id: true }); // => '1'
       // store.push('comment', { id: 1, body: 'Lorem ipsum' });
      commentSnapshot.belongsTo('post'); // => undefined
      ```
       Calling `belongsTo` will return a new Snapshot as long as there's any known
      data for the relationship available, such as an ID. If the relationship is
      known but unset, `belongsTo` will return `null`. If the contents of the
      relationship is unknown `belongsTo` will return `undefined`.
       Note: Relationships are loaded lazily and cached upon first access.
       @method belongsTo
      @param {String} keyName
      @param {Object} [options]
      @return {(DS.Snapshot|String|null|undefined)} A snapshot or ID of a known
        relationship or null if the relationship is known but unset. undefined
        will be returned if the contents of the relationship is unknown.
    */
    belongsTo: function belongsTo(keyName, options) {
      var id = options && options.id;
      var relationship, inverseRecord, hasData;
      var result;

      if (id && keyName in this._belongsToIds) {
        return this._belongsToIds[keyName];
      }

      if (!id && keyName in this._belongsToRelationships) {
        return this._belongsToRelationships[keyName];
      }

      relationship = this._internalModel._relationships.get(keyName);
      if (!(relationship && relationship.relationshipMeta.kind === 'belongsTo')) {
        throw new _ember["default"].Error("Model '" + _ember["default"].inspect(this.record) + "' has no belongsTo relationship named '" + keyName + "' defined.");
      }

      hasData = get(relationship, 'hasData');
      inverseRecord = get(relationship, 'inverseRecord');

      if (hasData) {
        if (inverseRecord && !inverseRecord.isDeleted()) {
          if (id) {
            result = get(inverseRecord, 'id');
          } else {
            result = inverseRecord.createSnapshot();
          }
        } else {
          result = null;
        }
      }

      if (id) {
        this._belongsToIds[keyName] = result;
      } else {
        this._belongsToRelationships[keyName] = result;
      }

      return result;
    },

    /**
      Returns the current value of a hasMany relationship.
       `hasMany` takes an optional hash of options as a second parameter,
      currently supported options are:
      - `ids`: set to `true` if you only want the IDs of the related records to be
        returned.
       Example
       ```javascript
      // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });
      postSnapshot.hasMany('comments'); // => [DS.Snapshot, DS.Snapshot]
      postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']
       // store.push('post', { id: 1, title: 'Hello World' });
      postSnapshot.hasMany('comments'); // => undefined
      ```
       Note: Relationships are loaded lazily and cached upon first access.
       @method hasMany
      @param {String} keyName
      @param {Object} [options]
      @return {(Array|undefined)} An array of snapshots or IDs of a known
        relationship or an empty array if the relationship is known but unset.
        undefined will be returned if the contents of the relationship is unknown.
    */
    hasMany: function hasMany(keyName, options) {
      var ids = options && options.ids;
      var relationship, members, hasData;
      var results;

      if (ids && keyName in this._hasManyIds) {
        return this._hasManyIds[keyName];
      }

      if (!ids && keyName in this._hasManyRelationships) {
        return this._hasManyRelationships[keyName];
      }

      relationship = this._internalModel._relationships.get(keyName);
      if (!(relationship && relationship.relationshipMeta.kind === 'hasMany')) {
        throw new _ember["default"].Error("Model '" + _ember["default"].inspect(this.record) + "' has no hasMany relationship named '" + keyName + "' defined.");
      }

      hasData = get(relationship, 'hasData');
      members = get(relationship, 'members');

      if (hasData) {
        results = [];
        members.forEach(function (member) {
          if (!member.isDeleted()) {
            if (ids) {
              results.push(member.id);
            } else {
              results.push(member.createSnapshot());
            }
          }
        });
      }

      if (ids) {
        this._hasManyIds[keyName] = results;
      } else {
        this._hasManyRelationships[keyName] = results;
      }

      return results;
    },

    /**
      Iterates through all the attributes of the model, calling the passed
      function on each attribute.
       Example
       ```javascript
      snapshot.eachAttribute(function(name, meta) {
        // ...
      });
      ```
       @method eachAttribute
      @param {Function} callback the callback to execute
      @param {Object} [binding] the value to which the callback's `this` should be bound
    */
    eachAttribute: function eachAttribute(callback, binding) {
      this.record.eachAttribute(callback, binding);
    },

    /**
      Iterates through all the relationships of the model, calling the passed
      function on each relationship.
       Example
       ```javascript
      snapshot.eachRelationship(function(name, relationship) {
        // ...
      });
      ```
       @method eachRelationship
      @param {Function} callback the callback to execute
      @param {Object} [binding] the value to which the callback's `this` should be bound
    */
    eachRelationship: function eachRelationship(callback, binding) {
      this.record.eachRelationship(callback, binding);
    },

    /**
      @method serialize
      @param {Object} options
      @return {Object} an object whose values are primitive JSON values only
     */
    serialize: function serialize(options) {
      return this.record.store.serializerFor(this.modelName).serialize(this, options);
    }
  };
});
define('ember-data/-private/system/store', ['exports', 'ember', 'ember-data/model', 'ember-data/-private/debug', 'ember-data/-private/system/normalize-link', 'ember-data/-private/system/normalize-model-name', 'ember-data/adapters/errors', 'ember-data/-private/system/promise-proxies', 'ember-data/-private/system/store/common', 'ember-data/-private/system/store/serializer-response', 'ember-data/-private/system/store/serializers', 'ember-data/-private/system/store/finders', 'ember-data/-private/utils', 'ember-data/-private/system/coerce-id', 'ember-data/-private/system/record-array-manager', 'ember-data/-private/system/store/container-instance-cache', 'ember-data/-private/system/model/internal-model', 'ember-data/-private/system/empty-object', 'ember-data/-private/features'], function (exports, _ember, _emberDataModel, _emberDataPrivateDebug, _emberDataPrivateSystemNormalizeLink, _emberDataPrivateSystemNormalizeModelName, _emberDataAdaptersErrors, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemStoreCommon, _emberDataPrivateSystemStoreSerializerResponse, _emberDataPrivateSystemStoreSerializers, _emberDataPrivateSystemStoreFinders, _emberDataPrivateUtils, _emberDataPrivateSystemCoerceId, _emberDataPrivateSystemRecordArrayManager, _emberDataPrivateSystemStoreContainerInstanceCache, _emberDataPrivateSystemModelInternalModel, _emberDataPrivateSystemEmptyObject, _emberDataPrivateFeatures) {
  /**
    @module ember-data
  */

  'use strict';

  var badIdFormatAssertion = '`id` passed to `findRecord()` has to be non-empty string or number';

  exports.badIdFormatAssertion = badIdFormatAssertion;

  var Backburner = _ember['default']._Backburner;
  var Map = _ember['default'].Map;

  //Get the materialized model from the internalModel/promise that returns
  //an internal model and return it in a promiseObject. Useful for returning
  //from find methods
  function promiseRecord(internalModel, label) {
    var toReturn = internalModel.then(function (model) {
      return model.getRecord();
    });
    return (0, _emberDataPrivateSystemPromiseProxies.promiseObject)(toReturn, label);
  }

  var get = _ember['default'].get;
  var set = _ember['default'].set;
  var once = _ember['default'].run.once;
  var isNone = _ember['default'].isNone;
  var isPresent = _ember['default'].isPresent;
  var Promise = _ember['default'].RSVP.Promise;
  var copy = _ember['default'].copy;
  var Store;

  var Service = _ember['default'].Service;

  // Implementors Note:
  //
  //   The variables in this file are consistently named according to the following
  //   scheme:
  //
  //   * +id+ means an identifier managed by an external source, provided inside
  //     the data provided by that source. These are always coerced to be strings
  //     before being used internally.
  //   * +clientId+ means a transient numerical identifier generated at runtime by
  //     the data store. It is important primarily because newly created objects may
  //     not yet have an externally generated id.
  //   * +internalModel+ means a record internalModel object, which holds metadata about a
  //     record, even if it has not yet been fully materialized.
  //   * +type+ means a DS.Model.

  /**
    The store contains all of the data for records loaded from the server.
    It is also responsible for creating instances of `DS.Model` that wrap
    the individual data for a record, so that they can be bound to in your
    Handlebars templates.
  
    Define your application's store like this:
  
    ```app/services/store.js
    import DS from 'ember-data';
  
    export default DS.Store.extend({
    });
    ```
  
    Most Ember.js applications will only have a single `DS.Store` that is
    automatically created by their `Ember.Application`.
  
    You can retrieve models from the store in several ways. To retrieve a record
    for a specific id, use `DS.Store`'s `findRecord()` method:
  
    ```javascript
    store.findRecord('person', 123).then(function (person) {
    });
    ```
  
    By default, the store will talk to your backend using a standard
    REST mechanism. You can customize how the store talks to your
    backend by specifying a custom adapter:
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.Adapter.extend({
    });
    ```
  
    You can learn more about writing a custom adapter by reading the `DS.Adapter`
    documentation.
  
    ### Store createRecord() vs. push() vs. pushPayload()
  
    The store provides multiple ways to create new record objects. They have
    some subtle differences in their use which are detailed below:
  
    [createRecord](#method_createRecord) is used for creating new
    records on the client side. This will return a new record in the
    `created.uncommitted` state. In order to persist this record to the
    backend you will need to call `record.save()`.
  
    [push](#method_push) is used to notify Ember Data's store of new or
    updated records that exist in the backend. This will return a record
    in the `loaded.saved` state. The primary use-case for `store#push` is
    to notify Ember Data about record updates (full or partial) that happen
    outside of the normal adapter methods (for example
    [SSE](http://dev.w3.org/html5/eventsource/) or [Web
    Sockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).
  
    [pushPayload](#method_pushPayload) is a convenience wrapper for
    `store#push` that will deserialize payloads if the
    Serializer implements a `pushPayload` method.
  
    Note: When creating a new record using any of the above methods
    Ember Data will update `DS.RecordArray`s such as those returned by
    `store#peekAll()`, `store#findAll()` or `store#filter()`. This means any
    data bindings or computed properties that depend on the RecordArray
    will automatically be synced to include the new or updated record
    values.
  
    @class Store
    @namespace DS
    @extends Ember.Service
  */
  exports.Store = Store = Service.extend({

    /**
      @method init
      @private
    */
    init: function init() {
      this._super.apply(this, arguments);
      this._backburner = new Backburner(['normalizeRelationships', 'syncRelationships', 'finished']);
      // internal bookkeeping; not observable
      this.typeMaps = {};
      this.recordArrayManager = _emberDataPrivateSystemRecordArrayManager['default'].create({
        store: this
      });
      this._pendingSave = [];
      this._instanceCache = new _emberDataPrivateSystemStoreContainerInstanceCache['default']((0, _emberDataPrivateUtils.getOwner)(this));
      //Used to keep track of all the find requests that need to be coalesced
      this._pendingFetch = Map.create();
    },

    /**
      The adapter to use to communicate to a backend server or other persistence layer.
       This can be specified as an instance, class, or string.
       If you want to specify `app/adapters/custom.js` as a string, do:
       ```js
      adapter: 'custom'
      ```
       @property adapter
      @default DS.JSONAPIAdapter
      @type {(DS.Adapter|String)}
    */
    adapter: '-json-api',

    /**
      Returns a JSON representation of the record using a custom
      type-specific serializer, if one exists.
       The available options are:
       * `includeId`: `true` if the record's ID should be included in
        the JSON representation
       @method serialize
      @private
      @param {DS.Model} record the record to serialize
      @param {Object} options an options hash
    */
    serialize: function serialize(record, options) {
      var snapshot = record._internalModel.createSnapshot();
      return snapshot.serialize(options);
    },

    /**
      This property returns the adapter, after resolving a possible
      string key.
       If the supplied `adapter` was a class, or a String property
      path resolved to a class, this property will instantiate the
      class.
       This property is cacheable, so the same instance of a specified
      adapter class should be used for the lifetime of the store.
       @property defaultAdapter
      @private
      @return DS.Adapter
    */
    defaultAdapter: _ember['default'].computed('adapter', function () {
      var adapter = get(this, 'adapter');

      (0, _emberDataPrivateDebug.assert)('You tried to set `adapter` property to an instance of `DS.Adapter`, where it should be a name', typeof adapter === 'string');

      adapter = this.retrieveManagedInstance('adapter', adapter);

      return adapter;
    }),

    // .....................
    // . CREATE NEW RECORD .
    // .....................

    /**
      Create a new record in the current store. The properties passed
      to this method are set on the newly created record.
       To create a new instance of a `Post`:
       ```js
      store.createRecord('post', {
        title: "Rails is omakase"
      });
      ```
       To create a new instance of a `Post` that has a relationship with a `User` record:
       ```js
      var user = this.store.peekRecord('user', 1);
      store.createRecord('post', {
        title: "Rails is omakase",
        user: user
      });
      ```
       @method createRecord
      @param {String} modelName
      @param {Object} inputProperties a hash of properties to set on the
        newly created record.
      @return {DS.Model} record
    */
    createRecord: function createRecord(modelName, inputProperties) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's createRecord method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var typeClass = this.modelFor(modelName);
      var properties = copy(inputProperties) || new _emberDataPrivateSystemEmptyObject['default']();

      // If the passed properties do not include a primary key,
      // give the adapter an opportunity to generate one. Typically,
      // client-side ID generators will use something like uuid.js
      // to avoid conflicts.

      if (isNone(properties.id)) {
        properties.id = this._generateId(modelName, properties);
      }

      // Coerce ID to a string
      properties.id = (0, _emberDataPrivateSystemCoerceId['default'])(properties.id);

      var internalModel = this.buildInternalModel(typeClass, properties.id);
      var record = internalModel.getRecord();

      // Move the record out of its initial `empty` state into
      // the `loaded` state.
      internalModel.loadedData();

      // Set the properties specified on the record.
      record.setProperties(properties);

      internalModel.eachRelationship(function (key, descriptor) {
        internalModel._relationships.get(key).setHasData(true);
      });

      return record;
    },

    /**
      If possible, this method asks the adapter to generate an ID for
      a newly created record.
       @method _generateId
      @private
      @param {String} modelName
      @param {Object} properties from the new record
      @return {String} if the adapter can generate one, an ID
    */
    _generateId: function _generateId(modelName, properties) {
      var adapter = this.adapterFor(modelName);

      if (adapter && adapter.generateIdForRecord) {
        return adapter.generateIdForRecord(this, modelName, properties);
      }

      return null;
    },

    // .................
    // . DELETE RECORD .
    // .................

    /**
      For symmetry, a record can be deleted via the store.
       Example
       ```javascript
      var post = store.createRecord('post', {
        title: "Rails is omakase"
      });
       store.deleteRecord(post);
      ```
       @method deleteRecord
      @param {DS.Model} record
    */
    deleteRecord: function deleteRecord(record) {
      record.deleteRecord();
    },

    /**
      For symmetry, a record can be unloaded via the store. Only
      non-dirty records can be unloaded.
       Example
       ```javascript
      store.findRecord('post', 1).then(function(post) {
        store.unloadRecord(post);
      });
      ```
       @method unloadRecord
      @param {DS.Model} record
    */
    unloadRecord: function unloadRecord(record) {
      record.unloadRecord();
    },

    // ................
    // . FIND RECORDS .
    // ................

    /**
      @method find
      @param {String} modelName
      @param {String|Integer} id
      @param {Object} options
      @return {Promise} promise
      @private
    */
    find: function find(modelName, id, options) {
      // The default `model` hook in Ember.Route calls `find(modelName, id)`,
      // that's why we have to keep this method around even though `findRecord` is
      // the public way to get a record by modelName and id.

      if (arguments.length === 1) {
        (0, _emberDataPrivateDebug.assert)('Using store.find(type) has been removed. Use store.findAll(type) to retrieve all records for a given type.');
      }

      if (_ember['default'].typeOf(id) === 'object') {
        (0, _emberDataPrivateDebug.assert)('Calling store.find() with a query object is no longer supported. Use store.query() instead.');
      }

      if (options) {
        (0, _emberDataPrivateDebug.assert)('Calling store.find(type, id, { preload: preload }) is no longer supported. Use store.findRecord(type, id, { preload: preload }) instead.');
      }

      (0, _emberDataPrivateDebug.assert)("You need to pass the model name and id to the store's find method", arguments.length === 2);
      (0, _emberDataPrivateDebug.assert)("You cannot pass `" + _ember['default'].inspect(id) + "` as id to the store's find method", _ember['default'].typeOf(id) === 'string' || _ember['default'].typeOf(id) === 'number');
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');

      return this.findRecord(modelName, id);
    },

    /**
      This method returns a record for a given type and id combination.
       The `findRecord` method will always resolve its promise with the same
      object for a given type and `id`.
       The `findRecord` method will always return a **promise** that will be
      resolved with the record.
       Example
       ```app/routes/post.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        model: function(params) {
          return this.store.findRecord('post', params.post_id);
        }
      });
      ```
       If the record is not yet available, the store will ask the adapter's `find`
      method to find the necessary data. If the record is already present in the
      store, it depends on the reload behavior _when_ the returned promise
      resolves.
       ### Reloading
       The reload behavior is configured either via the passed `options` hash or
      the result of the adapter's `shouldReloadRecord`.
       If `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates
      to `true`, then the returned promise resolves once the adapter returns
      data, regardless if the requested record is already in the store:
       ```js
      store.push({
        data: {
          id: 1,
          type: 'post',
          revision: 1
        }
      });
       // adapter#findRecord resolves with
      // [
      //   {
      //     id: 1,
      //     type: 'post',
      //     revision: 2
      //   }
      // ]
      store.findRecord('post', 1, { reload: true }).then(function(post) {
        post.get("revision"); // 2
      });
      ```
       If no reload is indicated via the abovementioned ways, then the promise
      immediately resolves with the cached version in the store.
       ### Background Reloading
       Optionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,
      then a background reload is started, which updates the records' data, once
      it is available:
       ```js
      // app/adapters/post.js
      import ApplicationAdapter from "./application";
       export default ApplicationAdapter.extend({
        shouldReloadRecord(store, snapshot) {
          return false;
        },
         shouldBackgroundReloadRecord(store, snapshot) {
          return true;
        }
      });
       // ...
       store.push({
        data: {
          id: 1,
          type: 'post',
          revision: 1
        }
      });
       var blogPost = store.findRecord('post', 1).then(function(post) {
        post.get('revision'); // 1
      });
       // later, once adapter#findRecord resolved with
      // [
      //   {
      //     id: 1,
      //     type: 'post',
      //     revision: 2
      //   }
      // ]
       blogPost.get('revision'); // 2
      ```
       If you would like to force or prevent background reloading, you can set a
      boolean value for `backgroundReload` in the options object for
      `findRecord`.
       ```app/routes/post/edit.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        model: function(params) {
          return this.store.findRecord('post', params.post_id, { backgroundReload: false });
        }
      });
      ```
      If you pass an object on the `adapterOptions` property of the options
     argument it will be passed to you adapter via the snapshot
       ```app/routes/post/edit.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        model: function(params) {
          return this.store.findRecord('post', params.post_id, {
            adapterOptions: { subscribe: false }
          });
        }
      });
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default MyCustomAdapter.extend({
        findRecord: function(store, type, id, snapshot) {
          if (snapshot.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      });
      ```
       See [peekRecord](#method_peekRecord) to get the cached version of a record.
       @since 1.13.0
      @method findRecord
      @param {String} modelName
      @param {(String|Integer)} id
      @param {Object} options
      @return {Promise} promise
    */
    findRecord: function findRecord(modelName, id, options) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's findRecord method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      (0, _emberDataPrivateDebug.assert)(badIdFormatAssertion, typeof id === 'string' && id.length > 0 || typeof id === 'number' && !isNaN(id));

      var internalModel = this._internalModelForId(modelName, id);
      options = options || {};

      if (!this.hasRecordForId(modelName, id)) {
        return this._findByInternalModel(internalModel, options);
      }

      var fetchedInternalModel = this._findRecord(internalModel, options);

      return promiseRecord(fetchedInternalModel, "DS: Store#findRecord " + internalModel.typeKey + " with id: " + get(internalModel, 'id'));
    },

    _findRecord: function _findRecord(internalModel, options) {
      // Refetch if the reload option is passed
      if (options.reload) {
        return this.scheduleFetch(internalModel, options);
      }

      var snapshot = internalModel.createSnapshot(options);
      var typeClass = internalModel.type;
      var adapter = this.adapterFor(typeClass.modelName);

      // Refetch the record if the adapter thinks the record is stale
      if (adapter.shouldReloadRecord(this, snapshot)) {
        return this.scheduleFetch(internalModel, options);
      }

      if (options.backgroundReload === false) {
        return Promise.resolve(internalModel);
      }

      // Trigger the background refetch if backgroundReload option is passed
      if (options.backgroundReload || adapter.shouldBackgroundReloadRecord(this, snapshot)) {
        this.scheduleFetch(internalModel, options);
      }

      // Return the cached record
      return Promise.resolve(internalModel);
    },

    _findByInternalModel: function _findByInternalModel(internalModel, options) {
      options = options || {};

      if (options.preload) {
        internalModel._preloadData(options.preload);
      }

      var fetchedInternalModel = this._findEmptyInternalModel(internalModel, options);

      return promiseRecord(fetchedInternalModel, "DS: Store#findRecord " + internalModel.typeKey + " with id: " + get(internalModel, 'id'));
    },

    _findEmptyInternalModel: function _findEmptyInternalModel(internalModel, options) {
      if (internalModel.isEmpty()) {
        return this.scheduleFetch(internalModel, options);
      }

      //TODO double check about reloading
      if (internalModel.isLoading()) {
        return internalModel._loadingPromise;
      }

      return Promise.resolve(internalModel);
    },

    /**
      This method makes a series of requests to the adapter's `find` method
      and returns a promise that resolves once they are all loaded.
       @private
      @method findByIds
      @param {String} modelName
      @param {Array} ids
      @return {Promise} promise
    */
    findByIds: function findByIds(modelName, ids) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's findByIds method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var promises = new Array(ids.length);

      for (var i = 0; i < ids.length; i++) {
        promises[i] = this.findRecord(modelName, ids[i]);
      }

      return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)(_ember['default'].RSVP.all(promises).then(_ember['default'].A, null, "DS: Store#findByIds of " + modelName + " complete"));
    },

    /**
      This method is called by `findRecord` if it discovers that a particular
      type/id pair hasn't been loaded yet to kick off a request to the
      adapter.
       @method fetchRecord
      @private
      @param {InternalModel} internalModel model
      @return {Promise} promise
     */
    // TODO rename this to have an underscore
    fetchRecord: function fetchRecord(internalModel, options) {
      var typeClass = internalModel.type;
      var id = internalModel.id;
      var adapter = this.adapterFor(typeClass.modelName);

      (0, _emberDataPrivateDebug.assert)("You tried to find a record but you have no adapter (for " + typeClass + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to find a record but your adapter (for " + typeClass + ") does not implement 'findRecord'", typeof adapter.findRecord === 'function' || typeof adapter.find === 'function');

      var promise = (0, _emberDataPrivateSystemStoreFinders._find)(adapter, this, typeClass, id, internalModel, options);
      return promise;
    },

    scheduleFetchMany: function scheduleFetchMany(records) {
      var internalModels = new Array(records.length);
      var fetches = new Array(records.length);
      for (var i = 0; i < records.length; i++) {
        internalModels[i] = records[i]._internalModel;
      }

      for (var i = 0; i < internalModels.length; i++) {
        fetches[i] = this.scheduleFetch(internalModels[i]);
      }

      return _ember['default'].RSVP.Promise.all(fetches);
    },

    scheduleFetch: function scheduleFetch(internalModel, options) {
      var typeClass = internalModel.type;

      if (internalModel._loadingPromise) {
        return internalModel._loadingPromise;
      }

      var resolver = _ember['default'].RSVP.defer('Fetching ' + typeClass + 'with id: ' + internalModel.id);
      var pendingFetchItem = {
        record: internalModel,
        resolver: resolver,
        options: options
      };
      var promise = resolver.promise;

      internalModel.loadingData(promise);

      if (!this._pendingFetch.get(typeClass)) {
        this._pendingFetch.set(typeClass, [pendingFetchItem]);
      } else {
        this._pendingFetch.get(typeClass).push(pendingFetchItem);
      }
      _ember['default'].run.scheduleOnce('afterRender', this, this.flushAllPendingFetches);

      return promise;
    },

    flushAllPendingFetches: function flushAllPendingFetches() {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }

      this._pendingFetch.forEach(this._flushPendingFetchForType, this);
      this._pendingFetch = Map.create();
    },

    _flushPendingFetchForType: function _flushPendingFetchForType(pendingFetchItems, typeClass) {
      var store = this;
      var adapter = store.adapterFor(typeClass.modelName);
      var shouldCoalesce = !!adapter.findMany && adapter.coalesceFindRequests;
      var records = _ember['default'].A(pendingFetchItems).mapBy('record');

      function _fetchRecord(recordResolverPair) {
        recordResolverPair.resolver.resolve(store.fetchRecord(recordResolverPair.record, recordResolverPair.options)); // TODO adapter options
      }

      function resolveFoundRecords(records) {
        records.forEach(function (record) {
          var pair = _ember['default'].A(pendingFetchItems).findBy('record', record);
          if (pair) {
            var resolver = pair.resolver;
            resolver.resolve(record);
          }
        });
        return records;
      }

      function makeMissingRecordsRejector(requestedRecords) {
        return function rejectMissingRecords(resolvedRecords) {
          resolvedRecords = _ember['default'].A(resolvedRecords);
          var missingRecords = requestedRecords.reject(function (record) {
            return resolvedRecords.includes(record);
          });
          if (missingRecords.length) {
            (0, _emberDataPrivateDebug.warn)('Ember Data expected to find records with the following ids in the adapter response but they were missing: ' + _ember['default'].inspect(_ember['default'].A(missingRecords).mapBy('id')), false, {
              id: 'ds.store.missing-records-from-adapter'
            });
          }
          rejectRecords(missingRecords);
        };
      }

      function makeRecordsRejector(records) {
        return function (error) {
          rejectRecords(records, error);
        };
      }

      function rejectRecords(records, error) {
        records.forEach(function (record) {
          var pair = _ember['default'].A(pendingFetchItems).findBy('record', record);
          if (pair) {
            var resolver = pair.resolver;
            resolver.reject(error);
          }
        });
      }

      if (pendingFetchItems.length === 1) {
        _fetchRecord(pendingFetchItems[0]);
      } else if (shouldCoalesce) {

        // TODO: Improve records => snapshots => records => snapshots
        //
        // We want to provide records to all store methods and snapshots to all
        // adapter methods. To make sure we're doing that we're providing an array
        // of snapshots to adapter.groupRecordsForFindMany(), which in turn will
        // return grouped snapshots instead of grouped records.
        //
        // But since the _findMany() finder is a store method we need to get the
        // records from the grouped snapshots even though the _findMany() finder
        // will once again convert the records to snapshots for adapter.findMany()

        var snapshots = _ember['default'].A(records).invoke('createSnapshot');
        var groups = adapter.groupRecordsForFindMany(this, snapshots);
        groups.forEach(function (groupOfSnapshots) {
          var groupOfRecords = _ember['default'].A(groupOfSnapshots).mapBy('_internalModel');
          var requestedRecords = _ember['default'].A(groupOfRecords);
          var ids = requestedRecords.mapBy('id');
          if (ids.length > 1) {
            (0, _emberDataPrivateSystemStoreFinders._findMany)(adapter, store, typeClass, ids, requestedRecords).then(resolveFoundRecords).then(makeMissingRecordsRejector(requestedRecords)).then(null, makeRecordsRejector(requestedRecords));
          } else if (ids.length === 1) {
            var pair = _ember['default'].A(pendingFetchItems).findBy('record', groupOfRecords[0]);
            _fetchRecord(pair);
          } else {
            (0, _emberDataPrivateDebug.assert)("You cannot return an empty array from adapter's method groupRecordsForFindMany", false);
          }
        });
      } else {
        pendingFetchItems.forEach(_fetchRecord);
      }
    },

    /**
      Get the reference for the specified record.
       Example
       ```javascript
      var userRef = store.getReference('user', 1);
       // check if the user is loaded
      var isLoaded = userRef.value() !== null;
       // get the record of the reference (null if not yet available)
      var user = userRef.value();
       // get the identifier of the reference
      if (userRef.remoteType() === "id") {
      var id = userRef.id();
      }
       // load user (via store.find)
      userRef.load().then(...)
       // or trigger a reload
      userRef.reload().then(...)
       // provide data for reference
      userRef.push({ id: 1, username: "@user" }).then(function(user) {
      userRef.value() === user;
      });
      ```
       @method getReference
      @param {String} type
      @param {String|Integer} id
      @since 2.5.0
      @return {RecordReference}
    */
    getReference: function getReference(type, id) {
      return this._internalModelForId(type, id).recordReference;
    },

    /**
      Get a record by a given type and ID without triggering a fetch.
       This method will synchronously return the record if it is available in the store,
      otherwise it will return `null`. A record is available if it has been fetched earlier, or
      pushed manually into the store.
       _Note: This is an synchronous method and does not return a promise._
       ```js
      var post = store.peekRecord('post', 1);
       post.get('id'); // 1
      ```
       @since 1.13.0
      @method peekRecord
      @param {String} modelName
      @param {String|Integer} id
      @return {DS.Model|null} record
    */
    peekRecord: function peekRecord(modelName, id) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's peekRecord method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      if (this.hasRecordForId(modelName, id)) {
        return this._internalModelForId(modelName, id).getRecord();
      } else {
        return null;
      }
    },

    /**
      This method is called by the record's `reload` method.
       This method calls the adapter's `find` method, which returns a promise. When
      **that** promise resolves, `reloadRecord` will resolve the promise returned
      by the record's `reload`.
       @method reloadRecord
      @private
      @param {DS.Model} internalModel
      @return {Promise} promise
    */
    reloadRecord: function reloadRecord(internalModel) {
      var modelName = internalModel.type.modelName;
      var adapter = this.adapterFor(modelName);
      var id = internalModel.id;

      (0, _emberDataPrivateDebug.assert)("You cannot reload a record without an ID", id);
      (0, _emberDataPrivateDebug.assert)("You tried to reload a record but you have no adapter (for " + modelName + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to reload a record but your adapter does not implement `findRecord`", typeof adapter.findRecord === 'function' || typeof adapter.find === 'function');

      return this.scheduleFetch(internalModel);
    },

    /**
      Returns true if a record for a given type and ID is already loaded.
       @method hasRecordForId
      @param {(String|DS.Model)} modelName
      @param {(String|Integer)} inputId
      @return {Boolean}
    */
    hasRecordForId: function hasRecordForId(modelName, inputId) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's hasRecordForId method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var typeClass = this.modelFor(modelName);
      var id = (0, _emberDataPrivateSystemCoerceId['default'])(inputId);
      var internalModel = this.typeMapFor(typeClass).idToRecord[id];
      return !!internalModel && internalModel.isLoaded();
    },

    /**
      Returns id record for a given type and ID. If one isn't already loaded,
      it builds a new record and leaves it in the `empty` state.
       @method recordForId
      @private
      @param {String} modelName
      @param {(String|Integer)} id
      @return {DS.Model} record
    */
    recordForId: function recordForId(modelName, id) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's recordForId method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      return this._internalModelForId(modelName, id).getRecord();
    },

    _internalModelForId: function _internalModelForId(typeName, inputId) {
      var typeClass = this.modelFor(typeName);
      var id = (0, _emberDataPrivateSystemCoerceId['default'])(inputId);
      var idToRecord = this.typeMapFor(typeClass).idToRecord;
      var record = idToRecord[id];

      if (!record || !idToRecord[id]) {
        record = this.buildInternalModel(typeClass, id);
      }

      return record;
    },

    /**
      @method findMany
      @private
      @param {Array} internalModels
      @return {Promise} promise
    */
    findMany: function findMany(internalModels) {
      var finds = new Array(internalModels.length);

      for (var i = 0; i < internalModels.length; i++) {
        finds[i] = this._findByInternalModel(internalModels[i]);
      }

      return Promise.all(finds);
    },

    /**
      If a relationship was originally populated by the adapter as a link
      (as opposed to a list of IDs), this method is called when the
      relationship is fetched.
       The link (which is usually a URL) is passed through unchanged, so the
      adapter can make whatever request it wants.
       The usual use-case is for the server to register a URL as a link, and
      then use that URL in the future to make a request for the relationship.
       @method findHasMany
      @private
      @param {DS.Model} owner
      @param {any} link
      @param {(Relationship)} relationship
      @return {Promise} promise
    */
    findHasMany: function findHasMany(owner, link, relationship) {
      var adapter = this.adapterFor(owner.type.modelName);

      (0, _emberDataPrivateDebug.assert)("You tried to load a hasMany relationship but you have no adapter (for " + owner.type + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to load a hasMany relationship from a specified `link` in the original payload but your adapter does not implement `findHasMany`", typeof adapter.findHasMany === 'function');

      return (0, _emberDataPrivateSystemStoreFinders._findHasMany)(adapter, this, owner, link, relationship);
    },

    /**
      @method findBelongsTo
      @private
      @param {DS.Model} owner
      @param {any} link
      @param {Relationship} relationship
      @return {Promise} promise
    */
    findBelongsTo: function findBelongsTo(owner, link, relationship) {
      var adapter = this.adapterFor(owner.type.modelName);

      (0, _emberDataPrivateDebug.assert)("You tried to load a belongsTo relationship but you have no adapter (for " + owner.type + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to load a belongsTo relationship from a specified `link` in the original payload but your adapter does not implement `findBelongsTo`", typeof adapter.findBelongsTo === 'function');

      return (0, _emberDataPrivateSystemStoreFinders._findBelongsTo)(adapter, this, owner, link, relationship);
    },

    /**
      This method delegates a query to the adapter. This is the one place where
      adapter-level semantics are exposed to the application.
       Exposing queries this way seems preferable to creating an abstract query
      language for all server-side queries, and then require all adapters to
      implement them.
       ---
       If you do something like this:
       ```javascript
      store.query('person', { page: 1 });
      ```
       The call made to the server, using a Rails backend, will look something like this:
       ```
      Started GET "/api/v1/person?page=1"
      Processing by Api::V1::PersonsController#index as HTML
      Parameters: { "page"=>"1" }
      ```
       ---
       If you do something like this:
       ```javascript
      store.query('person', { ids: [1, 2, 3] });
      ```
       The call to the server, using a Rails backend, will look something like this:
       ```
      Started GET "/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3"
      Processing by Api::V1::PersonsController#index as HTML
      Parameters: { "ids" => ["1", "2", "3"] }
      ```
       This method returns a promise, which is resolved with a `RecordArray`
      once the server returns.
       @since 1.13.0
      @method query
      @param {String} modelName
      @param {any} query an opaque query to be used by the adapter
      @return {Promise} promise
    */
    query: function query(modelName, _query2) {
      return this._query(modelName, _query2);
    },

    _query: function _query(modelName, query, array) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's query method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)("You need to pass a query hash to the store's query method", query);
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var typeClass = this.modelFor(modelName);
      array = array || this.recordArrayManager.createAdapterPopulatedRecordArray(typeClass, query);

      var adapter = this.adapterFor(modelName);

      (0, _emberDataPrivateDebug.assert)("You tried to load a query but you have no adapter (for " + typeClass + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to load a query but your adapter does not implement `query`", typeof adapter.query === 'function');

      return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)((0, _emberDataPrivateSystemStoreFinders._query)(adapter, this, typeClass, query, array));
    },

    /**
      This method makes a request for one record, where the `id` is not known
      beforehand (if the `id` is known, use `findRecord` instead).
       This method can be used when it is certain that the server will return a
      single object for the primary data.
       Let's assume our API provides an endpoint for the currently logged in user
      via:
       ```
      // GET /api/current_user
      {
        user: {
          id: 1234,
          username: 'admin'
        }
      }
      ```
       Since the specific `id` of the `user` is not known beforehand, we can use
      `queryRecord` to get the user:
       ```javascript
      store.queryRecord('user', {}).then(function(user) {
        let username = user.get('username');
        console.log(`Currently logged in as ${username}`);
      });
      ```
       The request is made through the adapters' `queryRecord`:
       ```javascript
      // app/adapters/user.js
      import DS from "ember-data";
       export default DS.Adapter.extend({
        queryRecord(modelName, query) {
          return Ember.$.getJSON("/api/current_user");
        }
      });
      ```
       Note: the primary use case for `store.queryRecord` is when a single record
      is queried and the `id` is not known beforehand. In all other cases
      `store.query` and using the first item of the array is likely the preferred
      way:
       ```
      // GET /users?username=unique
      {
        data: [{
          id: 1234,
          type: 'user',
          attributes: {
            username: "unique"
          }
        }]
      }
      ```
       ```javascript
      store.query('user', { username: 'unique' }).then(function(users) {
        return users.get('firstObject');
      }).then(function(user) {
        let id = user.get('id');
      });
      ```
       This method returns a promise, which resolves with the found record.
       If the adapter returns no data for the primary data of the payload, then
      `queryRecord` resolves with `null`:
       ```
      // GET /users?username=unique
      {
        data: null
      }
      ```
       ```javascript
      store.queryRecord('user', { username: 'unique' }).then(function(user) {
        console.log(user); // null
      });
      ```
       @since 1.13.0
      @method queryRecord
      @param {String} modelName
      @param {any} query an opaque query to be used by the adapter
      @return {Promise} promise which resolves with the found record or `null`
    */
    queryRecord: function queryRecord(modelName, query) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's queryRecord method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)("You need to pass a query hash to the store's queryRecord method", query);
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');

      var typeClass = this.modelFor(modelName);
      var adapter = this.adapterFor(modelName);

      (0, _emberDataPrivateDebug.assert)("You tried to make a query but you have no adapter (for " + typeClass + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to make a query but your adapter does not implement `queryRecord`", typeof adapter.queryRecord === 'function');

      return (0, _emberDataPrivateSystemPromiseProxies.promiseObject)((0, _emberDataPrivateSystemStoreFinders._queryRecord)(adapter, this, typeClass, query));
    },

    /**
      `findAll` asks the adapter's `findAll` method to find the records for the
      given type, and returns a promise which will resolve with all records of
      this type present in the store, even if the adapter only returns a subset
      of them.
       ```app/routes/authors.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        model: function(params) {
          return this.store.findAll('author');
        }
      });
      ```
       _When_ the returned promise resolves depends on the reload behavior,
      configured via the passed `options` hash and the result of the adapter's
      `shouldReloadAll` method.
       ### Reloading
       If `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to
      `true`, then the returned promise resolves once the adapter returns data,
      regardless if there are already records in the store:
       ```js
      store.push({
        data: {
          id: 'first',
          type: 'author'
        }
      });
       // adapter#findAll resolves with
      // [
      //   {
      //     id: 'second',
      //     type: 'author'
      //   }
      // ]
      store.findAll('author', { reload: true }).then(function(authors) {
        authors.getEach("id"); // ['first', 'second']
      });
      ```
       If no reload is indicated via the abovementioned ways, then the promise
      immediately resolves with all the records currently loaded in the store.
       ### Background Reloading
       Optionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,
      then a background reload is started. Once this resolves, the array with
      which the promise resolves, is updated automatically so it contains all the
      records in the store:
       ```js
      // app/adapters/application.js
      export default DS.Adapter.extend({
        shouldReloadAll(store, snapshotsArray) {
          return false;
        },
         shouldBackgroundReloadAll(store, snapshotsArray) {
          return true;
        }
      });
       // ...
       store.push({
        data: {
          id: 'first',
          type: 'author'
        }
      });
       var allAuthors;
      store.findAll('author').then(function(authors) {
        authors.getEach('id'); // ['first']
         allAuthors = authors;
      });
       // later, once adapter#findAll resolved with
      // [
      //   {
      //     id: 'second',
      //     type: 'author'
      //   }
      // ]
       allAuthors.getEach('id'); // ['first', 'second']
      ```
       If you would like to force or prevent background reloading, you can set a
      boolean value for `backgroundReload` in the options object for
      `findAll`.
       ```app/routes/post/edit.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        model: function() {
          return this.store.findAll('post', { backgroundReload: false });
        }
      });
      ```
       If you pass an object on the `adapterOptions` property of the options
      argument it will be passed to you adapter via the `snapshotRecordArray`
       ```app/routes/posts.js
      import Ember from 'ember';
       export default Ember.Route.extend({
        model: function(params) {
          return this.store.findAll('post', {
            adapterOptions: { subscribe: false }
          });
        }
      });
      ```
       ```app/adapters/post.js
      import MyCustomAdapter from './custom-adapter';
       export default MyCustomAdapter.extend({
        findAll: function(store, type, sinceToken, snapshotRecordArray) {
          if (snapshotRecordArray.adapterOptions.subscribe) {
            // ...
          }
          // ...
        }
      });
      ```
        See [peekAll](#method_peekAll) to get an array of current records in the
      store, without waiting until a reload is finished.
       See [query](#method_query) to only get a subset of records from the server.
       @since 1.13.0
      @method findAll
      @param {String} modelName
      @param {Object} options
      @return {Promise} promise
    */
    findAll: function findAll(modelName, options) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's findAll method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var typeClass = this.modelFor(modelName);

      return this._fetchAll(typeClass, this.peekAll(modelName), options);
    },

    /**
      @method _fetchAll
      @private
      @param {DS.Model} typeClass
      @param {DS.RecordArray} array
      @return {Promise} promise
    */
    _fetchAll: function _fetchAll(typeClass, array, options) {
      options = options || {};
      var adapter = this.adapterFor(typeClass.modelName);
      var sinceToken = this.typeMapFor(typeClass).metadata.since;

      (0, _emberDataPrivateDebug.assert)("You tried to load all records but you have no adapter (for " + typeClass + ")", adapter);
      (0, _emberDataPrivateDebug.assert)("You tried to load all records but your adapter does not implement `findAll`", typeof adapter.findAll === 'function');

      if (options.reload) {
        set(array, 'isUpdating', true);
        return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)((0, _emberDataPrivateSystemStoreFinders._findAll)(adapter, this, typeClass, sinceToken, options));
      }

      var snapshotArray = array.createSnapshot(options);

      if (adapter.shouldReloadAll(this, snapshotArray)) {
        set(array, 'isUpdating', true);
        return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)((0, _emberDataPrivateSystemStoreFinders._findAll)(adapter, this, typeClass, sinceToken, options));
      }

      if (options.backgroundReload === false) {
        return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)(Promise.resolve(array));
      }

      if (options.backgroundReload || adapter.shouldBackgroundReloadAll(this, snapshotArray)) {
        set(array, 'isUpdating', true);
        (0, _emberDataPrivateSystemStoreFinders._findAll)(adapter, this, typeClass, sinceToken, options);
      }

      return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)(Promise.resolve(array));
    },

    /**
      @method didUpdateAll
      @param {DS.Model} typeClass
      @private
    */
    didUpdateAll: function didUpdateAll(typeClass) {
      var liveRecordArray = this.recordArrayManager.liveRecordArrayFor(typeClass);
      set(liveRecordArray, 'isUpdating', false);
    },

    /**
      This method returns a filtered array that contains all of the
      known records for a given type in the store.
       Note that because it's just a filter, the result will contain any
      locally created records of the type, however, it will not make a
      request to the backend to retrieve additional records. If you
      would like to request all the records from the backend please use
      [store.findAll](#method_findAll).
       Also note that multiple calls to `peekAll` for a given type will always
      return the same `RecordArray`.
       Example
       ```javascript
      var localPosts = store.peekAll('post');
      ```
       @since 1.13.0
      @method peekAll
      @param {String} modelName
      @return {DS.RecordArray}
    */
    peekAll: function peekAll(modelName) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's peekAll method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var typeClass = this.modelFor(modelName);

      var liveRecordArray = this.recordArrayManager.liveRecordArrayFor(typeClass);
      this.recordArrayManager.populateLiveRecordArray(liveRecordArray, typeClass);

      return liveRecordArray;
    },

    /**
     This method unloads all records in the store.
      Optionally you can pass a type which unload all records for a given type.
      ```javascript
     store.unloadAll();
     store.unloadAll('post');
     ```
      @method unloadAll
     @param {String} modelName
    */
    unloadAll: function unloadAll(modelName) {
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), !modelName || typeof modelName === 'string');
      if (arguments.length === 0) {
        var typeMaps = this.typeMaps;
        var keys = Object.keys(typeMaps);
        var types = new Array(keys.length);

        for (var i = 0; i < keys.length; i++) {
          types[i] = typeMaps[keys[i]]['type'].modelName;
        }

        types.forEach(this.unloadAll, this);
      } else {
        var typeClass = this.modelFor(modelName);
        var typeMap = this.typeMapFor(typeClass);
        var records = typeMap.records.slice();
        var record = undefined;

        for (var i = 0; i < records.length; i++) {
          record = records[i];
          record.unloadRecord();
          record.destroy(); // maybe within unloadRecord
        }

        typeMap.metadata = new _emberDataPrivateSystemEmptyObject['default']();
      }
    },

    /**
      Takes a type and filter function, and returns a live RecordArray that
      remains up to date as new records are loaded into the store or created
      locally.
       The filter function takes a materialized record, and returns true
      if the record should be included in the filter and false if it should
      not.
       Example
       ```javascript
      store.filter('post', function(post) {
        return post.get('unread');
      });
      ```
       The filter function is called once on all records for the type when
      it is created, and then once on each newly loaded or created record.
       If any of a record's properties change, or if it changes state, the
      filter function will be invoked again to determine whether it should
      still be in the array.
       Optionally you can pass a query, which is the equivalent of calling
      [query](#method_query) with that same query, to fetch additional records
      from the server. The results returned by the server could then appear
      in the filter if they match the filter function.
       The query itself is not used to filter records, it's only sent to your
      server for you to be able to do server-side filtering. The filter
      function will be applied on the returned results regardless.
       Example
       ```javascript
      store.filter('post', { unread: true }, function(post) {
        return post.get('unread');
      }).then(function(unreadPosts) {
        unreadPosts.get('length'); // 5
        var unreadPost = unreadPosts.objectAt(0);
        unreadPost.set('unread', false);
        unreadPosts.get('length'); // 4
      });
      ```
       @method filter
      @private
      @param {String} modelName
      @param {Object} query optional query
      @param {Function} filter
      @return {DS.PromiseArray}
      @deprecated
    */
    filter: function filter(modelName, query, _filter) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's filter method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');

      if (!_ember['default'].ENV.ENABLE_DS_FILTER) {
        (0, _emberDataPrivateDebug.assert)('The filter API has been moved to a plugin. To enable store.filter using an environment flag, or to use an alternative, you can visit the ember-data-filter addon page. https://github.com/ember-data/ember-data-filter', false);
      }

      var promise;
      var length = arguments.length;
      var array;
      var hasQuery = length === 3;

      // allow an optional server query
      if (hasQuery) {
        promise = this.query(modelName, query);
      } else if (arguments.length === 2) {
        _filter = query;
      }

      modelName = this.modelFor(modelName);

      if (hasQuery) {
        array = this.recordArrayManager.createFilteredRecordArray(modelName, _filter, query);
      } else {
        array = this.recordArrayManager.createFilteredRecordArray(modelName, _filter);
      }

      promise = promise || Promise.resolve(array);

      return (0, _emberDataPrivateSystemPromiseProxies.promiseArray)(promise.then(function () {
        return array;
      }, null, 'DS: Store#filter of ' + modelName));
    },

    /**
      This method returns if a certain record is already loaded
      in the store. Use this function to know beforehand if a findRecord()
      will result in a request or that it will be a cache hit.
        Example
       ```javascript
      store.recordIsLoaded('post', 1); // false
      store.findRecord('post', 1).then(function() {
        store.recordIsLoaded('post', 1); // true
      });
      ```
       @method recordIsLoaded
      @param {String} modelName
      @param {string} id
      @return {boolean}
    */
    recordIsLoaded: function recordIsLoaded(modelName, id) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's recordIsLoaded method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      return this.hasRecordForId(modelName, id);
    },

    // ............
    // . UPDATING .
    // ............

    /**
      If the adapter updates attributes the record will notify
      the store to update its  membership in any filters.
      To avoid thrashing, this method is invoked only once per
      run loop per record.
       @method dataWasUpdated
      @private
      @param {Class} type
      @param {InternalModel} internalModel
    */
    dataWasUpdated: function dataWasUpdated(type, internalModel) {
      this.recordArrayManager.recordDidChange(internalModel);
    },

    // ..............
    // . PERSISTING .
    // ..............

    /**
      This method is called by `record.save`, and gets passed a
      resolver for the promise that `record.save` returns.
       It schedules saving to happen at the end of the run loop.
       @method scheduleSave
      @private
      @param {InternalModel} internalModel
      @param {Resolver} resolver
      @param {Object} options
    */
    scheduleSave: function scheduleSave(internalModel, resolver, options) {
      var snapshot = internalModel.createSnapshot(options);
      internalModel.flushChangedAttributes();
      internalModel.adapterWillCommit();
      this._pendingSave.push({
        snapshot: snapshot,
        resolver: resolver
      });
      once(this, 'flushPendingSave');
    },

    /**
      This method is called at the end of the run loop, and
      flushes any records passed into `scheduleSave`
       @method flushPendingSave
      @private
    */
    flushPendingSave: function flushPendingSave() {
      var _this = this;

      var pending = this._pendingSave.slice();
      this._pendingSave = [];

      pending.forEach(function (pendingItem) {
        var snapshot = pendingItem.snapshot;
        var resolver = pendingItem.resolver;
        var record = snapshot._internalModel;
        var adapter = _this.adapterFor(record.type.modelName);
        var operation;

        if (get(record, 'currentState.stateName') === 'root.deleted.saved') {
          return resolver.resolve();
        } else if (record.isNew()) {
          operation = 'createRecord';
        } else if (record.isDeleted()) {
          operation = 'deleteRecord';
        } else {
          operation = 'updateRecord';
        }

        resolver.resolve(_commit(adapter, _this, operation, snapshot));
      });
    },

    /**
      This method is called once the promise returned by an
      adapter's `createRecord`, `updateRecord` or `deleteRecord`
      is resolved.
       If the data provides a server-generated ID, it will
      update the record and the store's indexes.
       @method didSaveRecord
      @private
      @param {InternalModel} internalModel the in-flight internal model
      @param {Object} data optional data (see above)
    */
    didSaveRecord: function didSaveRecord(internalModel, dataArg) {
      var data;
      if (dataArg) {
        data = dataArg.data;
      }
      if (data) {
        // normalize relationship IDs into records
        this._backburner.schedule('normalizeRelationships', this, '_setupRelationships', internalModel, data);
        this.updateId(internalModel, data);
      }

      //We first make sure the primary data has been updated
      //TODO try to move notification to the user to the end of the runloop
      internalModel.adapterDidCommit(data);
    },

    /**
      This method is called once the promise returned by an
      adapter's `createRecord`, `updateRecord` or `deleteRecord`
      is rejected with a `DS.InvalidError`.
       @method recordWasInvalid
      @private
      @param {InternalModel} internalModel
      @param {Object} errors
    */
    recordWasInvalid: function recordWasInvalid(internalModel, errors) {
      internalModel.adapterDidInvalidate(errors);
    },

    /**
      This method is called once the promise returned by an
      adapter's `createRecord`, `updateRecord` or `deleteRecord`
      is rejected (with anything other than a `DS.InvalidError`).
       @method recordWasError
      @private
      @param {InternalModel} internalModel
      @param {Error} error
    */
    recordWasError: function recordWasError(internalModel, error) {
      internalModel.adapterDidError(error);
    },

    /**
      When an adapter's `createRecord`, `updateRecord` or `deleteRecord`
      resolves with data, this method extracts the ID from the supplied
      data.
       @method updateId
      @private
      @param {InternalModel} internalModel
      @param {Object} data
    */
    updateId: function updateId(internalModel, data) {
      var oldId = internalModel.id;
      var id = (0, _emberDataPrivateSystemCoerceId['default'])(data.id);

      (0, _emberDataPrivateDebug.assert)("An adapter cannot assign a new id to a record that already has an id. " + internalModel + " had id: " + oldId + " and you tried to update it with " + id + ". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.", oldId === null || id === oldId);

      this.typeMapFor(internalModel.type).idToRecord[id] = internalModel;

      internalModel.setId(id);
    },

    /**
      Returns a map of IDs to client IDs for a given type.
       @method typeMapFor
      @private
      @param {DS.Model} typeClass
      @return {Object} typeMap
    */
    typeMapFor: function typeMapFor(typeClass) {
      var typeMaps = get(this, 'typeMaps');
      var guid = _ember['default'].guidFor(typeClass);
      var typeMap = typeMaps[guid];

      if (typeMap) {
        return typeMap;
      }

      typeMap = {
        idToRecord: new _emberDataPrivateSystemEmptyObject['default'](),
        records: [],
        metadata: new _emberDataPrivateSystemEmptyObject['default'](),
        type: typeClass
      };

      typeMaps[guid] = typeMap;

      return typeMap;
    },

    // ................
    // . LOADING DATA .
    // ................

    /**
      This internal method is used by `push`.
       @method _load
      @private
      @param {(String|DS.Model)} type
      @param {Object} data
    */
    _load: function _load(data) {
      var internalModel = this._internalModelForId(data.type, data.id);

      internalModel.setupData(data);

      this.recordArrayManager.recordDidChange(internalModel);

      return internalModel;
    },

    /*
      In case someone defined a relationship to a mixin, for example:
      ```
        var Comment = DS.Model.extend({
          owner: belongsTo('commentable'. { polymorphic: true})
        });
        var Commentable = Ember.Mixin.create({
          comments: hasMany('comment')
        });
      ```
      we want to look up a Commentable class which has all the necessary
      relationship metadata. Thus, we look up the mixin and create a mock
      DS.Model, so we can access the relationship CPs of the mixin (`comments`)
      in this case
    */

    _modelForMixin: function _modelForMixin(modelName) {
      var normalizedModelName = (0, _emberDataPrivateSystemNormalizeModelName['default'])(modelName);
      // container.registry = 2.1
      // container._registry = 1.11 - 2.0
      // container = < 1.11
      var owner = (0, _emberDataPrivateUtils.getOwner)(this);

      var mixin = owner._lookupFactory('mixin:' + normalizedModelName);
      if (mixin) {
        //Cache the class as a model
        owner.register('model:' + normalizedModelName, _emberDataModel['default'].extend(mixin));
      }
      var factory = this.modelFactoryFor(normalizedModelName);
      if (factory) {
        factory.__isMixin = true;
        factory.__mixin = mixin;
      }

      return factory;
    },

    /**
      Returns the model class for the particular `modelName`.
       The class of a model might be useful if you want to get a list of all the
      relationship names of the model, see
      [`relationshipNames`](http://emberjs.com/api/data/classes/DS.Model.html#property_relationshipNames)
      for example.
       @method modelFor
      @param {String} modelName
      @return {DS.Model}
    */
    modelFor: function modelFor(modelName) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's modelFor method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');

      var factory = this.modelFactoryFor(modelName);
      if (!factory) {
        //Support looking up mixins as base types for polymorphic relationships
        factory = this._modelForMixin(modelName);
      }
      if (!factory) {
        throw new _ember['default'].Error("No model was found for '" + modelName + "'");
      }
      factory.modelName = factory.modelName || (0, _emberDataPrivateSystemNormalizeModelName['default'])(modelName);

      return factory;
    },

    modelFactoryFor: function modelFactoryFor(modelName) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's modelFactoryFor method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var normalizedKey = (0, _emberDataPrivateSystemNormalizeModelName['default'])(modelName);

      var owner = (0, _emberDataPrivateUtils.getOwner)(this);

      return owner._lookupFactory('model:' + normalizedKey);
    },

    /**
      Push some data for a given type into the store.
       This method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:
      - record's `type` should always be in singular, dasherized form
      - members (properties) should be camelCased
       [Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):
       ```js
      store.push({
        data: {
          // primary data for single record of type `Person`
          id: '1',
          type: 'person',
          attributes: {
            firstName: 'Daniel',
            lastName: 'Kmak'
          }
        }
      });
      ```
       [Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)
       `data` property can also hold an array (of records):
       ```js
      store.push({
        data: [
          // an array of records
          {
            id: '1',
            type: 'person',
            attributes: {
              firstName: 'Daniel',
              lastName: 'Kmak'
            }
          },
          {
            id: '2',
            type: 'person',
            attributes: {
              firstName: 'Tom',
              lastName: 'Dale'
            }
          }
        ]
      });
      ```
       [Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)
       There are some typical properties for `JSONAPI` payload:
      * `id` - mandatory, unique record's key
      * `type` - mandatory string which matches `model`'s dasherized name in singular form
      * `attributes` - object which holds data for record attributes - `DS.attr`'s declared in model
      * `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):
        - [`links`](http://jsonapi.org/format/#document-links)
        - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data
        - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship
       For this model:
       ```app/models/person.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
         children: DS.hasMany('person')
      });
      ```
       To represent the children as IDs:
       ```js
      {
        data: {
          id: '1',
          type: 'person',
          attributes: {
            firstName: 'Tom',
            lastName: 'Dale'
          },
          relationships: {
            children: {
              data: [
                {
                  id: '2',
                  type: 'person'
                },
                {
                  id: '3',
                  type: 'person'
                },
                {
                  id: '4',
                  type: 'person'
                }
              ]
            }
          }
        }
      }
      ```
       [Demo.](http://ember-twiddle.com/343e1735e034091f5bde)
       To represent the children relationship as a URL:
       ```js
      {
        data: {
          id: '1',
          type: 'person',
          attributes: {
            firstName: 'Tom',
            lastName: 'Dale'
          },
          relationships: {
            children: {
              links: {
                related: '/people/1/children'
              }
            }
          }
        }
      }
      ```
       If you're streaming data or implementing an adapter, make sure
      that you have converted the incoming data into this form. The
      store's [normalize](#method_normalize) method is a convenience
      helper for converting a json payload into the form Ember Data
      expects.
       ```js
      store.push(store.normalize('person', data));
      ```
       This method can be used both to push in brand new
      records, as well as to update existing records.
       @method push
      @param {Object} data
      @return {DS.Model|Array} the record(s) that was created or
        updated.
    */
    push: function push(data) {
      var included = data.included;
      var i, length;
      if (included) {
        for (i = 0, length = included.length; i < length; i++) {
          this._pushInternalModel(included[i]);
        }
      }

      if (Array.isArray(data.data)) {
        length = data.data.length;
        var internalModels = new Array(length);
        for (i = 0; i < length; i++) {
          internalModels[i] = this._pushInternalModel(data.data[i]).getRecord();
        }
        return internalModels;
      }

      if (data.data === null) {
        return null;
      }

      (0, _emberDataPrivateDebug.assert)('Expected an object in the \'data\' property in a call to \'push\' for ' + data.type + ', but was ' + _ember['default'].typeOf(data.data), _ember['default'].typeOf(data.data) === 'object');

      var internalModel = this._pushInternalModel(data.data);

      return internalModel.getRecord();
    },

    _hasModelFor: function _hasModelFor(type) {
      return !!(0, _emberDataPrivateUtils.getOwner)(this)._lookupFactory('model:' + type);
    },

    _pushInternalModel: function _pushInternalModel(data) {
      var _this2 = this;

      var modelName = data.type;
      (0, _emberDataPrivateDebug.assert)('You must include an \'id\' for ' + modelName + ' in an object passed to \'push\'', data.id !== null && data.id !== undefined && data.id !== '');
      (0, _emberDataPrivateDebug.assert)('You tried to push data with a type \'' + modelName + '\' but no model could be found with that name.', this._hasModelFor(modelName));

      (0, _emberDataPrivateDebug.runInDebug)(function () {
        // If Ember.ENV.DS_WARN_ON_UNKNOWN_KEYS is set to true and the payload
        // contains unknown attributes or relationships, log a warning.

        if (_ember['default'].ENV.DS_WARN_ON_UNKNOWN_KEYS) {
          (function () {
            var type = _this2.modelFor(modelName);

            // Check unknown attributes
            var unknownAttributes = Object.keys(data.attributes || {}).filter(function (key) {
              return !get(type, 'fields').has(key);
            });
            var unknownAttributesMessage = 'The payload for \'' + type.modelName + '\' contains these unknown attributes: ' + unknownAttributes + '. Make sure they\'ve been defined in your model.';
            (0, _emberDataPrivateDebug.warn)(unknownAttributesMessage, unknownAttributes.length === 0, { id: 'ds.store.unknown-keys-in-payload' });

            // Check unknown relationships
            var unknownRelationships = Object.keys(data.relationships || {}).filter(function (key) {
              return !get(type, 'fields').has(key);
            });
            var unknownRelationshipsMessage = 'The payload for \'' + type.modelName + '\' contains these unknown relationships: ' + unknownRelationships + '. Make sure they\'ve been defined in your model.';
            (0, _emberDataPrivateDebug.warn)(unknownRelationshipsMessage, unknownRelationships.length === 0, { id: 'ds.store.unknown-keys-in-payload' });
          })();
        }
      });

      // Actually load the record into the store.
      var internalModel = this._load(data);

      this._backburner.join(function () {
        _this2._backburner.schedule('normalizeRelationships', _this2, '_setupRelationships', internalModel, data);
      });

      return internalModel;
    },

    _setupRelationships: function _setupRelationships(record, data) {
      // This will convert relationships specified as IDs into DS.Model instances
      // (possibly unloaded) and also create the data structures used to track
      // relationships.
      setupRelationships(this, record, data);
    },

    /**
      Push some raw data into the store.
       This method can be used both to push in brand new
      records, as well as to update existing records. You
      can push in more than one type of object at once.
      All objects should be in the format expected by the
      serializer.
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.ActiveModelSerializer;
      ```
       ```js
      var pushData = {
        posts: [
          { id: 1, post_title: "Great post", comment_ids: [2] }
        ],
        comments: [
          { id: 2, comment_body: "Insightful comment" }
        ]
      }
       store.pushPayload(pushData);
      ```
       By default, the data will be deserialized using a default
      serializer (the application serializer if it exists).
       Alternatively, `pushPayload` will accept a model type which
      will determine which serializer will process the payload.
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.ActiveModelSerializer;
      ```
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONSerializer;
      ```
       ```js
      store.pushPayload('comment', pushData); // Will use the application serializer
      store.pushPayload('post', pushData); // Will use the post serializer
      ```
       @method pushPayload
      @param {String} modelName Optionally, a model type used to determine which serializer will be used
      @param {Object} inputPayload
    */
    pushPayload: function pushPayload(modelName, inputPayload) {
      var _this3 = this;

      var serializer;
      var payload;
      if (!inputPayload) {
        payload = modelName;
        serializer = defaultSerializer(this);
        (0, _emberDataPrivateDebug.assert)("You cannot use `store#pushPayload` without a modelName unless your default serializer defines `pushPayload`", typeof serializer.pushPayload === 'function');
      } else {
        payload = inputPayload;
        (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
        serializer = this.serializerFor(modelName);
      }
      if (false) {
        return this._adapterRun(function () {
          return serializer.pushPayload(_this3, payload);
        });
      } else {
        this._adapterRun(function () {
          return serializer.pushPayload(_this3, payload);
        });
      }
    },

    /**
      `normalize` converts a json payload into the normalized form that
      [push](#method_push) expects.
       Example
       ```js
      socket.on('message', function(message) {
        var modelName = message.model;
        var data = message.data;
        store.push(store.normalize(modelName, data));
      });
      ```
       @method normalize
      @param {String} modelName The name of the model type for this payload
      @param {Object} payload
      @return {Object} The normalized payload
    */
    normalize: function normalize(modelName, payload) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's normalize method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store methods has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');
      var serializer = this.serializerFor(modelName);
      var model = this.modelFor(modelName);
      return serializer.normalize(model, payload);
    },

    /**
      Build a brand new record for a given type, ID, and
      initial data.
       @method buildRecord
      @private
      @param {DS.Model} type
      @param {String} id
      @param {Object} data
      @return {InternalModel} internal model
    */
    buildInternalModel: function buildInternalModel(type, id, data) {
      var typeMap = this.typeMapFor(type);
      var idToRecord = typeMap.idToRecord;

      (0, _emberDataPrivateDebug.assert)('The id ' + id + ' has already been used with another record of type ' + type.toString() + '.', !id || !idToRecord[id]);
      (0, _emberDataPrivateDebug.assert)('\'' + _ember['default'].inspect(type) + '\' does not appear to be an ember-data model', typeof type._create === 'function');

      // lookupFactory should really return an object that creates
      // instances with the injections applied
      var internalModel = new _emberDataPrivateSystemModelInternalModel['default'](type, id, this, null, data);

      // if we're creating an item, this process will be done
      // later, once the object has been persisted.
      if (id) {
        idToRecord[id] = internalModel;
      }

      typeMap.records.push(internalModel);

      return internalModel;
    },

    //Called by the state machine to notify the store that the record is ready to be interacted with
    recordWasLoaded: function recordWasLoaded(record) {
      this.recordArrayManager.recordWasLoaded(record);
    },

    // ...............
    // . DESTRUCTION .
    // ...............

    /**
      When a record is destroyed, this un-indexes it and
      removes it from any record arrays so it can be GCed.
       @method _dematerializeRecord
      @private
      @param {InternalModel} internalModel
    */
    _dematerializeRecord: function _dematerializeRecord(internalModel) {
      var type = internalModel.type;
      var typeMap = this.typeMapFor(type);
      var id = internalModel.id;

      internalModel.updateRecordArrays();

      if (id) {
        delete typeMap.idToRecord[id];
      }

      var loc = typeMap.records.indexOf(internalModel);
      typeMap.records.splice(loc, 1);
    },

    // ......................
    // . PER-TYPE ADAPTERS
    // ......................

    /**
      Returns an instance of the adapter for a given type. For
      example, `adapterFor('person')` will return an instance of
      `App.PersonAdapter`.
       If no `App.PersonAdapter` is found, this method will look
      for an `App.ApplicationAdapter` (the default adapter for
      your entire application).
       If no `App.ApplicationAdapter` is found, it will return
      the value of the `defaultAdapter`.
       @method adapterFor
      @public
      @param {String} modelName
      @return DS.Adapter
    */
    adapterFor: function adapterFor(modelName) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's adapterFor method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');

      return this.lookupAdapter(modelName);
    },

    _adapterRun: function _adapterRun(fn) {
      return this._backburner.run(fn);
    },

    // ..............................
    // . RECORD CHANGE NOTIFICATION .
    // ..............................

    /**
      Returns an instance of the serializer for a given type. For
      example, `serializerFor('person')` will return an instance of
      `App.PersonSerializer`.
       If no `App.PersonSerializer` is found, this method will look
      for an `App.ApplicationSerializer` (the default serializer for
      your entire application).
       if no `App.ApplicationSerializer` is found, it will attempt
      to get the `defaultSerializer` from the `PersonAdapter`
      (`adapterFor('person')`).
       If a serializer cannot be found on the adapter, it will fall back
      to an instance of `DS.JSONSerializer`.
       @method serializerFor
      @public
      @param {String} modelName the record to serialize
      @return {DS.Serializer}
    */
    serializerFor: function serializerFor(modelName) {
      (0, _emberDataPrivateDebug.assert)("You need to pass a model name to the store's serializerFor method", isPresent(modelName));
      (0, _emberDataPrivateDebug.assert)('Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ' + _ember['default'].inspect(modelName), typeof modelName === 'string');

      var fallbacks = ['application', this.adapterFor(modelName).get('defaultSerializer'), '-default'];

      var serializer = this.lookupSerializer(modelName, fallbacks);
      return serializer;
    },

    /**
      Retrieve a particular instance from the
      container cache. If not found, creates it and
      placing it in the cache.
       Enabled a store to manage local instances of
      adapters and serializers.
       @method retrieveManagedInstance
      @private
      @param {String} modelName the object modelName
      @param {String} name the object name
      @param {Array} fallbacks the fallback objects to lookup if the lookup for modelName or 'application' fails
      @return {Ember.Object}
    */
    retrieveManagedInstance: function retrieveManagedInstance(type, modelName, fallbacks) {
      var normalizedModelName = (0, _emberDataPrivateSystemNormalizeModelName['default'])(modelName);

      var instance = this._instanceCache.get(type, normalizedModelName, fallbacks);
      set(instance, 'store', this);
      return instance;
    },

    lookupAdapter: function lookupAdapter(name) {
      return this.retrieveManagedInstance('adapter', name, this.get('_adapterFallbacks'));
    },

    _adapterFallbacks: _ember['default'].computed('adapter', function () {
      var adapter = this.get('adapter');
      return ['application', adapter, '-json-api'];
    }),

    lookupSerializer: function lookupSerializer(name, fallbacks) {
      return this.retrieveManagedInstance('serializer', name, fallbacks);
    },

    willDestroy: function willDestroy() {
      this._super.apply(this, arguments);
      this.recordArrayManager.destroy();

      this.unloadAll();
    }

  });

  function deserializeRecordId(store, key, relationship, id) {
    if (isNone(id)) {
      return;
    }

    (0, _emberDataPrivateDebug.assert)('A ' + relationship.parentType + ' record was pushed into the store with the value of ' + key + ' being ' + _ember['default'].inspect(id) + ', but ' + key + ' is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.', !Array.isArray(id));

    //TODO:Better asserts
    return store._internalModelForId(id.type, id.id);
  }

  function deserializeRecordIds(store, key, relationship, ids) {
    if (isNone(ids)) {
      return;
    }

    (0, _emberDataPrivateDebug.assert)('A ' + relationship.parentType + ' record was pushed into the store with the value of ' + key + ' being \'' + _ember['default'].inspect(ids) + '\', but ' + key + ' is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.', Array.isArray(ids));
    var _ids = new Array(ids.length);

    for (var i = 0; i < ids.length; i++) {
      _ids[i] = deserializeRecordId(store, key, relationship, ids[i]);
    }

    return _ids;
  }

  // Delegation to the adapter and promise management

  function defaultSerializer(store) {
    return store.serializerFor('application');
  }

  function _commit(adapter, store, operation, snapshot) {
    var internalModel = snapshot._internalModel;
    var modelName = snapshot.modelName;
    var typeClass = store.modelFor(modelName);
    var promise = adapter[operation](store, typeClass, snapshot);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, modelName);
    var label = 'DS: Extract and notify about ' + operation + ' completion of ' + internalModel;

    (0, _emberDataPrivateDebug.assert)('Your adapter\'s \'' + operation + '\' method must return a value, but it returned \'undefined\'', promise !== undefined);

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, internalModel));

    return promise.then(function (adapterPayload) {
      store._adapterRun(function () {
        var payload, data;
        if (adapterPayload) {
          payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, snapshot.id, operation);
          if (payload.included) {
            store.push({ data: payload.included });
          }
          data = payload.data;
        }
        store.didSaveRecord(internalModel, { data: data });
      });

      return internalModel;
    }, function (error) {
      if (error instanceof _emberDataAdaptersErrors.InvalidError) {
        var errors = serializer.extractErrors(store, typeClass, error, snapshot.id);
        store.recordWasInvalid(internalModel, errors);
      } else {
        store.recordWasError(internalModel, error);
      }

      throw error;
    }, label);
  }

  function setupRelationships(store, record, data) {
    if (!data.relationships) {
      return;
    }

    record.type.eachRelationship(function (key, descriptor) {
      var kind = descriptor.kind;

      if (!data.relationships[key]) {
        return;
      }

      var relationship;

      if (data.relationships[key].links && data.relationships[key].links.related) {
        var relatedLink = (0, _emberDataPrivateSystemNormalizeLink['default'])(data.relationships[key].links.related);
        if (relatedLink && relatedLink.href) {
          relationship = record._relationships.get(key);
          relationship.updateLink(relatedLink.href);
        }
      }

      if (data.relationships[key].meta) {
        relationship = record._relationships.get(key);
        relationship.updateMeta(data.relationships[key].meta);
      }

      // If the data contains a relationship that is specified as an ID (or IDs),
      // normalizeRelationship will convert them into DS.Model instances
      // (possibly unloaded) before we push the payload into the store.
      normalizeRelationship(store, key, descriptor, data.relationships[key]);

      var value = data.relationships[key].data;

      if (value !== undefined) {
        if (kind === 'belongsTo') {
          relationship = record._relationships.get(key);
          relationship.setCanonicalRecord(value);
        } else if (kind === 'hasMany') {
          relationship = record._relationships.get(key);
          relationship.updateRecordsFromAdapter(value);
        }
      }
    });
  }

  function normalizeRelationship(store, key, relationship, jsonPayload) {
    var data = jsonPayload.data;
    if (data) {
      var kind = relationship.kind;
      if (kind === 'belongsTo') {
        jsonPayload.data = deserializeRecordId(store, key, relationship, data);
      } else if (kind === 'hasMany') {
        jsonPayload.data = deserializeRecordIds(store, key, relationship, data);
      }
    }
  }

  exports.Store = Store;
  exports['default'] = Store;
});
define('ember-data/-private/system/store/common', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports._bind = _bind;
  exports._guard = _guard;
  exports._objectIsAlive = _objectIsAlive;

  var get = _ember['default'].get;

  function _bind(fn) {
    var args = Array.prototype.slice.call(arguments, 1);

    return function () {
      return fn.apply(undefined, args);
    };
  }

  function _guard(promise, test) {
    var guarded = promise['finally'](function () {
      if (!test()) {
        guarded._subscribers.length = 0;
      }
    });

    return guarded;
  }

  function _objectIsAlive(object) {
    return !(get(object, "isDestroyed") || get(object, "isDestroying"));
  }
});
define('ember-data/-private/system/store/container-instance-cache', ['exports', 'ember', 'ember-data/-private/system/empty-object'], function (exports, _ember, _emberDataPrivateSystemEmptyObject) {
  'use strict';

  exports['default'] = ContainerInstanceCache;

  var assign = _ember['default'].assign || _ember['default'].merge;

  /*
   * The `ContainerInstanceCache` serves as a lazy cache for looking up
   * instances of serializers and adapters. It has some additional logic for
   * finding the 'fallback' adapter or serializer.
   *
   * The 'fallback' adapter or serializer is an adapter or serializer that is looked up
   * when the preferred lookup fails. For example, say you try to look up `adapter:post`,
   * but there is no entry (app/adapters/post.js in EmberCLI) for `adapter:post` in the registry.
   *
   * The `fallbacks` array passed will then be used; the first entry in the fallbacks array
   * that exists in the container will then be cached for `adapter:post`. So, the next time you
   * look up `adapter:post`, you'll get the `adapter:application` instance (or whatever the fallback
   * was if `adapter:application` doesn't exist).
   *
   * @private
   * @class ContainerInstanceCache
   *
  */
  function ContainerInstanceCache(owner) {
    this._owner = owner;
    this._cache = new _emberDataPrivateSystemEmptyObject['default']();
  }

  ContainerInstanceCache.prototype = new _emberDataPrivateSystemEmptyObject['default']();

  assign(ContainerInstanceCache.prototype, {
    get: function get(type, preferredKey, fallbacks) {
      var cache = this._cache;
      var preferredLookupKey = type + ':' + preferredKey;

      if (!(preferredLookupKey in cache)) {
        var instance = this.instanceFor(preferredLookupKey) || this._findInstance(type, fallbacks);
        if (instance) {
          cache[preferredLookupKey] = instance;
        }
      }
      return cache[preferredLookupKey];
    },

    _findInstance: function _findInstance(type, fallbacks) {
      for (var i = 0, _length = fallbacks.length; i < _length; i++) {
        var fallback = fallbacks[i];
        var lookupKey = type + ':' + fallback;
        var instance = this.instanceFor(lookupKey);

        if (instance) {
          return instance;
        }
      }
    },

    instanceFor: function instanceFor(key) {
      var cache = this._cache;
      if (!cache[key]) {
        var instance = this._owner.lookup(key);
        if (instance) {
          cache[key] = instance;
        }
      }
      return cache[key];
    },

    destroy: function destroy() {
      var cache = this._cache;
      var cacheEntries = Object.keys(cache);

      for (var i = 0, _length2 = cacheEntries.length; i < _length2; i++) {
        var cacheKey = cacheEntries[i];
        var cacheEntry = cache[cacheKey];
        if (cacheEntry) {
          cacheEntry.destroy();
        }
      }
      this._owner = null;
    },

    constructor: ContainerInstanceCache,

    toString: function toString() {
      return 'ContainerInstanceCache';
    }
  });
});
define("ember-data/-private/system/store/finders", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/system/store/common", "ember-data/-private/system/store/serializer-response", "ember-data/-private/system/store/serializers"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateSystemStoreCommon, _emberDataPrivateSystemStoreSerializerResponse, _emberDataPrivateSystemStoreSerializers) {
  "use strict";

  exports._find = _find;
  exports._findMany = _findMany;
  exports._findHasMany = _findHasMany;
  exports._findBelongsTo = _findBelongsTo;
  exports._findAll = _findAll;
  exports._query = _query;
  exports._queryRecord = _queryRecord;

  var Promise = _ember["default"].RSVP.Promise;

  function payloadIsNotBlank(adapterPayload) {
    if (Array.isArray(adapterPayload)) {
      return true;
    } else {
      return Object.keys(adapterPayload || {}).length;
    }
  }

  function _find(adapter, store, typeClass, id, internalModel, options) {
    var snapshot = internalModel.createSnapshot(options);
    var promise = adapter.findRecord(store, typeClass, id, snapshot);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, internalModel.type.modelName);
    var label = "DS: Handle Adapter#findRecord of " + typeClass + " with id: " + id;

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));

    return promise.then(function (adapterPayload) {
      (0, _emberDataPrivateDebug.assert)("You made a `findRecord` request for a " + typeClass.modelName + " with id " + id + ", but the adapter's response did not have any data", payloadIsNotBlank(adapterPayload));
      return store._adapterRun(function () {
        var payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, id, 'findRecord');
        (0, _emberDataPrivateDebug.assert)('Ember Data expected the primary data returned from a `findRecord` response to be an object but instead it found an array.', !Array.isArray(payload.data));
        //TODO Optimize
        var record = store.push(payload);
        return record._internalModel;
      });
    }, function (error) {
      internalModel.notFound();
      if (internalModel.isEmpty()) {
        internalModel.unloadRecord();
      }

      throw error;
    }, "DS: Extract payload of '" + typeClass + "'");
  }

  function _findMany(adapter, store, typeClass, ids, internalModels) {
    var snapshots = _ember["default"].A(internalModels).invoke('createSnapshot');
    var promise = adapter.findMany(store, typeClass, ids, snapshots);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, typeClass.modelName);
    var label = "DS: Handle Adapter#findMany of " + typeClass;

    if (promise === undefined) {
      throw new Error('adapter.findMany returned undefined, this was very likely a mistake');
    }

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));

    return promise.then(function (adapterPayload) {
      (0, _emberDataPrivateDebug.assert)("You made a `findMany` request for " + typeClass.modelName + " records with ids " + ids + ", but the adapter's response did not have any data", payloadIsNotBlank(adapterPayload));
      return store._adapterRun(function () {
        var payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, null, 'findMany');
        //TODO Optimize, no need to materialize here
        var records = store.push(payload);
        var internalModels = new Array(records.length);

        for (var i = 0; i < records.length; i++) {
          internalModels[i] = records[i]._internalModel;
        }

        return internalModels;
      });
    }, null, "DS: Extract payload of " + typeClass);
  }

  function _findHasMany(adapter, store, internalModel, link, relationship) {
    var snapshot = internalModel.createSnapshot();
    var typeClass = store.modelFor(relationship.type);
    var promise = adapter.findHasMany(store, snapshot, link, relationship);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, relationship.type);
    var label = "DS: Handle Adapter#findHasMany of " + internalModel + " : " + relationship.type;

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, internalModel));

    return promise.then(function (adapterPayload) {
      (0, _emberDataPrivateDebug.assert)("You made a `findHasMany` request for a " + internalModel.modelName + "'s `" + relationship.key + "` relationship, using link " + link + ", but the adapter's response did not have any data", payloadIsNotBlank(adapterPayload));
      return store._adapterRun(function () {
        var payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, null, 'findHasMany');
        //TODO Use a non record creating push
        var records = store.push(payload);
        var recordArray = records.map(function (record) {
          return record._internalModel;
        });
        recordArray.meta = payload.meta;
        return recordArray;
      });
    }, null, "DS: Extract payload of " + internalModel + " : hasMany " + relationship.type);
  }

  function _findBelongsTo(adapter, store, internalModel, link, relationship) {
    var snapshot = internalModel.createSnapshot();
    var typeClass = store.modelFor(relationship.type);
    var promise = adapter.findBelongsTo(store, snapshot, link, relationship);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, relationship.type);
    var label = "DS: Handle Adapter#findBelongsTo of " + internalModel + " : " + relationship.type;

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, internalModel));

    return promise.then(function (adapterPayload) {
      return store._adapterRun(function () {
        var payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, null, 'findBelongsTo');

        if (!payload.data) {
          return null;
        }

        //TODO Optimize
        var record = store.push(payload);
        return record._internalModel;
      });
    }, null, "DS: Extract payload of " + internalModel + " : " + relationship.type);
  }

  function _findAll(adapter, store, typeClass, sinceToken, options) {
    var modelName = typeClass.modelName;
    var recordArray = store.peekAll(modelName);
    var snapshotArray = recordArray.createSnapshot(options);
    var promise = adapter.findAll(store, typeClass, sinceToken, snapshotArray);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, modelName);
    var label = "DS: Handle Adapter#findAll of " + typeClass;

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));

    return promise.then(function (adapterPayload) {
      (0, _emberDataPrivateDebug.assert)("You made a `findAll` request for " + typeClass.modelName + " records, but the adapter's response did not have any data", payloadIsNotBlank(adapterPayload));
      store._adapterRun(function () {
        var payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, null, 'findAll');
        //TODO Optimize
        store.push(payload);
      });

      store.didUpdateAll(typeClass);
      return store.peekAll(modelName);
    }, null, "DS: Extract payload of findAll " + typeClass);
  }

  function _query(adapter, store, typeClass, query, recordArray) {
    var modelName = typeClass.modelName;
    var promise = adapter.query(store, typeClass, query, recordArray);

    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, modelName);
    var label = "DS: Handle Adapter#query of " + typeClass;

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));

    return promise.then(function (adapterPayload) {
      var records, payload;
      store._adapterRun(function () {
        payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, null, 'query');
        //TODO Optimize
        records = store.push(payload);
      });

      (0, _emberDataPrivateDebug.assert)('The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.', Array.isArray(records));
      recordArray.loadRecords(records, payload);
      return recordArray;
    }, null, "DS: Extract payload of query " + typeClass);
  }

  function _queryRecord(adapter, store, typeClass, query) {
    var modelName = typeClass.modelName;
    var promise = adapter.queryRecord(store, typeClass, query);
    var serializer = (0, _emberDataPrivateSystemStoreSerializers.serializerForAdapter)(store, adapter, modelName);
    var label = "DS: Handle Adapter#queryRecord of " + typeClass;

    promise = Promise.resolve(promise, label);
    promise = (0, _emberDataPrivateSystemStoreCommon._guard)(promise, (0, _emberDataPrivateSystemStoreCommon._bind)(_emberDataPrivateSystemStoreCommon._objectIsAlive, store));

    return promise.then(function (adapterPayload) {
      var record;
      store._adapterRun(function () {
        var payload = (0, _emberDataPrivateSystemStoreSerializerResponse.normalizeResponseHelper)(serializer, store, typeClass, adapterPayload, null, 'queryRecord');

        (0, _emberDataPrivateDebug.assert)("Expected the primary data returned by the serializer for a `queryRecord` response to be a single object or null but instead it was an array.", !Array.isArray(payload.data), {
          id: 'ds.store.queryRecord-array-response'
        });

        //TODO Optimize
        record = store.push(payload);
      });

      return record;
    }, null, "DS: Extract payload of queryRecord " + typeClass);
  }
});
define('ember-data/-private/system/store/serializer-response', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  'use strict';

  exports.validateDocumentStructure = validateDocumentStructure;
  exports.normalizeResponseHelper = normalizeResponseHelper;

  /*
    This is a helper method that validates a JSON API top-level document
  
    The format of a document is described here:
    http://jsonapi.org/format/#document-top-level
  
    @method validateDocumentStructure
    @param {Object} doc JSON API document
    @return {array} An array of errors found in the document structure
  */

  function validateDocumentStructure(doc) {
    var errors = [];
    if (!doc || typeof doc !== 'object') {
      errors.push('Top level of a JSON API document must be an object');
    } else {
      if (!('data' in doc) && !('errors' in doc) && !('meta' in doc)) {
        errors.push('One or more of the following keys must be present: "data", "errors", "meta".');
      } else {
        if ('data' in doc && 'errors' in doc) {
          errors.push('Top level keys "errors" and "data" cannot both be present in a JSON API document');
        }
      }
      if ('data' in doc) {
        if (!(doc.data === null || Array.isArray(doc.data) || typeof doc.data === 'object')) {
          errors.push('data must be null, an object, or an array');
        }
      }
      if ('meta' in doc) {
        if (typeof doc.meta !== 'object') {
          errors.push('meta must be an object');
        }
      }
      if ('errors' in doc) {
        if (!Array.isArray(doc.errors)) {
          errors.push('errors must be an array');
        }
      }
      if ('links' in doc) {
        if (typeof doc.links !== 'object') {
          errors.push('links must be an object');
        }
      }
      if ('jsonapi' in doc) {
        if (typeof doc.jsonapi !== 'object') {
          errors.push('jsonapi must be an object');
        }
      }
      if ('included' in doc) {
        if (typeof doc.included !== 'object') {
          errors.push('included must be an array');
        }
      }
    }

    return errors;
  }

  /*
    This is a helper method that always returns a JSON-API Document.
  
    @method normalizeResponseHelper
    @param {DS.Serializer} serializer
    @param {DS.Store} store
    @param {subclass of DS.Model} modelClass
    @param {Object} payload
    @param {String|Number} id
    @param {String} requestType
    @return {Object} JSON-API Document
  */

  function normalizeResponseHelper(serializer, store, modelClass, payload, id, requestType) {
    var normalizedResponse = serializer.normalizeResponse(store, modelClass, payload, id, requestType);
    var validationErrors = [];
    (0, _emberDataPrivateDebug.runInDebug)(function () {
      validationErrors = validateDocumentStructure(normalizedResponse);
    });
    (0, _emberDataPrivateDebug.assert)('normalizeResponse must return a valid JSON API document:\n\t* ' + validationErrors.join('\n\t* '), _ember['default'].isEmpty(validationErrors));

    return normalizedResponse;
  }
});
define("ember-data/-private/system/store/serializers", ["exports"], function (exports) {
  "use strict";

  exports.serializerForAdapter = serializerForAdapter;

  function serializerForAdapter(store, adapter, type) {
    var serializer = adapter.serializer;

    if (serializer === undefined) {
      serializer = store.serializerFor(type);
    }

    if (serializer === null || serializer === undefined) {
      serializer = {
        extract: function extract(store, type, payload) {
          return payload;
        }
      };
    }

    return serializer;
  }
});
define("ember-data/-private/transforms", ["exports", "ember-data/transform", "ember-data/-private/transforms/number", "ember-data/-private/transforms/date", "ember-data/-private/transforms/string", "ember-data/-private/transforms/boolean"], function (exports, _emberDataTransform, _emberDataPrivateTransformsNumber, _emberDataPrivateTransformsDate, _emberDataPrivateTransformsString, _emberDataPrivateTransformsBoolean) {
  "use strict";

  exports.Transform = _emberDataTransform["default"];
  exports.NumberTransform = _emberDataPrivateTransformsNumber["default"];
  exports.DateTransform = _emberDataPrivateTransformsDate["default"];
  exports.StringTransform = _emberDataPrivateTransformsString["default"];
  exports.BooleanTransform = _emberDataPrivateTransformsBoolean["default"];
});
define('ember-data/-private/transforms/boolean', ['exports', 'ember', 'ember-data/transform', 'ember-data/-private/features'], function (exports, _ember, _emberDataTransform, _emberDataPrivateFeatures) {
  'use strict';

  var isNone = _ember['default'].isNone;

  /**
    The `DS.BooleanTransform` class is used to serialize and deserialize
    boolean attributes on Ember Data record objects. This transform is
    used when `boolean` is passed as the type parameter to the
    [DS.attr](../../data#method_attr) function.
  
    Usage
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      isAdmin: DS.attr('boolean'),
      name: DS.attr('string'),
      email: DS.attr('string')
    });
    ```
  
    By default the boolean transform only allows for values of `true` or
    `false`. You can opt into allowing `null` values for
    boolean attributes via `DS.attr('boolean', { allowNull: true })`
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      email: DS.attr('string'),
      username: DS.attr('string'),
      wantsWeeklyEmail: DS.attr('boolean', { allowNull: true })
    });
    ```
  
    @class BooleanTransform
    @extends DS.Transform
    @namespace DS
   */
  exports['default'] = _emberDataTransform['default'].extend({
    deserialize: function deserialize(serialized, options) {
      var type = typeof serialized;

      if (true) {
        if (isNone(serialized) && options.allowNull === true) {
          return null;
        }
      }

      if (type === "boolean") {
        return serialized;
      } else if (type === "string") {
        return serialized.match(/^true$|^t$|^1$/i) !== null;
      } else if (type === "number") {
        return serialized === 1;
      } else {
        return false;
      }
    },

    serialize: function serialize(deserialized, options) {
      if (true) {
        if (isNone(deserialized) && options.allowNull === true) {
          return null;
        }
      }

      return Boolean(deserialized);
    }
  });
});
define("ember-data/-private/transforms/date", ["exports", "ember-data/-private/ext/date", "ember-data/transform"], function (exports, _emberDataPrivateExtDate, _emberDataTransform) {
  "use strict";

  exports["default"] = _emberDataTransform["default"].extend({
    deserialize: function deserialize(serialized) {
      var type = typeof serialized;

      if (type === "string") {
        return new Date((0, _emberDataPrivateExtDate.parseDate)(serialized));
      } else if (type === "number") {
        return new Date(serialized);
      } else if (serialized === null || serialized === undefined) {
        // if the value is null return null
        // if the value is not present in the data return undefined
        return serialized;
      } else {
        return null;
      }
    },

    serialize: function serialize(date) {
      if (date instanceof Date && !isNaN(date)) {
        return date.toISOString();
      } else {
        return null;
      }
    }
  });
});

/**
  The `DS.DateTransform` class is used to serialize and deserialize
  date attributes on Ember Data record objects. This transform is used
  when `date` is passed as the type parameter to the
  [DS.attr](../../data#method_attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)
  standard.

  ```app/models/score.js
  import DS from 'ember-data';

  export default DS.Model.extend({
    value: DS.attr('number'),
    player: DS.belongsTo('player'),
    date: DS.attr('date')
  });
  ```

  @class DateTransform
  @extends DS.Transform
  @namespace DS
 */
define("ember-data/-private/transforms/number", ["exports", "ember", "ember-data/transform"], function (exports, _ember, _emberDataTransform) {
  "use strict";

  var empty = _ember["default"].isEmpty;

  function isNumber(value) {
    return value === value && value !== Infinity && value !== -Infinity;
  }

  /**
    The `DS.NumberTransform` class is used to serialize and deserialize
    numeric attributes on Ember Data record objects. This transform is
    used when `number` is passed as the type parameter to the
    [DS.attr](../../data#method_attr) function.
  
    Usage
  
    ```app/models/score.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      value: DS.attr('number'),
      player: DS.belongsTo('player'),
      date: DS.attr('date')
    });
    ```
  
    @class NumberTransform
    @extends DS.Transform
    @namespace DS
   */
  exports["default"] = _emberDataTransform["default"].extend({
    deserialize: function deserialize(serialized) {
      var transformed;

      if (empty(serialized)) {
        return null;
      } else {
        transformed = Number(serialized);

        return isNumber(transformed) ? transformed : null;
      }
    },

    serialize: function serialize(deserialized) {
      var transformed;

      if (empty(deserialized)) {
        return null;
      } else {
        transformed = Number(deserialized);

        return isNumber(transformed) ? transformed : null;
      }
    }
  });
});
define("ember-data/-private/transforms/string", ["exports", "ember", "ember-data/transform"], function (exports, _ember, _emberDataTransform) {
  "use strict";

  var none = _ember["default"].isNone;

  /**
    The `DS.StringTransform` class is used to serialize and deserialize
    string attributes on Ember Data record objects. This transform is
    used when `string` is passed as the type parameter to the
    [DS.attr](../../data#method_attr) function.
  
    Usage
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      isAdmin: DS.attr('boolean'),
      name: DS.attr('string'),
      email: DS.attr('string')
    });
    ```
  
    @class StringTransform
    @extends DS.Transform
    @namespace DS
   */
  exports["default"] = _emberDataTransform["default"].extend({
    deserialize: function deserialize(serialized) {
      return none(serialized) ? null : String(serialized);
    },
    serialize: function serialize(deserialized) {
      return none(deserialized) ? null : String(deserialized);
    }
  });
});
define('ember-data/-private/utils', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var get = _ember['default'].get;

  /*
    Check if the passed model has a `type` attribute or a relationship named `type`.
  
    @method modelHasAttributeOrRelationshipNamedType
    @param modelClass
   */
  function modelHasAttributeOrRelationshipNamedType(modelClass) {
    return get(modelClass, 'attributes').has('type') || get(modelClass, 'relationshipsByName').has('type');
  }

  /*
    ember-container-inject-owner is a new feature in Ember 2.3 that finally provides a public
    API for looking items up.  This function serves as a super simple polyfill to avoid
    triggering deprecations.
  */
  function getOwner(context) {
    var owner;

    if (_ember['default'].getOwner) {
      owner = _ember['default'].getOwner(context);
    }

    if (!owner && context.container) {
      owner = context.container;
    }

    if (owner && owner.lookupFactory && !owner._lookupFactory) {
      // `owner` is a container, we are just making this work
      owner._lookupFactory = owner.lookupFactory;
      owner.register = function () {
        var registry = owner.registry || owner._registry || owner;

        return registry.register.apply(registry, arguments);
      };
    }

    return owner;
  }

  exports.modelHasAttributeOrRelationshipNamedType = modelHasAttributeOrRelationshipNamedType;
  exports.getOwner = getOwner;
});
define('ember-data/-private/utils/parse-response-headers', ['exports', 'ember-data/-private/system/empty-object'], function (exports, _emberDataPrivateSystemEmptyObject) {
  'use strict';

  exports['default'] = parseResponseHeaders;

  function _toArray(arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  }

  var CLRF = '\r\n';
  function parseResponseHeaders(headersString) {
    var headers = new _emberDataPrivateSystemEmptyObject['default']();

    if (!headersString) {
      return headers;
    }

    var headerPairs = headersString.split(CLRF);

    headerPairs.forEach(function (header) {
      var _header$split = header.split(':');

      var _header$split2 = _toArray(_header$split);

      var field = _header$split2[0];

      var value = _header$split2.slice(1);

      field = field.trim();
      value = value.join(':').trim();

      if (value) {
        headers[field] = value;
      }
    });

    return headers;
  }
});
define('ember-data/adapter', ['exports', 'ember'], function (exports, _ember) {
  /**
    @module ember-data
  */

  'use strict';

  var get = _ember['default'].get;

  /**
    An adapter is an object that receives requests from a store and
    translates them into the appropriate action to take against your
    persistence layer. The persistence layer is usually an HTTP API, but
    may be anything, such as the browser's local storage. Typically the
    adapter is not invoked directly instead its functionality is accessed
    through the `store`.
  
    ### Creating an Adapter
  
    Create a new subclass of `DS.Adapter` in the `app/adapters` folder:
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.Adapter.extend({
      // ...your code here
    });
    ```
  
    Model-specific adapters can be created by putting your adapter
    class in an `app/adapters/` + `model-name` + `.js` file of the application.
  
    ```app/adapters/post.js
    import DS from 'ember-data';
  
    export default DS.Adapter.extend({
      // ...Post-specific adapter code goes here
    });
    ```
  
    `DS.Adapter` is an abstract base class that you should override in your
    application to customize it for your backend. The minimum set of methods
    that you should implement is:
  
      * `findRecord()`
      * `createRecord()`
      * `updateRecord()`
      * `deleteRecord()`
      * `findAll()`
      * `query()`
  
    To improve the network performance of your application, you can optimize
    your adapter by overriding these lower-level methods:
  
      * `findMany()`
  
  
    For an example implementation, see `DS.RESTAdapter`, the
    included REST adapter.
  
    @class Adapter
    @namespace DS
    @extends Ember.Object
  */

  exports['default'] = _ember['default'].Object.extend({

    /**
      If you would like your adapter to use a custom serializer you can
      set the `defaultSerializer` property to be the name of the custom
      serializer.
       Note the `defaultSerializer` serializer has a lower priority than
      a model specific serializer (i.e. `PostSerializer`) or the
      `application` serializer.
       ```app/adapters/django.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        defaultSerializer: 'django'
      });
      ```
       @property defaultSerializer
      @type {String}
    */
    defaultSerializer: '-default',

    /**
      The `findRecord()` method is invoked when the store is asked for a record that
      has not previously been loaded. In response to `findRecord()` being called, you
      should query your persistence layer for a record with the given ID. The `findRecord`
      method should return a promise that will resolve to a JavaScript object that will be
      normalized by the serializer.
       Here is an example `findRecord` implementation:
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        findRecord: function(store, type, id, snapshot) {
           return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.getJSON(`/${type.modelName}/${id}`).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      });
      ```
       @method findRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {String} id
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    findRecord: null,

    /**
      The `findAll()` method is used to retrieve all records for a given type.
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        findAll: function(store, type, sinceToken) {
          var query = { since: sinceToken };
          return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.getJSON(`/${type.modelName}`, query).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      });
      ```
       @method findAll
      @param {DS.Store} store
      @param {DS.Model} type
      @param {String} sinceToken
      @param {DS.SnapshotRecordArray} snapshotRecordArray
      @return {Promise} promise
    */
    findAll: null,

    /**
      This method is called when you call `query` on the store.
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        query: function(store, type, query) {
          return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.getJSON(`/${type.modelName}`, query).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      });
      ```
       @method query
      @param {DS.Store} store
      @param {DS.Model} type
      @param {Object} query
      @param {DS.AdapterPopulatedRecordArray} recordArray
      @return {Promise} promise
    */
    query: null,

    /**
      The `queryRecord()` method is invoked when the store is asked for a single
      record through a query object.
       In response to `queryRecord()` being called, you should always fetch fresh
      data. Once found, you can asynchronously call the store's `push()` method
      to push the record into the store.
       Here is an example `queryRecord` implementation:
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
      import Ember from 'ember';
       export default DS.Adapter.extend(DS.BuildURLMixin, {
        queryRecord: function(store, type, query) {
          return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.getJSON(`/${type.modelName}`, query).then(function(data) {
              resolve(data);
            }, function(jqXHR) {
              reject(jqXHR);
            });
          });
        }
      });
      ```
       @method queryRecord
      @param {DS.Store} store
      @param {subclass of DS.Model} type
      @param {Object} query
      @return {Promise} promise
    */
    queryRecord: null,

    /**
      If the globally unique IDs for your records should be generated on the client,
      implement the `generateIdForRecord()` method. This method will be invoked
      each time you create a new record, and the value returned from it will be
      assigned to the record's `primaryKey`.
       Most traditional REST-like HTTP APIs will not use this method. Instead, the ID
      of the record will be set by the server, and your adapter will update the store
      with the new ID when it calls `didCreateRecord()`. Only implement this method if
      you intend to generate record IDs on the client-side.
       The `generateIdForRecord()` method will be invoked with the requesting store as
      the first parameter and the newly created record as the second parameter:
       ```javascript
      import DS from 'ember-data';
      import { v4 } from 'uuid';
       export default DS.Adapter.extend({
        generateIdForRecord: function(store, inputProperties) {
          return v4();
        }
      });
      ```
       @method generateIdForRecord
      @param {DS.Store} store
      @param {DS.Model} type   the DS.Model class of the record
      @param {Object} inputProperties a hash of properties to set on the
        newly created record.
      @return {(String|Number)} id
    */
    generateIdForRecord: null,

    /**
      Proxies to the serializer's `serialize` method.
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        createRecord: function(store, type, snapshot) {
          var data = this.serialize(snapshot, { includeId: true });
          var url = `/${type.modelName}`;
           // ...
        }
      });
      ```
       @method serialize
      @param {DS.Snapshot} snapshot
      @param {Object}   options
      @return {Object} serialized snapshot
    */
    serialize: function serialize(snapshot, options) {
      return get(snapshot.record, 'store').serializerFor(snapshot.modelName).serialize(snapshot, options);
    },

    /**
      Implement this method in a subclass to handle the creation of
      new records.
       Serializes the record and sends it to the server.
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        createRecord: function(store, type, snapshot) {
          var data = this.serialize(snapshot, { includeId: true });
           return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.ajax({
              type: 'POST',
              url: `/${type.modelName}`,
              dataType: 'json',
              data: data
            }).then(function(data) {
              Ember.run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              Ember.run(null, reject, jqXHR);
            });
          });
        }
      });
      ```
       @method createRecord
      @param {DS.Store} store
      @param {DS.Model} type   the DS.Model class of the record
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    createRecord: null,

    /**
      Implement this method in a subclass to handle the updating of
      a record.
       Serializes the record update and sends it to the server.
       The updateRecord method is expected to return a promise that will
      resolve with the serialized record. This allows the backend to
      inform the Ember Data store the current state of this record after
      the update. If it is not possible to return a serialized record
      the updateRecord promise can also resolve with `undefined` and the
      Ember Data store will assume all of the updates were successfully
      applied on the backend.
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        updateRecord: function(store, type, snapshot) {
          var data = this.serialize(snapshot, { includeId: true });
          var id = snapshot.id;
           return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.ajax({
              type: 'PUT',
              url: `/${type.modelName}/${id}`,
              dataType: 'json',
              data: data
            }).then(function(data) {
              Ember.run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              Ember.run(null, reject, jqXHR);
            });
          });
        }
      });
      ```
       @method updateRecord
      @param {DS.Store} store
      @param {DS.Model} type   the DS.Model class of the record
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    updateRecord: null,

    /**
      Implement this method in a subclass to handle the deletion of
      a record.
       Sends a delete request for the record to the server.
       Example
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        deleteRecord: function(store, type, snapshot) {
          var data = this.serialize(snapshot, { includeId: true });
          var id = snapshot.id;
           return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.ajax({
              type: 'DELETE',
              url: `/${type.modelName}/${id}`,
              dataType: 'json',
              data: data
            }).then(function(data) {
              Ember.run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              Ember.run(null, reject, jqXHR);
            });
          });
        }
      });
      ```
       @method deleteRecord
      @param {DS.Store} store
      @param {DS.Model} type   the DS.Model class of the record
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    deleteRecord: null,

    /**
      By default the store will try to coalesce all `fetchRecord` calls within the same runloop
      into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.
      You can opt out of this behaviour by either not implementing the findMany hook or by setting
      coalesceFindRequests to false.
       @property coalesceFindRequests
      @type {boolean}
    */
    coalesceFindRequests: true,

    /**
      The store will call `findMany` instead of multiple `findRecord`
      requests to find multiple records at once if coalesceFindRequests
      is true.
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.Adapter.extend({
        findMany(store, type, ids, snapshots) {
          return new Ember.RSVP.Promise(function(resolve, reject) {
            Ember.$.ajax({
              type: 'GET',
              url: `/${type.modelName}/`,
              dataType: 'json',
              data: { filter: { id: ids.join(',') } }
            }).then(function(data) {
              Ember.run(null, resolve, data);
            }, function(jqXHR) {
              jqXHR.then = null; // tame jQuery's ill mannered promises
              Ember.run(null, reject, jqXHR);
            });
          });
        }
      });
      ```
       @method findMany
      @param {DS.Store} store
      @param {DS.Model} type   the DS.Model class of the records
      @param {Array}    ids
      @param {Array} snapshots
      @return {Promise} promise
    */
    findMany: null,

    /**
      Organize records into groups, each of which is to be passed to separate
      calls to `findMany`.
       For example, if your api has nested URLs that depend on the parent, you will
      want to group records by their parent.
       The default implementation returns the records as a single group.
       @method groupRecordsForFindMany
      @param {DS.Store} store
      @param {Array} snapshots
      @return {Array}  an array of arrays of records, each of which is to be
                        loaded separately by `findMany`.
    */
    groupRecordsForFindMany: function groupRecordsForFindMany(store, snapshots) {
      return [snapshots];
    },

    /**
      This method is used by the store to determine if the store should
      reload a record from the adapter when a record is requested by
      `store.findRecord`.
       If this method returns `true`, the store will re-fetch a record from
      the adapter. If this method returns `false`, the store will resolve
      immediately using the cached record.
       For example, if you are building an events ticketing system, in which users
      can only reserve tickets for 20 minutes at a time, and want to ensure that
      in each route you have data that is no more than 20 minutes old you could
      write:
       ```javascript
      shouldReloadRecord: function(store, ticketSnapshot) {
        var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');
        if (timeDiff > 20) {
          return true;
        } else {
          return false;
        }
      }
      ```
       This method would ensure that whenever you do `store.findRecord('ticket',
      id)` you will always get a ticket that is no more than 20 minutes old. In
      case the cached version is more than 20 minutes old, `findRecord` will not
      resolve until you fetched the latest version.
       By default this hook returns `false`, as most UIs should not block user
      interactions while waiting on data update.
       Note that, with default settings, `shouldBackgroundReloadRecord` will always
      re-fetch the records in the background even if `shouldReloadRecord` returns
      `false`. You can override `shouldBackgroundReloadRecord` if this does not
      suit your use case.
       @since 1.13.0
      @method shouldReloadRecord
      @param {DS.Store} store
      @param {DS.Snapshot} snapshot
      @return {Boolean}
    */
    shouldReloadRecord: function shouldReloadRecord(store, snapshot) {
      return false;
    },

    /**
      This method is used by the store to determine if the store should
      reload all records from the adapter when records are requested by
      `store.findAll`.
       If this method returns `true`, the store will re-fetch all records from
      the adapter. If this method returns `false`, the store will resolve
      immediately using the cached records.
       For example, if you are building an events ticketing system, in which users
      can only reserve tickets for 20 minutes at a time, and want to ensure that
      in each route you have data that is no more than 20 minutes old you could
      write:
       ```javascript
      shouldReloadAll: function(store, snapshotArray) {
        var snapshots = snapshotArray.snapshots();
         return snapshots.any(function(ticketSnapshot) {
          var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');
          if (timeDiff > 20) {
            return true;
          } else {
            return false;
          }
        });
      }
      ```
       This method would ensure that whenever you do `store.findAll('ticket')` you
      will always get a list of tickets that are no more than 20 minutes old. In
      case a cached version is more than 20 minutes old, `findAll` will not
      resolve until you fetched the latest versions.
       By default this methods returns `true` if the passed `snapshotRecordArray`
      is empty (meaning that there are no records locally available yet),
      otherwise it returns `false`.
       Note that, with default settings, `shouldBackgroundReloadAll` will always
      re-fetch all the records in the background even if `shouldReloadAll` returns
      `false`. You can override `shouldBackgroundReloadAll` if this does not suit
      your use case.
       @since 1.13.0
      @method shouldReloadAll
      @param {DS.Store} store
      @param {DS.SnapshotRecordArray} snapshotRecordArray
      @return {Boolean}
    */
    shouldReloadAll: function shouldReloadAll(store, snapshotRecordArray) {
      return !snapshotRecordArray.length;
    },

    /**
      This method is used by the store to determine if the store should
      reload a record after the `store.findRecord` method resolves a
      cached record.
       This method is *only* checked by the store when the store is
      returning a cached record.
       If this method returns `true` the store will re-fetch a record from
      the adapter.
       For example, if you do not want to fetch complex data over a mobile
      connection, or if the network is down, you can implement
      `shouldBackgroundReloadRecord` as follows:
       ```javascript
      shouldBackgroundReloadRecord: function(store, snapshot) {
        var connection = window.navigator.connection;
        if (connection === 'cellular' || connection === 'none') {
          return false;
        } else {
          return true;
        }
      }
      ```
       By default this hook returns `true` so the data for the record is updated
      in the background.
       @since 1.13.0
      @method shouldBackgroundReloadRecord
      @param {DS.Store} store
      @param {DS.Snapshot} snapshot
      @return {Boolean}
    */
    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord(store, snapshot) {
      return true;
    },

    /**
      This method is used by the store to determine if the store should
      reload a record array after the `store.findAll` method resolves
      with a cached record array.
       This method is *only* checked by the store when the store is
      returning a cached record array.
       If this method returns `true` the store will re-fetch all records
      from the adapter.
       For example, if you do not want to fetch complex data over a mobile
      connection, or if the network is down, you can implement
      `shouldBackgroundReloadAll` as follows:
       ```javascript
      shouldBackgroundReloadAll: function(store, snapshotArray) {
        var connection = window.navigator.connection;
        if (connection === 'cellular' || connection === 'none') {
          return false;
        } else {
          return true;
        }
      }
      ```
       By default this method returns `true`, indicating that a background reload
      should always be triggered.
       @since 1.13.0
      @method shouldBackgroundReloadAll
      @param {DS.Store} store
      @param {DS.SnapshotRecordArray} snapshotRecordArray
      @return {Boolean}
    */
    shouldBackgroundReloadAll: function shouldBackgroundReloadAll(store, snapshotRecordArray) {
      return true;
    }
  });
});
define('ember-data/adapters/errors', ['exports', 'ember', 'ember-data/-private/debug', 'ember-data/-private/features'], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateFeatures) {
  'use strict';

  exports.AdapterError = AdapterError;
  exports.errorsHashToArray = errorsHashToArray;
  exports.errorsArrayToHash = errorsArrayToHash;

  var EmberError = _ember['default'].Error;

  var SOURCE_POINTER_REGEXP = /^\/?data\/(attributes|relationships)\/(.*)/;
  var SOURCE_POINTER_PRIMARY_REGEXP = /^\/?data/;
  var PRIMARY_ATTRIBUTE_KEY = 'base';

  /**
    @class AdapterError
    @namespace DS
  */

  function AdapterError(errors) {
    var message = arguments.length <= 1 || arguments[1] === undefined ? 'Adapter operation failed' : arguments[1];

    this.isAdapterError = true;
    EmberError.call(this, message);

    this.errors = errors || [{
      title: 'Adapter Error',
      detail: message
    }];
  }

  var extendedErrorsEnabled = false;
  if (false) {
    extendedErrorsEnabled = true;
  }

  function extendFn(ErrorClass) {
    return function () {
      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var defaultMessage = _ref.message;

      return extend(ErrorClass, defaultMessage);
    };
  }

  function extend(ParentErrorClass, defaultMessage) {
    var ErrorClass = function ErrorClass(errors, message) {
      (0, _emberDataPrivateDebug.assert)('`AdapterError` expects json-api formatted errors array.', Array.isArray(errors || []));
      ParentErrorClass.call(this, errors, message || defaultMessage);
    };
    ErrorClass.prototype = Object.create(ParentErrorClass.prototype);

    if (extendedErrorsEnabled) {
      ErrorClass.extend = extendFn(ErrorClass);
    }

    return ErrorClass;
  }

  AdapterError.prototype = Object.create(EmberError.prototype);

  if (extendedErrorsEnabled) {
    AdapterError.extend = extendFn(AdapterError);
  }

  /**
    A `DS.InvalidError` is used by an adapter to signal the external API
    was unable to process a request because the content was not
    semantically correct or meaningful per the API. Usually this means a
    record failed some form of server side validation. When a promise
    from an adapter is rejected with a `DS.InvalidError` the record will
    transition to the `invalid` state and the errors will be set to the
    `errors` property on the record.
  
    For Ember Data to correctly map errors to their corresponding
    properties on the model, Ember Data expects each error to be
    a valid json-api error object with a `source/pointer` that matches
    the property name. For example if you had a Post model that
    looked like this.
  
    ```app/models/post.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      title: DS.attr('string'),
      content: DS.attr('string')
    });
    ```
  
    To show an error from the server related to the `title` and
    `content` properties your adapter could return a promise that
    rejects with a `DS.InvalidError` object that looks like this:
  
    ```app/adapters/post.js
    import Ember from 'ember';
    import DS from 'ember-data';
  
    export default DS.RESTAdapter.extend({
      updateRecord: function() {
        // Fictional adapter that always rejects
        return Ember.RSVP.reject(new DS.InvalidError([
          {
            detail: 'Must be unique',
            source: { pointer: '/data/attributes/title' }
          },
          {
            detail: 'Must not be blank',
            source: { pointer: '/data/attributes/content'}
          }
        ]));
      }
    });
    ```
  
    Your backend may use different property names for your records the
    store will attempt extract and normalize the errors using the
    serializer's `extractErrors` method before the errors get added to
    the the model. As a result, it is safe for the `InvalidError` to
    wrap the error payload unaltered.
  
    @class InvalidError
    @namespace DS
  */
  var InvalidError = extend(AdapterError, 'The adapter rejected the commit because it was invalid');

  exports.InvalidError = InvalidError;

  /**
    @class TimeoutError
    @namespace DS
  */
  var TimeoutError = extend(AdapterError, 'The adapter operation timed out');

  exports.TimeoutError = TimeoutError;

  /**
    @class AbortError
    @namespace DS
  */
  var AbortError = extend(AdapterError, 'The adapter operation was aborted');

  exports.AbortError = AbortError;

  /**
    @class UnauthorizedError
    @namespace DS
  */
  var UnauthorizedError = extendedErrorsEnabled ? extend(AdapterError, 'The adapter operation is unauthorized') : null;

  exports.UnauthorizedError = UnauthorizedError;

  /**
    @class ForbiddenError
    @namespace DS
  */
  var ForbiddenError = extendedErrorsEnabled ? extend(AdapterError, 'The adapter operation is forbidden') : null;

  exports.ForbiddenError = ForbiddenError;

  /**
    @class NotFoundError
    @namespace DS
  */
  var NotFoundError = extendedErrorsEnabled ? extend(AdapterError, 'The adapter could not find the resource') : null;

  exports.NotFoundError = NotFoundError;

  /**
    @class ConflictError
    @namespace DS
  */
  var ConflictError = extendedErrorsEnabled ? extend(AdapterError, 'The adapter operation failed due to a conflict') : null;

  exports.ConflictError = ConflictError;

  /**
    @class ServerError
    @namespace DS
  */
  var ServerError = extendedErrorsEnabled ? extend(AdapterError, 'The adapter operation failed due to a server error') : null;

  exports.ServerError = ServerError;

  /**
    @method errorsHashToArray
    @private
  */

  function errorsHashToArray(errors) {
    var out = [];

    if (_ember['default'].isPresent(errors)) {
      Object.keys(errors).forEach(function (key) {
        var messages = _ember['default'].makeArray(errors[key]);
        for (var i = 0; i < messages.length; i++) {
          var title = 'Invalid Attribute';
          var pointer = '/data/attributes/' + key;
          if (key === PRIMARY_ATTRIBUTE_KEY) {
            title = 'Invalid Document';
            pointer = '/data';
          }
          out.push({
            title: title,
            detail: messages[i],
            source: {
              pointer: pointer
            }
          });
        }
      });
    }

    return out;
  }

  /**
    @method errorsArrayToHash
    @private
  */

  function errorsArrayToHash(errors) {
    var out = {};

    if (_ember['default'].isPresent(errors)) {
      errors.forEach(function (error) {
        if (error.source && error.source.pointer) {
          var key = error.source.pointer.match(SOURCE_POINTER_REGEXP);

          if (key) {
            key = key[2];
          } else if (error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP) !== -1) {
            key = PRIMARY_ATTRIBUTE_KEY;
          }

          if (key) {
            out[key] = out[key] || [];
            out[key].push(error.detail || error.title);
          }
        }
      });
    }

    return out;
  }
});
define('ember-data/adapters/json-api', ['exports', 'ember', 'ember-data/adapters/rest', 'ember-data/-private/features', 'ember-data/-private/debug'], function (exports, _ember, _emberDataAdaptersRest, _emberDataPrivateFeatures, _emberDataPrivateDebug) {
  /**
    @module ember-data
  */

  'use strict';

  /**
    @since 1.13.0
    @class JSONAPIAdapter
    @constructor
    @namespace DS
    @extends DS.RESTAdapter
  */
  var JSONAPIAdapter = _emberDataAdaptersRest['default'].extend({
    defaultSerializer: '-json-api',

    /**
      @method ajaxOptions
      @private
      @param {String} url
      @param {String} type The request type GET, POST, PUT, DELETE etc.
      @param {Object} options
      @return {Object}
    */
    ajaxOptions: function ajaxOptions(url, type, options) {
      var hash = this._super.apply(this, arguments);

      if (hash.contentType) {
        hash.contentType = 'application/vnd.api+json';
      }

      var beforeSend = hash.beforeSend;
      hash.beforeSend = function (xhr) {
        xhr.setRequestHeader('Accept', 'application/vnd.api+json');
        if (beforeSend) {
          beforeSend(xhr);
        }
      };

      return hash;
    },

    /**
      By default the JSONAPIAdapter will send each find request coming from a `store.find`
      or from accessing a relationship separately to the server. If your server supports passing
      ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests
      within a single runloop.
       For example, if you have an initial payload of:
       ```javascript
      {
        post: {
          id: 1,
          comments: [1, 2]
        }
      }
      ```
       By default calling `post.get('comments')` will trigger the following requests(assuming the
      comments haven't been loaded before):
       ```
      GET /comments/1
      GET /comments/2
      ```
       If you set coalesceFindRequests to `true` it will instead trigger the following request:
       ```
      GET /comments?filter[id]=1,2
      ```
       Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`
      relationships accessed within the same runloop. If you set `coalesceFindRequests: true`
       ```javascript
      store.findRecord('comment', 1);
      store.findRecord('comment', 2);
      ```
       will also send a request to: `GET /comments?filter[id]=1,2`
       Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app
      `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.
       @property coalesceFindRequests
      @type {boolean}
    */
    coalesceFindRequests: false,

    /**
      @method findMany
      @param {DS.Store} store
      @param {DS.Model} type
      @param {Array} ids
      @param {Array} snapshots
      @return {Promise} promise
    */
    findMany: function findMany(store, type, ids, snapshots) {
      if (false && !this._hasCustomizedAjax()) {
        return this._super.apply(this, arguments);
      } else {
        var url = this.buildURL(type.modelName, ids, snapshots, 'findMany');
        return this.ajax(url, 'GET', { data: { filter: { id: ids.join(',') } } });
      }
    },

    /**
      @method pathForType
      @param {String} modelName
      @return {String} path
    **/
    pathForType: function pathForType(modelName) {
      var dasherized = _ember['default'].String.dasherize(modelName);
      return _ember['default'].String.pluralize(dasherized);
    },

    // TODO: Remove this once we have a better way to override HTTP verbs.
    /**
      @method updateRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    updateRecord: function updateRecord(store, type, snapshot) {
      if (false && !this._hasCustomizedAjax()) {
        return this._super.apply(this, arguments);
      } else {
        var data = {};
        var serializer = store.serializerFor(type.modelName);

        serializer.serializeIntoHash(data, type, snapshot, { includeId: true });

        var id = snapshot.id;
        var url = this.buildURL(type.modelName, id, snapshot, 'updateRecord');

        return this.ajax(url, 'PATCH', { data: data });
      }
    },

    _hasCustomizedAjax: function _hasCustomizedAjax() {
      if (this.ajax !== JSONAPIAdapter.prototype.ajax) {
        (0, _emberDataPrivateDebug.deprecate)('JSONAPIAdapter#ajax has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {
          id: 'ds.json-api-adapter.ajax',
          until: '3.0.0'
        });
        return true;
      }

      if (this.ajaxOptions !== JSONAPIAdapter.prototype.ajaxOptions) {
        (0, _emberDataPrivateDebug.deprecate)('JSONAPIAdapterr#ajaxOptions has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {
          id: 'ds.json-api-adapter.ajax-options',
          until: '3.0.0'
        });
        return true;
      }

      return false;
    }
  });

  if (false) {

    JSONAPIAdapter.reopen({

      methodForRequest: function methodForRequest(params) {
        if (params.requestType === 'updateRecord') {
          return 'PATCH';
        }

        return this._super.apply(this, arguments);
      },

      dataForRequest: function dataForRequest(params) {
        var requestType = params.requestType;
        var ids = params.ids;

        if (requestType === 'findMany') {
          return {
            filter: { id: ids.join(',') }
          };
        }

        if (requestType === 'updateRecord') {
          var store = params.store;
          var type = params.type;
          var snapshot = params.snapshot;

          var data = {};
          var serializer = store.serializerFor(type.modelName);

          serializer.serializeIntoHash(data, type, snapshot, { includeId: true });

          return data;
        }

        return this._super.apply(this, arguments);
      },

      headersForRequest: function headersForRequest() {
        var headers = this._super.apply(this, arguments) || {};

        headers['Accept'] = 'application/vnd.api+json';

        return headers;
      },

      _requestToJQueryAjaxHash: function _requestToJQueryAjaxHash() {
        var hash = this._super.apply(this, arguments);

        if (hash.contentType) {
          hash.contentType = 'application/vnd.api+json';
        }

        return hash;
      }

    });
  }

  exports['default'] = JSONAPIAdapter;
});
define('ember-data/adapters/rest', ['exports', 'ember', 'ember-data/adapter', 'ember-data/adapters/errors', 'ember-data/-private/adapters/build-url-mixin', 'ember-data/-private/features', 'ember-data/-private/debug', 'ember-data/-private/utils/parse-response-headers'], function (exports, _ember, _emberDataAdapter, _emberDataAdaptersErrors, _emberDataPrivateAdaptersBuildUrlMixin, _emberDataPrivateFeatures, _emberDataPrivateDebug, _emberDataPrivateUtilsParseResponseHeaders) {
  /**
    @module ember-data
  */

  'use strict';

  var MapWithDefault = _ember['default'].MapWithDefault;
  var get = _ember['default'].get;

  var Promise = _ember['default'].RSVP.Promise;

  /**
    The REST adapter allows your store to communicate with an HTTP server by
    transmitting JSON via XHR. Most Ember.js apps that consume a JSON API
    should use the REST adapter.
  
    This adapter is designed around the idea that the JSON exchanged with
    the server should be conventional.
  
    ## Success and failure
  
    The REST adapter will consider a success any response with a status code
    of the 2xx family ("Success"), as well as 304 ("Not Modified"). Any other
    status code will be considered a failure.
  
    On success, the request promise will be resolved with the full response
    payload.
  
    Failed responses with status code 422 ("Unprocessable Entity") will be
    considered "invalid". The response will be discarded, except for the
    `errors` key. The request promise will be rejected with a `DS.InvalidError`.
    This error object will encapsulate the saved `errors` value.
  
    Any other status codes will be treated as an "adapter error". The request
    promise will be rejected, similarly to the "invalid" case, but with
    an instance of `DS.AdapterError` instead.
  
    ## JSON Structure
  
    The REST adapter expects the JSON returned from your server to follow
    these conventions.
  
    ### Object Root
  
    The JSON payload should be an object that contains the record inside a
    root property. For example, in response to a `GET` request for
    `/posts/1`, the JSON should look like this:
  
    ```js
    {
      "post": {
        "id": 1,
        "title": "I'm Running to Reform the W3C's Tag",
        "author": "Yehuda Katz"
      }
    }
    ```
  
    Similarly, in response to a `GET` request for `/posts`, the JSON should
    look like this:
  
    ```js
    {
      "posts": [
        {
          "id": 1,
          "title": "I'm Running to Reform the W3C's Tag",
          "author": "Yehuda Katz"
        },
        {
          "id": 2,
          "title": "Rails is omakase",
          "author": "D2H"
        }
      ]
    }
    ```
  
    Note that the object root can be pluralized for both a single-object response
    and an array response: the REST adapter is not strict on this. Further, if the
    HTTP server responds to a `GET` request to `/posts/1` (e.g. the response to a
    `findRecord` query) with more than one object in the array, Ember Data will
    only display the object with the matching ID.
  
    ### Conventional Names
  
    Attribute names in your JSON payload should be the camelCased versions of
    the attributes in your Ember.js models.
  
    For example, if you have a `Person` model:
  
    ```app/models/person.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      firstName: DS.attr('string'),
      lastName: DS.attr('string'),
      occupation: DS.attr('string')
    });
    ```
  
    The JSON returned should look like this:
  
    ```js
    {
      "person": {
        "id": 5,
        "firstName": "Barack",
        "lastName": "Obama",
        "occupation": "President"
      }
    }
    ```
  
    ### Errors
  
    If a response is considered a failure, the JSON payload is expected to include
    a top-level key `errors`, detailing any specific issues. For example:
  
    ```js
    {
      "errors": {
        "msg": "Something went wrong"
      }
    }
    ```
  
    This adapter does not make any assumptions as to the format of the `errors`
    object. It will simply be passed along as is, wrapped in an instance
    of `DS.InvalidError` or `DS.AdapterError`. The serializer can interpret it
    afterwards.
  
    ## Customization
  
    ### Endpoint path customization
  
    Endpoint paths can be prefixed with a `namespace` by setting the namespace
    property on the adapter:
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.RESTAdapter.extend({
      namespace: 'api/1'
    });
    ```
    Requests for the `Person` model would now target `/api/1/people/1`.
  
    ### Host customization
  
    An adapter can target other hosts by setting the `host` property.
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.RESTAdapter.extend({
      host: 'https://api.example.com'
    });
    ```
  
    ### Headers customization
  
    Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary
    headers can be set as key/value pairs on the `RESTAdapter`'s `headers`
    object and Ember Data will send them along with each ajax request.
  
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.RESTAdapter.extend({
      headers: {
        "API_KEY": "secret key",
        "ANOTHER_HEADER": "Some header value"
      }
    });
    ```
  
    `headers` can also be used as a computed property to support dynamic
    headers. In the example below, the `session` object has been
    injected into an adapter by Ember's container.
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.RESTAdapter.extend({
      headers: Ember.computed('session.authToken', function() {
        return {
          "API_KEY": this.get("session.authToken"),
          "ANOTHER_HEADER": "Some header value"
        };
      })
    });
    ```
  
    In some cases, your dynamic headers may require data from some
    object outside of Ember's observer system (for example
    `document.cookie`). You can use the
    [volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)
    function to set the property into a non-cached mode causing the headers to
    be recomputed with every request.
  
    ```app/adapters/application.js
    import DS from 'ember-data';
  
    export default DS.RESTAdapter.extend({
      headers: Ember.computed(function() {
        return {
          "API_KEY": Ember.get(document.cookie.match(/apiKey\=([^;]*)/), "1"),
          "ANOTHER_HEADER": "Some header value"
        };
      }).volatile()
    });
    ```
  
    @class RESTAdapter
    @constructor
    @namespace DS
    @extends DS.Adapter
    @uses DS.BuildURLMixin
  */
  var RESTAdapter = _emberDataAdapter['default'].extend(_emberDataPrivateAdaptersBuildUrlMixin['default'], {
    defaultSerializer: '-rest',

    /**
      By default, the RESTAdapter will send the query params sorted alphabetically to the
      server.
       For example:
       ```js
        store.query('posts', { sort: 'price', category: 'pets' });
      ```
       will generate a requests like this `/posts?category=pets&sort=price`, even if the
      parameters were specified in a different order.
       That way the generated URL will be deterministic and that simplifies caching mechanisms
      in the backend.
       Setting `sortQueryParams` to a falsey value will respect the original order.
       In case you want to sort the query parameters with a different criteria, set
      `sortQueryParams` to your custom sort function.
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.RESTAdapter.extend({
        sortQueryParams: function(params) {
          var sortedKeys = Object.keys(params).sort().reverse();
          var len = sortedKeys.length, newParams = {};
           for (var i = 0; i < len; i++) {
            newParams[sortedKeys[i]] = params[sortedKeys[i]];
          }
          return newParams;
        }
      });
      ```
       @method sortQueryParams
      @param {Object} obj
      @return {Object}
    */
    sortQueryParams: function sortQueryParams(obj) {
      var keys = Object.keys(obj);
      var len = keys.length;
      if (len < 2) {
        return obj;
      }
      var newQueryParams = {};
      var sortedKeys = keys.sort();

      for (var i = 0; i < len; i++) {
        newQueryParams[sortedKeys[i]] = obj[sortedKeys[i]];
      }
      return newQueryParams;
    },

    /**
      By default the RESTAdapter will send each find request coming from a `store.find`
      or from accessing a relationship separately to the server. If your server supports passing
      ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests
      within a single runloop.
       For example, if you have an initial payload of:
       ```javascript
      {
        post: {
          id: 1,
          comments: [1, 2]
        }
      }
      ```
       By default calling `post.get('comments')` will trigger the following requests(assuming the
      comments haven't been loaded before):
       ```
      GET /comments/1
      GET /comments/2
      ```
       If you set coalesceFindRequests to `true` it will instead trigger the following request:
       ```
      GET /comments?ids[]=1&ids[]=2
      ```
       Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`
      relationships accessed within the same runloop. If you set `coalesceFindRequests: true`
       ```javascript
      store.findRecord('comment', 1);
      store.findRecord('comment', 2);
      ```
       will also send a request to: `GET /comments?ids[]=1&ids[]=2`
       Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app
      `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.
       @property coalesceFindRequests
      @type {boolean}
    */
    coalesceFindRequests: false,

    /**
      Endpoint paths can be prefixed with a `namespace` by setting the namespace
      property on the adapter:
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.RESTAdapter.extend({
        namespace: 'api/1'
      });
      ```
       Requests for the `Post` model would now target `/api/1/post/`.
       @property namespace
      @type {String}
    */

    /**
      An adapter can target other hosts by setting the `host` property.
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.RESTAdapter.extend({
        host: 'https://api.example.com'
      });
      ```
       Requests for the `Post` model would now target `https://api.example.com/post/`.
       @property host
      @type {String}
    */

    /**
      Some APIs require HTTP headers, e.g. to provide an API
      key. Arbitrary headers can be set as key/value pairs on the
      `RESTAdapter`'s `headers` object and Ember Data will send them
      along with each ajax request. For dynamic headers see [headers
      customization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).
       ```app/adapters/application.js
      import DS from 'ember-data';
       export default DS.RESTAdapter.extend({
        headers: {
          "API_KEY": "secret key",
          "ANOTHER_HEADER": "Some header value"
        }
      });
      ```
       @property headers
      @type {Object}
     */

    /**
      Called by the store in order to fetch the JSON for a given
      type and ID.
       The `findRecord` method makes an Ajax request to a URL computed by
      `buildURL`, and returns a promise for the resulting payload.
       This method performs an HTTP `GET` request with the id provided as part of the query string.
       @since 1.13.0
      @method findRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {String} id
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    findRecord: function findRecord(store, type, id, snapshot) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, id: id, snapshot: snapshot,
          requestType: 'findRecord'
        });

        return this._makeRequest(request);
      } else {
        var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');
        var query = this.buildQuery(snapshot);

        return this.ajax(url, 'GET', { data: query });
      }
    },

    /**
      Called by the store in order to fetch a JSON array for all
      of the records for a given type.
       The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
      promise for the resulting payload.
       @method findAll
      @param {DS.Store} store
      @param {DS.Model} type
      @param {String} sinceToken
      @param {DS.SnapshotRecordArray} snapshotRecordArray
      @return {Promise} promise
    */
    findAll: function findAll(store, type, sinceToken, snapshotRecordArray) {
      var query = this.buildQuery(snapshotRecordArray);

      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, sinceToken: sinceToken, query: query,
          snapshots: snapshotRecordArray,
          requestType: 'findAll'
        });

        return this._makeRequest(request);
      } else {
        var url = this.buildURL(type.modelName, null, snapshotRecordArray, 'findAll');

        if (sinceToken) {
          query.since = sinceToken;
        }

        return this.ajax(url, 'GET', { data: query });
      }
    },

    /**
      Called by the store in order to fetch a JSON array for
      the records that match a particular query.
       The `query` method makes an Ajax (HTTP GET) request to a URL
      computed by `buildURL`, and returns a promise for the resulting
      payload.
       The `query` argument is a simple JavaScript object that will be passed directly
      to the server as parameters.
       @method query
      @param {DS.Store} store
      @param {DS.Model} type
      @param {Object} query
      @return {Promise} promise
    */
    query: function query(store, type, _query) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, query: _query,
          requestType: 'query'
        });

        return this._makeRequest(request);
      } else {
        var url = this.buildURL(type.modelName, null, null, 'query', _query);

        if (this.sortQueryParams) {
          _query = this.sortQueryParams(_query);
        }

        return this.ajax(url, 'GET', { data: _query });
      }
    },

    /**
      Called by the store in order to fetch a JSON object for
      the record that matches a particular query.
       The `queryRecord` method makes an Ajax (HTTP GET) request to a URL
      computed by `buildURL`, and returns a promise for the resulting
      payload.
       The `query` argument is a simple JavaScript object that will be passed directly
      to the server as parameters.
       @since 1.13.0
      @method queryRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {Object} query
      @return {Promise} promise
    */
    queryRecord: function queryRecord(store, type, query) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, query: query,
          requestType: 'queryRecord'
        });

        return this._makeRequest(request);
      } else {
        var url = this.buildURL(type.modelName, null, null, 'queryRecord', query);

        if (this.sortQueryParams) {
          query = this.sortQueryParams(query);
        }

        return this.ajax(url, 'GET', { data: query });
      }
    },

    /**
      Called by the store in order to fetch several records together if `coalesceFindRequests` is true
       For example, if the original payload looks like:
       ```js
      {
        "id": 1,
        "title": "Rails is omakase",
        "comments": [ 1, 2, 3 ]
      }
      ```
       The IDs will be passed as a URL-encoded Array of IDs, in this form:
       ```
      ids[]=1&ids[]=2&ids[]=3
      ```
       Many servers, such as Rails and PHP, will automatically convert this URL-encoded array
      into an Array for you on the server-side. If you want to encode the
      IDs, differently, just override this (one-line) method.
       The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
      promise for the resulting payload.
       @method findMany
      @param {DS.Store} store
      @param {DS.Model} type
      @param {Array} ids
      @param {Array} snapshots
      @return {Promise} promise
    */
    findMany: function findMany(store, type, ids, snapshots) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, ids: ids, snapshots: snapshots,
          requestType: 'findMany'
        });

        return this._makeRequest(request);
      } else {
        var url = this.buildURL(type.modelName, ids, snapshots, 'findMany');
        return this.ajax(url, 'GET', { data: { ids: ids } });
      }
    },

    /**
      Called by the store in order to fetch a JSON array for
      the unloaded records in a has-many relationship that were originally
      specified as a URL (inside of `links`).
       For example, if your original payload looks like this:
       ```js
      {
        "post": {
          "id": 1,
          "title": "Rails is omakase",
          "links": { "comments": "/posts/1/comments" }
        }
      }
      ```
       This method will be called with the parent record and `/posts/1/comments`.
       The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.
       The format of your `links` value will influence the final request URL via the `urlPrefix` method:
       * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.
       * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.
       * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.
       @method findHasMany
      @param {DS.Store} store
      @param {DS.Snapshot} snapshot
      @param {String} url
      @return {Promise} promise
    */
    findHasMany: function findHasMany(store, snapshot, url, relationship) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, snapshot: snapshot, url: url, relationship: relationship,
          requestType: 'findHasMany'
        });

        return this._makeRequest(request);
      } else {
        var id = snapshot.id;
        var type = snapshot.modelName;

        url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findHasMany'));

        return this.ajax(url, 'GET');
      }
    },

    /**
      Called by the store in order to fetch the JSON for the unloaded record in a
      belongs-to relationship that was originally specified as a URL (inside of
      `links`).
       For example, if your original payload looks like this:
       ```js
      {
        "person": {
          "id": 1,
          "name": "Tom Dale",
          "links": { "group": "/people/1/group" }
        }
      }
      ```
       This method will be called with the parent record and `/people/1/group`.
       The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.
       The format of your `links` value will influence the final request URL via the `urlPrefix` method:
       * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.
       * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.
       * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.
       @method findBelongsTo
      @param {DS.Store} store
      @param {DS.Snapshot} snapshot
      @param {String} url
      @return {Promise} promise
    */
    findBelongsTo: function findBelongsTo(store, snapshot, url, relationship) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, snapshot: snapshot, url: url, relationship: relationship,
          requestType: 'findBelongsTo'
        });

        return this._makeRequest(request);
      } else {
        var id = snapshot.id;
        var type = snapshot.modelName;

        url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findBelongsTo'));
        return this.ajax(url, 'GET');
      }
    },

    /**
      Called by the store when a newly created record is
      saved via the `save` method on a model record instance.
       The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
      to a URL computed by `buildURL`.
       See `serialize` for information on how to customize the serialized form
      of a record.
       @method createRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    createRecord: function createRecord(store, type, snapshot) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, snapshot: snapshot,
          requestType: 'createRecord'
        });

        return this._makeRequest(request);
      } else {
        var data = {};
        var serializer = store.serializerFor(type.modelName);
        var url = this.buildURL(type.modelName, null, snapshot, 'createRecord');

        serializer.serializeIntoHash(data, type, snapshot, { includeId: true });

        return this.ajax(url, "POST", { data: data });
      }
    },

    /**
      Called by the store when an existing record is saved
      via the `save` method on a model record instance.
       The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
      to a URL computed by `buildURL`.
       See `serialize` for information on how to customize the serialized form
      of a record.
       @method updateRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    updateRecord: function updateRecord(store, type, snapshot) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, snapshot: snapshot,
          requestType: 'updateRecord'
        });

        return this._makeRequest(request);
      } else {
        var data = {};
        var serializer = store.serializerFor(type.modelName);

        serializer.serializeIntoHash(data, type, snapshot);

        var id = snapshot.id;
        var url = this.buildURL(type.modelName, id, snapshot, 'updateRecord');

        return this.ajax(url, "PUT", { data: data });
      }
    },

    /**
      Called by the store when a record is deleted.
       The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.
       @method deleteRecord
      @param {DS.Store} store
      @param {DS.Model} type
      @param {DS.Snapshot} snapshot
      @return {Promise} promise
    */
    deleteRecord: function deleteRecord(store, type, snapshot) {
      if (false && !this._hasCustomizedAjax()) {
        var request = this._requestFor({
          store: store, type: type, snapshot: snapshot,
          requestType: 'deleteRecord'
        });

        return this._makeRequest(request);
      } else {
        var id = snapshot.id;

        return this.ajax(this.buildURL(type.modelName, id, snapshot, 'deleteRecord'), "DELETE");
      }
    },

    _stripIDFromURL: function _stripIDFromURL(store, snapshot) {
      var url = this.buildURL(snapshot.modelName, snapshot.id, snapshot);

      var expandedURL = url.split('/');
      // Case when the url is of the format ...something/:id
      // We are decodeURIComponent-ing the lastSegment because if it represents
      // the id, it has been encodeURIComponent-ified within `buildURL`. If we
      // don't do this, then records with id having special characters are not
      // coalesced correctly (see GH #4190 for the reported bug)
      var lastSegment = expandedURL[expandedURL.length - 1];
      var id = snapshot.id;
      if (decodeURIComponent(lastSegment) === id) {
        expandedURL[expandedURL.length - 1] = "";
      } else if (endsWith(lastSegment, '?id=' + id)) {
        //Case when the url is of the format ...something?id=:id
        expandedURL[expandedURL.length - 1] = lastSegment.substring(0, lastSegment.length - id.length - 1);
      }

      return expandedURL.join('/');
    },

    // http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
    maxURLLength: 2048,

    /**
      Organize records into groups, each of which is to be passed to separate
      calls to `findMany`.
       This implementation groups together records that have the same base URL but
      differing ids. For example `/comments/1` and `/comments/2` will be grouped together
      because we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`
       It also supports urls where ids are passed as a query param, such as `/comments?id=1`
      but not those where there is more than 1 query param such as `/comments?id=2&name=David`
      Currently only the query param of `id` is supported. If you need to support others, please
      override this or the `_stripIDFromURL` method.
       It does not group records that have differing base urls, such as for example: `/posts/1/comments/2`
      and `/posts/2/comments/3`
       @method groupRecordsForFindMany
      @param {DS.Store} store
      @param {Array} snapshots
      @return {Array}  an array of arrays of records, each of which is to be
                        loaded separately by `findMany`.
    */
    groupRecordsForFindMany: function groupRecordsForFindMany(store, snapshots) {
      var groups = MapWithDefault.create({ defaultValue: function defaultValue() {
          return [];
        } });
      var adapter = this;
      var maxURLLength = this.maxURLLength;

      snapshots.forEach(function (snapshot) {
        var baseUrl = adapter._stripIDFromURL(store, snapshot);
        groups.get(baseUrl).push(snapshot);
      });

      function splitGroupToFitInUrl(group, maxURLLength, paramNameLength) {
        var baseUrl = adapter._stripIDFromURL(store, group[0]);
        var idsSize = 0;
        var splitGroups = [[]];

        group.forEach(function (snapshot) {
          var additionalLength = encodeURIComponent(snapshot.id).length + paramNameLength;
          if (baseUrl.length + idsSize + additionalLength >= maxURLLength) {
            idsSize = 0;
            splitGroups.push([]);
          }

          idsSize += additionalLength;

          var lastGroupIndex = splitGroups.length - 1;
          splitGroups[lastGroupIndex].push(snapshot);
        });

        return splitGroups;
      }

      var groupsArray = [];
      groups.forEach(function (group, key) {
        var paramNameLength = '&ids%5B%5D='.length;
        var splitGroups = splitGroupToFitInUrl(group, maxURLLength, paramNameLength);

        splitGroups.forEach(function (splitGroup) {
          return groupsArray.push(splitGroup);
        });
      });

      return groupsArray;
    },

    /**
      Takes an ajax response, and returns the json payload or an error.
       By default this hook just returns the json payload passed to it.
      You might want to override it in two cases:
       1. Your API might return useful results in the response headers.
      Response headers are passed in as the second argument.
       2. Your API might return errors as successful responses with status code
      200 and an Errors text or object. You can return a `DS.InvalidError` or a
      `DS.AdapterError` (or a sub class) from this hook and it will automatically
      reject the promise and put your record into the invalid or error state.
       Returning a `DS.InvalidError` from this method will cause the
      record to transition into the `invalid` state and make the
      `errors` object available on the record. When returning an
      `DS.InvalidError` the store will attempt to normalize the error data
      returned from the server using the serializer's `extractErrors`
      method.
       @since 1.13.0
      @method handleResponse
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @param  {Object} requestData - the original request information
      @return {Object | DS.AdapterError} response
    */
    handleResponse: function handleResponse(status, headers, payload, requestData) {
      if (this.isSuccess(status, headers, payload)) {
        return payload;
      } else if (this.isInvalid(status, headers, payload)) {
        return new _emberDataAdaptersErrors.InvalidError(payload.errors);
      }

      var errors = this.normalizeErrorResponse(status, headers, payload);
      var detailedMessage = this.generatedDetailedMessage(status, headers, payload, requestData);

      if (false) {
        switch (status) {
          case 401:
            return new _emberDataAdaptersErrors.UnauthorizedError(errors, detailedMessage);
          case 403:
            return new _emberDataAdaptersErrors.ForbiddenError(errors, detailedMessage);
          case 404:
            return new _emberDataAdaptersErrors.NotFoundError(errors, detailedMessage);
          case 409:
            return new _emberDataAdaptersErrors.ConflictError(errors, detailedMessage);
          default:
            if (status >= 500) {
              return new _emberDataAdaptersErrors.ServerError(errors, detailedMessage);
            }
        }
      }

      return new _emberDataAdaptersErrors.AdapterError(errors, detailedMessage);
    },

    /**
      Default `handleResponse` implementation uses this hook to decide if the
      response is a success.
       @since 1.13.0
      @method isSuccess
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @return {Boolean}
    */
    isSuccess: function isSuccess(status, headers, payload) {
      return status >= 200 && status < 300 || status === 304;
    },

    /**
      Default `handleResponse` implementation uses this hook to decide if the
      response is a an invalid error.
       @since 1.13.0
      @method isInvalid
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @return {Boolean}
    */
    isInvalid: function isInvalid(status, headers, payload) {
      return status === 422;
    },

    /**
      Takes a URL, an HTTP method and a hash of data, and makes an
      HTTP request.
       When the server responds with a payload, Ember Data will call into `extractSingle`
      or `extractArray` (depending on whether the original query was for one record or
      many records).
       By default, `ajax` method has the following behavior:
       * It sets the response `dataType` to `"json"`
      * If the HTTP method is not `"GET"`, it sets the `Content-Type` to be
        `application/json; charset=utf-8`
      * If the HTTP method is not `"GET"`, it stringifies the data passed in. The
        data is the serialized record in the case of a save.
      * Registers success and failure handlers.
       @method ajax
      @private
      @param {String} url
      @param {String} type The request type GET, POST, PUT, DELETE etc.
      @param {Object} options
      @return {Promise} promise
    */
    ajax: function ajax(url, type, options) {
      var adapter = this;

      var requestData = {
        url: url,
        method: type
      };

      return new Promise(function (resolve, reject) {
        var hash = adapter.ajaxOptions(url, type, options);

        hash.success = function (payload, textStatus, jqXHR) {
          var response = ajaxSuccess(adapter, jqXHR, payload, requestData);
          _ember['default'].run.join(null, resolve, response);
        };

        hash.error = function (jqXHR, textStatus, errorThrown) {
          var responseData = {
            textStatus: textStatus,
            errorThrown: errorThrown
          };
          var error = ajaxError(adapter, jqXHR, requestData, responseData);
          _ember['default'].run.join(null, reject, error);
        };

        adapter._ajaxRequest(hash);
      }, 'DS: RESTAdapter#ajax ' + type + ' to ' + url);
    },

    /**
      @method _ajaxRequest
      @private
      @param {Object} options jQuery ajax options to be used for the ajax request
    */
    _ajaxRequest: function _ajaxRequest(options) {
      _ember['default'].$.ajax(options);
    },

    /**
      @method ajaxOptions
      @private
      @param {String} url
      @param {String} type The request type GET, POST, PUT, DELETE etc.
      @param {Object} options
      @return {Object}
    */
    ajaxOptions: function ajaxOptions(url, type, options) {
      var hash = options || {};
      hash.url = url;
      hash.type = type;
      hash.dataType = 'json';
      hash.context = this;

      if (hash.data && type !== 'GET') {
        hash.contentType = 'application/json; charset=utf-8';
        hash.data = JSON.stringify(hash.data);
      }

      var headers = get(this, 'headers');
      if (headers !== undefined) {
        hash.beforeSend = function (xhr) {
          Object.keys(headers).forEach(function (key) {
            return xhr.setRequestHeader(key, headers[key]);
          });
        };
      }

      return hash;
    },

    /**
      @method parseErrorResponse
      @private
      @param {String} responseText
      @return {Object}
    */
    parseErrorResponse: function parseErrorResponse(responseText) {
      var json = responseText;

      try {
        json = _ember['default'].$.parseJSON(responseText);
      } catch (e) {
        // ignored
      }

      return json;
    },

    /**
      @method normalizeErrorResponse
      @private
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @return {Array} errors payload
    */
    normalizeErrorResponse: function normalizeErrorResponse(status, headers, payload) {
      if (payload && typeof payload === 'object' && payload.errors) {
        return payload.errors;
      } else {
        return [{
          status: '' + status,
          title: "The backend responded with an error",
          detail: '' + payload
        }];
      }
    },

    /**
      Generates a detailed ("friendly") error message, with plenty
      of information for debugging (good luck!)
       @method generatedDetailedMessage
      @private
      @param  {Number} status
      @param  {Object} headers
      @param  {Object} payload
      @param  {Object} requestData
      @return {String} detailed error message
    */
    generatedDetailedMessage: function generatedDetailedMessage(status, headers, payload, requestData) {
      var shortenedPayload;
      var payloadContentType = headers["Content-Type"] || "Empty Content-Type";

      if (payloadContentType === "text/html" && payload.length > 250) {
        shortenedPayload = "[Omitted Lengthy HTML]";
      } else {
        shortenedPayload = payload;
      }

      var requestDescription = requestData.method + ' ' + requestData.url;
      var payloadDescription = 'Payload (' + payloadContentType + ')';

      return ['Ember Data Request ' + requestDescription + ' returned a ' + status, payloadDescription, shortenedPayload].join('\n');
    },

    // @since 2.5.0
    buildQuery: function buildQuery(snapshot) {
      var query = {};

      if (snapshot) {
        var include = snapshot.include;

        if (include) {
          query.include = include;
        }
      }

      return query;
    },

    _hasCustomizedAjax: function _hasCustomizedAjax() {
      if (this.ajax !== RESTAdapter.prototype.ajax) {
        (0, _emberDataPrivateDebug.deprecate)('RESTAdapter#ajax has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {
          id: 'ds.rest-adapter.ajax',
          until: '3.0.0'
        });
        return true;
      }

      if (this.ajaxOptions !== RESTAdapter.prototype.ajaxOptions) {
        (0, _emberDataPrivateDebug.deprecate)('RESTAdapter#ajaxOptions has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {
          id: 'ds.rest-adapter.ajax-options',
          until: '3.0.0'
        });
        return true;
      }

      return false;
    }
  });

  if (false) {

    RESTAdapter.reopen({

      /**
       * Get the data (body or query params) for a request.
       *
       * @public
       * @method dataForRequest
       * @param {Object} params
       * @return {Object} data
       */
      dataForRequest: function dataForRequest(params) {
        var store = params.store;
        var type = params.type;
        var snapshot = params.snapshot;
        var requestType = params.requestType;
        var query = params.query;

        // type is not passed to findBelongsTo and findHasMany
        type = type || snapshot && snapshot.type;

        var serializer = store.serializerFor(type.modelName);
        var data = {};

        switch (requestType) {
          case 'createRecord':
            serializer.serializeIntoHash(data, type, snapshot, { includeId: true });
            break;

          case 'updateRecord':
            serializer.serializeIntoHash(data, type, snapshot);
            break;

          case 'findRecord':
            data = this.buildQuery(snapshot);
            break;

          case 'findAll':
            if (params.sinceToken) {
              query = query || {};
              query.since = params.sinceToken;
            }
            data = query;
            break;

          case 'query':
          case 'queryRecord':
            if (this.sortQueryParams) {
              query = this.sortQueryParams(query);
            }
            data = query;
            break;

          case 'findMany':
            data = { ids: params.ids };
            break;

          default:
            data = undefined;
            break;
        }

        return data;
      },

      /**
       * Get the HTTP method for a request.
       *
       * @public
       * @method methodForRequest
       * @param {Object} params
       * @return {String} HTTP method
       */
      methodForRequest: function methodForRequest(params) {
        var requestType = params.requestType;

        switch (requestType) {
          case 'createRecord':
            return 'POST';
          case 'updateRecord':
            return 'PUT';
          case 'deleteRecord':
            return 'DELETE';
        }

        return 'GET';
      },

      /**
       * Get the URL for a request.
       *
       * @public
       * @method urlForRequest
       * @param {Object} params
       * @return {String} URL
       */
      urlForRequest: function urlForRequest(params) {
        var type = params.type;
        var id = params.id;
        var ids = params.ids;
        var snapshot = params.snapshot;
        var snapshots = params.snapshots;
        var requestType = params.requestType;
        var query = params.query;

        // type and id are not passed from updateRecord and deleteRecord, hence they
        // are defined if not set
        type = type || snapshot && snapshot.type;
        id = id || snapshot && snapshot.id;

        switch (requestType) {
          case 'findAll':
            return this.buildURL(type.modelName, null, snapshots, requestType);

          case 'query':
          case 'queryRecord':
            return this.buildURL(type.modelName, null, null, requestType, query);

          case 'findMany':
            return this.buildURL(type.modelName, ids, snapshots, requestType);

          case 'findHasMany':
          case 'findBelongsTo':
            {
              var url = this.buildURL(type.modelName, id, snapshot, requestType);
              return this.urlPrefix(params.url, url);
            }
        }

        return this.buildURL(type.modelName, id, snapshot, requestType, query);
      },

      /**
       * Get the headers for a request.
       *
       * By default the value of the `headers` property of the adapter is
       * returned.
       *
       * @public
       * @method headersForRequest
       * @param {Object} params
       * @return {Object} headers
       */
      headersForRequest: function headersForRequest(params) {
        return this.get('headers');
      },

      /**
       * Get an object which contains all properties for a request which should
       * be made.
       *
       * @private
       * @method _requestFor
       * @param {Object} params
       * @return {Object} request object
       */
      _requestFor: function _requestFor(params) {
        var method = this.methodForRequest(params);
        var url = this.urlForRequest(params);
        var headers = this.headersForRequest(params);
        var data = this.dataForRequest(params);

        return { method: method, url: url, headers: headers, data: data };
      },

      /**
       * Convert a request object into a hash which can be passed to `jQuery.ajax`.
       *
       * @private
       * @method _requestToJQueryAjaxHash
       * @param {Object} request
       * @return {Object} jQuery ajax hash
       */
      _requestToJQueryAjaxHash: function _requestToJQueryAjaxHash(request) {
        var hash = {};

        hash.type = request.method;
        hash.url = request.url;
        hash.dataType = 'json';
        hash.context = this;

        if (request.data) {
          if (request.method !== 'GET') {
            hash.contentType = 'application/json; charset=utf-8';
            hash.data = JSON.stringify(request.data);
          } else {
            hash.data = request.data;
          }
        }

        var headers = request.headers;
        if (headers !== undefined) {
          hash.beforeSend = function (xhr) {
            Object.keys(headers).forEach(function (key) {
              return xhr.setRequestHeader(key, headers[key]);
            });
          };
        }

        return hash;
      },

      /**
       * Make a request using `jQuery.ajax`.
       *
       * @private
       * @method _makeRequest
       * @param {Object} request
       * @return {Promise} promise
       */
      _makeRequest: function _makeRequest(request) {
        var adapter = this;
        var hash = this._requestToJQueryAjaxHash(request);

        var method = request.method;
        var url = request.url;

        var requestData = { method: method, url: url };

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {

          hash.success = function (payload, textStatus, jqXHR) {
            var response = ajaxSuccess(adapter, jqXHR, payload, requestData);
            _ember['default'].run.join(null, resolve, response);
          };

          hash.error = function (jqXHR, textStatus, errorThrown) {
            var responseData = {
              textStatus: textStatus,
              errorThrown: errorThrown
            };
            var error = ajaxError(adapter, jqXHR, requestData, responseData);
            _ember['default'].run.join(null, reject, error);
          };

          adapter._ajaxRequest(hash);
        }, 'DS: RESTAdapter#makeRequest: ' + method + ' ' + url);
      }
    });
  }

  function ajaxSuccess(adapter, jqXHR, payload, requestData) {
    var response = undefined;
    try {
      response = adapter.handleResponse(jqXHR.status, (0, _emberDataPrivateUtilsParseResponseHeaders['default'])(jqXHR.getAllResponseHeaders()), payload, requestData);
    } catch (error) {
      return Promise.reject(error);
    }

    if (response && response.isAdapterError) {
      return Promise.reject(response);
    } else {
      return response;
    }
  }

  function ajaxError(adapter, jqXHR, requestData, responseData) {
    (0, _emberDataPrivateDebug.runInDebug)(function () {
      var message = 'The server returned an empty string for ' + requestData.method + ' ' + requestData.url + ', which cannot be parsed into a valid JSON. Return either null or {}.';
      var validJSONString = !(responseData.textStatus === "parsererror" && jqXHR.responseText === "");
      (0, _emberDataPrivateDebug.warn)(message, validJSONString, {
        id: 'ds.adapter.returned-empty-string-as-JSON'
      });
    });

    var error = undefined;

    if (responseData.errorThrown instanceof Error) {
      error = responseData.errorThrown;
    } else if (responseData.textStatus === 'timeout') {
      error = new _emberDataAdaptersErrors.TimeoutError();
    } else if (responseData.textStatus === 'abort' || jqXHR.status === 0) {
      error = new _emberDataAdaptersErrors.AbortError();
    } else {
      try {
        error = adapter.handleResponse(jqXHR.status, (0, _emberDataPrivateUtilsParseResponseHeaders['default'])(jqXHR.getAllResponseHeaders()), adapter.parseErrorResponse(jqXHR.responseText) || responseData.errorThrown, requestData);
      } catch (e) {
        error = e;
      }
    }

    return error;
  }

  //From http://stackoverflow.com/questions/280634/endswith-in-javascript
  function endsWith(string, suffix) {
    if (typeof String.prototype.endsWith !== 'function') {
      return string.indexOf(suffix, string.length - suffix.length) !== -1;
    } else {
      return string.endsWith(suffix);
    }
  }

  exports['default'] = RESTAdapter;
});
define('ember-data/attr', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  'use strict';

  exports['default'] = attr;

  /**
    @module ember-data
  */

  function getDefaultValue(record, options, key) {
    if (typeof options.defaultValue === 'function') {
      return options.defaultValue.apply(null, arguments);
    } else {
      var defaultValue = options.defaultValue;
      (0, _emberDataPrivateDebug.deprecate)('Non primitive defaultValues are deprecated because they are shared between all instances. If you would like to use a complex object as a default value please provide a function that returns the complex object.', typeof defaultValue !== 'object' || defaultValue === null, {
        id: 'ds.defaultValue.complex-object',
        until: '3.0.0'
      });
      return defaultValue;
    }
  }

  function hasValue(record, key) {
    return key in record._attributes || key in record._inFlightAttributes || key in record._data;
  }

  function getValue(record, key) {
    if (key in record._attributes) {
      return record._attributes[key];
    } else if (key in record._inFlightAttributes) {
      return record._inFlightAttributes[key];
    } else {
      return record._data[key];
    }
  }

  /**
    `DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).
    By default, attributes are passed through as-is, however you can specify an
    optional type to have the value automatically transformed.
    Ember Data ships with four basic transform types: `string`, `number`,
    `boolean` and `date`. You can define your own transforms by subclassing
    [DS.Transform](/api/data/classes/DS.Transform.html).
  
    Note that you cannot use `attr` to define an attribute of `id`.
  
    `DS.attr` takes an optional hash as a second parameter, currently
    supported options are:
  
    - `defaultValue`: Pass a string or a function to be called to set the attribute
                      to a default value if none is supplied.
  
    Example
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      username: DS.attr('string'),
      email: DS.attr('string'),
      verified: DS.attr('boolean', { defaultValue: false })
    });
    ```
  
    Default value can also be a function. This is useful it you want to return
    a new object for each attribute.
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      username: attr('string'),
      email: attr('string'),
      settings: attr({defaultValue: function() {
        return {};
      }})
    });
    ```
  
    The `options` hash is passed as second argument to a transforms'
    `serialize` and `deserialize` method. This allows to configure a
    transformation and adapt the corresponding value, based on the config:
  
    ```app/models/post.js
    export default DS.Model.extend({
      text: DS.attr('text', {
        uppercase: true
      })
    });
    ```
  
    ```app/transforms/text.js
    export default DS.Transform.extend({
      serialize: function(value, options) {
        if (options.uppercase) {
          return value.toUpperCase();
        }
  
        return value;
      },
  
      deserialize: function(value) {
        return value;
      }
    })
    ```
  
    @namespace
    @method attr
    @for DS
    @param {String} type the attribute type
    @param {Object} options a hash of options
    @return {Attribute}
  */
  function attr(type, options) {
    if (typeof type === 'object') {
      options = type;
      type = undefined;
    } else {
      options = options || {};
    }

    var meta = {
      type: type,
      isAttribute: true,
      options: options
    };

    return _ember['default'].computed({
      get: function get(key) {
        var internalModel = this._internalModel;
        if (hasValue(internalModel, key)) {
          return getValue(internalModel, key);
        } else {
          return getDefaultValue(this, options, key);
        }
      },
      set: function set(key, value) {
        var internalModel = this._internalModel;
        var oldValue = getValue(internalModel, key);
        var originalValue;

        if (value !== oldValue) {
          // Add the new value to the changed attributes hash; it will get deleted by
          // the 'didSetProperty' handler if it is no different from the original value
          internalModel._attributes[key] = value;

          if (key in internalModel._inFlightAttributes) {
            originalValue = internalModel._inFlightAttributes[key];
          } else {
            originalValue = internalModel._data[key];
          }

          this._internalModel.send('didSetProperty', {
            name: key,
            oldValue: oldValue,
            originalValue: originalValue,
            value: value
          });
        }

        return value;
      }
    }).meta(meta);
  }
});
define("ember-data/index", ["exports", "ember", "ember-data/-private/debug", "ember-data/-private/features", "ember-data/-private/global", "ember-data/-private/core", "ember-data/-private/system/normalize-model-name", "ember-data/-private/system/model/internal-model", "ember-data/-private/system/promise-proxies", "ember-data/-private/system/store", "ember-data/-private/system/model", "ember-data/model", "ember-data/-private/system/snapshot", "ember-data/adapter", "ember-data/serializer", "ember-data/-private/system/debug", "ember-data/adapters/errors", "ember-data/-private/system/record-arrays", "ember-data/-private/system/many-array", "ember-data/-private/system/record-array-manager", "ember-data/-private/adapters", "ember-data/-private/adapters/build-url-mixin", "ember-data/-private/serializers", "ember-inflector", "ember-data/serializers/embedded-records-mixin", "ember-data/-private/transforms", "ember-data/relationships", "ember-data/setup-container", "ember-data/-private/instance-initializers/initialize-store-service", "ember-data/-private/system/relationships/state/relationship"], function (exports, _ember, _emberDataPrivateDebug, _emberDataPrivateFeatures, _emberDataPrivateGlobal, _emberDataPrivateCore, _emberDataPrivateSystemNormalizeModelName, _emberDataPrivateSystemModelInternalModel, _emberDataPrivateSystemPromiseProxies, _emberDataPrivateSystemStore, _emberDataPrivateSystemModel, _emberDataModel, _emberDataPrivateSystemSnapshot, _emberDataAdapter, _emberDataSerializer, _emberDataPrivateSystemDebug, _emberDataAdaptersErrors, _emberDataPrivateSystemRecordArrays, _emberDataPrivateSystemManyArray, _emberDataPrivateSystemRecordArrayManager, _emberDataPrivateAdapters, _emberDataPrivateAdaptersBuildUrlMixin, _emberDataPrivateSerializers, _emberInflector, _emberDataSerializersEmbeddedRecordsMixin, _emberDataPrivateTransforms, _emberDataRelationships, _emberDataSetupContainer, _emberDataPrivateInstanceInitializersInitializeStoreService, _emberDataPrivateSystemRelationshipsStateRelationship) {
  "use strict";

  if (_ember["default"].VERSION.match(/^1\.([0-9]|1[0-2])\./)) {
    throw new _ember["default"].Error("Ember Data requires at least Ember 1.13.0, but you have " + _ember["default"].VERSION + ". Please upgrade your version of Ember, then upgrade Ember Data.");
  }_emberDataPrivateCore["default"].Store = _emberDataPrivateSystemStore.Store;
  _emberDataPrivateCore["default"].PromiseArray = _emberDataPrivateSystemPromiseProxies.PromiseArray;
  _emberDataPrivateCore["default"].PromiseObject = _emberDataPrivateSystemPromiseProxies.PromiseObject;

  _emberDataPrivateCore["default"].PromiseManyArray = _emberDataPrivateSystemPromiseProxies.PromiseManyArray;

  _emberDataPrivateCore["default"].Model = _emberDataModel["default"];
  _emberDataPrivateCore["default"].RootState = _emberDataPrivateSystemModel.RootState;
  _emberDataPrivateCore["default"].attr = _emberDataPrivateSystemModel.attr;
  _emberDataPrivateCore["default"].Errors = _emberDataPrivateSystemModel.Errors;

  _emberDataPrivateCore["default"].InternalModel = _emberDataPrivateSystemModelInternalModel["default"];
  _emberDataPrivateCore["default"].Snapshot = _emberDataPrivateSystemSnapshot["default"];

  _emberDataPrivateCore["default"].Adapter = _emberDataAdapter["default"];

  _emberDataPrivateCore["default"].AdapterError = _emberDataAdaptersErrors.AdapterError;
  _emberDataPrivateCore["default"].InvalidError = _emberDataAdaptersErrors.InvalidError;
  _emberDataPrivateCore["default"].TimeoutError = _emberDataAdaptersErrors.TimeoutError;
  _emberDataPrivateCore["default"].AbortError = _emberDataAdaptersErrors.AbortError;

  if (false) {
    _emberDataPrivateCore["default"].UnauthorizedError = _emberDataAdaptersErrors.UnauthorizedError;
    _emberDataPrivateCore["default"].ForbiddenError = _emberDataAdaptersErrors.ForbiddenError;
    _emberDataPrivateCore["default"].NotFoundError = _emberDataAdaptersErrors.NotFoundError;
    _emberDataPrivateCore["default"].ConflictError = _emberDataAdaptersErrors.ConflictError;
    _emberDataPrivateCore["default"].ServerError = _emberDataAdaptersErrors.ServerError;
  }

  _emberDataPrivateCore["default"].errorsHashToArray = _emberDataAdaptersErrors.errorsHashToArray;
  _emberDataPrivateCore["default"].errorsArrayToHash = _emberDataAdaptersErrors.errorsArrayToHash;

  _emberDataPrivateCore["default"].Serializer = _emberDataSerializer["default"];

  _emberDataPrivateCore["default"].DebugAdapter = _emberDataPrivateSystemDebug["default"];

  _emberDataPrivateCore["default"].RecordArray = _emberDataPrivateSystemRecordArrays.RecordArray;
  _emberDataPrivateCore["default"].FilteredRecordArray = _emberDataPrivateSystemRecordArrays.FilteredRecordArray;
  _emberDataPrivateCore["default"].AdapterPopulatedRecordArray = _emberDataPrivateSystemRecordArrays.AdapterPopulatedRecordArray;
  _emberDataPrivateCore["default"].ManyArray = _emberDataPrivateSystemManyArray["default"];

  _emberDataPrivateCore["default"].RecordArrayManager = _emberDataPrivateSystemRecordArrayManager["default"];

  _emberDataPrivateCore["default"].RESTAdapter = _emberDataPrivateAdapters.RESTAdapter;
  _emberDataPrivateCore["default"].BuildURLMixin = _emberDataPrivateAdaptersBuildUrlMixin["default"];

  _emberDataPrivateCore["default"].RESTSerializer = _emberDataPrivateSerializers.RESTSerializer;
  _emberDataPrivateCore["default"].JSONSerializer = _emberDataPrivateSerializers.JSONSerializer;

  _emberDataPrivateCore["default"].JSONAPIAdapter = _emberDataPrivateAdapters.JSONAPIAdapter;
  _emberDataPrivateCore["default"].JSONAPISerializer = _emberDataPrivateSerializers.JSONAPISerializer;

  _emberDataPrivateCore["default"].Transform = _emberDataPrivateTransforms.Transform;
  _emberDataPrivateCore["default"].DateTransform = _emberDataPrivateTransforms.DateTransform;
  _emberDataPrivateCore["default"].StringTransform = _emberDataPrivateTransforms.StringTransform;
  _emberDataPrivateCore["default"].NumberTransform = _emberDataPrivateTransforms.NumberTransform;
  _emberDataPrivateCore["default"].BooleanTransform = _emberDataPrivateTransforms.BooleanTransform;

  _emberDataPrivateCore["default"].EmbeddedRecordsMixin = _emberDataSerializersEmbeddedRecordsMixin["default"];

  _emberDataPrivateCore["default"].belongsTo = _emberDataRelationships.belongsTo;
  _emberDataPrivateCore["default"].hasMany = _emberDataRelationships.hasMany;

  _emberDataPrivateCore["default"].Relationship = _emberDataPrivateSystemRelationshipsStateRelationship["default"];

  _emberDataPrivateCore["default"]._setupContainer = _emberDataSetupContainer["default"];
  _emberDataPrivateCore["default"]._initializeStoreService = _emberDataPrivateInstanceInitializersInitializeStoreService["default"];

  Object.defineProperty(_emberDataPrivateCore["default"], 'normalizeModelName', {
    enumerable: true,
    writable: false,
    configurable: false,
    value: _emberDataPrivateSystemNormalizeModelName["default"]
  });

  Object.defineProperty(_emberDataPrivateGlobal["default"], 'DS', {
    configurable: true,
    get: function get() {
      (0, _emberDataPrivateDebug.deprecate)('Using the global version of DS is deprecated. Please either import ' + 'the specific modules needed or `import DS from \'ember-data\';`.', false, { id: 'ember-data.global-ds', until: '3.0.0' });

      return _emberDataPrivateCore["default"];
    }
  });

  exports["default"] = _emberDataPrivateCore["default"];
});

/**
  Ember Data
  @module ember-data
  @main ember-data
*/
define("ember-data/model", ["exports", "ember-data/-private/system/model"], function (exports, _emberDataPrivateSystemModel) {
  "use strict";

  exports["default"] = _emberDataPrivateSystemModel["default"];
});
define("ember-data/relationships", ["exports", "ember-data/-private/system/relationships/belongs-to", "ember-data/-private/system/relationships/has-many"], function (exports, _emberDataPrivateSystemRelationshipsBelongsTo, _emberDataPrivateSystemRelationshipsHasMany) {
  /**
    @module ember-data
  */

  "use strict";

  exports.belongsTo = _emberDataPrivateSystemRelationshipsBelongsTo["default"];
  exports.hasMany = _emberDataPrivateSystemRelationshipsHasMany["default"];
});
define('ember-data/serializer', ['exports', 'ember'], function (exports, _ember) {
  /**
    @module ember-data
  */

  'use strict';

  /**
    `DS.Serializer` is an abstract base class that you should override in your
    application to customize it for your backend. The minimum set of methods
    that you should implement is:
  
      * `normalizeResponse()`
      * `serialize()`
  
    And you can optionally override the following methods:
  
      * `normalize()`
  
    For an example implementation, see
    [DS.JSONSerializer](DS.JSONSerializer.html), the included JSON serializer.
  
    @class Serializer
    @namespace DS
    @extends Ember.Object
  */

  exports['default'] = _ember['default'].Object.extend({

    /**
      The `store` property is the application's `store` that contains all records.
      It's injected as a service.
      It can be used to push records from a non flat data structure server
      response.
       @property store
      @type {DS.Store}
      @public
    */

    /**
      The `normalizeResponse` method is used to normalize a payload from the
      server to a JSON-API Document.
       http://jsonapi.org/format/#document-structure
       @since 1.13.0
      @method normalizeResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeResponse: null,

    /**
      The `serialize` method is used when a record is saved in order to convert
      the record into the form that your external data source expects.
       `serialize` takes an optional `options` hash with a single option:
       - `includeId`: If this is `true`, `serialize` should include the ID
        in the serialized object it builds.
       @method serialize
      @param {DS.Model} record
      @param {Object} [options]
      @return {Object}
    */
    serialize: null,

    /**
      The `normalize` method is used to convert a payload received from your
      external data source into the normalized form `store.push()` expects. You
      should override this method, munge the hash and return the normalized
      payload.
       @method normalize
      @param {DS.Model} typeClass
      @param {Object} hash
      @return {Object}
    */
    normalize: function normalize(typeClass, hash) {
      return hash;
    }

  });
});
define('ember-data/serializers/embedded-records-mixin', ['exports', 'ember', 'ember-data/-private/debug'], function (exports, _ember, _emberDataPrivateDebug) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var get = _ember['default'].get;
  var set = _ember['default'].set;
  var camelize = _ember['default'].String.camelize;

  /**
    ## Using Embedded Records
  
    `DS.EmbeddedRecordsMixin` supports serializing embedded records.
  
    To set up embedded records, include the mixin when extending a serializer,
    then define and configure embedded (model) relationships.
  
    Below is an example of a per-type serializer (`post` type).
  
    ```app/serializers/post.js
    import DS from 'ember-data';
  
    export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
      attrs: {
        author: { embedded: 'always' },
        comments: { serialize: 'ids' }
      }
    });
    ```
    Note that this use of `{ embedded: 'always' }` is unrelated to
    the `{ embedded: 'always' }` that is defined as an option on `DS.attr` as part of
    defining a model while working with the `ActiveModelSerializer`.  Nevertheless,
    using `{ embedded: 'always' }` as an option to `DS.attr` is not a valid way to setup
    embedded records.
  
    The `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:
  
    ```js
    {
      serialize: 'records',
      deserialize: 'records'
    }
    ```
  
    ### Configuring Attrs
  
    A resource's `attrs` option may be set to use `ids`, `records` or false for the
    `serialize`  and `deserialize` settings.
  
    The `attrs` property can be set on the `ApplicationSerializer` or a per-type
    serializer.
  
    In the case where embedded JSON is expected while extracting a payload (reading)
    the setting is `deserialize: 'records'`, there is no need to use `ids` when
    extracting as that is the default behavior without this mixin if you are using
    the vanilla `EmbeddedRecordsMixin`. Likewise, to embed JSON in the payload while
    serializing `serialize: 'records'` is the setting to use. There is an option of
    not embedding JSON in the serialized payload by using `serialize: 'ids'`. If you
    do not want the relationship sent at all, you can use `serialize: false`.
  
  
    ### EmbeddedRecordsMixin defaults
    If you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`
    will behave in the following way:
  
    BelongsTo: `{ serialize: 'id', deserialize: 'id' }`
    HasMany:   `{ serialize: false, deserialize: 'ids' }`
  
    ### Model Relationships
  
    Embedded records must have a model defined to be extracted and serialized. Note that
    when defining any relationships on your model such as `belongsTo` and `hasMany`, you
    should not both specify `async: true` and also indicate through the serializer's
    `attrs` attribute that the related model should be embedded for deserialization.
    If a model is declared embedded for deserialization (`embedded: 'always'` or `deserialize: 'records'`),
    then do not use `async: true`.
  
    To successfully extract and serialize embedded records the model relationships
    must be setup correcty. See the
    [defining relationships](/guides/models/defining-models/#toc_defining-relationships)
    section of the **Defining Models** guide page.
  
    Records without an `id` property are not considered embedded records, model
    instances must have an `id` property to be used with Ember Data.
  
    ### Example JSON payloads, Models and Serializers
  
    **When customizing a serializer it is important to grok what the customizations
    are. Please read the docs for the methods this mixin provides, in case you need
    to modify it to fit your specific needs.**
  
    For example review the docs for each method of this mixin:
    * [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)
    * [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)
    * [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)
  
    @class EmbeddedRecordsMixin
    @namespace DS
  */
  exports['default'] = _ember['default'].Mixin.create({

    /**
      Normalize the record and recursively normalize/extract all the embedded records
      while pushing them into the store as they are encountered
       A payload with an attr configured for embedded records needs to be extracted:
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "comments": [{
            "id": "1",
            "body": "Rails is unagi"
          }, {
            "id": "2",
            "body": "Omakase O_o"
          }]
        }
      }
      ```
     @method normalize
     @param {DS.Model} typeClass
     @param {Object} hash to be normalized
     @param {String} prop the hash has been referenced by
     @return {Object} the normalized hash
    **/
    normalize: function normalize(typeClass, hash, prop) {
      var normalizedHash = this._super(typeClass, hash, prop);
      return this._extractEmbeddedRecords(this, this.store, typeClass, normalizedHash);
    },

    keyForRelationship: function keyForRelationship(key, typeClass, method) {
      if (method === 'serialize' && this.hasSerializeRecordsOption(key) || method === 'deserialize' && this.hasDeserializeRecordsOption(key)) {
        return this.keyForAttribute(key, method);
      } else {
        return this._super(key, typeClass, method) || key;
      }
    },

    /**
      Serialize `belongsTo` relationship when it is configured as an embedded object.
       This example of an author model belongs to a post model:
       ```js
      Post = DS.Model.extend({
        title:    DS.attr('string'),
        body:     DS.attr('string'),
        author:   DS.belongsTo('author')
      });
       Author = DS.Model.extend({
        name:     DS.attr('string'),
        post:     DS.belongsTo('post')
      });
      ```
       Use a custom (type) serializer for the post model to configure embedded author
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          author: { embedded: 'always' }
        }
      })
      ```
       A payload with an attribute configured for embedded records can serialize
      the records together under the root attribute's payload:
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "author": {
            "id": "2"
            "name": "dhh"
          }
        }
      }
      ```
       @method serializeBelongsTo
      @param {DS.Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializeBelongsTo: function serializeBelongsTo(snapshot, json, relationship) {
      var attr = relationship.key;
      if (this.noSerializeOptionSpecified(attr)) {
        this._super(snapshot, json, relationship);
        return;
      }
      var includeIds = this.hasSerializeIdsOption(attr);
      var includeRecords = this.hasSerializeRecordsOption(attr);
      var embeddedSnapshot = snapshot.belongsTo(attr);
      if (includeIds) {
        var serializedKey = this._getMappedKey(relationship.key, snapshot.type);
        if (serializedKey === relationship.key && this.keyForRelationship) {
          serializedKey = this.keyForRelationship(relationship.key, relationship.kind, "serialize");
        }

        if (!embeddedSnapshot) {
          json[serializedKey] = null;
        } else {
          json[serializedKey] = embeddedSnapshot.id;

          if (relationship.options.polymorphic) {
            this.serializePolymorphicType(snapshot, json, relationship);
          }
        }
      } else if (includeRecords) {
        this._serializeEmbeddedBelongsTo(snapshot, json, relationship);
      }
    },

    _serializeEmbeddedBelongsTo: function _serializeEmbeddedBelongsTo(snapshot, json, relationship) {
      var embeddedSnapshot = snapshot.belongsTo(relationship.key);
      var serializedKey = this._getMappedKey(relationship.key, snapshot.type);
      if (serializedKey === relationship.key && this.keyForRelationship) {
        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, "serialize");
      }

      if (!embeddedSnapshot) {
        json[serializedKey] = null;
      } else {
        json[serializedKey] = embeddedSnapshot.serialize({ includeId: true });
        this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json[serializedKey]);

        if (relationship.options.polymorphic) {
          this.serializePolymorphicType(snapshot, json, relationship);
        }
      }
    },

    /**
      Serializes `hasMany` relationships when it is configured as embedded objects.
       This example of a post model has many comments:
       ```js
      Post = DS.Model.extend({
        title:    DS.attr('string'),
        body:     DS.attr('string'),
        comments: DS.hasMany('comment')
      });
       Comment = DS.Model.extend({
        body:     DS.attr('string'),
        post:     DS.belongsTo('post')
      });
      ```
       Use a custom (type) serializer for the post model to configure embedded comments
       ```app/serializers/post.js
      import DS from 'ember-data;
       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          comments: { embedded: 'always' }
        }
      })
      ```
       A payload with an attribute configured for embedded records can serialize
      the records together under the root attribute's payload:
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "body": "I want this for my ORM, I want that for my template language..."
          "comments": [{
            "id": "1",
            "body": "Rails is unagi"
          }, {
            "id": "2",
            "body": "Omakase O_o"
          }]
        }
      }
      ```
       The attrs options object can use more specific instruction for extracting and
      serializing. When serializing, an option to embed `ids`, `ids-and-types` or `records` can be set.
      When extracting the only option is `records`.
       So `{ embedded: 'always' }` is shorthand for:
      `{ serialize: 'records', deserialize: 'records' }`
       To embed the `ids` for a related object (using a hasMany relationship):
       ```app/serializers/post.js
      import DS from 'ember-data;
       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          comments: { serialize: 'ids', deserialize: 'records' }
        }
      })
      ```
       ```js
      {
        "post": {
          "id": "1"
          "title": "Rails is omakase",
          "body": "I want this for my ORM, I want that for my template language..."
          "comments": ["1", "2"]
        }
      }
      ```
       To embed the relationship as a collection of objects with `id` and `type` keys, set
      `ids-and-types` for the related object.
       This is particularly useful for polymorphic relationships where records don't share
      the same table and the `id` is not enough information.
       By example having a user that has many pets:
       ```js
      User = DS.Model.extend({
        name:    DS.attr('string'),
        pets: DS.hasMany('pet', { polymorphic: true })
      });
       Pet = DS.Model.extend({
        name: DS.attr('string'),
      });
       Cat = Pet.extend({
        // ...
      });
       Parrot = Pet.extend({
        // ...
      });
      ```
       ```app/serializers/user.js
      import DS from 'ember-data;
       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          pets: { serialize: 'ids-and-types', deserialize: 'records' }
        }
      });
      ```
       ```js
      {
        "user": {
          "id": "1"
          "name": "Bertin Osborne",
          "pets": [
            { "id": "1", "type": "Cat" },
            { "id": "1", "type": "Parrot"}
          ]
        }
      }
      ```
       @method serializeHasMany
      @param {DS.Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      var attr = relationship.key;
      if (this.noSerializeOptionSpecified(attr)) {
        this._super(snapshot, json, relationship);
        return;
      }

      if (this.hasSerializeIdsOption(attr)) {
        var serializedKey = this._getMappedKey(relationship.key, snapshot.type);
        if (serializedKey === relationship.key && this.keyForRelationship) {
          serializedKey = this.keyForRelationship(relationship.key, relationship.kind, "serialize");
        }

        json[serializedKey] = snapshot.hasMany(attr, { ids: true });
      } else if (this.hasSerializeRecordsOption(attr)) {
        this._serializeEmbeddedHasMany(snapshot, json, relationship);
      } else {
        if (this.hasSerializeIdsAndTypesOption(attr)) {
          this._serializeHasManyAsIdsAndTypes(snapshot, json, relationship);
        }
      }
    },

    /**
      Serializes a hasMany relationship as an array of objects containing only `id` and `type`
      keys.
      This has its use case on polymorphic hasMany relationships where the server is not storing
      all records in the same table using STI, and therefore the `id` is not enough information
       TODO: Make the default in Ember-data 3.0??
    */
    _serializeHasManyAsIdsAndTypes: function _serializeHasManyAsIdsAndTypes(snapshot, json, relationship) {
      var serializedKey = this.keyForAttribute(relationship.key, 'serialize');
      var hasMany = snapshot.hasMany(relationship.key);

      json[serializedKey] = _ember['default'].A(hasMany).map(function (recordSnapshot) {
        //
        // I'm sure I'm being utterly naive here. Propably id is a configurate property and
        // type too, and the modelName has to be normalized somehow.
        //
        return { id: recordSnapshot.id, type: recordSnapshot.modelName };
      });
    },

    _serializeEmbeddedHasMany: function _serializeEmbeddedHasMany(snapshot, json, relationship) {
      var serializedKey = this._getMappedKey(relationship.key, snapshot.type);
      if (serializedKey === relationship.key && this.keyForRelationship) {
        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, "serialize");
      }

      (0, _emberDataPrivateDebug.warn)('The embedded relationship \'' + serializedKey + '\' is undefined for \'' + snapshot.modelName + '\' with id \'' + snapshot.id + '\'. Please include it in your original payload.', _ember['default'].typeOf(snapshot.hasMany(relationship.key)) !== 'undefined', { id: 'ds.serializer.embedded-relationship-undefined' });

      json[serializedKey] = this._generateSerializedHasMany(snapshot, relationship);
    },

    /*
      Returns an array of embedded records serialized to JSON
    */
    _generateSerializedHasMany: function _generateSerializedHasMany(snapshot, relationship) {
      var hasMany = snapshot.hasMany(relationship.key);
      var manyArray = _ember['default'].A(hasMany);
      var ret = new Array(manyArray.length);

      for (var i = 0; i < manyArray.length; i++) {
        var embeddedSnapshot = manyArray[i];
        var embeddedJson = embeddedSnapshot.serialize({ includeId: true });
        this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, embeddedJson);
        ret[i] = embeddedJson;
      }

      return ret;
    },

    /**
      When serializing an embedded record, modify the property (in the json payload)
      that refers to the parent record (foreign key for relationship).
       Serializing a `belongsTo` relationship removes the property that refers to the
      parent record
       Serializing a `hasMany` relationship does not remove the property that refers to
      the parent record.
       @method removeEmbeddedForeignKey
      @param {DS.Snapshot} snapshot
      @param {DS.Snapshot} embeddedSnapshot
      @param {Object} relationship
      @param {Object} json
    */
    removeEmbeddedForeignKey: function removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json) {
      if (relationship.kind === 'hasMany') {
        return;
      } else if (relationship.kind === 'belongsTo') {
        var parentRecord = snapshot.type.inverseFor(relationship.key, this.store);
        if (parentRecord) {
          var name = parentRecord.name;
          var embeddedSerializer = this.store.serializerFor(embeddedSnapshot.modelName);
          var parentKey = embeddedSerializer.keyForRelationship(name, parentRecord.kind, 'deserialize');
          if (parentKey) {
            delete json[parentKey];
          }
        }
      }
    },

    // checks config for attrs option to embedded (always) - serialize and deserialize
    hasEmbeddedAlwaysOption: function hasEmbeddedAlwaysOption(attr) {
      var option = this.attrsOption(attr);
      return option && option.embedded === 'always';
    },

    // checks config for attrs option to serialize ids
    hasSerializeRecordsOption: function hasSerializeRecordsOption(attr) {
      var alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);
      var option = this.attrsOption(attr);
      return alwaysEmbed || option && option.serialize === 'records';
    },

    // checks config for attrs option to serialize records
    hasSerializeIdsOption: function hasSerializeIdsOption(attr) {
      var option = this.attrsOption(attr);
      return option && (option.serialize === 'ids' || option.serialize === 'id');
    },

    // checks config for attrs option to serialize records as objects containing id and types
    hasSerializeIdsAndTypesOption: function hasSerializeIdsAndTypesOption(attr) {
      var option = this.attrsOption(attr);
      return option && (option.serialize === 'ids-and-types' || option.serialize === 'id-and-type');
    },

    // checks config for attrs option to serialize records
    noSerializeOptionSpecified: function noSerializeOptionSpecified(attr) {
      var option = this.attrsOption(attr);
      return !(option && (option.serialize || option.embedded));
    },

    // checks config for attrs option to deserialize records
    // a defined option object for a resource is treated the same as
    // `deserialize: 'records'`
    hasDeserializeRecordsOption: function hasDeserializeRecordsOption(attr) {
      var alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);
      var option = this.attrsOption(attr);
      return alwaysEmbed || option && option.deserialize === 'records';
    },

    attrsOption: function attrsOption(attr) {
      var attrs = this.get('attrs');
      return attrs && (attrs[camelize(attr)] || attrs[attr]);
    },

    /**
     @method _extractEmbeddedRecords
     @private
    */
    _extractEmbeddedRecords: function _extractEmbeddedRecords(serializer, store, typeClass, partial) {
      var _this = this;

      typeClass.eachRelationship(function (key, relationship) {
        if (serializer.hasDeserializeRecordsOption(key)) {
          if (relationship.kind === "hasMany") {
            _this._extractEmbeddedHasMany(store, key, partial, relationship);
          }
          if (relationship.kind === "belongsTo") {
            _this._extractEmbeddedBelongsTo(store, key, partial, relationship);
          }
        }
      });
      return partial;
    },

    /**
     @method _extractEmbeddedHasMany
     @private
    */
    _extractEmbeddedHasMany: function _extractEmbeddedHasMany(store, key, hash, relationshipMeta) {
      var relationshipHash = get(hash, 'data.relationships.' + key + '.data');

      if (!relationshipHash) {
        return;
      }

      var hasMany = new Array(relationshipHash.length);

      for (var i = 0; i < relationshipHash.length; i++) {
        var item = relationshipHash[i];

        var _normalizeEmbeddedRelationship2 = this._normalizeEmbeddedRelationship(store, relationshipMeta, item);

        var data = _normalizeEmbeddedRelationship2.data;
        var included = _normalizeEmbeddedRelationship2.included;

        hash.included = hash.included || [];
        hash.included.push(data);
        if (included) {
          var _hash$included;

          (_hash$included = hash.included).push.apply(_hash$included, _toConsumableArray(included));
        }

        hasMany[i] = { id: data.id, type: data.type };
      }

      var relationship = { data: hasMany };
      set(hash, 'data.relationships.' + key, relationship);
    },

    /**
     @method _extractEmbeddedBelongsTo
     @private
    */
    _extractEmbeddedBelongsTo: function _extractEmbeddedBelongsTo(store, key, hash, relationshipMeta) {
      var relationshipHash = get(hash, 'data.relationships.' + key + '.data');
      if (!relationshipHash) {
        return;
      }

      var _normalizeEmbeddedRelationship3 = this._normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash);

      var data = _normalizeEmbeddedRelationship3.data;
      var included = _normalizeEmbeddedRelationship3.included;

      hash.included = hash.included || [];
      hash.included.push(data);
      if (included) {
        var _hash$included2;

        (_hash$included2 = hash.included).push.apply(_hash$included2, _toConsumableArray(included));
      }

      var belongsTo = { id: data.id, type: data.type };
      var relationship = { data: belongsTo };

      set(hash, 'data.relationships.' + key, relationship);
    },

    /**
     @method _normalizeEmbeddedRelationship
     @private
    */
    _normalizeEmbeddedRelationship: function _normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash) {
      var modelName = relationshipMeta.type;
      if (relationshipMeta.options.polymorphic) {
        modelName = relationshipHash.type;
      }
      var modelClass = store.modelFor(modelName);
      var serializer = store.serializerFor(modelName);

      return serializer.normalize(modelClass, relationshipHash, null);
    },
    isEmbeddedRecordsMixin: true
  });
});
define('ember-data/serializers/json-api', ['exports', 'ember', 'ember-data/-private/debug', 'ember-data/serializers/json', 'ember-data/-private/system/normalize-model-name', 'ember-inflector', 'ember-data/-private/features'], function (exports, _ember, _emberDataPrivateDebug, _emberDataSerializersJson, _emberDataPrivateSystemNormalizeModelName, _emberInflector, _emberDataPrivateFeatures) {
  /**
    @module ember-data
  */

  'use strict';

  var dasherize = _ember['default'].String.dasherize;

  /**
    Ember Data 2.0 Serializer:
  
    In Ember Data a Serializer is used to serialize and deserialize
    records when they are transferred in and out of an external source.
    This process involves normalizing property names, transforming
    attribute values and serializing relationships.
  
    `JSONAPISerializer` supports the http://jsonapi.org/ spec and is the
    serializer recommended by Ember Data.
  
    This serializer normalizes a JSON API payload that looks like:
  
    ```js
  
      // models/player.js
      import DS from "ember-data";
  
      export default DS.Model.extend({
        name: DS.attr(),
        skill: DS.attr(),
        gamesPlayed: DS.attr(),
        club: DS.belongsTo('club')
      });
  
      // models/club.js
      import DS from "ember-data";
  
      export default DS.Model.extend({
        name: DS.attr(),
        location: DS.attr(),
        players: DS.hasMany('player')
      });
    ```
  
    ```js
  
      {
        "data": [
          {
            "attributes": {
              "name": "Benfica",
              "location": "Portugal"
            },
            "id": "1",
            "relationships": {
              "players": {
                "data": [
                  {
                    "id": "3",
                    "type": "players"
                  }
                ]
              }
            },
            "type": "clubs"
          }
        ],
        "included": [
          {
            "attributes": {
              "name": "Eusebio Silva Ferreira",
              "skill": "Rocket shot",
              "games-played": 431
            },
            "id": "3",
            "relationships": {
              "club": {
                "data": {
                  "id": "1",
                  "type": "clubs"
                }
              }
            },
            "type": "players"
          }
        ]
      }
    ```
  
    to the format that the Ember Data store expects.
  
    @since 1.13.0
    @class JSONAPISerializer
    @namespace DS
    @extends DS.JSONSerializer
  */
  var JSONAPISerializer = _emberDataSerializersJson['default'].extend({

    /**
      @method _normalizeDocumentHelper
      @param {Object} documentHash
      @return {Object}
      @private
    */
    _normalizeDocumentHelper: function _normalizeDocumentHelper(documentHash) {

      if (_ember['default'].typeOf(documentHash.data) === 'object') {
        documentHash.data = this._normalizeResourceHelper(documentHash.data);
      } else if (Array.isArray(documentHash.data)) {
        var ret = new Array(documentHash.data.length);

        for (var i = 0; i < documentHash.data.length; i++) {
          var data = documentHash.data[i];
          ret[i] = this._normalizeResourceHelper(data);
        }

        documentHash.data = ret;
      }

      if (Array.isArray(documentHash.included)) {
        var ret = new Array(documentHash.included.length);

        for (var i = 0; i < documentHash.included.length; i++) {
          var included = documentHash.included[i];
          ret[i] = this._normalizeResourceHelper(included);
        }

        documentHash.included = ret;
      }

      return documentHash;
    },

    /**
      @method _normalizeRelationshipDataHelper
      @param {Object} relationshipDataHash
      @return {Object}
      @private
    */
    _normalizeRelationshipDataHelper: function _normalizeRelationshipDataHelper(relationshipDataHash) {
      if (false) {
        var modelName = this.modelNameFromPayloadType(relationshipDataHash.type);
        var deprecatedModelNameLookup = this.modelNameFromPayloadKey(relationshipDataHash.type);

        if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {
          (0, _emberDataPrivateDebug.deprecate)("You are using modelNameFromPayloadKey to normalize the type for a relationship. This has been deprecated in favor of modelNameFromPayloadType", false, {
            id: 'ds.json-api-serializer.deprecated-model-name-for-relationship',
            until: '3.0.0'
          });

          modelName = deprecatedModelNameLookup;
        }

        relationshipDataHash.type = modelName;
      } else {
        var type = this.modelNameFromPayloadKey(relationshipDataHash.type);
        relationshipDataHash.type = type;
      }

      return relationshipDataHash;
    },

    /**
      @method _normalizeResourceHelper
      @param {Object} resourceHash
      @return {Object}
      @private
    */
    _normalizeResourceHelper: function _normalizeResourceHelper(resourceHash) {
      (0, _emberDataPrivateDebug.assert)(this.warnMessageForUndefinedType(), !_ember['default'].isNone(resourceHash.type), {
        id: 'ds.serializer.type-is-undefined'
      });

      var modelName = undefined,
          usedLookup = undefined;

      if (false) {
        modelName = this.modelNameFromPayloadType(resourceHash.type);
        var deprecatedModelNameLookup = this.modelNameFromPayloadKey(resourceHash.type);

        usedLookup = 'modelNameFromPayloadType';

        if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {
          (0, _emberDataPrivateDebug.deprecate)("You are using modelNameFromPayloadKey to normalize the type for a resource. This has been deprecated in favor of modelNameFromPayloadType", false, {
            id: 'ds.json-api-serializer.deprecated-model-name-for-resource',
            until: '3.0.0'
          });

          modelName = deprecatedModelNameLookup;
          usedLookup = 'modelNameFromPayloadKey';
        }
      } else {
        modelName = this.modelNameFromPayloadKey(resourceHash.type);
        usedLookup = 'modelNameFromPayloadKey';
      }

      if (!this.store._hasModelFor(modelName)) {
        (0, _emberDataPrivateDebug.warn)(this.warnMessageNoModelForType(modelName, resourceHash.type, usedLookup), false, {
          id: 'ds.serializer.model-for-type-missing'
        });
        return null;
      }

      var modelClass = this.store.modelFor(modelName);
      var serializer = this.store.serializerFor(modelName);

      var _serializer$normalize = serializer.normalize(modelClass, resourceHash);

      var data = _serializer$normalize.data;

      return data;
    },

    /**
      @method pushPayload
      @param {DS.Store} store
      @param {Object} payload
    */
    pushPayload: function pushPayload(store, payload) {
      var normalizedPayload = this._normalizeDocumentHelper(payload);
      if (false) {
        return store.push(normalizedPayload);
      } else {
        store.push(normalizedPayload);
      }
    },

    /**
      @method _normalizeResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @param {Boolean} isSingle
      @return {Object} JSON-API Document
      @private
    */
    _normalizeResponse: function _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {
      var normalizedPayload = this._normalizeDocumentHelper(payload);
      return normalizedPayload;
    },

    normalizeQueryRecordResponse: function normalizeQueryRecordResponse() {
      var normalized = this._super.apply(this, arguments);

      (0, _emberDataPrivateDebug.assert)('Expected the primary data returned by the serializer for a `queryRecord` response to be a single object but instead it was an array.', !Array.isArray(normalized.data), {
        id: 'ds.serializer.json-api.queryRecord-array-response'
      });

      return normalized;
    },

    /**
      @method extractAttributes
      @param {DS.Model} modelClass
      @param {Object} resourceHash
      @return {Object}
    */
    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      var _this = this;

      var attributes = {};

      if (resourceHash.attributes) {
        modelClass.eachAttribute(function (key) {
          var attributeKey = _this.keyForAttribute(key, 'deserialize');
          if (resourceHash.attributes[attributeKey] !== undefined) {
            attributes[key] = resourceHash.attributes[attributeKey];
          }
        });
      }

      return attributes;
    },

    /**
      @method extractRelationship
      @param {Object} relationshipHash
      @return {Object}
    */
    extractRelationship: function extractRelationship(relationshipHash) {

      if (_ember['default'].typeOf(relationshipHash.data) === 'object') {
        relationshipHash.data = this._normalizeRelationshipDataHelper(relationshipHash.data);
      }

      if (Array.isArray(relationshipHash.data)) {
        var ret = new Array(relationshipHash.data.length);

        for (var i = 0; i < relationshipHash.data.length; i++) {
          var data = relationshipHash.data[i];
          ret[i] = this._normalizeRelationshipDataHelper(data);
        }

        relationshipHash.data = ret;
      }

      return relationshipHash;
    },

    /**
      @method extractRelationships
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {Object}
    */
    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      var _this2 = this;

      var relationships = {};

      if (resourceHash.relationships) {
        modelClass.eachRelationship(function (key, relationshipMeta) {
          var relationshipKey = _this2.keyForRelationship(key, relationshipMeta.kind, 'deserialize');
          if (resourceHash.relationships[relationshipKey] !== undefined) {

            var relationshipHash = resourceHash.relationships[relationshipKey];
            relationships[key] = _this2.extractRelationship(relationshipHash);
          }
        });
      }

      return relationships;
    },

    /**
      @method _extractType
      @param {DS.Model} modelClass
      @param {Object} resourceHash
      @return {String}
      @private
    */
    _extractType: function _extractType(modelClass, resourceHash) {
      if (false) {
        var modelName = this.modelNameFromPayloadType(resourceHash.type);
        var deprecatedModelNameLookup = this.modelNameFromPayloadKey(resourceHash.type);

        if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {
          (0, _emberDataPrivateDebug.deprecate)("You are using modelNameFromPayloadKey to normalize the type for a polymorphic relationship. This has been deprecated in favor of modelNameFromPayloadType", false, {
            id: 'ds.json-api-serializer.deprecated-model-name-for-polymorphic-type',
            until: '3.0.0'
          });

          modelName = deprecatedModelNameLookup;
        }

        return modelName;
      } else {
        return this.modelNameFromPayloadKey(resourceHash.type);
      }
    },

    /**
      @method modelNameFromPayloadKey
      @param {String} key
      @return {String} the model's modelName
    */
    // TODO @deprecated Use modelNameFromPayloadType instead
    modelNameFromPayloadKey: function modelNameFromPayloadKey(key) {
      return (0, _emberInflector.singularize)((0, _emberDataPrivateSystemNormalizeModelName['default'])(key));
    },

    /**
      @method payloadKeyFromModelName
      @param {String} modelName
      @return {String}
    */
    // TODO @deprecated Use payloadTypeFromModelName instead
    payloadKeyFromModelName: function payloadKeyFromModelName(modelName) {
      return (0, _emberInflector.pluralize)(modelName);
    },

    /**
      @method normalize
      @param {DS.Model} modelClass
      @param {Object} resourceHash the resource hash from the adapter
      @return {Object} the normalized resource hash
    */
    normalize: function normalize(modelClass, resourceHash) {
      if (resourceHash.attributes) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.attributes);
      }

      if (resourceHash.relationships) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.relationships);
      }

      var data = {
        id: this.extractId(modelClass, resourceHash),
        type: this._extractType(modelClass, resourceHash),
        attributes: this.extractAttributes(modelClass, resourceHash),
        relationships: this.extractRelationships(modelClass, resourceHash)
      };

      this.applyTransforms(modelClass, data.attributes);

      return { data: data };
    },

    /**
     `keyForAttribute` can be used to define rules for how to convert an
     attribute name in your model to a key in your JSON.
     By default `JSONAPISerializer` follows the format used on the examples of
     http://jsonapi.org/format and uses dashes as the word separator in the JSON
     attribute keys.
      This behaviour can be easily customized by extending this method.
      Example
      ```app/serializers/application.js
     import DS from 'ember-data';
      export default DS.JSONAPISerializer.extend({
       keyForAttribute: function(attr, method) {
         return Ember.String.dasherize(attr).toUpperCase();
       }
     });
     ```
      @method keyForAttribute
     @param {String} key
     @param {String} method
     @return {String} normalized key
    */
    keyForAttribute: function keyForAttribute(key, method) {
      return dasherize(key);
    },

    /**
     `keyForRelationship` can be used to define a custom key when
     serializing and deserializing relationship properties.
     By default `JSONAPISerializer` follows the format used on the examples of
     http://jsonapi.org/format and uses dashes as word separators in
     relationship properties.
      This behaviour can be easily customized by extending this method.
      Example
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONAPISerializer.extend({
        keyForRelationship: function(key, relationship, method) {
          return Ember.String.underscore(key);
        }
      });
      ```
     @method keyForRelationship
     @param {String} key
     @param {String} typeClass
     @param {String} method
     @return {String} normalized key
    */
    keyForRelationship: function keyForRelationship(key, typeClass, method) {
      return dasherize(key);
    },

    /**
      @method serialize
      @param {DS.Snapshot} snapshot
      @param {Object} options
      @return {Object} json
    */
    serialize: function serialize(snapshot, options) {
      var data = this._super.apply(this, arguments);

      var payloadType = undefined;
      if (false) {
        payloadType = this.payloadTypeFromModelName(snapshot.modelName);
        var deprecatedPayloadTypeLookup = this.payloadKeyFromModelName(snapshot.modelName);

        if (payloadType !== deprecatedPayloadTypeLookup && this._hasCustomPayloadKeyFromModelName()) {
          (0, _emberDataPrivateDebug.deprecate)("You used payloadKeyFromModelName to customize how a type is serialized. Use payloadTypeFromModelName instead.", false, {
            id: 'ds.json-api-serializer.deprecated-payload-type-for-model',
            until: '3.0.0'
          });

          payloadType = deprecatedPayloadTypeLookup;
        }
      } else {
        payloadType = this.payloadKeyFromModelName(snapshot.modelName);
      }

      data.type = payloadType;
      return { data: data };
    },

    /**
     @method serializeAttribute
     @param {DS.Snapshot} snapshot
     @param {Object} json
     @param {String} key
     @param {Object} attribute
    */
    serializeAttribute: function serializeAttribute(snapshot, json, key, attribute) {
      var type = attribute.type;

      if (this._canSerialize(key)) {
        json.attributes = json.attributes || {};

        var value = snapshot.attr(key);
        if (type) {
          var transform = this.transformFor(type);
          value = transform.serialize(value, attribute.options);
        }

        var payloadKey = this._getMappedKey(key, snapshot.type);

        if (payloadKey === key) {
          payloadKey = this.keyForAttribute(key, 'serialize');
        }

        json.attributes[payloadKey] = value;
      }
    },

    /**
     @method serializeBelongsTo
     @param {DS.Snapshot} snapshot
     @param {Object} json
     @param {Object} relationship
    */
    serializeBelongsTo: function serializeBelongsTo(snapshot, json, relationship) {
      var key = relationship.key;

      if (this._canSerialize(key)) {
        var belongsTo = snapshot.belongsTo(key);
        if (belongsTo !== undefined) {

          json.relationships = json.relationships || {};

          var payloadKey = this._getMappedKey(key, snapshot.type);
          if (payloadKey === key) {
            payloadKey = this.keyForRelationship(key, 'belongsTo', 'serialize');
          }

          var data = null;
          if (belongsTo) {
            var payloadType = undefined;

            if (false) {
              payloadType = this.payloadTypeFromModelName(belongsTo.modelName);
              var deprecatedPayloadTypeLookup = this.payloadKeyFromModelName(belongsTo.modelName);

              if (payloadType !== deprecatedPayloadTypeLookup && this._hasCustomPayloadKeyFromModelName()) {
                (0, _emberDataPrivateDebug.deprecate)("You used payloadKeyFromModelName to serialize type for belongs-to relationship. Use payloadTypeFromModelName instead.", false, {
                  id: 'ds.json-api-serializer.deprecated-payload-type-for-belongs-to',
                  until: '3.0.0'
                });

                payloadType = deprecatedPayloadTypeLookup;
              }
            } else {
              payloadType = this.payloadKeyFromModelName(belongsTo.modelName);
            }

            data = {
              type: payloadType,
              id: belongsTo.id
            };
          }

          json.relationships[payloadKey] = { data: data };
        }
      }
    },

    /**
     @method serializeHasMany
     @param {DS.Snapshot} snapshot
     @param {Object} json
     @param {Object} relationship
    */
    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      var key = relationship.key;
      var shouldSerializeHasMany = '_shouldSerializeHasMany';
      if (false) {
        shouldSerializeHasMany = 'shouldSerializeHasMany';
      }

      if (this[shouldSerializeHasMany](snapshot, key, relationship)) {
        var hasMany = snapshot.hasMany(key);
        if (hasMany !== undefined) {

          json.relationships = json.relationships || {};

          var payloadKey = this._getMappedKey(key, snapshot.type);
          if (payloadKey === key && this.keyForRelationship) {
            payloadKey = this.keyForRelationship(key, 'hasMany', 'serialize');
          }

          var data = new Array(hasMany.length);

          for (var i = 0; i < hasMany.length; i++) {
            var item = hasMany[i];

            var payloadType = undefined;

            if (false) {
              payloadType = this.payloadTypeFromModelName(item.modelName);
              var deprecatedPayloadTypeLookup = this.payloadKeyFromModelName(item.modelName);

              if (payloadType !== deprecatedPayloadTypeLookup && this._hasCustomPayloadKeyFromModelName()) {
                (0, _emberDataPrivateDebug.deprecate)("You used payloadKeyFromModelName to serialize type for belongs-to relationship. Use payloadTypeFromModelName instead.", false, {
                  id: 'ds.json-api-serializer.deprecated-payload-type-for-has-many',
                  until: '3.0.0'
                });

                payloadType = deprecatedPayloadTypeLookup;
              }
            } else {
              payloadType = this.payloadKeyFromModelName(item.modelName);
            }

            data[i] = {
              type: payloadType,
              id: item.id
            };
          }

          json.relationships[payloadKey] = { data: data };
        }
      }
    }
  });

  if (false) {

    JSONAPISerializer.reopen({

      /**
        `modelNameFromPayloadType` can be used to change the mapping for a DS model
        name, taken from the value in the payload.
         Say your API namespaces the type of a model and returns the following
        payload for the `post` model:
         ```javascript
        // GET /api/posts/1
        {
          "data": {
            "id": 1,
            "type: "api::v1::post"
          }
        }
        ```
         By overwriting `modelNameFromPayloadType` you can specify that the
        `post` model should be used:
         ```app/serializers/application.js
        import DS from "ember-data";
         export default DS.JSONAPISerializer.extend({
          modelNameFromPayloadType(payloadType) {
            return payloadType.replace('api::v1::', '');
          }
        });
        ```
         By default the modelName for a model is its singularized name in dasherized
        form.  Usually, Ember Data can use the correct inflection to do this for
        you. Most of the time, you won't need to override
        `modelNameFromPayloadType` for this purpose.
         Also take a look at
        [payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize
        how the type of a record should be serialized.
         @method modelNameFromPayloadType
        @public
        @param {String} payloadType type from payload
        @return {String} modelName
      */
      modelNameFromPayloadType: function modelNameFromPayloadType(type) {
        return (0, _emberInflector.singularize)((0, _emberDataPrivateSystemNormalizeModelName['default'])(type));
      },

      /**
        `payloadTypeFromModelName` can be used to change the mapping for the type in
        the payload, taken from the model name.
         Say your API namespaces the type of a model and expects the following
        payload when you update the `post` model:
         ```javascript
        // POST /api/posts/1
        {
          "data": {
            "id": 1,
            "type": "api::v1::post"
          }
        }
        ```
         By overwriting `payloadTypeFromModelName` you can specify that the
        namespaces model name for the `post` should be used:
         ```app/serializers/application.js
        import DS from "ember-data";
         export default JSONAPISerializer.extend({
          payloadTypeFromModelName(modelName) {
            return "api::v1::" + modelName;
          }
        });
        ```
         By default the payload type is the pluralized model name. Usually, Ember
        Data can use the correct inflection to do this for you. Most of the time,
        you won't need to override `payloadTypeFromModelName` for this purpose.
         Also take a look at
        [modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize
        how the model name from should be mapped from the payload.
         @method payloadTypeFromModelName
        @public
        @param {String} modelname modelName from the record
        @return {String} payloadType
      */
      payloadTypeFromModelName: function payloadTypeFromModelName(modelName) {
        return (0, _emberInflector.pluralize)(modelName);
      },

      _hasCustomModelNameFromPayloadKey: function _hasCustomModelNameFromPayloadKey() {
        return this.modelNameFromPayloadKey !== JSONAPISerializer.prototype.modelNameFromPayloadKey;
      },

      _hasCustomPayloadKeyFromModelName: function _hasCustomPayloadKeyFromModelName() {
        return this.payloadKeyFromModelName !== JSONAPISerializer.prototype.payloadKeyFromModelName;
      }

    });
  }

  (0, _emberDataPrivateDebug.runInDebug)(function () {
    JSONAPISerializer.reopen({
      willMergeMixin: function willMergeMixin(props) {
        (0, _emberDataPrivateDebug.warn)('The JSONAPISerializer does not work with the EmbeddedRecordsMixin because the JSON API spec does not describe how to format embedded resources.', !props.isEmbeddedRecordsMixin, {
          id: 'ds.serializer.embedded-records-mixin-not-supported'
        });
      },
      warnMessageForUndefinedType: function warnMessageForUndefinedType() {
        return 'Encountered a resource object with an undefined type (resolved resource using ' + this.constructor.toString() + ')';
      },
      warnMessageNoModelForType: function warnMessageNoModelForType(modelName, originalType, usedLookup) {
        return 'Encountered a resource object with type "' + originalType + '", but no model was found for model name "' + modelName + '" (resolved model name using \'' + this.constructor.toString() + '.' + usedLookup + '("' + originalType + '")).';
      }
    });
  });

  exports['default'] = JSONAPISerializer;
});
define('ember-data/serializers/json', ['exports', 'ember', 'ember-data/-private/debug', 'ember-data/serializer', 'ember-data/-private/system/coerce-id', 'ember-data/-private/system/normalize-model-name', 'ember-data/-private/utils', 'ember-data/-private/features', 'ember-data/adapters/errors'], function (exports, _ember, _emberDataPrivateDebug, _emberDataSerializer, _emberDataPrivateSystemCoerceId, _emberDataPrivateSystemNormalizeModelName, _emberDataPrivateUtils, _emberDataPrivateFeatures, _emberDataAdaptersErrors) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var get = _ember['default'].get;
  var isNone = _ember['default'].isNone;
  var assign = _ember['default'].assign || _ember['default'].merge;

  /**
    Ember Data 2.0 Serializer:
  
    In Ember Data a Serializer is used to serialize and deserialize
    records when they are transferred in and out of an external source.
    This process involves normalizing property names, transforming
    attribute values and serializing relationships.
  
    By default, Ember Data uses and recommends the `JSONAPISerializer`.
  
    `JSONSerializer` is useful for simpler or legacy backends that may
    not support the http://jsonapi.org/ spec.
  
    For example, given the following `User` model and JSON payload:
  
    ```app/models/user.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      friends: DS.hasMany('user'),
      house: DS.belongsTo('location'),
  
      name: DS.attr('string')
    });
    ```
  
    ```js
    {
      id: 1,
      name: 'Sebastian',
      friends: [3, 4],
      links: {
        house: '/houses/lefkada'
      }
    }
    ```
  
    `JSONSerializer` will normalize the JSON payload to the JSON API format that the
    Ember Data store expects.
  
    You can customize how JSONSerializer processes its payload by passing options in
    the `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:
  
      - To customize how a single record is normalized, use the `normalize` hook.
      - To customize how `JSONSerializer` normalizes the whole server response, use the
        `normalizeResponse` hook.
      - To customize how `JSONSerializer` normalizes a specific response from the server,
        use one of the many specific `normalizeResponse` hooks.
      - To customize how `JSONSerializer` normalizes your id, attributes or relationships,
        use the `extractId`, `extractAttributes` and `extractRelationships` hooks.
  
    The `JSONSerializer` normalization process follows these steps:
  
      - `normalizeResponse` - entry method to the serializer.
      - `normalizeCreateRecordResponse` - a `normalizeResponse` for a specific operation is called.
      - `normalizeSingleResponse`|`normalizeArrayResponse` - for methods like `createRecord` we expect
        a single record back, while for methods like `findAll` we expect multiple methods back.
      - `normalize` - `normalizeArray` iterates and calls `normalize` for each of its records while `normalizeSingle`
        calls it once. This is the method you most likely want to subclass.
      - `extractId` | `extractAttributes` | `extractRelationships` - `normalize` delegates to these methods to
        turn the record payload into the JSON API format.
  
    @class JSONSerializer
    @namespace DS
    @extends DS.Serializer
  */
  var JSONSerializer = _emberDataSerializer['default'].extend({

    /**
      The `primaryKey` is used when serializing and deserializing
      data. Ember Data always uses the `id` property to store the id of
      the record. The external source may not always follow this
      convention. In these cases it is useful to override the
      `primaryKey` property to match the `primaryKey` of your external
      store.
       Example
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        primaryKey: '_id'
      });
      ```
       @property primaryKey
      @type {String}
      @default 'id'
    */
    primaryKey: 'id',

    /**
      The `attrs` object can be used to declare a simple mapping between
      property names on `DS.Model` records and payload keys in the
      serialized JSON object representing the record. An object with the
      property `key` can also be used to designate the attribute's key on
      the response payload.
       Example
       ```app/models/person.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string'),
        admin: DS.attr('boolean')
      });
      ```
       ```app/serializers/person.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        attrs: {
          admin: 'is_admin',
          occupation: { key: 'career' }
        }
      });
      ```
       You can also remove attributes by setting the `serialize` key to
      `false` in your mapping object.
       Example
       ```app/serializers/person.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        attrs: {
          admin: { serialize: false },
          occupation: { key: 'career' }
        }
      });
      ```
       When serialized:
       ```javascript
      {
        "firstName": "Harry",
        "lastName": "Houdini",
        "career": "magician"
      }
      ```
       Note that the `admin` is now not included in the payload.
       @property attrs
      @type {Object}
    */
    mergedProperties: ['attrs'],

    /**
     Given a subclass of `DS.Model` and a JSON object this method will
     iterate through each attribute of the `DS.Model` and invoke the
     `DS.Transform#deserialize` method on the matching property of the
     JSON object.  This method is typically called after the
     serializer's `normalize` method.
      @method applyTransforms
     @private
     @param {DS.Model} typeClass
     @param {Object} data The data to transform
     @return {Object} data The transformed data object
    */
    applyTransforms: function applyTransforms(typeClass, data) {
      var _this = this;

      var attributes = get(typeClass, 'attributes');

      typeClass.eachTransformedAttribute(function (key, typeClass) {
        if (data[key] === undefined) {
          return;
        }

        var transform = _this.transformFor(typeClass);
        var transformMeta = attributes.get(key);
        data[key] = transform.deserialize(data[key], transformMeta.options);
      });

      return data;
    },

    /**
      The `normalizeResponse` method is used to normalize a payload from the
      server to a JSON-API Document.
       http://jsonapi.org/format/#document-structure
       This method delegates to a more specific normalize method based on
      the `requestType`.
       To override this method with a custom one, make sure to call
      `return this._super(store, primaryModelClass, payload, id, requestType)` with your
      pre-processed data.
       Here's an example of using `normalizeResponse` manually:
       ```javascript
      socket.on('message', function(message) {
        var data = message.data;
        var modelClass = store.modelFor(data.modelName);
        var serializer = store.serializerFor(data.modelName);
        var normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);
         store.push(normalized);
      });
      ```
       @since 1.13.0
      @method normalizeResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      switch (requestType) {
        case 'findRecord':
          return this.normalizeFindRecordResponse.apply(this, arguments);
        case 'queryRecord':
          return this.normalizeQueryRecordResponse.apply(this, arguments);
        case 'findAll':
          return this.normalizeFindAllResponse.apply(this, arguments);
        case 'findBelongsTo':
          return this.normalizeFindBelongsToResponse.apply(this, arguments);
        case 'findHasMany':
          return this.normalizeFindHasManyResponse.apply(this, arguments);
        case 'findMany':
          return this.normalizeFindManyResponse.apply(this, arguments);
        case 'query':
          return this.normalizeQueryResponse.apply(this, arguments);
        case 'createRecord':
          return this.normalizeCreateRecordResponse.apply(this, arguments);
        case 'deleteRecord':
          return this.normalizeDeleteRecordResponse.apply(this, arguments);
        case 'updateRecord':
          return this.normalizeUpdateRecordResponse.apply(this, arguments);
      }
    },

    /**
      @since 1.13.0
      @method normalizeFindRecordResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindRecordResponse: function normalizeFindRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeQueryRecordResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeQueryRecordResponse: function normalizeQueryRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeFindAllResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindAllResponse: function normalizeFindAllResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeFindBelongsToResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindBelongsToResponse: function normalizeFindBelongsToResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeFindHasManyResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindHasManyResponse: function normalizeFindHasManyResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeFindManyResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeFindManyResponse: function normalizeFindManyResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeQueryResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeQueryResponse: function normalizeQueryResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeArrayResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeCreateRecordResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeCreateRecordResponse: function normalizeCreateRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSaveResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeDeleteRecordResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeDeleteRecordResponse: function normalizeDeleteRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSaveResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeUpdateRecordResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeUpdateRecordResponse: function normalizeUpdateRecordResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSaveResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeSaveResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeSaveResponse: function normalizeSaveResponse(store, primaryModelClass, payload, id, requestType) {
      return this.normalizeSingleResponse.apply(this, arguments);
    },

    /**
      @since 1.13.0
      @method normalizeSingleResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload, id, requestType) {
      return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, true);
    },

    /**
      @since 1.13.0
      @method normalizeArrayResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @return {Object} JSON-API Document
    */
    normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {
      return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, false);
    },

    /**
      @method _normalizeResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @param {Boolean} isSingle
      @return {Object} JSON-API Document
      @private
    */
    _normalizeResponse: function _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {
      var documentHash = {
        data: null,
        included: []
      };

      var meta = this.extractMeta(store, primaryModelClass, payload);
      if (meta) {
        (0, _emberDataPrivateDebug.assert)('The `meta` returned from `extractMeta` has to be an object, not "' + _ember['default'].typeOf(meta) + '".', _ember['default'].typeOf(meta) === 'object');
        documentHash.meta = meta;
      }

      if (isSingle) {
        var _normalize = this.normalize(primaryModelClass, payload);

        var data = _normalize.data;
        var included = _normalize.included;

        documentHash.data = data;
        if (included) {
          documentHash.included = included;
        }
      } else {
        var ret = new Array(payload.length);
        for (var i = 0, l = payload.length; i < l; i++) {
          var item = payload[i];

          var _normalize2 = this.normalize(primaryModelClass, item);

          var data = _normalize2.data;
          var included = _normalize2.included;

          if (included) {
            var _documentHash$included;

            (_documentHash$included = documentHash.included).push.apply(_documentHash$included, _toConsumableArray(included));
          }
          ret[i] = data;
        }

        documentHash.data = ret;
      }

      return documentHash;
    },

    /**
      Normalizes a part of the JSON payload returned by
      the server. You should override this method, munge the hash
      and call super if you have generic normalization to do.
       It takes the type of the record that is being normalized
      (as a DS.Model class), the property where the hash was
      originally found, and the hash to normalize.
       You can use this method, for example, to normalize underscored keys to camelized
      or other general-purpose normalizations.
       Example
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        normalize: function(typeClass, hash) {
          var fields = Ember.get(typeClass, 'fields');
          fields.forEach(function(field) {
            var payloadField = Ember.String.underscore(field);
            if (field === payloadField) { return; }
             hash[field] = hash[payloadField];
            delete hash[payloadField];
          });
          return this._super.apply(this, arguments);
        }
      });
      ```
       @method normalize
      @param {DS.Model} typeClass
      @param {Object} hash
      @return {Object}
    */
    normalize: function normalize(modelClass, resourceHash) {
      var data = null;

      if (resourceHash) {
        this.normalizeUsingDeclaredMapping(modelClass, resourceHash);
        if (_ember['default'].typeOf(resourceHash.links) === 'object') {
          this.normalizeUsingDeclaredMapping(modelClass, resourceHash.links);
        }

        data = {
          id: this.extractId(modelClass, resourceHash),
          type: modelClass.modelName,
          attributes: this.extractAttributes(modelClass, resourceHash),
          relationships: this.extractRelationships(modelClass, resourceHash)
        };

        this.applyTransforms(modelClass, data.attributes);
      }

      return { data: data };
    },

    /**
      Returns the resource's ID.
       @method extractId
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {String}
    */
    extractId: function extractId(modelClass, resourceHash) {
      var primaryKey = get(this, 'primaryKey');
      var id = resourceHash[primaryKey];
      return (0, _emberDataPrivateSystemCoerceId['default'])(id);
    },

    /**
      Returns the resource's attributes formatted as a JSON-API "attributes object".
       http://jsonapi.org/format/#document-resource-object-attributes
       @method extractAttributes
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {Object}
    */
    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      var _this2 = this;

      var attributeKey;
      var attributes = {};

      modelClass.eachAttribute(function (key) {
        attributeKey = _this2.keyForAttribute(key, 'deserialize');
        if (resourceHash[attributeKey] !== undefined) {
          attributes[key] = resourceHash[attributeKey];
        }
      });

      return attributes;
    },

    /**
      Returns a relationship formatted as a JSON-API "relationship object".
       http://jsonapi.org/format/#document-resource-object-relationships
       @method extractRelationship
      @param {Object} relationshipModelName
      @param {Object} relationshipHash
      @return {Object}
    */
    extractRelationship: function extractRelationship(relationshipModelName, relationshipHash) {
      if (_ember['default'].isNone(relationshipHash)) {
        return null;
      }
      /*
        When `relationshipHash` is an object it usually means that the relationship
        is polymorphic. It could however also be embedded resources that the
        EmbeddedRecordsMixin has be able to process.
      */
      if (_ember['default'].typeOf(relationshipHash) === 'object') {
        if (relationshipHash.id) {
          relationshipHash.id = (0, _emberDataPrivateSystemCoerceId['default'])(relationshipHash.id);
        }

        var modelClass = this.store.modelFor(relationshipModelName);
        if (relationshipHash.type && !(0, _emberDataPrivateUtils.modelHasAttributeOrRelationshipNamedType)(modelClass)) {

          if (false) {
            var modelName = this.modelNameFromPayloadType(relationshipHash.type);
            var deprecatedModelNameLookup = this.modelNameFromPayloadKey(relationshipHash.type);

            if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {
              (0, _emberDataPrivateDebug.deprecate)("You used modelNameFromPayloadKey to customize how a type is normalized. Use modelNameFromPayloadType instead", false, {
                id: 'ds.json-serializer.deprecated-type-for-polymorphic-relationship',
                until: '3.0.0'
              });

              modelName = deprecatedModelNameLookup;
            }

            relationshipHash.type = modelName;
          } else {
            relationshipHash.type = this.modelNameFromPayloadKey(relationshipHash.type);
          }
        }
        return relationshipHash;
      }
      return { id: (0, _emberDataPrivateSystemCoerceId['default'])(relationshipHash), type: relationshipModelName };
    },

    /**
      Returns a polymorphic relationship formatted as a JSON-API "relationship object".
       http://jsonapi.org/format/#document-resource-object-relationships
       `relationshipOptions` is a hash which contains more information about the
      polymorphic relationship which should be extracted:
        - `resourceHash` complete hash of the resource the relationship should be
          extracted from
        - `relationshipKey` key under which the value for the relationship is
          extracted from the resourceHash
        - `relationshipMeta` meta information about the relationship
       @method extractPolymorphicRelationship
      @param {Object} relationshipModelName
      @param {Object} relationshipHash
      @param {Object} relationshipOptions
      @return {Object}
    */
    extractPolymorphicRelationship: function extractPolymorphicRelationship(relationshipModelName, relationshipHash, relationshipOptions) {
      return this.extractRelationship(relationshipModelName, relationshipHash);
    },

    /**
      Returns the resource's relationships formatted as a JSON-API "relationships object".
       http://jsonapi.org/format/#document-resource-object-relationships
       @method extractRelationships
      @param {Object} modelClass
      @param {Object} resourceHash
      @return {Object}
    */
    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      var _this3 = this;

      var relationships = {};

      modelClass.eachRelationship(function (key, relationshipMeta) {
        var relationship = null;
        var relationshipKey = _this3.keyForRelationship(key, relationshipMeta.kind, 'deserialize');
        if (resourceHash[relationshipKey] !== undefined) {
          var data = null;
          var relationshipHash = resourceHash[relationshipKey];
          if (relationshipMeta.kind === 'belongsTo') {
            if (relationshipMeta.options.polymorphic) {
              // extracting a polymorphic belongsTo may need more information
              // than the type and the hash (which might only be an id) for the
              // relationship, hence we pass the key, resource and
              // relationshipMeta too
              data = _this3.extractPolymorphicRelationship(relationshipMeta.type, relationshipHash, { key: key, resourceHash: resourceHash, relationshipMeta: relationshipMeta });
            } else {
              data = _this3.extractRelationship(relationshipMeta.type, relationshipHash);
            }
          } else if (relationshipMeta.kind === 'hasMany') {
            if (!_ember['default'].isNone(relationshipHash)) {
              data = new Array(relationshipHash.length);
              for (var i = 0, l = relationshipHash.length; i < l; i++) {
                var item = relationshipHash[i];
                data[i] = _this3.extractRelationship(relationshipMeta.type, item);
              }
            }
          }
          relationship = { data: data };
        }

        var linkKey = _this3.keyForLink(key, relationshipMeta.kind);
        if (resourceHash.links && resourceHash.links[linkKey] !== undefined) {
          var related = resourceHash.links[linkKey];
          relationship = relationship || {};
          relationship.links = { related: related };
        }

        if (relationship) {
          relationships[key] = relationship;
        }
      });

      return relationships;
    },

    /**
      @method modelNameFromPayloadKey
      @param {String} key
      @return {String} the model's modelName
    */
    // TODO @deprecated Use modelNameFromPayloadType instead
    modelNameFromPayloadKey: function modelNameFromPayloadKey(key) {
      return (0, _emberDataPrivateSystemNormalizeModelName['default'])(key);
    },

    /**
      @method normalizeAttributes
      @private
    */
    normalizeAttributes: function normalizeAttributes(typeClass, hash) {
      var _this4 = this;

      var payloadKey;

      if (this.keyForAttribute) {
        typeClass.eachAttribute(function (key) {
          payloadKey = _this4.keyForAttribute(key, 'deserialize');
          if (key === payloadKey) {
            return;
          }
          if (hash[payloadKey] === undefined) {
            return;
          }

          hash[key] = hash[payloadKey];
          delete hash[payloadKey];
        });
      }
    },

    /**
      @method normalizeRelationships
      @private
    */
    normalizeRelationships: function normalizeRelationships(typeClass, hash) {
      var _this5 = this;

      var payloadKey;

      if (this.keyForRelationship) {
        typeClass.eachRelationship(function (key, relationship) {
          payloadKey = _this5.keyForRelationship(key, relationship.kind, 'deserialize');
          if (key === payloadKey) {
            return;
          }
          if (hash[payloadKey] === undefined) {
            return;
          }

          hash[key] = hash[payloadKey];
          delete hash[payloadKey];
        });
      }
    },

    /**
      @method normalizeUsingDeclaredMapping
      @private
    */
    normalizeUsingDeclaredMapping: function normalizeUsingDeclaredMapping(modelClass, hash) {
      var attrs = get(this, 'attrs');
      var normalizedKey, payloadKey, key;

      if (attrs) {
        for (key in attrs) {
          normalizedKey = payloadKey = this._getMappedKey(key, modelClass);

          if (hash[payloadKey] === undefined) {
            continue;
          }

          if (get(modelClass, 'attributes').has(key)) {
            normalizedKey = this.keyForAttribute(key);
          }

          if (get(modelClass, 'relationshipsByName').has(key)) {
            normalizedKey = this.keyForRelationship(key);
          }

          if (payloadKey !== normalizedKey) {
            hash[normalizedKey] = hash[payloadKey];
            delete hash[payloadKey];
          }
        }
      }
    },

    /**
      Looks up the property key that was set by the custom `attr` mapping
      passed to the serializer.
       @method _getMappedKey
      @private
      @param {String} key
      @return {String} key
    */
    _getMappedKey: function _getMappedKey(key, modelClass) {
      (0, _emberDataPrivateDebug.warn)('There is no attribute or relationship with the name `' + key + '` on `' + modelClass.modelName + '`. Check your serializers attrs hash.', get(modelClass, 'attributes').has(key) || get(modelClass, 'relationshipsByName').has(key), {
        id: 'ds.serializer.no-mapped-attrs-key'
      });

      var attrs = get(this, 'attrs');
      var mappedKey;
      if (attrs && attrs[key]) {
        mappedKey = attrs[key];
        //We need to account for both the { title: 'post_title' } and
        //{ title: { key: 'post_title' }} forms
        if (mappedKey.key) {
          mappedKey = mappedKey.key;
        }
        if (typeof mappedKey === 'string') {
          key = mappedKey;
        }
      }

      return key;
    },

    /**
      Check attrs.key.serialize property to inform if the `key`
      can be serialized
       @method _canSerialize
      @private
      @param {String} key
      @return {boolean} true if the key can be serialized
    */
    _canSerialize: function _canSerialize(key) {
      var attrs = get(this, 'attrs');

      return !attrs || !attrs[key] || attrs[key].serialize !== false;
    },

    /**
      When attrs.key.serialize is set to true then
      it takes priority over the other checks and the related
      attribute/relationship will be serialized
       @method _mustSerialize
      @private
      @param {String} key
      @return {boolean} true if the key must be serialized
    */
    _mustSerialize: function _mustSerialize(key) {
      var attrs = get(this, 'attrs');

      return attrs && attrs[key] && attrs[key].serialize === true;
    },

    /**
      Check if the given hasMany relationship should be serialized
       @method shouldSerializeHasMany
      @param {DS.Snapshot} snapshot
      @param {String} key
      @param {String} relationshipType
      @return {boolean} true if the hasMany relationship should be serialized
    */

    shouldSerializeHasMany: function shouldSerializeHasMany(snapshot, key, relationship) {
      if (this._shouldSerializeHasMany !== JSONSerializer.prototype._shouldSerializeHasMany) {
        (0, _emberDataPrivateDebug.deprecate)('The private method _shouldSerializeHasMany has been promoted to the public API. Please remove the underscore to use the public shouldSerializeHasMany method.', false, {
          id: 'ds.serializer.private-should-serialize-has-many',
          until: '3.0.0'
        });
      }

      return this._shouldSerializeHasMany(snapshot, key, relationship);
    },

    /**
      Check if the given hasMany relationship should be serialized
       @method _shouldSerializeHasMany
      @private
      @param {DS.Snapshot} snapshot
      @param {String} key
      @param {String} relationshipType
      @return {boolean} true if the hasMany relationship should be serialized
    */
    _shouldSerializeHasMany: function _shouldSerializeHasMany(snapshot, key, relationship) {
      var relationshipType = snapshot.type.determineRelationshipType(relationship, this.store);
      if (this._mustSerialize(key)) {
        return true;
      }
      return this._canSerialize(key) && (relationshipType === 'manyToNone' || relationshipType === 'manyToMany');
    },

    // SERIALIZE
    /**
      Called when a record is saved in order to convert the
      record into JSON.
       By default, it creates a JSON object with a key for
      each attribute and belongsTo relationship.
       For example, consider this model:
       ```app/models/comment.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        title: DS.attr(),
        body: DS.attr(),
         author: DS.belongsTo('user')
      });
      ```
       The default serialization would create a JSON object like:
       ```javascript
      {
        "title": "Rails is unagi",
        "body": "Rails? Omakase? O_O",
        "author": 12
      }
      ```
       By default, attributes are passed through as-is, unless
      you specified an attribute type (`DS.attr('date')`). If
      you specify a transform, the JavaScript value will be
      serialized when inserted into the JSON hash.
       By default, belongs-to relationships are converted into
      IDs when inserted into the JSON hash.
       ## IDs
       `serialize` takes an options hash with a single option:
      `includeId`. If this option is `true`, `serialize` will,
      by default include the ID in the JSON object it builds.
       The adapter passes in `includeId: true` when serializing
      a record for `createRecord`, but not for `updateRecord`.
       ## Customization
       Your server may expect a different JSON format than the
      built-in serialization format.
       In that case, you can implement `serialize` yourself and
      return a JSON hash of your choosing.
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        serialize: function(snapshot, options) {
          var json = {
            POST_TTL: snapshot.attr('title'),
            POST_BDY: snapshot.attr('body'),
            POST_CMS: snapshot.hasMany('comments', { ids: true })
          }
           if (options.includeId) {
            json.POST_ID_ = snapshot.id;
          }
           return json;
        }
      });
      ```
       ## Customizing an App-Wide Serializer
       If you want to define a serializer for your entire
      application, you'll probably want to use `eachAttribute`
      and `eachRelationship` on the record.
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        serialize: function(snapshot, options) {
          var json = {};
           snapshot.eachAttribute(function(name) {
            json[serverAttributeName(name)] = snapshot.attr(name);
          })
           snapshot.eachRelationship(function(name, relationship) {
            if (relationship.kind === 'hasMany') {
              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
            }
          });
           if (options.includeId) {
            json.ID_ = snapshot.id;
          }
           return json;
        }
      });
       function serverAttributeName(attribute) {
        return attribute.underscore().toUpperCase();
      }
       function serverHasManyName(name) {
        return serverAttributeName(name.singularize()) + "_IDS";
      }
      ```
       This serializer will generate JSON that looks like this:
       ```javascript
      {
        "TITLE": "Rails is omakase",
        "BODY": "Yep. Omakase.",
        "COMMENT_IDS": [ 1, 2, 3 ]
      }
      ```
       ## Tweaking the Default JSON
       If you just want to do some small tweaks on the default JSON,
      you can call super first and make the tweaks on the returned
      JSON.
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        serialize: function(snapshot, options) {
          var json = this._super.apply(this, arguments);
           json.subject = json.title;
          delete json.title;
           return json;
        }
      });
      ```
       @method serialize
      @param {DS.Snapshot} snapshot
      @param {Object} options
      @return {Object} json
    */
    serialize: function serialize(snapshot, options) {
      var _this6 = this;

      var json = {};

      if (options && options.includeId) {
        var id = snapshot.id;

        if (id) {
          json[get(this, 'primaryKey')] = id;
        }
      }

      snapshot.eachAttribute(function (key, attribute) {
        _this6.serializeAttribute(snapshot, json, key, attribute);
      });

      snapshot.eachRelationship(function (key, relationship) {
        if (relationship.kind === 'belongsTo') {
          _this6.serializeBelongsTo(snapshot, json, relationship);
        } else if (relationship.kind === 'hasMany') {
          _this6.serializeHasMany(snapshot, json, relationship);
        }
      });

      return json;
    },

    /**
      You can use this method to customize how a serialized record is added to the complete
      JSON hash to be sent to the server. By default the JSON Serializer does not namespace
      the payload and just sends the raw serialized JSON object.
      If your server expects namespaced keys, you should consider using the RESTSerializer.
      Otherwise you can override this method to customize how the record is added to the hash.
      The hash property should be modified by reference.
       For example, your server may expect underscored root objects.
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        serializeIntoHash: function(data, type, snapshot, options) {
          var root = Ember.String.decamelize(type.modelName);
          data[root] = this.serialize(snapshot, options);
        }
      });
      ```
       @method serializeIntoHash
      @param {Object} hash
      @param {DS.Model} typeClass
      @param {DS.Snapshot} snapshot
      @param {Object} options
    */
    serializeIntoHash: function serializeIntoHash(hash, typeClass, snapshot, options) {
      assign(hash, this.serialize(snapshot, options));
    },

    /**
     `serializeAttribute` can be used to customize how `DS.attr`
     properties are serialized
      For example if you wanted to ensure all your attributes were always
     serialized as properties on an `attributes` object you could
     write:
      ```app/serializers/application.js
     import DS from 'ember-data';
      export default DS.JSONSerializer.extend({
       serializeAttribute: function(snapshot, json, key, attributes) {
         json.attributes = json.attributes || {};
         this._super(snapshot, json.attributes, key, attributes);
       }
     });
     ```
      @method serializeAttribute
     @param {DS.Snapshot} snapshot
     @param {Object} json
     @param {String} key
     @param {Object} attribute
    */
    serializeAttribute: function serializeAttribute(snapshot, json, key, attribute) {
      var type = attribute.type;

      if (this._canSerialize(key)) {
        var value = snapshot.attr(key);
        if (type) {
          var transform = this.transformFor(type);
          value = transform.serialize(value, attribute.options);
        }

        // if provided, use the mapping provided by `attrs` in
        // the serializer
        var payloadKey = this._getMappedKey(key, snapshot.type);

        if (payloadKey === key && this.keyForAttribute) {
          payloadKey = this.keyForAttribute(key, 'serialize');
        }

        json[payloadKey] = value;
      }
    },

    /**
     `serializeBelongsTo` can be used to customize how `DS.belongsTo`
     properties are serialized.
      Example
      ```app/serializers/post.js
     import DS from 'ember-data';
      export default DS.JSONSerializer.extend({
       serializeBelongsTo: function(snapshot, json, relationship) {
         var key = relationship.key;
          var belongsTo = snapshot.belongsTo(key);
          key = this.keyForRelationship ? this.keyForRelationship(key, "belongsTo", "serialize") : key;
          json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();
       }
     });
     ```
      @method serializeBelongsTo
     @param {DS.Snapshot} snapshot
     @param {Object} json
     @param {Object} relationship
    */
    serializeBelongsTo: function serializeBelongsTo(snapshot, json, relationship) {
      var key = relationship.key;

      if (this._canSerialize(key)) {
        var belongsToId = snapshot.belongsTo(key, { id: true });

        // if provided, use the mapping provided by `attrs` in
        // the serializer
        var payloadKey = this._getMappedKey(key, snapshot.type);
        if (payloadKey === key && this.keyForRelationship) {
          payloadKey = this.keyForRelationship(key, "belongsTo", "serialize");
        }

        //Need to check whether the id is there for new&async records
        if (isNone(belongsToId)) {
          json[payloadKey] = null;
        } else {
          json[payloadKey] = belongsToId;
        }

        if (relationship.options.polymorphic) {
          this.serializePolymorphicType(snapshot, json, relationship);
        }
      }
    },

    /**
     `serializeHasMany` can be used to customize how `DS.hasMany`
     properties are serialized.
      Example
      ```app/serializers/post.js
     import DS from 'ember-data';
      export default DS.JSONSerializer.extend({
       serializeHasMany: function(snapshot, json, relationship) {
         var key = relationship.key;
         if (key === 'comments') {
           return;
         } else {
           this._super.apply(this, arguments);
         }
       }
     });
     ```
      @method serializeHasMany
     @param {DS.Snapshot} snapshot
     @param {Object} json
     @param {Object} relationship
    */
    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      var key = relationship.key;
      var shouldSerializeHasMany = '_shouldSerializeHasMany';
      if (false) {
        shouldSerializeHasMany = 'shouldSerializeHasMany';
      }

      if (this[shouldSerializeHasMany](snapshot, key, relationship)) {
        var hasMany = snapshot.hasMany(key, { ids: true });
        if (hasMany !== undefined) {
          // if provided, use the mapping provided by `attrs` in
          // the serializer
          var payloadKey = this._getMappedKey(key, snapshot.type);
          if (payloadKey === key && this.keyForRelationship) {
            payloadKey = this.keyForRelationship(key, "hasMany", "serialize");
          }

          json[payloadKey] = hasMany;
          // TODO support for polymorphic manyToNone and manyToMany relationships
        }
      }
    },

    /**
      You can use this method to customize how polymorphic objects are
      serialized. Objects are considered to be polymorphic if
      `{ polymorphic: true }` is pass as the second argument to the
      `DS.belongsTo` function.
       Example
       ```app/serializers/comment.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        serializePolymorphicType: function(snapshot, json, relationship) {
          var key = relationship.key,
              belongsTo = snapshot.belongsTo(key);
          key = this.keyForAttribute ? this.keyForAttribute(key, "serialize") : key;
           if (Ember.isNone(belongsTo)) {
            json[key + "_type"] = null;
          } else {
            json[key + "_type"] = belongsTo.modelName;
          }
        }
      });
      ```
       @method serializePolymorphicType
      @param {DS.Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializePolymorphicType: _ember['default'].K,

    /**
      `extractMeta` is used to deserialize any meta information in the
      adapter payload. By default Ember Data expects meta information to
      be located on the `meta` property of the payload object.
       Example
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        extractMeta: function(store, typeClass, payload) {
          if (payload && payload.hasOwnProperty('_pagination')) {
            let meta = payload._pagination;
            delete payload._pagination;
            return meta;
          }
        }
      });
      ```
       @method extractMeta
      @param {DS.Store} store
      @param {DS.Model} modelClass
      @param {Object} payload
    */
    extractMeta: function extractMeta(store, modelClass, payload) {
      if (payload && payload['meta'] !== undefined) {
        var meta = payload.meta;
        delete payload.meta;
        return meta;
      }
    },

    /**
      `extractErrors` is used to extract model errors when a call
      to `DS.Model#save` fails with an `InvalidError`. By default
      Ember Data expects error information to be located on the `errors`
      property of the payload object.
       This serializer expects this `errors` object to be an Array similar
      to the following, compliant with the JSON-API specification:
       ```js
      {
        "errors": [
          {
            "detail": "This username is already taken!",
            "source": {
              "pointer": "data/attributes/username"
            }
          }, {
            "detail": "Doesn't look like a valid email.",
            "source": {
              "pointer": "data/attributes/email"
            }
          }
        ]
      }
      ```
       The key `detail` provides a textual description of the problem.
      Alternatively, the key `title` can be used for the same purpose.
       The nested keys `source.pointer` detail which specific element
      of the request data was invalid.
       Note that JSON-API also allows for object-level errors to be placed
      in an object with pointer `data`, signifying that the problem
      cannot be traced to a specific attribute:
       ```javascript
      {
        "errors": [
          {
            "detail": "Some generic non property error message",
            "source": {
              "pointer": "data"
            }
          }
        ]
      }
      ```
       When turn into a `DS.Errors` object, you can read these errors
      through the property `base`:
       ```handlebars
      {{#each model.errors.base as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      ```
       Example of alternative implementation, overriding the default
      behavior to deal with a different format of errors:
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        extractErrors: function(store, typeClass, payload, id) {
          if (payload && typeof payload === 'object' && payload._problems) {
            payload = payload._problems;
            this.normalizeErrors(typeClass, payload);
          }
          return payload;
        }
      });
      ```
       @method extractErrors
      @param {DS.Store} store
      @param {DS.Model} typeClass
      @param {Object} payload
      @param {(String|Number)} id
      @return {Object} json The deserialized errors
    */
    extractErrors: function extractErrors(store, typeClass, payload, id) {
      var _this7 = this;

      if (payload && typeof payload === 'object' && payload.errors) {
        payload = (0, _emberDataAdaptersErrors.errorsArrayToHash)(payload.errors);

        this.normalizeUsingDeclaredMapping(typeClass, payload);

        typeClass.eachAttribute(function (name) {
          var key = _this7.keyForAttribute(name, 'deserialize');
          if (key !== name && payload[key] !== undefined) {
            payload[name] = payload[key];
            delete payload[key];
          }
        });

        typeClass.eachRelationship(function (name) {
          var key = _this7.keyForRelationship(name, 'deserialize');
          if (key !== name && payload[key] !== undefined) {
            payload[name] = payload[key];
            delete payload[key];
          }
        });
      }

      return payload;
    },

    /**
     `keyForAttribute` can be used to define rules for how to convert an
     attribute name in your model to a key in your JSON.
      Example
      ```app/serializers/application.js
     import DS from 'ember-data';
      export default DS.RESTSerializer.extend({
       keyForAttribute: function(attr, method) {
         return Ember.String.underscore(attr).toUpperCase();
       }
     });
     ```
      @method keyForAttribute
     @param {String} key
     @param {String} method
     @return {String} normalized key
    */
    keyForAttribute: function keyForAttribute(key, method) {
      return key;
    },

    /**
     `keyForRelationship` can be used to define a custom key when
     serializing and deserializing relationship properties. By default
     `JSONSerializer` does not provide an implementation of this method.
      Example
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.JSONSerializer.extend({
        keyForRelationship: function(key, relationship, method) {
          return 'rel_' + Ember.String.underscore(key);
        }
      });
      ```
      @method keyForRelationship
     @param {String} key
     @param {String} typeClass
     @param {String} method
     @return {String} normalized key
    */
    keyForRelationship: function keyForRelationship(key, typeClass, method) {
      return key;
    },

    /**
     `keyForLink` can be used to define a custom key when deserializing link
     properties.
      @method keyForLink
     @param {String} key
     @param {String} kind `belongsTo` or `hasMany`
     @return {String} normalized key
    */
    keyForLink: function keyForLink(key, kind) {
      return key;
    },

    // HELPERS

    /**
     @method transformFor
     @private
     @param {String} attributeType
     @param {Boolean} skipAssertion
     @return {DS.Transform} transform
    */
    transformFor: function transformFor(attributeType, skipAssertion) {
      var transform = (0, _emberDataPrivateUtils.getOwner)(this).lookup('transform:' + attributeType);

      (0, _emberDataPrivateDebug.assert)("Unable to find transform for '" + attributeType + "'", skipAssertion || !!transform);

      return transform;
    }
  });

  if (false) {

    JSONSerializer.reopen({

      /**
        @method modelNameFromPayloadType
        @public
        @param {String} type
        @return {String} the model's modelName
        */
      modelNameFromPayloadType: function modelNameFromPayloadType(type) {
        return (0, _emberDataPrivateSystemNormalizeModelName['default'])(type);
      },

      _hasCustomModelNameFromPayloadKey: function _hasCustomModelNameFromPayloadKey() {
        return this.modelNameFromPayloadKey !== JSONSerializer.prototype.modelNameFromPayloadKey;
      }

    });
  }

  exports['default'] = JSONSerializer;
});
define("ember-data/serializers/rest", ["exports", "ember", "ember-data/-private/debug", "ember-data/serializers/json", "ember-data/-private/system/normalize-model-name", "ember-inflector", "ember-data/-private/system/coerce-id", "ember-data/-private/utils", "ember-data/-private/features"], function (exports, _ember, _emberDataPrivateDebug, _emberDataSerializersJson, _emberDataPrivateSystemNormalizeModelName, _emberInflector, _emberDataPrivateSystemCoerceId, _emberDataPrivateUtils, _emberDataPrivateFeatures) {
  "use strict";

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  /**
    @module ember-data
  */

  var camelize = _ember["default"].String.camelize;

  /**
    Normally, applications will use the `RESTSerializer` by implementing
    the `normalize` method.
  
    This allows you to do whatever kind of munging you need, and is
    especially useful if your server is inconsistent and you need to
    do munging differently for many different kinds of responses.
  
    See the `normalize` documentation for more information.
  
    ## Across the Board Normalization
  
    There are also a number of hooks that you might find useful to define
    across-the-board rules for your payload. These rules will be useful
    if your server is consistent, or if you're building an adapter for
    an infrastructure service, like Firebase, and want to encode service
    conventions.
  
    For example, if all of your keys are underscored and all-caps, but
    otherwise consistent with the names you use in your models, you
    can implement across-the-board rules for how to convert an attribute
    name in your model to a key in your JSON.
  
    ```app/serializers/application.js
    import DS from 'ember-data';
  
    export default DS.RESTSerializer.extend({
      keyForAttribute: function(attr, method) {
        return Ember.String.underscore(attr).toUpperCase();
      }
    });
    ```
  
    You can also implement `keyForRelationship`, which takes the name
    of the relationship as the first parameter, the kind of
    relationship (`hasMany` or `belongsTo`) as the second parameter, and
    the method (`serialize` or `deserialize`) as the third parameter.
  
    @class RESTSerializer
    @namespace DS
    @extends DS.JSONSerializer
  */
  var RESTSerializer = _emberDataSerializersJson["default"].extend({

    /**
     `keyForPolymorphicType` can be used to define a custom key when
     serializing and deserializing a polymorphic type. By default, the
     returned key is `${key}Type`.
      Example
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        keyForPolymorphicType: function(key, relationship) {
          var relationshipKey = this.keyForRelationship(key);
           return 'type-' + relationshipKey;
        }
      });
      ```
      @method keyForPolymorphicType
     @param {String} key
     @param {String} typeClass
     @param {String} method
     @return {String} normalized key
    */
    keyForPolymorphicType: function keyForPolymorphicType(key, typeClass, method) {
      var relationshipKey = this.keyForRelationship(key);

      return relationshipKey + "Type";
    },

    /**
      Normalizes a part of the JSON payload returned by
      the server. You should override this method, munge the hash
      and call super if you have generic normalization to do.
       It takes the type of the record that is being normalized
      (as a DS.Model class), the property where the hash was
      originally found, and the hash to normalize.
       For example, if you have a payload that looks like this:
       ```js
      {
        "post": {
          "id": 1,
          "title": "Rails is omakase",
          "comments": [ 1, 2 ]
        },
        "comments": [{
          "id": 1,
          "body": "FIRST"
        }, {
          "id": 2,
          "body": "Rails is unagi"
        }]
      }
      ```
       The `normalize` method will be called three times:
       * With `App.Post`, `"posts"` and `{ id: 1, title: "Rails is omakase", ... }`
      * With `App.Comment`, `"comments"` and `{ id: 1, body: "FIRST" }`
      * With `App.Comment`, `"comments"` and `{ id: 2, body: "Rails is unagi" }`
       You can use this method, for example, to normalize underscored keys to camelized
      or other general-purpose normalizations. You will only need to implement
      `normalize` and manipulate the payload as desired.
       For example, if the `IDs` under `"comments"` are provided as `_id` instead of
      `id`, you can specify how to normalize just the comments:
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        normalize(model, hash, prop) {
          if (prop === 'comments') {
            hash.id = hash._id;
            delete hash._id;
          }
           return this._super(...arguments);
        }
      });
      ```
       On each call to the `normalize` method, the third parameter (`prop`) is always
      one of the keys that were in the original payload or in the result of another
      normalization as `normalizeResponse`.
       @method normalize
      @param {DS.Model} modelClass
      @param {Object} resourceHash
      @param {String} prop
      @return {Object}
    */
    normalize: function normalize(modelClass, resourceHash, prop) {
      if (this.normalizeHash && this.normalizeHash[prop]) {
        (0, _emberDataPrivateDebug.deprecate)('`RESTSerializer.normalizeHash` has been deprecated. Please use `serializer.normalize` to modify the payload of single resources.', false, {
          id: 'ds.serializer.normalize-hash-deprecated',
          until: '3.0.0'
        });
        this.normalizeHash[prop](resourceHash);
      }
      return this._super(modelClass, resourceHash);
    },

    /**
      Normalizes an array of resource payloads and returns a JSON-API Document
      with primary data and, if any, included data as `{ data, included }`.
       @method _normalizeArray
      @param {DS.Store} store
      @param {String} modelName
      @param {Object} arrayHash
      @param {String} prop
      @return {Object}
      @private
    */
    _normalizeArray: function _normalizeArray(store, modelName, arrayHash, prop) {
      var _this = this;

      var documentHash = {
        data: [],
        included: []
      };

      var modelClass = store.modelFor(modelName);
      var serializer = store.serializerFor(modelName);

      _ember["default"].makeArray(arrayHash).forEach(function (hash) {
        var _normalizePolymorphicRecord2 = _this._normalizePolymorphicRecord(store, hash, prop, modelClass, serializer);

        var data = _normalizePolymorphicRecord2.data;
        var included = _normalizePolymorphicRecord2.included;

        documentHash.data.push(data);
        if (included) {
          var _documentHash$included;

          (_documentHash$included = documentHash.included).push.apply(_documentHash$included, _toConsumableArray(included));
        }
      });

      return documentHash;
    },

    _normalizePolymorphicRecord: function _normalizePolymorphicRecord(store, hash, prop, primaryModelClass, primarySerializer) {
      var serializer = primarySerializer;
      var modelClass = primaryModelClass;

      var primaryHasTypeAttribute = (0, _emberDataPrivateUtils.modelHasAttributeOrRelationshipNamedType)(primaryModelClass);

      if (!primaryHasTypeAttribute && hash.type) {
        // Support polymorphic records in async relationships
        var modelName = undefined;
        if (false) {
          modelName = this.modelNameFromPayloadType(hash.type);
          var deprecatedModelNameLookup = this.modelNameFromPayloadKey(hash.type);

          if (modelName !== deprecatedModelNameLookup && !this._hasCustomModelNameFromPayloadType() && this._hasCustomModelNameFromPayloadKey()) {
            (0, _emberDataPrivateDebug.deprecate)("You are using modelNameFromPayloadKey to normalize the type for a polymorphic relationship. This is has been deprecated in favor of modelNameFromPayloadType", false, {
              id: 'ds.rest-serializer.deprecated-model-name-for-polymorphic-type',
              until: '3.0.0'
            });

            modelName = deprecatedModelNameLookup;
          }
        } else {
          modelName = this.modelNameFromPayloadKey(hash.type);
        }

        if (store._hasModelFor(modelName)) {
          serializer = store.serializerFor(modelName);
          modelClass = store.modelFor(modelName);
        }
      }

      return serializer.normalize(modelClass, hash, prop);
    },

    /*
      @method _normalizeResponse
      @param {DS.Store} store
      @param {DS.Model} primaryModelClass
      @param {Object} payload
      @param {String|Number} id
      @param {String} requestType
      @param {Boolean} isSingle
      @return {Object} JSON-API Document
      @private
    */
    _normalizeResponse: function _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {
      var documentHash = {
        data: null,
        included: []
      };

      var meta = this.extractMeta(store, primaryModelClass, payload);
      if (meta) {
        (0, _emberDataPrivateDebug.assert)('The `meta` returned from `extractMeta` has to be an object, not "' + _ember["default"].typeOf(meta) + '".', _ember["default"].typeOf(meta) === 'object');
        documentHash.meta = meta;
      }

      var keys = Object.keys(payload);

      for (var i = 0, _length = keys.length; i < _length; i++) {
        var prop = keys[i];
        var modelName = prop;
        var forcedSecondary = false;

        /*
          If you want to provide sideloaded records of the same type that the
          primary data you can do that by prefixing the key with `_`.
           Example
           ```
          {
            users: [
              { id: 1, title: 'Tom', manager: 3 },
              { id: 2, title: 'Yehuda', manager: 3 }
            ],
            _users: [
              { id: 3, title: 'Tomster' }
            ]
          }
          ```
           This forces `_users` to be added to `included` instead of `data`.
         */
        if (prop.charAt(0) === '_') {
          forcedSecondary = true;
          modelName = prop.substr(1);
        }

        var typeName = this.modelNameFromPayloadKey(modelName);
        if (!store.modelFactoryFor(typeName)) {
          (0, _emberDataPrivateDebug.warn)(this.warnMessageNoModelForKey(modelName, typeName), false, {
            id: 'ds.serializer.model-for-key-missing'
          });
          continue;
        }

        var isPrimary = !forcedSecondary && this.isPrimaryType(store, typeName, primaryModelClass);
        var value = payload[prop];

        if (value === null) {
          continue;
        }

        (0, _emberDataPrivateDebug.runInDebug)(function () {
          var isQueryRecordAnArray = requestType === 'queryRecord' && isPrimary && Array.isArray(value);
          var message = "The adapter returned an array for the primary data of a `queryRecord` response. This is deprecated as `queryRecord` should return a single record.";

          (0, _emberDataPrivateDebug.deprecate)(message, !isQueryRecordAnArray, {
            id: 'ds.serializer.rest.queryRecord-array-response',
            until: '3.0'
          });
        });

        /*
          Support primary data as an object instead of an array.
           Example
           ```
          {
            user: { id: 1, title: 'Tom', manager: 3 }
          }
          ```
         */
        if (isPrimary && _ember["default"].typeOf(value) !== 'array') {
          var _normalizePolymorphicRecord3 = this._normalizePolymorphicRecord(store, value, prop, primaryModelClass, this);

          var _data = _normalizePolymorphicRecord3.data;
          var _included = _normalizePolymorphicRecord3.included;

          documentHash.data = _data;
          if (_included) {
            var _documentHash$included2;

            (_documentHash$included2 = documentHash.included).push.apply(_documentHash$included2, _toConsumableArray(_included));
          }
          continue;
        }

        var _normalizeArray2 = this._normalizeArray(store, typeName, value, prop);

        var data = _normalizeArray2.data;
        var included = _normalizeArray2.included;

        if (included) {
          var _documentHash$included3;

          (_documentHash$included3 = documentHash.included).push.apply(_documentHash$included3, _toConsumableArray(included));
        }

        if (isSingle) {
          data.forEach(function (resource) {

            /*
              Figures out if this is the primary record or not.
               It's either:
               1. The record with the same ID as the original request
              2. If it's a newly created record without an ID, the first record
                 in the array
             */
            var isUpdatedRecord = isPrimary && (0, _emberDataPrivateSystemCoerceId["default"])(resource.id) === id;
            var isFirstCreatedRecord = isPrimary && !id && !documentHash.data;

            if (isFirstCreatedRecord || isUpdatedRecord) {
              documentHash.data = resource;
            } else {
              documentHash.included.push(resource);
            }
          });
        } else {
          if (isPrimary) {
            documentHash.data = data;
          } else {
            if (data) {
              var _documentHash$included4;

              (_documentHash$included4 = documentHash.included).push.apply(_documentHash$included4, _toConsumableArray(data));
            }
          }
        }
      }

      return documentHash;
    },

    isPrimaryType: function isPrimaryType(store, typeName, primaryTypeClass) {
      var typeClass = store.modelFor(typeName);
      return typeClass.modelName === primaryTypeClass.modelName;
    },

    /**
      This method allows you to push a payload containing top-level
      collections of records organized per type.
       ```js
      {
        "posts": [{
          "id": "1",
          "title": "Rails is omakase",
          "author", "1",
          "comments": [ "1" ]
        }],
        "comments": [{
          "id": "1",
          "body": "FIRST"
        }],
        "users": [{
          "id": "1",
          "name": "@d2h"
        }]
      }
      ```
       It will first normalize the payload, so you can use this to push
      in data streaming in from your server structured the same way
      that fetches and saves are structured.
       @method pushPayload
      @param {DS.Store} store
      @param {Object} payload
    */
    pushPayload: function pushPayload(store, payload) {
      var documentHash = {
        data: [],
        included: []
      };

      for (var prop in payload) {
        var modelName = this.modelNameFromPayloadKey(prop);
        if (!store.modelFactoryFor(modelName)) {
          (0, _emberDataPrivateDebug.warn)(this.warnMessageNoModelForKey(prop, modelName), false, {
            id: 'ds.serializer.model-for-key-missing'
          });
          continue;
        }
        var type = store.modelFor(modelName);
        var typeSerializer = store.serializerFor(type.modelName);

        _ember["default"].makeArray(payload[prop]).forEach(function (hash) {
          var _typeSerializer$normalize = typeSerializer.normalize(type, hash, prop);

          var data = _typeSerializer$normalize.data;
          var included = _typeSerializer$normalize.included;

          documentHash.data.push(data);
          if (included) {
            var _documentHash$included5;

            (_documentHash$included5 = documentHash.included).push.apply(_documentHash$included5, _toConsumableArray(included));
          }
        });
      }

      if (false) {
        return store.push(documentHash);
      } else {
        store.push(documentHash);
      }
    },

    /**
      This method is used to convert each JSON root key in the payload
      into a modelName that it can use to look up the appropriate model for
      that part of the payload.
       For example, your server may send a model name that does not correspond with
      the name of the model in your app. Let's take a look at an example model,
      and an example payload:
       ```app/models/post.js
      import DS from 'ember-data';
       export default DS.Model.extend({
      });
      ```
       ```javascript
        {
          "blog/post": {
            "id": "1
          }
        }
      ```
       Ember Data is going to normalize the payload's root key for the modelName. As a result,
      it will try to look up the "blog/post" model. Since we don't have a model called "blog/post"
      (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error
      because it cannot find the "blog/post" model.
       Since we want to remove this namespace, we can define a serializer for the application that will
      remove "blog/" from the payload key whenver it's encountered by Ember Data:
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        modelNameFromPayloadKey: function(payloadKey) {
          if (payloadKey === 'blog/post') {
            return this._super(payloadKey.replace('blog/', ''));
          } else {
           return this._super(payloadKey);
          }
        }
      });
      ```
       After refreshing, Ember Data will appropriately look up the "post" model.
       By default the modelName for a model is its
      name in dasherized form. This means that a payload key like "blogPost" would be
      normalized to "blog-post" when Ember Data looks up the model. Usually, Ember Data
      can use the correct inflection to do this for you. Most of the time, you won't
      need to override `modelNameFromPayloadKey` for this purpose.
       @method modelNameFromPayloadKey
      @param {String} key
      @return {String} the model's modelName
    */
    modelNameFromPayloadKey: function modelNameFromPayloadKey(key) {
      return (0, _emberInflector.singularize)((0, _emberDataPrivateSystemNormalizeModelName["default"])(key));
    },

    // SERIALIZE

    /**
      Called when a record is saved in order to convert the
      record into JSON.
       By default, it creates a JSON object with a key for
      each attribute and belongsTo relationship.
       For example, consider this model:
       ```app/models/comment.js
      import DS from 'ember-data';
       export default DS.Model.extend({
        title: DS.attr(),
        body: DS.attr(),
         author: DS.belongsTo('user')
      });
      ```
       The default serialization would create a JSON object like:
       ```js
      {
        "title": "Rails is unagi",
        "body": "Rails? Omakase? O_O",
        "author": 12
      }
      ```
       By default, attributes are passed through as-is, unless
      you specified an attribute type (`DS.attr('date')`). If
      you specify a transform, the JavaScript value will be
      serialized when inserted into the JSON hash.
       By default, belongs-to relationships are converted into
      IDs when inserted into the JSON hash.
       ## IDs
       `serialize` takes an options hash with a single option:
      `includeId`. If this option is `true`, `serialize` will,
      by default include the ID in the JSON object it builds.
       The adapter passes in `includeId: true` when serializing
      a record for `createRecord`, but not for `updateRecord`.
       ## Customization
       Your server may expect a different JSON format than the
      built-in serialization format.
       In that case, you can implement `serialize` yourself and
      return a JSON hash of your choosing.
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        serialize: function(snapshot, options) {
          var json = {
            POST_TTL: snapshot.attr('title'),
            POST_BDY: snapshot.attr('body'),
            POST_CMS: snapshot.hasMany('comments', { ids: true })
          }
           if (options.includeId) {
            json.POST_ID_ = snapshot.id;
          }
           return json;
        }
      });
      ```
       ## Customizing an App-Wide Serializer
       If you want to define a serializer for your entire
      application, you'll probably want to use `eachAttribute`
      and `eachRelationship` on the record.
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        serialize: function(snapshot, options) {
          var json = {};
           snapshot.eachAttribute(function(name) {
            json[serverAttributeName(name)] = snapshot.attr(name);
          })
           snapshot.eachRelationship(function(name, relationship) {
            if (relationship.kind === 'hasMany') {
              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
            }
          });
           if (options.includeId) {
            json.ID_ = snapshot.id;
          }
           return json;
        }
      });
       function serverAttributeName(attribute) {
        return attribute.underscore().toUpperCase();
      }
       function serverHasManyName(name) {
        return serverAttributeName(name.singularize()) + "_IDS";
      }
      ```
       This serializer will generate JSON that looks like this:
       ```js
      {
        "TITLE": "Rails is omakase",
        "BODY": "Yep. Omakase.",
        "COMMENT_IDS": [ 1, 2, 3 ]
      }
      ```
       ## Tweaking the Default JSON
       If you just want to do some small tweaks on the default JSON,
      you can call super first and make the tweaks on the returned
      JSON.
       ```app/serializers/post.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        serialize: function(snapshot, options) {
          var json = this._super(snapshot, options);
           json.subject = json.title;
          delete json.title;
           return json;
        }
      });
      ```
       @method serialize
      @param {DS.Snapshot} snapshot
      @param {Object} options
      @return {Object} json
    */
    serialize: function serialize(snapshot, options) {
      return this._super.apply(this, arguments);
    },

    /**
      You can use this method to customize the root keys serialized into the JSON.
      The hash property should be modified by reference (possibly using something like _.extend)
      By default the REST Serializer sends the modelName of a model, which is a camelized
      version of the name.
       For example, your server may expect underscored root objects.
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        serializeIntoHash: function(data, type, record, options) {
          var root = Ember.String.decamelize(type.modelName);
          data[root] = this.serialize(record, options);
        }
      });
      ```
       @method serializeIntoHash
      @param {Object} hash
      @param {DS.Model} typeClass
      @param {DS.Snapshot} snapshot
      @param {Object} options
    */
    serializeIntoHash: function serializeIntoHash(hash, typeClass, snapshot, options) {
      var normalizedRootKey = this.payloadKeyFromModelName(typeClass.modelName);
      hash[normalizedRootKey] = this.serialize(snapshot, options);
    },

    /**
      You can use `payloadKeyFromModelName` to override the root key for an outgoing
      request. By default, the RESTSerializer returns a camelized version of the
      model's name.
       For a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer
      will send it to the server with `tacoParty` as the root key in the JSON payload:
       ```js
      {
        "tacoParty": {
          "id": "1",
          "location": "Matthew Beale's House"
        }
      }
      ```
       For example, your server may expect dasherized root objects:
       ```app/serializers/application.js
      import DS from 'ember-data';
       export default DS.RESTSerializer.extend({
        payloadKeyFromModelName: function(modelName) {
          return Ember.String.dasherize(modelName);
        }
      });
      ```
       Given a `TacoParty` model, calling `save` on it would produce an outgoing
      request like:
       ```js
      {
        "taco-party": {
          "id": "1",
          "location": "Matthew Beale's House"
        }
      }
      ```
       @method payloadKeyFromModelName
      @param {String} modelName
      @return {String}
    */
    payloadKeyFromModelName: function payloadKeyFromModelName(modelName) {
      return camelize(modelName);
    },

    /**
      You can use this method to customize how polymorphic objects are serialized.
      By default the REST Serializer creates the key by appending `Type` to
      the attribute and value from the model's camelcased model name.
       @method serializePolymorphicType
      @param {DS.Snapshot} snapshot
      @param {Object} json
      @param {Object} relationship
    */
    serializePolymorphicType: function serializePolymorphicType(snapshot, json, relationship) {
      var key = relationship.key;
      var belongsTo = snapshot.belongsTo(key);
      var typeKey = this.keyForPolymorphicType(key, relationship.type, 'serialize');

      // old way of getting the key for the polymorphic type
      key = this.keyForAttribute ? this.keyForAttribute(key, "serialize") : key;
      key = key + "Type";

      // The old way of serializing the type of a polymorphic record used
      // `keyForAttribute`, which is not correct. The next code checks if the old
      // way is used and if it differs from the new way of using
      // `keyForPolymorphicType`. If this is the case, a deprecation warning is
      // logged and the old way is restored (so nothing breaks).
      if (key !== typeKey && this.keyForPolymorphicType === RESTSerializer.prototype.keyForPolymorphicType) {
        (0, _emberDataPrivateDebug.deprecate)("The key to serialize the type of a polymorphic record is created via keyForAttribute which has been deprecated. Use the keyForPolymorphicType hook instead.", false, {
          id: 'ds.rest-serializer.deprecated-key-for-polymorphic-type',
          until: '3.0.0'
        });

        typeKey = key;
      }

      if (_ember["default"].isNone(belongsTo)) {
        json[typeKey] = null;
      } else {
        if (false) {
          json[typeKey] = this.payloadTypeFromModelName(belongsTo.modelName);
        } else {
          json[typeKey] = camelize(belongsTo.modelName);
        }
      }
    },

    /**
      You can use this method to customize how a polymorphic relationship should
      be extracted.
       @method extractPolymorphicRelationship
      @param {Object} relationshipType
      @param {Object} relationshipHash
      @param {Object} relationshipOptions
      @return {Object}
     */
    extractPolymorphicRelationship: function extractPolymorphicRelationship(relationshipType, relationshipHash, relationshipOptions) {
      var key = relationshipOptions.key;
      var resourceHash = relationshipOptions.resourceHash;
      var relationshipMeta = relationshipOptions.relationshipMeta;

      // A polymorphic belongsTo relationship can be present in the payload
      // either in the form where the `id` and the `type` are given:
      //
      //   {
      //     message: { id: 1, type: 'post' }
      //   }
      //
      // or by the `id` and a `<relationship>Type` attribute:
      //
      //   {
      //     message: 1,
      //     messageType: 'post'
      //   }
      //
      // The next code checks if the latter case is present and returns the
      // corresponding JSON-API representation. The former case is handled within
      // the base class JSONSerializer.
      var isPolymorphic = relationshipMeta.options.polymorphic;
      var typeProperty = this.keyForPolymorphicType(key, relationshipType, 'deserialize');

      if (isPolymorphic && resourceHash[typeProperty] !== undefined && typeof relationshipHash !== 'object') {

        if (false) {

          var payloadType = resourceHash[typeProperty];
          var type = this.modelNameFromPayloadType(payloadType);
          var deprecatedTypeLookup = this.modelNameFromPayloadKey(payloadType);

          if (payloadType !== deprecatedTypeLookup && !this._hasCustomModelNameFromPayloadType() && this._hasCustomModelNameFromPayloadKey()) {
            (0, _emberDataPrivateDebug.deprecate)("You are using modelNameFromPayloadKey to normalize the type for a polymorphic relationship. This has been deprecated in favor of modelNameFromPayloadType", false, {
              id: 'ds.rest-serializer.deprecated-model-name-for-polymorphic-type',
              until: '3.0.0'
            });

            type = deprecatedTypeLookup;
          }

          return {
            id: relationshipHash,
            type: type
          };
        } else {

          var type = this.modelNameFromPayloadKey(resourceHash[typeProperty]);
          return {
            id: relationshipHash,
            type: type
          };
        }
      }

      return this._super.apply(this, arguments);
    }
  });

  if (false) {

    RESTSerializer.reopen({

      /**
        `modelNameFromPayloadType` can be used to change the mapping for a DS model
        name, taken from the value in the payload.
         Say your API namespaces the type of a model and returns the following
        payload for the `post` model, which has a polymorphic `user` relationship:
         ```javascript
        // GET /api/posts/1
        {
          "post": {
            "id": 1,
            "user": 1,
            "userType: "api::v1::administrator"
          }
        }
        ```
         By overwriting `modelNameFromPayloadType` you can specify that the
        `administrator` model should be used:
         ```app/serializers/application.js
        import DS from "ember-data";
         export default DS.RESTSerializer.extend({
          modelNameFromPayloadType(payloadType) {
            return payloadType.replace('api::v1::', '');
          }
        });
        ```
         By default the modelName for a model is its name in dasherized form.
        Usually, Ember Data can use the correct inflection to do this for you. Most
        of the time, you won't need to override `modelNameFromPayloadType` for this
        purpose.
         Also take a look at
        [payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize
        how the type of a record should be serialized.
         @method modelNameFromPayloadType
        @public
        @param {String} payloadType type from payload
        @return {String} modelName
      */
      modelNameFromPayloadType: function modelNameFromPayloadType(payloadType) {
        return (0, _emberInflector.singularize)((0, _emberDataPrivateSystemNormalizeModelName["default"])(payloadType));
      },

      /**
        `payloadTypeFromModelName` can be used to change the mapping for the type in
        the payload, taken from the model name.
         Say your API namespaces the type of a model and expects the following
        payload when you update the `post` model, which has a polymorphic `user`
        relationship:
         ```javascript
        // POST /api/posts/1
        {
          "post": {
            "id": 1,
            "user": 1,
            "userType": "api::v1::administrator"
          }
        }
        ```
         By overwriting `payloadTypeFromModelName` you can specify that the
        namespaces model name for the `administrator` should be used:
         ```app/serializers/application.js
        import DS from "ember-data";
         export default DS.RESTSerializer.extend({
          payloadTypeFromModelName(modelName) {
            return "api::v1::" + modelName;
          }
        });
        ```
         By default the payload type is the camelized model name. Usually, Ember
        Data can use the correct inflection to do this for you. Most of the time,
        you won't need to override `payloadTypeFromModelName` for this purpose.
         Also take a look at
        [modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize
        how the model name from should be mapped from the payload.
         @method payloadTypeFromModelName
        @public
        @param {String} modelname modelName from the record
        @return {String} payloadType
      */
      payloadTypeFromModelName: function payloadTypeFromModelName(modelName) {
        return camelize(modelName);
      },

      _hasCustomModelNameFromPayloadKey: function _hasCustomModelNameFromPayloadKey() {
        return this.modelNameFromPayloadKey !== RESTSerializer.prototype.modelNameFromPayloadKey;
      },

      _hasCustomModelNameFromPayloadType: function _hasCustomModelNameFromPayloadType() {
        return this.modelNameFromPayloadType !== RESTSerializer.prototype.modelNameFromPayloadType;
      },

      _hasCustomPayloadTypeFromModelName: function _hasCustomPayloadTypeFromModelName() {
        return this.payloadTypeFromModelName !== RESTSerializer.prototype.payloadTypeFromModelName;
      },

      _hasCustomPayloadKeyFromModelName: function _hasCustomPayloadKeyFromModelName() {
        return this.payloadKeyFromModelName !== RESTSerializer.prototype.payloadKeyFromModelName;
      }

    });
  }

  (0, _emberDataPrivateDebug.runInDebug)(function () {
    RESTSerializer.reopen({
      warnMessageNoModelForKey: function warnMessageNoModelForKey(prop, typeKey) {
        return 'Encountered "' + prop + '" in payload, but no model was found for model name "' + typeKey + '" (resolved model name using ' + this.constructor.toString() + '.modelNameFromPayloadKey("' + prop + '"))';
      }
    });
  });

  exports["default"] = RESTSerializer;
});
define('ember-data/setup-container', ['exports', 'ember-data/-private/initializers/store', 'ember-data/-private/initializers/transforms', 'ember-data/-private/initializers/store-injections', 'ember-data/-private/initializers/data-adapter'], function (exports, _emberDataPrivateInitializersStore, _emberDataPrivateInitializersTransforms, _emberDataPrivateInitializersStoreInjections, _emberDataPrivateInitializersDataAdapter) {
  'use strict';

  exports['default'] = setupContainer;

  function setupContainer(application) {
    (0, _emberDataPrivateInitializersDataAdapter['default'])(application);
    (0, _emberDataPrivateInitializersTransforms['default'])(application);
    (0, _emberDataPrivateInitializersStoreInjections['default'])(application);
    (0, _emberDataPrivateInitializersStore['default'])(application);
  }
});
define("ember-data/store", ["exports", "ember-data/-private/system/store"], function (exports, _emberDataPrivateSystemStore) {
  "use strict";

  exports["default"] = _emberDataPrivateSystemStore["default"];
});
define('ember-data/transform', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
    The `DS.Transform` class is used to serialize and deserialize model
    attributes when they are saved or loaded from an
    adapter. Subclassing `DS.Transform` is useful for creating custom
    attributes. All subclasses of `DS.Transform` must implement a
    `serialize` and a `deserialize` method.
  
    Example
  
    ```app/transforms/temperature.js
    import DS from 'ember-data';
  
    // Converts centigrade in the JSON to fahrenheit in the app
    export default DS.Transform.extend({
      deserialize: function(serialized, options) {
        return (serialized *  1.8) + 32;
      },
      serialize: function(deserialized, options) {
        return (deserialized - 32) / 1.8;
      }
    });
    ```
  
    The options passed into the `DS.attr` function when the attribute is
    declared on the model is also available in the transform.
  
    ```app/models/post.js
    export default DS.Model.extend({
      title: DS.attr('string'),
      markdown: DS.attr('markdown', {
        markdown: {
          gfm: false,
          sanitize: true
        }
      })
    });
    ```
  
    ```app/transforms/markdown.js
    export default DS.Transform.extend({
      serialize: function (deserialized, options) {
        return deserialized.raw;
      },
  
      deserialize: function (serialized, options) {
        var markdownOptions = options.markdown || {};
  
        return marked(serialized, markdownOptions);
      }
    });
    ```
  
    Usage
  
    ```app/models/requirement.js
    import DS from 'ember-data';
  
    export default DS.Model.extend({
      name: DS.attr('string'),
      temperature: DS.attr('temperature')
    });
    ```
  
    @class Transform
    @namespace DS
   */
  exports['default'] = _ember['default'].Object.extend({
    /**
      When given a deserialized value from a record attribute this
      method must return the serialized value.
       Example
       ```javascript
      serialize: function(deserialized, options) {
        return Ember.isEmpty(deserialized) ? null : Number(deserialized);
      }
      ```
       @method serialize
      @param deserialized The deserialized value
      @param options hash of options passed to `DS.attr`
      @return The serialized value
    */
    serialize: null,

    /**
      When given a serialize value from a JSON object this method must
      return the deserialized value for the record attribute.
       Example
       ```javascript
      deserialize: function(serialized, options) {
        return empty(serialized) ? null : Number(serialized);
      }
      ```
       @method deserialize
      @param serialized The serialized value
      @param options hash of options passed to `DS.attr`
      @return The deserialized value
    */
    deserialize: null
  });
});
define("ember-data/version", ["exports"], function (exports) {
  "use strict";

  exports["default"] = "2.9.0";
});
define('ember-drag-drop/components/draggable-object-target', ['exports', 'ember', 'ember-drag-drop/mixins/droppable'], function (exports, _ember, _emberDragDropMixinsDroppable) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend(_emberDragDropMixinsDroppable['default'], {
    classNameBindings: ['overrideClass'],
    overrideClass: 'draggable-object-target',
    isOver: false,

    handlePayload: function handlePayload(payload) {
      var obj = this.get('coordinator').getObject(payload, { target: this });
      this.sendAction('action', obj, { target: this });
    },

    handleDrop: function handleDrop(event) {
      var dataTransfer = event.dataTransfer;
      var payload = dataTransfer.getData("Text");
      this.handlePayload(payload);
    },

    acceptDrop: function acceptDrop(event) {
      this.handleDrop(event);
      //Firefox is navigating to a url on drop sometimes, this prevents that from happening
      event.preventDefault();
    },
    handleDragOver: function handleDragOver(event) {
      if (!this.get('isOver')) {
        //only send once per hover event
        this.set('isOver', true);
        this.sendAction('dragOverAction', event);
      }
    },
    handleDragOut: function handleDragOut(event) {
      this.set('isOver', false);
      this.sendAction('dragOutAction', event);
    },

    click: function click(e) {
      var onClick = this.get('onClick');
      if (onClick) {
        onClick(e.originalEvent);
      }
    },

    actions: {
      acceptForDrop: function acceptForDrop() {
        var hashId = this.get('coordinator.clickedId');
        this.handlePayload(hashId);
      }
    }
  });
});
define('ember-drag-drop/components/draggable-object', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend({
    dragCoordinator: _ember['default'].inject.service(),
    tagName: "div",
    overrideClass: 'draggable-object',
    classNameBindings: [':js-draggableObject', 'isDraggingObject:is-dragging-object:', 'overrideClass'],
    attributeBindings: ['dragReady:draggable'],
    isDraggable: true,
    dragReady: true,
    isSortable: false,
    sortingScope: 'drag-objects',
    title: _ember['default'].computed.alias('content.title'),

    draggable: _ember['default'].computed('isDraggable', function () {
      var isDraggable = this.get('isDraggable');

      if (isDraggable) {
        return true;
      } else {
        return null;
      }
    }),

    init: function init() {
      if (this.get('dragHandle')) {
        this.set('dragReady', false);
      }
      this._super.apply(this, arguments);
    },

    didInsertElement: function didInsertElement() {
      var self = this;
      //if there is a drag handle watch the mouse up and down events to trigger if drag is allowed
      if (this.get('dragHandle')) {
        //only start when drag handle is activated
        if (this.$(this.get('dragHandle'))) {
          this.$(this.get('dragHandle')).on('mouseover', function () {
            self.set('dragReady', true);
          });
          this.$(this.get('dragHandle')).on('mouseout', function () {
            self.set('dragReady', false);
          });
        }
      }
    },

    willDestroyElement: function willDestroyElement() {
      if (this.$(this.get('dragHandle'))) {
        this.$(this.get('dragHandle')).off();
      }
    },

    dragStart: function dragStart(event) {
      if (!this.get('isDraggable') || !this.get('dragReady')) {
        event.preventDefault();
        return;
      }

      var dataTransfer = event.dataTransfer;

      var obj = this.get('content');
      var id = null;
      if (this.get('coordinator')) {
        id = this.get('coordinator').setObject(obj, { source: this });
      }

      dataTransfer.setData('Text', id);

      if (obj && typeof obj === 'object') {
        _ember['default'].set(obj, 'isDraggingObject', true);
      }
      this.set('isDraggingObject', true);
      this.get('dragCoordinator').dragStarted(obj, event, this);
      this.sendAction('dragStartAction', obj, event);
      if (this.get('isSortable')) {
        this.sendAction('draggingSortItem', obj, event);
      }
    },

    dragEnd: function dragEnd(event) {
      if (!this.get('isDraggingObject')) {
        return;
      }

      var obj = this.get('content');

      if (obj && typeof obj === 'object') {
        _ember['default'].set(obj, 'isDraggingObject', false);
      }
      this.set('isDraggingObject', false);
      this.get('dragCoordinator').dragEnded(event);
      this.sendAction('dragEndAction', obj, event);
      if (this.get('dragHandle')) {
        this.set('dragReady', false);
      }
    },

    drag: function drag(event) {
      this.sendAction('dragMoveAction', event);
    },

    dragOver: function dragOver(event) {
      if (this.get('isSortable')) {
        this.get('dragCoordinator').draggingOver(event, this);
      }
      return false;
    },

    drop: function drop(event) {
      //Firefox is navigating to a url on drop, this prevents that from happening
      event.preventDefault();
    },

    actions: {
      selectForDrag: function selectForDrag() {
        var obj = this.get('content');
        var hashId = this.get('coordinator').setObject(obj, { source: this });
        this.set('coordinator.clickedId', hashId);
      }
    }
  });
});
define('ember-drag-drop/components/object-bin', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var removeOne = function removeOne(arr, obj) {
    var l = arr.get('length');
    arr.removeObject(obj);
    var l2 = arr.get('length');

    if (l - 1 !== l2) {
      throw "bad length " + l + " " + l2;
    }
  };

  exports['default'] = _ember['default'].Component.extend({
    model: _ember['default'].A(),
    classNames: ['draggable-object-bin'],

    manageList: true,

    objectMoved: function objectMoved() {},

    actions: {
      handleObjectDropped: function handleObjectDropped(obj) {
        if (this.get('manageList')) {
          this.get("model").pushObject(obj);
        }

        this.trigger("objectDroppedInternal", obj);
        this.sendAction("objectDropped", { obj: obj, bin: this });
      },

      handleObjectDragged: function handleObjectDragged(obj) {
        if (this.get('manageList')) {
          removeOne(this.get('model'), obj);
        }
        this.trigger("objectDraggedInternal", obj);
        this.sendAction("objectDragged");
      }
    }
  });
});
define('ember-drag-drop/components/sortable-objects', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend({
    dragCoordinator: _ember['default'].inject.service(),
    tagName: 'div',
    overrideClass: 'sortable-objects',
    classNameBindings: ['overrideClass'],
    enableSort: true,
    useSwap: true,
    sortingScope: 'drag-objects',
    sortableObjectList: _ember['default'].A(),

    didInsertElement: function didInsertElement() {
      if (this.get('enableSort')) {
        this.get('dragCoordinator').pushSortComponent(this);
      }
    },

    willDestroyElement: function willDestroyElement() {
      if (this.get('enableSort')) {
        this.get('dragCoordinator').removeSortComponent(this);
      }
    },

    dragStart: function dragStart() {
      if (!this.get('enableSort')) {
        return false;
      }
    },

    dragOver: function dragOver() {
      //needed so drop event will fire
      return false;
    },

    drop: function drop(event) {
      if (this.get('enableSort')) {
        this.sendAction('sortEndAction', event);
      }
    }
  });
});
define('ember-drag-drop/mixins/droppable', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * Wraps the native drop events to make your components droppable.
   *
   * @mixin Droppable
   */

  var Droppable = _ember['default'].Mixin.create({
    _currentDrag: null,
    classNameBindings: ['accepts-drag', 'self-drop'],

    /**
     * Read-only className property that is set to true when the component is
     * receiving a valid drag event. You can style your element with
     * `.accepts-drag`.
     *
     * @property accepts-drag
     * @private
     */

    'accepts-drag': false,

    /**
     * Will be true when the component is dragged over itself. Can use
     * `.self-drop` in your css to style (or more common, unstyle) the component.
     *
     * @property self-drop
     * @private
     */

    'self-drop': false,

    /**
      * Validates drag events. Override this to restrict which data types your
      * component accepts.
      *
      * Example:
      *
      * ```js
      * validateDragEvent: function(event) {
      *   return event.dataTransfer.types.contains('text/x-foo');
      * }
      * ```
      *
      * @method validateDragEvent
      * @public
      */

    validateDragEvent: function validateDragEvent() {
      return true;
    },

    /**
     * Called when a valid drag event is dropped on the component. Override to
     * actually make something happen.
     *
     * ```js
     * acceptDrop: function(event) {
     *   var data = event.dataTransfer.getData('text/plain');
     *   doSomethingWith(data);
     * }
     * ```
     *
     * @method acceptDrop
     * @public
     */

    acceptDrop: _ember['default'].K,

    handleDragOver: _ember['default'].K,
    handleDragOut: _ember['default'].K,

    /**
     * @method _handleDragOver
     * @private
     */

    dragOver: function dragOver(event) {
      if (this._droppableIsDraggable(event)) {
        this.set('self-drop', true);
      }
      if (this.get('accepts-drag')) {
        return this._allowDrop(event);
      }
      if (this.validateDragEvent(event)) {
        this.set('accepts-drag', true);
        this._allowDrop(event);
      } else {
        this._resetDroppability();
      }
    },

    /**
     * @method drop
     * @private
     */

    drop: function drop(event) {
      // have to validate on drop because you may have nested sortables the
      // parent allows the drop but the child receives it, revalidating allows
      // the event to bubble up to the parent to handle it
      if (!this.validateDragEvent(event)) {
        return;
      }
      this.acceptDrop(event);
      this._resetDroppability();
      // TODO: might not need this? I can't remember why its here
      event.stopPropagation();
      return false;
    },

    /**
     * Tells the browser we have an acceptable drag event.
     *
     * @method _allowDrop
     * @private
     */

    _allowDrop: function _allowDrop(event) {
      this.handleDragOver(event);
      event.stopPropagation();
      event.preventDefault();
      return false;
    },

    /**
     * We want to be able to know if the current drop target is the original
     * element being dragged or a child of it.
     *
     * @method _droppableIsDraggable
     * @private
     */

    _droppableIsDraggable: function _droppableIsDraggable(event) {
      return Droppable._currentDrag && (Droppable._currentDrag === event.target || Droppable._currentDrag.contains(event.target));
    },

    /**
     * @method _resetDroppability
     * @private
     */

    _resetDroppability: function _resetDroppability(event) {
      this.handleDragOut(event);
      this.set('accepts-drag', false);
      this.set('self-drop', false);
    },

    dragLeave: function dragLeave() {
      this._resetDroppability();
    },

    // Need to track this so we can determine `self-drop`.
    // It's on `Droppable` so we can test :\
    dragStart: function dragStart(event) {
      this.set('_currentDrag', event.target);
    }

  });

  exports['default'] = Droppable;
});
define('ember-drag-drop/services/drag-coordinator', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = _ember['default'].Service.extend({
    sortComponentController: null,
    currentDragObject: null,
    currentDragEvent: null,
    currentDragItem: null,
    currentOffsetItem: null,
    isMoving: false,
    lastEvent: null,
    sortComponents: {}, // Use object for sortComponents so that we can scope per sortingScope

    arrayList: _ember['default'].computed.alias('sortComponentController.sortableObjectList'),
    enableSort: _ember['default'].computed.alias('sortComponentController.enableSort'),
    useSwap: _ember['default'].computed.alias('sortComponentController.useSwap'),
    pushSortComponent: function pushSortComponent(component) {
      var sortingScope = component.get('sortingScope');
      if (!this.get('sortComponents')[sortingScope]) {
        this.get('sortComponents')[sortingScope] = _ember['default'].A();
      }
      this.get('sortComponents')[sortingScope].pushObject(component);
    },

    removeSortComponent: function removeSortComponent(component) {
      var sortingScope = component.get('sortingScope');
      this.get('sortComponents')[sortingScope].removeObject(component);
    },

    dragStarted: function dragStarted(object, event, emberObject) {
      if (!this.get('enableSort') && this.get('sortComponentController')) {
        //disable drag if sorting is disabled this is not used for regular
        event.preventDefault();
        return;
      }
      _ember['default'].run.later(function () {
        _ember['default'].$(event.target).css('opacity', '0.5');
      });
      this.set('currentDragObject', object);
      this.set('currentDragEvent', event);
      this.set('currentDragItem', emberObject);
      event.dataTransfer.effectAllowed = 'move';
    },

    dragEnded: function dragEnded(event) {
      _ember['default'].$(event.target).css('opacity', '1');
      this.set('currentDragObject', null);
      this.set('currentDragEvent', null);
      this.set('currentDragItem', null);
      this.set('currentOffsetItem', null);
    },

    draggingOver: function draggingOver(event, emberObject) {
      var currentOffsetItem = this.get('currentOffsetItem');
      var pos = this.relativeClientPosition(emberObject.$()[0], event);
      var hasSameSortingScope = this.get('currentDragItem.sortingScope') === emberObject.get('sortingScope');
      var moveDirection = false;

      if (!this.get('lastEvent')) {
        this.set('lastEvent', event);
      }

      if (event.originalEvent.clientY < this.get('lastEvent').originalEvent.clientY) {
        moveDirection = 'up';
      }

      if (event.originalEvent.clientY > this.get('lastEvent').originalEvent.clientY) {
        moveDirection = 'down';
      }

      this.set('lastEvent', event);

      if (!this.get('isMoving')) {
        if (event.target !== this.get('currentDragEvent').target && hasSameSortingScope) {
          //if not dragging over self
          if (currentOffsetItem !== emberObject) {
            if (pos.py > 0.33 && moveDirection === 'up' || pos.py > 0.33 && moveDirection === 'down') {

              this.moveElements(emberObject);
              this.set('currentOffsetItem', emberObject);
            }
          }
        } else {
          //reset because the node moved under the mouse with a move
          this.set('currentOffsetItem', null);
        }
      }
    },

    moveObjectPositions: function moveObjectPositions(a, b, sortComponents) {
      var aSortable = sortComponents.find(function (component) {
        return component.get('sortableObjectList').find(function (sortable) {
          return sortable === a;
        });
      });
      var bSortable = sortComponents.find(function (component) {
        return component.get('sortableObjectList').find(function (sortable) {
          return sortable === b;
        });
      });
      var swap = aSortable === bSortable;

      if (swap) {

        if (this.get('useSwap')) {
          (function () {
            //use swap algorithm
            // Swap if items are in the same sortable-objects component
            var newList = aSortable.get('sortableObjectList').toArray();
            var newArray = _ember['default'].A();
            var aPos = newList.indexOf(a);
            var bPos = newList.indexOf(b);

            newList[aPos] = b;
            newList[bPos] = a;

            newList.forEach(function (item) {
              newArray.push(item);
            });
            aSortable.set('sortableObjectList', newArray);
          })();
        } else {
          //use shift algorithm
          var newList = aSortable.get('sortableObjectList').toArray();
          var newArray = _ember['default'].A();
          var aPos = newList.indexOf(a);
          var bPos = newList.indexOf(b);

          newList.splice(aPos, 1);
          newList.splice(bPos, 0, a);

          newList.forEach(function (item) {
            newArray.push(item);
          });

          aSortable.set('sortableObjectList', newArray);
        }
      } else {
        // Move if items are in different sortable-objects component
        var aList = aSortable.get('sortableObjectList');
        var bList = bSortable.get('sortableObjectList');

        // Remove from aList and insert into bList
        aList.removeObject(a);
        bList.insertAt(bList.indexOf(b), a);
      }
    },

    moveElements: function moveElements(overElement) {
      var isEnabled = Object.keys(this.get('sortComponents')).length;
      var draggingItem = this.get('currentDragItem');
      var sortComponents = this.get('sortComponents')[draggingItem.get('sortingScope')];

      if (!isEnabled) {
        return;
      }

      this.moveObjectPositions(draggingItem.get('content'), overElement.get('content'), sortComponents);

      sortComponents.forEach(function (component) {
        component.rerender();
      });
    },

    relativeClientPosition: function relativeClientPosition(el, event) {
      var rect = el.getBoundingClientRect();
      var x = event.originalEvent.clientX - rect.left;
      var y = event.originalEvent.clientY - rect.top;

      return {
        x: x,
        y: y,
        px: x / rect.width,
        py: y / rect.height
      };
    }
  });
});
define('ember-font-awesome/components/fa-icon', ['exports', 'ember', 'ember-computed-decorators', 'ember-font-awesome/utils/try-match', 'ember-font-awesome/utils/optional-decorator'], function (exports, _ember, _emberComputedDecorators, _emberFontAwesomeUtilsTryMatch, _emberFontAwesomeUtilsOptionalDecorator) {
  'use strict';

  function _createDecoratedObject(descriptors) {
    var target = {};for (var i = 0; i < descriptors.length; i++) {
      var descriptor = descriptors[i];var decorators = descriptor.decorators;var key = descriptor.key;delete descriptor.key;delete descriptor.decorators;descriptor.enumerable = true;descriptor.configurable = true;if ('value' in descriptor || descriptor.initializer) descriptor.writable = true;if (decorators) {
        for (var f = 0; f < decorators.length; f++) {
          var decorator = decorators[f];if (typeof decorator === 'function') {
            descriptor = decorator(target, key, descriptor) || descriptor;
          } else {
            throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator);
          }
        }
      }if (descriptor.initializer) {
        descriptor.value = descriptor.initializer.call(target);
      }Object.defineProperty(target, key, descriptor);
    }return target;
  }

  var FaIconComponent = _ember['default'].Component.extend(_createDecoratedObject([{
    key: 'tagName',
    initializer: function initializer() {
      return 'i';
    }
  }, {
    key: 'classNames',
    initializer: function initializer() {
      return ['fa'];
    }
  }, {
    key: 'classNameBindings',
    initializer: function initializer() {
      return ['iconCssClass', 'flipCssClass', 'rotateCssClass', 'sizeCssClass', 'pullCssClass', 'stackCssClass', 'spin:fa-spin', 'fixedWidth:fa-fw', 'listItem:fa-li', 'border:fa-border', 'pulse:fa-pulse', 'inverse:fa-inverse'];
    }
  }, {
    key: 'attributeBindings',
    initializer: function initializer() {
      return ['ariaHiddenAttribute:aria-hidden', 'title'];
    }
  }, {
    key: 'iconCssClass',
    decorators: [(0, _emberComputedDecorators['default'])('icon', 'params.[]')],
    value: function iconCssClass(icon, params) {
      icon = icon || params[0];
      if (icon) {
        return (0, _emberFontAwesomeUtilsTryMatch['default'])(icon, /^fa-/) ? icon : 'fa-' + icon;
      }
    }
  }, {
    key: 'flipCssClass',
    decorators: [_emberFontAwesomeUtilsOptionalDecorator['default'], (0, _emberComputedDecorators['default'])('flip')],
    value: function flipCssClass(flip) {
      return (0, _emberFontAwesomeUtilsTryMatch['default'])(flip, /^fa-flip/) ? flip : 'fa-flip-' + flip;
    }
  }, {
    key: 'rotateCssClass',
    decorators: [_emberFontAwesomeUtilsOptionalDecorator['default'], (0, _emberComputedDecorators['default'])('rotate')],
    value: function rotateCssClass(rotate) {
      if ((0, _emberFontAwesomeUtilsTryMatch['default'])(rotate, /^fa-rotate/)) {
        return rotate;
      } else {
        return 'fa-rotate-' + rotate;
      }
    }
  }, {
    key: 'sizeCssClass',
    decorators: [_emberFontAwesomeUtilsOptionalDecorator['default'], (0, _emberComputedDecorators['default'])('size')],
    value: function sizeCssClass(size) {
      if ((0, _emberFontAwesomeUtilsTryMatch['default'])(size, /^fa-/)) {
        return size;
      } else if ((0, _emberFontAwesomeUtilsTryMatch['default'])(size, /(?:lg|x)$/)) {
        return 'fa-' + size;
      } else {
        return 'fa-' + size + 'x';
      }
    }
  }, {
    key: 'pullCssClass',
    decorators: [_emberFontAwesomeUtilsOptionalDecorator['default'], (0, _emberComputedDecorators['default'])('pull')],
    value: function pullCssClass(pull) {
      return 'fa-pull-' + pull;
    }
  }, {
    key: 'stackCssClass',
    decorators: [_emberFontAwesomeUtilsOptionalDecorator['default'], (0, _emberComputedDecorators['default'])('stack')],
    value: function stackCssClass(stack) {
      if ((0, _emberFontAwesomeUtilsTryMatch['default'])(stack, /^fa-/)) {
        return stack;
      } else if ((0, _emberFontAwesomeUtilsTryMatch['default'])(stack, /x$/)) {
        return 'fa-stack-' + stack;
      } else {
        return 'fa-stack-' + stack + 'x';
      }
    }
  }, {
    key: 'ariaHiddenAttribute',
    decorators: [(0, _emberComputedDecorators['default'])('ariaHidden')],
    value: function ariaHiddenAttribute(ariaHidden) {
      return ariaHidden !== false ? true : undefined;
    }
  }]));

  FaIconComponent.reopenClass({
    positionalParams: 'params'
  });

  exports['default'] = FaIconComponent;
});
define('ember-font-awesome/components/fa-list', ['exports', 'ember', 'ember-font-awesome/templates/components/fa-list'], function (exports, _ember, _emberFontAwesomeTemplatesComponentsFaList) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend({
    layout: _emberFontAwesomeTemplatesComponentsFaList['default'],
    tagName: 'ul',
    classNames: 'fa-ul'
  });
});
define('ember-font-awesome/components/fa-stack', ['exports', 'ember', 'ember-computed-decorators', 'ember-font-awesome/utils/try-match', 'ember-font-awesome/utils/optional-decorator', 'ember-font-awesome/templates/components/fa-stack'], function (exports, _ember, _emberComputedDecorators, _emberFontAwesomeUtilsTryMatch, _emberFontAwesomeUtilsOptionalDecorator, _emberFontAwesomeTemplatesComponentsFaStack) {
  'use strict';

  function _createDecoratedObject(descriptors) {
    var target = {};for (var i = 0; i < descriptors.length; i++) {
      var descriptor = descriptors[i];var decorators = descriptor.decorators;var key = descriptor.key;delete descriptor.key;delete descriptor.decorators;descriptor.enumerable = true;descriptor.configurable = true;if ('value' in descriptor || descriptor.initializer) descriptor.writable = true;if (decorators) {
        for (var f = 0; f < decorators.length; f++) {
          var decorator = decorators[f];if (typeof decorator === 'function') {
            descriptor = decorator(target, key, descriptor) || descriptor;
          } else {
            throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator);
          }
        }
      }if (descriptor.initializer) {
        descriptor.value = descriptor.initializer.call(target);
      }Object.defineProperty(target, key, descriptor);
    }return target;
  }

  exports['default'] = _ember['default'].Component.extend(_createDecoratedObject([{
    key: 'layout',
    initializer: function initializer() {
      return _emberFontAwesomeTemplatesComponentsFaStack['default'];
    }
  }, {
    key: 'tagName',
    initializer: function initializer() {
      return 'span';
    }
  }, {
    key: 'classNames',
    initializer: function initializer() {
      return 'fa-stack';
    }
  }, {
    key: 'classNameBindings',
    initializer: function initializer() {
      return ['sizeCssClass'];
    }
  }, {
    key: 'sizeCssClass',
    decorators: [_emberFontAwesomeUtilsOptionalDecorator['default'], (0, _emberComputedDecorators['default'])('size')],
    value: function sizeCssClass(size) {
      if ((0, _emberFontAwesomeUtilsTryMatch['default'])(size, /^fa-/)) {
        return size;
      } else if ((0, _emberFontAwesomeUtilsTryMatch['default'])(size, /(?:lg|x)$/)) {
        return 'fa-' + size;
      } else {
        return 'fa-' + size + 'x';
      }
    }
  }]));
});
define("ember-font-awesome/templates/components/fa-list", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-font-awesome/templates/components/fa-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["fa-icon", ["subexpr", "component", ["fa-icon"], ["listItem", true], ["loc", [null, [1, 22], [1, 57]]], 0, 0]], ["loc", [null, [1, 8], [1, 58]]], 0, 0]], [], ["loc", [null, [1, 0], [1, 60]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-font-awesome/templates/components/fa-stack", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "modules/ember-font-awesome/templates/components/fa-stack.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["stack-1x", ["subexpr", "component", ["fa-icon"], ["stack", "1"], ["loc", [null, [2, 11], [2, 42]]], 0, 0], "stack-2x", ["subexpr", "component", ["fa-icon"], ["stack", "2"], ["loc", [null, [3, 11], [3, 42]]], 0, 0]], ["loc", [null, [1, 8], [4, 1]]], 0, 0]], [], ["loc", [null, [1, 0], [4, 3]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-font-awesome/utils/optional-decorator", ["exports"], function (exports) {
  "use strict";

  exports["default"] = optional;

  function optional(object, attributeName, descriptor) {
    var originalFunction = descriptor.value;

    descriptor.value = function () {
      var args = [].slice.call(arguments, 0);
      if (args.some(function (value) {
        return value != null;
      })) {
        return originalFunction.apply(undefined, arguments);
      }
    };

    return descriptor;
  }
});
define('ember-font-awesome/utils/try-match', ['exports'], function (exports) {
  'use strict';

  exports['default'] = function (object, regex) {
    return typeof object === 'string' && object.match(regex);
  };
});
define("ember-get-config/index", ["exports"], function (exports) {
  "use strict";

  var configName = Object.keys(window.requirejs.entries).filter(function (entry) {
    return entry.match(/\/config\/environment/);
  })[0];

  exports["default"] = window.requirejs(configName)["default"];
});
define('ember-getowner-polyfill/fake-owner', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var CONTAINER = '__' + new Date() + '_container';
  var REGISTRY = '__' + new Date() + '_registry';

  var FakeOwner = (function () {
    function FakeOwner(object) {
      _classCallCheck(this, FakeOwner);

      this[CONTAINER] = object.container;

      if (_ember['default'].Registry) {
        // object.container._registry is used by 1.11
        this[REGISTRY] = object.container.registry || object.container._registry;
      } else {
        // Ember < 1.12
        this[REGISTRY] = object.container;
      }
    }

    // ContainerProxyMixin methods
    //
    // => http://emberjs.com/api/classes/ContainerProxyMixin.html
    //

    _createClass(FakeOwner, [{
      key: 'lookup',
      value: function lookup() {
        var _CONTAINER;

        return (_CONTAINER = this[CONTAINER]).lookup.apply(_CONTAINER, arguments);
      }
    }, {
      key: '_lookupFactory',
      value: function _lookupFactory() {
        var _CONTAINER2;

        return (_CONTAINER2 = this[CONTAINER]).lookupFactory.apply(_CONTAINER2, arguments);
      }

      // RegistryProxyMixin methods
      //
      // => http://emberjs.com/api/classes/RegistryProxyMixin.html
      //
    }, {
      key: 'hasRegistration',
      value: function hasRegistration() {
        var _REGISTRY;

        return (_REGISTRY = this[REGISTRY]).has.apply(_REGISTRY, arguments);
      }
    }, {
      key: 'inject',
      value: function inject() {
        var _REGISTRY2;

        return (_REGISTRY2 = this[REGISTRY]).injection.apply(_REGISTRY2, arguments);
      }
    }, {
      key: 'register',
      value: function register() {
        var _REGISTRY3;

        return (_REGISTRY3 = this[REGISTRY]).register.apply(_REGISTRY3, arguments);
      }
    }, {
      key: 'registerOption',
      value: function registerOption() {
        var _REGISTRY4;

        return (_REGISTRY4 = this[REGISTRY]).option.apply(_REGISTRY4, arguments);
      }
    }, {
      key: 'registerOptions',
      value: function registerOptions() {
        var _REGISTRY5;

        return (_REGISTRY5 = this[REGISTRY]).options.apply(_REGISTRY5, arguments);
      }
    }, {
      key: 'registerOptionsForType',
      value: function registerOptionsForType() {
        var _REGISTRY6;

        return (_REGISTRY6 = this[REGISTRY]).optionsForType.apply(_REGISTRY6, arguments);
      }
    }, {
      key: 'registeredOption',
      value: function registeredOption() {
        var _REGISTRY7;

        return (_REGISTRY7 = this[REGISTRY]).getOption.apply(_REGISTRY7, arguments);
      }
    }, {
      key: 'registeredOptions',
      value: function registeredOptions() {
        var _REGISTRY8;

        return (_REGISTRY8 = this[REGISTRY]).getOptions.apply(_REGISTRY8, arguments);
      }
    }, {
      key: 'registeredOptionsForType',
      value: function registeredOptionsForType(type) {
        if (this[REGISTRY].getOptionsForType) {
          var _REGISTRY9;

          return (_REGISTRY9 = this[REGISTRY]).getOptionsForType.apply(_REGISTRY9, arguments);
        } else {
          // used for Ember 1.10
          return this[REGISTRY]._typeOptions[type];
        }
      }
    }, {
      key: 'resolveRegistration',
      value: function resolveRegistration() {
        var _REGISTRY10;

        return (_REGISTRY10 = this[REGISTRY]).resolve.apply(_REGISTRY10, arguments);
      }
    }, {
      key: 'unregister',
      value: function unregister() {
        var _REGISTRY11;

        return (_REGISTRY11 = this[REGISTRY]).unregister.apply(_REGISTRY11, arguments);
      }
    }]);

    return FakeOwner;
  })();

  exports['default'] = FakeOwner;
});
define('ember-getowner-polyfill/index', ['exports', 'ember', 'ember-getowner-polyfill/fake-owner'], function (exports, _ember, _emberGetownerPolyfillFakeOwner) {
  'use strict';

  var hasGetOwner = !!_ember['default'].getOwner;

  exports['default'] = function (object) {
    var owner = undefined;

    if (hasGetOwner) {
      owner = _ember['default'].getOwner(object);
    }

    if (!owner && object.container) {
      owner = new _emberGetownerPolyfillFakeOwner['default'](object);
    }

    return owner;
  };
});
define('ember-i18n/config/ar', ['exports', 'ember-i18n/config/constants'], function (exports, _emberI18nConfigConstants) {
  'use strict';

  exports['default'] = {
    rtl: true,

    pluralForm: function pluralForm(n) {
      var mod100 = n % 100;

      if (n === 0) {
        return _emberI18nConfigConstants.ZERO;
      }
      if (n === 1) {
        return _emberI18nConfigConstants.ONE;
      }
      if (n === 2) {
        return _emberI18nConfigConstants.TWO;
      }
      if (mod100 >= 3 && mod100 <= 10) {
        return _emberI18nConfigConstants.FEW;
      }
      if (mod100 >= 11 && mod100 <= 99) {
        return _emberI18nConfigConstants.MANY;
      }
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/config/bn', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/constants', ['exports'], function (exports) {
  'use strict';

  var ZERO = 'zero';
  exports.ZERO = ZERO;

  var ONE = 'one';
  exports.ONE = ONE;

  var TWO = 'two';
  exports.TWO = TWO;

  var FEW = 'few';
  exports.FEW = FEW;

  var MANY = 'many';
  exports.MANY = MANY;

  var OTHER = 'other';
  exports.OTHER = OTHER;
});
define('ember-i18n/config/de', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define("ember-i18n/config/en", ["exports", "ember-i18n/config/constants"], function (exports, _emberI18nConfigConstants) {
  "use strict";

  exports["default"] = {
    rtl: false,

    pluralForm: function pluralForm(n) {
      if (n === 1) {
        return _emberI18nConfigConstants.ONE;
      }
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/config/es', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/fa', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define("ember-i18n/config/fr", ["exports", "ember-i18n/config/constants"], function (exports, _emberI18nConfigConstants) {
  "use strict";

  exports["default"] = {
    rtl: false,

    pluralForm: function pluralForm(n) {
      if (n >= 0 && n < 2) {
        return _emberI18nConfigConstants.ONE;
      }
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/config/fy', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/he', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = {
    rtl: true,

    pluralForm: _emberI18nConfigEn['default'].pluralForm
  };
});
define("ember-i18n/config/hi", ["exports", "ember-i18n/config/constants"], function (exports, _emberI18nConfigConstants) {
  "use strict";

  exports["default"] = {
    rtl: false,

    pluralForm: function pluralForm(n) {
      if (n === 0) {
        return _emberI18nConfigConstants.ONE;
      }
      if (n === 1) {
        return _emberI18nConfigConstants.ONE;
      }
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/config/it', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define("ember-i18n/config/iw", ["exports", "ember-i18n/config/he"], function (exports, _emberI18nConfigHe) {
  "use strict";

  exports["default"] = _emberI18nConfigHe["default"];
});
define('ember-i18n/config/ja', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define('ember-i18n/config/jv', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define('ember-i18n/config/ko', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define('ember-i18n/config/mr', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/ms', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define('ember-i18n/config/nl', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/no', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/pa', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/pl', ['exports', 'ember-i18n/config/constants'], function (exports, _emberI18nConfigConstants) {
  'use strict';

  exports['default'] = {
    rtl: false,

    pluralForm: function pluralForm(n) {
      var mod1 = n % 1;
      var mod10 = n % 10;
      var mod100 = n % 100;

      if (n === 1) {
        return _emberI18nConfigConstants.ONE;
      }
      if (mod1 === 0 && mod10 >= 2 && mod10 <= 4 && !(mod100 >= 12 && mod100 <= 14)) {
        return _emberI18nConfigConstants.FEW;
      }
      if (mod1 === 0 && (mod10 === 0 || mod10 === 1 || mod10 >= 5 && mod10 <= 9 || mod100 >= 12 && mod100 <= 14)) {
        return _emberI18nConfigConstants.MANY;
      }
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/config/pt', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/ru', ['exports', 'ember-i18n/config/constants'], function (exports, _emberI18nConfigConstants) {
  'use strict';

  exports['default'] = {
    rtl: false,

    pluralForm: function pluralForm(n) {
      var mod1 = n % 1;
      var mod10 = n % 10;
      var mod100 = n % 100;

      if (mod10 === 1 && mod100 !== 11) {
        return _emberI18nConfigConstants.ONE;
      }
      if (mod1 === 0 && mod10 >= 2 && mod10 <= 4 && !(mod100 >= 12 && mod100 <= 14)) {
        return _emberI18nConfigConstants.FEW;
      }
      if (mod1 === 0 && (mod10 === 0 || mod10 >= 5 && mod10 <= 9 || mod100 >= 11 && mod100 <= 14)) {
        return _emberI18nConfigConstants.MANY;
      }
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/config/sv', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/ta', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/te', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/tr', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define('ember-i18n/config/ur', ['exports', 'ember-i18n/config/en'], function (exports, _emberI18nConfigEn) {
  'use strict';

  exports['default'] = _emberI18nConfigEn['default'];
});
define('ember-i18n/config/vi', ['exports', 'ember-i18n/config/zh'], function (exports, _emberI18nConfigZh) {
  'use strict';

  exports['default'] = _emberI18nConfigZh['default'];
});
define('ember-i18n/config/zh', ['exports', 'ember-i18n/config/constants'], function (exports, _emberI18nConfigConstants) {
  'use strict';

  exports['default'] = {
    rtl: false,

    pluralForm: function pluralForm() /* n */{
      return _emberI18nConfigConstants.OTHER;
    }
  };
});
define('ember-i18n/helper', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var Helper = null;

  if (_ember['default'].Helper) {
    Helper = _ember['default'].Helper.extend({
      i18n: _ember['default'].inject.service(),

      _locale: _ember['default'].computed.readOnly('i18n.locale'),

      compute: function compute(params, interpolations) {
        var key = params[0];
        var i18n = this.get('i18n');
        return i18n.t(key, interpolations);
      },

      _recomputeOnLocaleChange: _ember['default'].observer('_locale', function () {
        this.recompute();
      })
    });
  }

  exports['default'] = Helper;
});
define("ember-i18n/index", ["exports", "ember-i18n/utils/i18n/compile-template", "ember-i18n/services/i18n", "ember-i18n/utils/macro"], function (exports, _emberI18nUtilsI18nCompileTemplate, _emberI18nServicesI18n, _emberI18nUtilsMacro) {
  "use strict";

  exports.compileTemplate = _emberI18nUtilsI18nCompileTemplate["default"];
  exports.Service = _emberI18nServicesI18n["default"];
  exports.translationMacro = _emberI18nUtilsMacro["default"];
});
define("ember-i18n/legacy-helper", ["exports", "ember", "ember-i18n/stream"], function (exports, _ember, _emberI18nStream) {
  "use strict";

  var helper = null;

  if (_ember["default"].Helper == null) {
    // @public
    helper = function tHelper(params, hash, options, env) {
      var i18n = env.data.view.container.lookup('service:i18n');
      var i18nKey = params[0];

      var out = new _emberI18nStream["default"](function () {
        var value = i18nKey.isStream ? i18nKey.value() : i18nKey;
        return value === undefined ? '' : i18n.t(value, (0, _emberI18nStream.readHash)(hash));
      });

      // Once the view is destroyed destroy the steam as well
      env.data.view.one('willDestroyElement', out, function () {
        this.destroy();
      });

      // observe any hash arguments that are streams:
      Object.keys(hash).forEach(function (key) {
        var value = hash[key];

        if (value && value.isStream) {
          value.subscribe(out.notify, out);
        }
      });

      // observe the locale:
      i18n.localeStream.subscribe(out.notify, out);

      // if the i18n key itself is dynamic, observe it:
      if (i18nKey.isStream) {
        i18nKey.subscribe(out.notify, out);
      }

      return out;
    };
  }

  exports["default"] = helper;
});
define("ember-i18n/services/i18n", ["exports", "ember", "ember-getowner-polyfill", "ember-i18n/utils/locale", "ember-i18n/utils/add-translations", "ember-i18n/utils/get-locales"], function (exports, _ember, _emberGetownerPolyfill, _emberI18nUtilsLocale, _emberI18nUtilsAddTranslations, _emberI18nUtilsGetLocales) {
  "use strict";

  var assert = _ember["default"].assert;
  var computed = _ember["default"].computed;
  var get = _ember["default"].get;
  var Evented = _ember["default"].Evented;
  var makeArray = _ember["default"].makeArray;
  var on = _ember["default"].on;
  var typeOf = _ember["default"].typeOf;
  var warn = _ember["default"].warn;

  var Parent = _ember["default"].Service || _ember["default"].Object;

  // @public
  exports["default"] = Parent.extend(Evented, {

    // @public
    // The user's locale.
    locale: null,

    // @public
    // A list of found locales.
    locales: computed(_emberI18nUtilsGetLocales["default"]),

    // @public
    //
    // Returns the translation `key` interpolated with `data`
    // in the current `locale`.
    t: function t(key) {
      var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var locale = this.get('_locale');
      assert("I18n: Cannot translate when locale is null", locale);
      var count = get(data, 'count');

      var defaults = makeArray(get(data, 'default'));

      defaults.unshift(key);
      var template = locale.getCompiledTemplate(defaults, count);

      if (template._isMissing) {
        this.trigger('missing', this.get('locale'), key, data);
      }

      return template(data);
    },

    // @public
    exists: function exists(key) {
      var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var locale = this.get('_locale');
      assert("I18n: Cannot check existance when locale is null", locale);
      var count = get(data, 'count');

      var translation = locale.findTranslation(makeArray(key), count);
      return typeOf(translation.result) !== 'undefined';
    },

    // @public
    addTranslations: function addTranslations(locale, translations) {
      (0, _emberI18nUtilsAddTranslations["default"])(locale, translations, (0, _emberGetownerPolyfill["default"])(this));
      this._addLocale(locale);

      if (this.get('locale').indexOf(locale) === 0) {
        this.get('_locale').rebuild();
      }
    },

    // @private
    _initDefaults: on('init', function () {
      var ENV = (0, _emberGetownerPolyfill["default"])(this)._lookupFactory('config:environment');

      if (this.get('locale') == null) {
        var defaultLocale = (ENV.i18n || {}).defaultLocale;
        if (defaultLocale == null) {
          warn('ember-i18n did not find a default locale; falling back to "en".', false, { id: 'ember-i18n.default-locale' });
          defaultLocale = 'en';
        }
        this.set('locale', defaultLocale);
      }
    }),

    // @private
    //
    // adds a runtime locale to the array of locales on disk
    _addLocale: function _addLocale(locale) {
      this.get('locales').addObject(locale);
    },

    _locale: computed('locale', function () {
      var locale = this.get('locale');
      return locale ? new _emberI18nUtilsLocale["default"](this.get('locale'), (0, _emberGetownerPolyfill["default"])(this)) : null;
    })

  });
});
define('ember-i18n/stream', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  // As of v1.12, Streams are still private API. Thus, we need to reach in to
  // Ember internals to get access to it.
  //
  // See https://github.com/emberjs/ember.js/blob/v1.12.0/packages/ember-metal/lib/main.js#L384-L386
  // See https://github.com/emberjs/ember.js/pull/9693
  // See https://github.com/dockyard/ember-cli-i18n/blob/v0.0.6/addon/utils/stream.js
  //
  // As of v2.7, Streams are moved to `ember-htmlbars`, we need to check if `ember-metal/streams/stream` exists

  var _registry = _ember['default'].__loader.registry;
  var _require = _ember['default'].__loader.require;

  exports['default'] = _registry['ember-metal/streams/stream'] ? _require('ember-metal/streams/stream')['default'] : _require('ember-htmlbars/streams/stream')['default'];

  var readHash = _registry['ember-metal/streams/utils'] ? _require('ember-metal/streams/utils').readHash : _require('ember-htmlbars/streams/utils').readHash;
  exports.readHash = readHash;
});
define("ember-i18n/utils/add-translations", ["exports", "ember"], function (exports, _ember) {
  "use strict";

  exports["default"] = addTranslations;

  var assign = _ember["default"].assign || _ember["default"].merge;
  function addTranslations(locale, newTranslations, owner) {
    var key = "locale:" + locale + "/translations";
    var existingTranslations = owner._lookupFactory(key);

    if (existingTranslations == null) {
      existingTranslations = {};
      owner.register(key, existingTranslations);
    }

    assign(existingTranslations, newTranslations);
  }
});
define('ember-i18n/utils/get-locales', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = getLocales;

  var matchKey = '/locales/(.+)/translations$';
  function getLocales() {
    return Object.keys(requirejs.entries).reduce(function (locales, module) {
      var match = module.match(matchKey);
      if (match) {
        locales.pushObject(match[1]);
      }
      return locales;
    }, _ember['default'].A()).sort();
  }
});
define("ember-i18n/utils/i18n/compile-template", ["exports", "ember"], function (exports, _ember) {
  "use strict";

  exports["default"] = compileTemplate;

  var SafeString = _ember["default"].Handlebars.SafeString;
  var get = _ember["default"].get;
  var escapeExpression = _ember["default"].Handlebars.Utils.escapeExpression;
  var tripleStache = /\{\{\{\s*(.*?)\s*\}\}\}/g;
  var doubleStache = /\{\{\s*(.*?)\s*\}\}/g;

  // @public
  //
  // Compile a translation template.
  //
  // To override this, define `util:i18n/compile-template` with
  // the signature
  // `Function(String, Boolean) -> Function(Object) -> String`.

  function compileTemplate(template) {
    var rtl = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    return function renderTemplate(data) {
      var result = template.replace(tripleStache, function (i, match) {
        return get(data, match);
      }).replace(doubleStache, function (i, match) {
        return escapeExpression(get(data, match));
      });

      var wrapped = rtl ? "‫" + result + "‬" : result;

      return new SafeString(wrapped);
    };
  }
});
define("ember-i18n/utils/i18n/missing-message", ["exports"], function (exports) {
  "use strict";

  exports["default"] = missingMessage;

  // @public
  //
  // Generate a "missing template" message that will be used
  // as a translation.
  //
  // To override this, define `util:i18n/missing-message` with
  // the signature
  //
  // `Function(String, String, Object) -> String`.

  function missingMessage(locale, key /*, data */) {
    return "Missing translation: " + key;
  }
});
define('ember-i18n/utils/locale', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var assert = _ember['default'].assert;
  var typeOf = _ember['default'].typeOf;
  var warn = _ember['default'].warn;

  var assign = _ember['default'].assign || _ember['default'].merge;

  // @private
  //
  // This class is the work-horse of localization look-up.
  function Locale(id, owner) {
    // On Construction:
    //  1. look for translations in the locale (e.g. pt-BR) and all parent
    //     locales (e.g. pt), flatten any nested keys, and then merge them.
    //  2. walk through the configs from most specific to least specific
    //     and use the first value for `rtl` and `pluralForm`
    //  3. Default `rtl` to `false`
    //  4. Ensure `pluralForm` is defined
    this.id = id;
    this.owner = owner;
    this.rebuild();
  }

  Locale.prototype = {
    rebuild: function rebuild() {
      this.translations = getFlattenedTranslations(this.id, this.owner);
      this._setConfig();
    },

    _setConfig: function _setConfig() {
      var _this = this;

      walkConfigs(this.id, this.owner, function (config) {
        if (_this.rtl === undefined) {
          _this.rtl = config.rtl;
        }
        if (_this.pluralForm === undefined) {
          _this.pluralForm = config.pluralForm;
        }
      });

      var defaultConfig = this.owner._lookupFactory('ember-i18n@config:zh');

      if (this.rtl === undefined) {
        warn('ember-i18n: No RTL configuration found for ' + this.id + '.', false, { id: 'ember-i18n.no-rtl-configuration' });
        this.rtl = defaultConfig.rtl;
      }

      if (this.pluralForm === undefined) {
        warn('ember-i18n: No pluralForm configuration found for ' + this.id + '.', false, { id: 'ember-i18n.no-plural-form' });
        this.pluralForm = defaultConfig.pluralForm;
      }
    },

    getCompiledTemplate: function getCompiledTemplate(fallbackChain, count) {
      var translation = this.findTranslation(fallbackChain, count);
      var result = translation.result;

      if (typeOf(result) === 'string') {
        result = this._compileTemplate(translation.key, result);
      }

      if (result == null) {
        result = this._defineMissingTranslationTemplate(fallbackChain[0]);
      }

      assert('Template for ' + translation.key + ' in ' + this.id + ' is not a function', typeOf(result) === 'function');

      return result;
    },

    findTranslation: function findTranslation(fallbackChain, count) {
      if (this.translations === undefined) {
        this._init();
      }

      var result = undefined;
      var i = undefined;
      for (i = 0; i < fallbackChain.length; i++) {
        var key = fallbackChain[i];
        if (count != null) {
          var inflection = this.pluralForm(+count);
          result = this.translations[key + '.' + inflection];
        }

        if (result == null) {
          result = this.translations[key];
        }

        if (result) {
          break;
        }
      }

      return {
        key: fallbackChain[i],
        result: result
      };
    },

    _defineMissingTranslationTemplate: function _defineMissingTranslationTemplate(key) {
      var i18n = this.owner.lookup('service:i18n');
      var missingMessage = this.owner._lookupFactory('util:i18n/missing-message');
      var locale = this.id;

      function missingTranslation(data) {
        return missingMessage.call(i18n, locale, key, data);
      }

      missingTranslation._isMissing = true;
      this.translations[key] = missingTranslation;
      return missingTranslation;
    },

    _compileTemplate: function _compileTemplate(key, string) {
      var compile = this.owner._lookupFactory('util:i18n/compile-template');
      var template = compile(string, this.rtl);
      this.translations[key] = template;
      return template;
    }
  };

  function getFlattenedTranslations(id, owner) {
    var result = {};

    var parentId = parentLocale(id);
    if (parentId) {
      assign(result, getFlattenedTranslations(parentId, owner));
    }

    var translations = owner._lookupFactory('locale:' + id + '/translations') || {};
    assign(result, withFlattenedKeys(translations));

    return result;
  }

  // Walk up confiugration objects from most specific to least.
  function walkConfigs(id, owner, fn) {
    var appConfig = owner._lookupFactory('locale:' + id + '/config');
    if (appConfig) {
      fn(appConfig);
    }

    var addonConfig = owner._lookupFactory('ember-i18n@config:' + id);
    if (addonConfig) {
      fn(addonConfig);
    }

    var parentId = parentLocale(id);
    if (parentId) {
      walkConfigs(parentId, owner, fn);
    }
  }

  function parentLocale(id) {
    var lastDash = id.lastIndexOf('-');
    return lastDash > 0 ? id.substr(0, lastDash) : null;
  }

  function withFlattenedKeys(object) {
    var result = {};

    Object.keys(object).forEach(function (key) {
      var value = object[key];

      if (typeOf(value) === 'object') {
        value = withFlattenedKeys(value);

        Object.keys(value).forEach(function (suffix) {
          result[key + '.' + suffix] = value[suffix];
        });
      } else {
        result[key] = value;
      }
    });

    return result;
  }

  exports['default'] = Locale;
});
define('ember-i18n/utils/macro', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = createTranslatedComputedProperty;

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var keys = Object.keys;
  var get = _ember['default'].get;

  // @public

  function createTranslatedComputedProperty(key) {
    var interpolations = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var dependencies = ['i18n.locale'].concat(values(interpolations));

    return _ember['default'].computed.apply(_ember['default'], _toConsumableArray(dependencies).concat([function () {
      var i18n = get(this, 'i18n');
      _ember['default'].assert('Cannot translate ' + key + '. ' + this + ' does not have an i18n.', i18n);
      return i18n.t(key, mapPropertiesByHash(this, interpolations));
    }]));
  }

  function values(object) {
    return keys(object).map(function (key) {
      return object[key];
    });
  }

  function mapPropertiesByHash(object, hash) {
    var result = {};

    keys(hash).forEach(function (key) {
      result[key] = get(object, hash[key]);
    });

    return result;
  }
});
define("ember-inflector/index", ["exports", "ember", "ember-inflector/lib/system", "ember-inflector/lib/ext/string"], function (exports, _ember, _emberInflectorLibSystem, _emberInflectorLibExtString) {
  /* global define, module */

  "use strict";

  _emberInflectorLibSystem.Inflector.defaultRules = _emberInflectorLibSystem.defaultRules;
  _ember["default"].Inflector = _emberInflectorLibSystem.Inflector;

  _ember["default"].String.pluralize = _emberInflectorLibSystem.pluralize;
  _ember["default"].String.singularize = _emberInflectorLibSystem.singularize;exports["default"] = _emberInflectorLibSystem.Inflector;
  exports.pluralize = _emberInflectorLibSystem.pluralize;
  exports.singularize = _emberInflectorLibSystem.singularize;
  exports.defaultRules = _emberInflectorLibSystem.defaultRules;

  if (typeof define !== 'undefined' && define.amd) {
    define('ember-inflector', ['exports'], function (__exports__) {
      __exports__['default'] = _emberInflectorLibSystem.Inflector;
      return _emberInflectorLibSystem.Inflector;
    });
  } else if (typeof module !== 'undefined' && module['exports']) {
    module['exports'] = _emberInflectorLibSystem.Inflector;
  }
});
define('ember-inflector/lib/ext/string', ['exports', 'ember', 'ember-inflector/lib/system/string'], function (exports, _ember, _emberInflectorLibSystemString) {
  'use strict';

  if (_ember['default'].EXTEND_PROTOTYPES === true || _ember['default'].EXTEND_PROTOTYPES.String) {
    /**
      See {{#crossLink "Ember.String/pluralize"}}{{/crossLink}}
       @method pluralize
      @for String
    */
    String.prototype.pluralize = function () {
      return (0, _emberInflectorLibSystemString.pluralize)(this);
    };

    /**
      See {{#crossLink "Ember.String/singularize"}}{{/crossLink}}
       @method singularize
      @for String
    */
    String.prototype.singularize = function () {
      return (0, _emberInflectorLibSystemString.singularize)(this);
    };
  }
});
define('ember-inflector/lib/helpers/pluralize', ['exports', 'ember-inflector', 'ember-inflector/lib/utils/make-helper'], function (exports, _emberInflector, _emberInflectorLibUtilsMakeHelper) {
  'use strict';

  /**
   *
   * If you have Ember Inflector (such as if Ember Data is present),
   * pluralize a word. For example, turn "ox" into "oxen".
   *
   * Example:
   *
   * {{pluralize count myProperty}}
   * {{pluralize 1 "oxen"}}
   * {{pluralize myProperty}}
   * {{pluralize "ox"}}
   *
   * @for Ember.HTMLBars.helpers
   * @method pluralize
   * @param {Number|Property} [count] count of objects
   * @param {String|Property} word word to pluralize
  */
  exports['default'] = (0, _emberInflectorLibUtilsMakeHelper['default'])(function (params) {
    var count = undefined,
        word = undefined;

    if (params.length === 1) {
      word = params[0];
      return (0, _emberInflector.pluralize)(word);
    } else {
      count = params[0];
      word = params[1];

      if (parseFloat(count) !== 1) {
        word = (0, _emberInflector.pluralize)(word);
      }

      return count + " " + word;
    }
  });
});
define('ember-inflector/lib/helpers/singularize', ['exports', 'ember-inflector', 'ember-inflector/lib/utils/make-helper'], function (exports, _emberInflector, _emberInflectorLibUtilsMakeHelper) {
  'use strict';

  /**
   *
   * If you have Ember Inflector (such as if Ember Data is present),
   * singularize a word. For example, turn "oxen" into "ox".
   *
   * Example:
   *
   * {{singularize myProperty}}
   * {{singularize "oxen"}}
   *
   * @for Ember.HTMLBars.helpers
   * @method singularize
   * @param {String|Property} word word to singularize
  */
  exports['default'] = (0, _emberInflectorLibUtilsMakeHelper['default'])(function (params) {
    return (0, _emberInflector.singularize)(params[0]);
  });
});
define("ember-inflector/lib/system", ["exports", "ember-inflector/lib/system/inflector", "ember-inflector/lib/system/string", "ember-inflector/lib/system/inflections"], function (exports, _emberInflectorLibSystemInflector, _emberInflectorLibSystemString, _emberInflectorLibSystemInflections) {
  "use strict";

  _emberInflectorLibSystemInflector["default"].inflector = new _emberInflectorLibSystemInflector["default"](_emberInflectorLibSystemInflections["default"]);

  exports.Inflector = _emberInflectorLibSystemInflector["default"];
  exports.singularize = _emberInflectorLibSystemString.singularize;
  exports.pluralize = _emberInflectorLibSystemString.pluralize;
  exports.defaultRules = _emberInflectorLibSystemInflections["default"];
});
define('ember-inflector/lib/system/inflections', ['exports'], function (exports) {
  'use strict';

  exports['default'] = {
    plurals: [[/$/, 's'], [/s$/i, 's'], [/^(ax|test)is$/i, '$1es'], [/(octop|vir)us$/i, '$1i'], [/(octop|vir)i$/i, '$1i'], [/(alias|status|bonus)$/i, '$1es'], [/(bu)s$/i, '$1ses'], [/(buffal|tomat)o$/i, '$1oes'], [/([ti])um$/i, '$1a'], [/([ti])a$/i, '$1a'], [/sis$/i, 'ses'], [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'], [/(hive)$/i, '$1s'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/(x|ch|ss|sh)$/i, '$1es'], [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'], [/^(m|l)ouse$/i, '$1ice'], [/^(m|l)ice$/i, '$1ice'], [/^(ox)$/i, '$1en'], [/^(oxen)$/i, '$1'], [/(quiz)$/i, '$1zes']],

    singular: [[/s$/i, ''], [/(ss)$/i, '$1'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'], [/(^analy)(sis|ses)$/i, '$1sis'], [/([^f])ves$/i, '$1fe'], [/(hive)s$/i, '$1'], [/(tive)s$/i, '$1'], [/([lr])ves$/i, '$1f'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/(x|ch|ss|sh)es$/i, '$1'], [/^(m|l)ice$/i, '$1ouse'], [/(bus)(es)?$/i, '$1'], [/(o)es$/i, '$1'], [/(shoe)s$/i, '$1'], [/(cris|test)(is|es)$/i, '$1is'], [/^(a)x[ie]s$/i, '$1xis'], [/(octop|vir)(us|i)$/i, '$1us'], [/(alias|status|bonus)(es)?$/i, '$1'], [/^(ox)en/i, '$1'], [/(vert|ind)ices$/i, '$1ex'], [/(matr)ices$/i, '$1ix'], [/(quiz)zes$/i, '$1'], [/(database)s$/i, '$1']],

    irregularPairs: [['person', 'people'], ['man', 'men'], ['child', 'children'], ['sex', 'sexes'], ['move', 'moves'], ['cow', 'kine'], ['zombie', 'zombies']],

    uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police']
  };
});
define('ember-inflector/lib/system/inflector', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var capitalize = _ember['default'].String.capitalize;

  var BLANK_REGEX = /^\s*$/;
  var LAST_WORD_DASHED_REGEX = /([\w/-]+[_/\s-])([a-z\d]+$)/;
  var LAST_WORD_CAMELIZED_REGEX = /([\w/\s-]+)([A-Z][a-z\d]*$)/;
  var CAMELIZED_REGEX = /[A-Z][a-z\d]*$/;

  function loadUncountable(rules, uncountable) {
    for (var i = 0, length = uncountable.length; i < length; i++) {
      rules.uncountable[uncountable[i].toLowerCase()] = true;
    }
  }

  function loadIrregular(rules, irregularPairs) {
    var pair;

    for (var i = 0, length = irregularPairs.length; i < length; i++) {
      pair = irregularPairs[i];

      //pluralizing
      rules.irregular[pair[0].toLowerCase()] = pair[1];
      rules.irregular[pair[1].toLowerCase()] = pair[1];

      //singularizing
      rules.irregularInverse[pair[1].toLowerCase()] = pair[0];
      rules.irregularInverse[pair[0].toLowerCase()] = pair[0];
    }
  }

  /**
    Inflector.Ember provides a mechanism for supplying inflection rules for your
    application. Ember includes a default set of inflection rules, and provides an
    API for providing additional rules.
  
    Examples:
  
    Creating an inflector with no rules.
  
    ```js
    var inflector = new Ember.Inflector();
    ```
  
    Creating an inflector with the default ember ruleset.
  
    ```js
    var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);
  
    inflector.pluralize('cow'); //=> 'kine'
    inflector.singularize('kine'); //=> 'cow'
    ```
  
    Creating an inflector and adding rules later.
  
    ```javascript
    var inflector = Ember.Inflector.inflector;
  
    inflector.pluralize('advice'); // => 'advices'
    inflector.uncountable('advice');
    inflector.pluralize('advice'); // => 'advice'
  
    inflector.pluralize('formula'); // => 'formulas'
    inflector.irregular('formula', 'formulae');
    inflector.pluralize('formula'); // => 'formulae'
  
    // you would not need to add these as they are the default rules
    inflector.plural(/$/, 's');
    inflector.singular(/s$/i, '');
    ```
  
    Creating an inflector with a nondefault ruleset.
  
    ```javascript
    var rules = {
      plurals:  [ /$/, 's' ],
      singular: [ /\s$/, '' ],
      irregularPairs: [
        [ 'cow', 'kine' ]
      ],
      uncountable: [ 'fish' ]
    };
  
    var inflector = new Ember.Inflector(rules);
    ```
  
    @class Inflector
    @namespace Ember
  */
  function Inflector(ruleSet) {
    ruleSet = ruleSet || {};
    ruleSet.uncountable = ruleSet.uncountable || makeDictionary();
    ruleSet.irregularPairs = ruleSet.irregularPairs || makeDictionary();

    var rules = this.rules = {
      plurals: ruleSet.plurals || [],
      singular: ruleSet.singular || [],
      irregular: makeDictionary(),
      irregularInverse: makeDictionary(),
      uncountable: makeDictionary()
    };

    loadUncountable(rules, ruleSet.uncountable);
    loadIrregular(rules, ruleSet.irregularPairs);

    this.enableCache();
  }

  if (!Object.create && !Object.create(null).hasOwnProperty) {
    throw new Error("This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg");
  }

  function makeDictionary() {
    var cache = Object.create(null);
    cache['_dict'] = null;
    delete cache['_dict'];
    return cache;
  }

  Inflector.prototype = {
    /**
      @public
       As inflections can be costly, and commonly the same subset of words are repeatedly
      inflected an optional cache is provided.
       @method enableCache
    */
    enableCache: function enableCache() {
      this.purgeCache();

      this.singularize = function (word) {
        this._cacheUsed = true;
        return this._sCache[word] || (this._sCache[word] = this._singularize(word));
      };

      this.pluralize = function (word) {
        this._cacheUsed = true;
        return this._pCache[word] || (this._pCache[word] = this._pluralize(word));
      };
    },

    /**
      @public
       @method purgedCache
    */
    purgeCache: function purgeCache() {
      this._cacheUsed = false;
      this._sCache = makeDictionary();
      this._pCache = makeDictionary();
    },

    /**
      @public
      disable caching
       @method disableCache;
    */
    disableCache: function disableCache() {
      this._sCache = null;
      this._pCache = null;
      this.singularize = function (word) {
        return this._singularize(word);
      };

      this.pluralize = function (word) {
        return this._pluralize(word);
      };
    },

    /**
      @method plural
      @param {RegExp} regex
      @param {String} string
    */
    plural: function plural(regex, string) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      this.rules.plurals.push([regex, string.toLowerCase()]);
    },

    /**
      @method singular
      @param {RegExp} regex
      @param {String} string
    */
    singular: function singular(regex, string) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      this.rules.singular.push([regex, string.toLowerCase()]);
    },

    /**
      @method uncountable
      @param {String} regex
    */
    uncountable: function uncountable(string) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      loadUncountable(this.rules, [string.toLowerCase()]);
    },

    /**
      @method irregular
      @param {String} singular
      @param {String} plural
    */
    irregular: function irregular(singular, plural) {
      if (this._cacheUsed) {
        this.purgeCache();
      }
      loadIrregular(this.rules, [[singular, plural]]);
    },

    /**
      @method pluralize
      @param {String} word
    */
    pluralize: function pluralize(word) {
      return this._pluralize(word);
    },

    _pluralize: function _pluralize(word) {
      return this.inflect(word, this.rules.plurals, this.rules.irregular);
    },
    /**
      @method singularize
      @param {String} word
    */
    singularize: function singularize(word) {
      return this._singularize(word);
    },

    _singularize: function _singularize(word) {
      return this.inflect(word, this.rules.singular, this.rules.irregularInverse);
    },

    /**
      @protected
       @method inflect
      @param {String} word
      @param {Object} typeRules
      @param {Object} irregular
    */
    inflect: function inflect(word, typeRules, irregular) {
      var inflection, substitution, result, lowercase, wordSplit, firstPhrase, lastWord, isBlank, isCamelized, rule, isUncountable;

      isBlank = !word || BLANK_REGEX.test(word);

      isCamelized = CAMELIZED_REGEX.test(word);
      firstPhrase = "";

      if (isBlank) {
        return word;
      }

      lowercase = word.toLowerCase();
      wordSplit = LAST_WORD_DASHED_REGEX.exec(word) || LAST_WORD_CAMELIZED_REGEX.exec(word);

      if (wordSplit) {
        firstPhrase = wordSplit[1];
        lastWord = wordSplit[2].toLowerCase();
      }

      isUncountable = this.rules.uncountable[lowercase] || this.rules.uncountable[lastWord];

      if (isUncountable) {
        return word;
      }

      for (rule in irregular) {
        if (lowercase.match(rule + "$")) {
          substitution = irregular[rule];

          if (isCamelized && irregular[lastWord]) {
            substitution = capitalize(substitution);
            rule = capitalize(rule);
          }

          return word.replace(new RegExp(rule, 'i'), substitution);
        }
      }

      for (var i = typeRules.length, min = 0; i > min; i--) {
        inflection = typeRules[i - 1];
        rule = inflection[0];

        if (rule.test(word)) {
          break;
        }
      }

      inflection = inflection || [];

      rule = inflection[0];
      substitution = inflection[1];

      result = word.replace(rule, substitution);

      return result;
    }
  };

  exports['default'] = Inflector;
});
define('ember-inflector/lib/system/string', ['exports', 'ember-inflector/lib/system/inflector'], function (exports, _emberInflectorLibSystemInflector) {
  'use strict';

  function pluralize(word) {
    return _emberInflectorLibSystemInflector['default'].inflector.pluralize(word);
  }

  function singularize(word) {
    return _emberInflectorLibSystemInflector['default'].inflector.singularize(word);
  }

  exports.pluralize = pluralize;
  exports.singularize = singularize;
});
define('ember-inflector/lib/utils/make-helper', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = makeHelper;

  function makeHelper(helperFunction) {
    if (_ember['default'].Helper) {
      return _ember['default'].Helper.helper(helperFunction);
    }
    if (_ember['default'].HTMLBars) {
      return _ember['default'].HTMLBars.makeBoundHelper(helperFunction);
    }
    return _ember['default'].Handlebars.makeBoundHelper(helperFunction);
  }
});
define('ember-load-initializers/index', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = function (app, prefix) {
    var regex = new RegExp('^' + prefix + '\/((?:instance-)?initializers)\/');
    var getKeys = Object.keys || _ember['default'].keys;

    getKeys(requirejs._eak_seen).map(function (moduleName) {
      return {
        moduleName: moduleName,
        matches: regex.exec(moduleName)
      };
    }).filter(function (dep) {
      return dep.matches && dep.matches.length === 2;
    }).forEach(function (dep) {
      var moduleName = dep.moduleName;

      var module = require(moduleName, null, null, true);
      if (!module) {
        throw new Error(moduleName + ' must export an initializer.');
      }

      var initializerType = _ember['default'].String.camelize(dep.matches[1].substring(0, dep.matches[1].length - 1));
      var initializer = module['default'];
      if (!initializer.name) {
        var initializerName = moduleName.match(/[^\/]+\/?$/)[0];
        initializer.name = initializerName;
      }

      if (app[initializerType]) {
        app[initializerType](initializer);
      }
    });
  };
});
define('ember-moment/computeds/-base', ['exports', 'ember', 'ember-moment/utils/get-value', 'ember-moment/utils/get-dependent-keys'], function (exports, _ember, _emberMomentUtilsGetValue, _emberMomentUtilsGetDependentKeys) {
  'use strict';

  exports['default'] = computedFactory;

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var computed = _ember['default'].computed;

  function computedFactory(fn) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var computedArgs = [].concat((0, _emberMomentUtilsGetDependentKeys['default'])(args));

      computedArgs.push(function () {
        var _this = this;

        var params = args.map(function (arg) {
          return _emberMomentUtilsGetValue['default'].call(_this, arg);
        });

        return fn.call(this, params);
      });

      return computed.apply(undefined, _toConsumableArray(computedArgs));
    };
  }
});
define('ember-moment/computeds/calendar', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function calendarComputed(params) {
    if (!params || params && params.length > 2) {
      throw new TypeError('ember-moment: Invalid Number of arguments, at most 2');
    }

    var _params = _slicedToArray(params, 2);

    var date = _params[0];
    var referenceTime = _params[1];

    return (0, _moment['default'])(date).calendar(referenceTime);
  });
});
define('ember-moment/computeds/duration', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function durationComputed(params) {
    return _moment['default'].duration.apply(_moment['default'], _toConsumableArray(params));
  });
});
define('ember-moment/computeds/format', ['exports', 'ember', 'moment', 'ember-getowner-polyfill', 'ember-moment/computeds/-base'], function (exports, _ember, _moment, _emberGetownerPolyfill, _emberMomentComputedsBase) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var CONFIG_KEY = 'config:environment';
  var get = _ember['default'].get;

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function formatComtputed(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var value = _ref2[0];
    var optionalFormat = _ref2[1];

    if (!optionalFormat) {
      var owner = (0, _emberGetownerPolyfill['default'])(this);

      if (owner && owner.hasRegistration && owner.hasRegistration(CONFIG_KEY)) {
        var config = owner.resolveRegistration(CONFIG_KEY);

        if (config) {
          optionalFormat = get(config, 'moment.outputFormat');
        }
      }
    }

    return (0, _moment['default'])(value).format(optionalFormat);
  });
});
define('ember-moment/computeds/from-now', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function fromNowComputed(params) {
    var maybeHideSuffix = undefined;

    if (params.length > 1) {
      maybeHideSuffix = params.pop();
    }

    return _moment['default'].apply(undefined, _toConsumableArray(params)).fromNow(maybeHideSuffix);
  });
});
define('ember-moment/computeds/humanize', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function humanizeComputed(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var duration = _ref2[0];
    var suffixless = _ref2[1];

    if (!_moment['default'].isDuration(duration)) {
      duration = _moment['default'].duration(duration);
    }

    return duration.humanize(suffixless);
  });
});
define('ember-moment/computeds/locale', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function localeComputed(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var date = _ref2[0];
    var locale = _ref2[1];

    if (!_moment['default'].isDuration(date)) {
      date = (0, _moment['default'])(date);
    }

    return date.locale(locale);
  });
});
define('ember-moment/computeds/moment', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function momentComputed(params) {
    return _moment['default'].apply(undefined, _toConsumableArray(params));
  });
});
define('ember-moment/computeds/to-now', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function toNowComputed(params) {
    var maybeHidePrefix = undefined;

    if (params.length > 1) {
      maybeHidePrefix = params.pop();
    }

    return _moment['default'].apply(undefined, _toConsumableArray(params)).toNow(maybeHidePrefix);
  });
});
define('ember-moment/computeds/tz', ['exports', 'moment', 'ember-moment/computeds/-base'], function (exports, _moment, _emberMomentComputedsBase) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  exports['default'] = (0, _emberMomentComputedsBase['default'])(function tzComputed(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var date = _ref2[0];
    var tz = _ref2[1];

    return (0, _moment['default'])(date).tz(tz);
  });
});
define('ember-moment/helpers/-base', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var observer = _ember['default'].observer;
  var inject = _ember['default'].inject;
  var Helper = _ember['default'].Helper;
  var runBind = _ember['default'].run.bind;

  exports['default'] = Helper.extend({
    moment: inject.service(),
    disableInterval: false,

    localeOrTimeZoneChanged: observer('moment.locale', 'moment.timeZone', function () {
      this.recompute();
    }),

    compute: function compute(value, _ref) {
      var interval = _ref.interval;

      if (this.get('disableInterval')) {
        return;
      }

      this.clearTimer();

      if (interval) {
        this.intervalTimer = setTimeout(runBind(this, this.recompute), parseInt(interval, 10));
      }
    },

    morphMoment: function morphMoment(time, _ref2) {
      var locale = _ref2.locale;
      var timeZone = _ref2.timeZone;

      locale = locale || this.get('moment.locale');

      if (locale) {
        time = time.locale(locale);
      }

      timeZone = timeZone || this.get('moment.timeZone');

      if (timeZone && time.tz) {
        time = time.tz(timeZone);
      }

      return time;
    },

    clearTimer: function clearTimer() {
      clearTimeout(this.intervalTimer);
    },

    destroy: function destroy() {
      this.clearTimer();
      this._super.apply(this, arguments);
    }
  });
});
define('ember-moment/helpers/moment-calendar', ['exports', 'moment', 'ember-moment/utils/helper-compute', 'ember-moment/helpers/-base'], function (exports, _moment, _emberMomentUtilsHelperCompute, _emberMomentHelpersBase) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  exports['default'] = _emberMomentHelpersBase['default'].extend({
    globalAllowEmpty: false,

    compute: (0, _emberMomentUtilsHelperCompute['default'])(function (params, _ref) {
      var locale = _ref.locale;
      var timeZone = _ref.timeZone;

      this._super.apply(this, arguments);

      if (!params || params && params.length > 2) {
        throw new TypeError('ember-moment: Invalid Number of arguments, at most 2');
      }

      var _params = _slicedToArray(params, 2);

      var date = _params[0];
      var referenceTime = _params[1];

      return this.morphMoment((0, _moment['default'])(date), { locale: locale, timeZone: timeZone }).calendar(referenceTime);
    })
  });
});
define('ember-moment/helpers/moment-duration', ['exports', 'moment', 'ember-moment/helpers/-base'], function (exports, _moment, _emberMomentHelpersBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = _emberMomentHelpersBase['default'].extend({
    disableInterval: true,

    compute: function compute(params, _ref) {
      var locale = _ref.locale;
      var timeZone = _ref.timeZone;

      this._super.apply(this, arguments);

      if (!params || params && params.length > 2) {
        throw new TypeError('ember-moment: Invalid Number of arguments, at most 2');
      }

      return this.morphMoment(_moment['default'].duration.apply(_moment['default'], _toConsumableArray(params)), { locale: locale, timeZone: timeZone }).humanize();
    }
  });
});
define('ember-moment/helpers/moment-format', ['exports', 'ember', 'moment', 'ember-moment/utils/helper-compute', 'ember-moment/helpers/-base'], function (exports, _ember, _moment, _emberMomentUtilsHelperCompute, _emberMomentHelpersBase) {
  'use strict';

  var observer = _ember['default'].observer;

  exports['default'] = _emberMomentHelpersBase['default'].extend({
    globalAllowEmpty: false,

    defaultFormatDidChange: observer('moment.defaultFormat', function () {
      this.recompute();
    }),

    compute: (0, _emberMomentUtilsHelperCompute['default'])(function (params, _ref) {
      var locale = _ref.locale;
      var timeZone = _ref.timeZone;

      this._super.apply(this, arguments);
      var length = params.length;

      if (length > 3) {
        throw new TypeError('ember-moment: Invalid Number of arguments, expected at most 4');
      }

      var format = undefined;
      var args = [];

      args.push(params[0]);

      if (length === 1) {
        format = this.get('moment.defaultFormat');
      } else if (length === 2) {
        format = params[1];
      } else if (length > 2) {
        args.push(params[2]);
        format = params[1];
      }

      return this.morphMoment(_moment['default'].apply(undefined, args), { locale: locale, timeZone: timeZone }).format(format);
    })
  });
});
define('ember-moment/helpers/moment-from-now', ['exports', 'moment', 'ember-moment/utils/helper-compute', 'ember-moment/helpers/-base'], function (exports, _moment, _emberMomentUtilsHelperCompute, _emberMomentHelpersBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = _emberMomentHelpersBase['default'].extend({
    globalAllowEmpty: false,

    compute: (0, _emberMomentUtilsHelperCompute['default'])(function (params, _ref) {
      var hideSuffix = _ref.hideSuffix;
      var locale = _ref.locale;
      var timeZone = _ref.timeZone;

      this._super.apply(this, arguments);

      return this.morphMoment(_moment['default'].apply(undefined, _toConsumableArray(params)), { locale: locale, timeZone: timeZone }).fromNow(hideSuffix);
    })
  });
});
define('ember-moment/helpers/moment-to-now', ['exports', 'moment', 'ember-moment/utils/helper-compute', 'ember-moment/helpers/-base'], function (exports, _moment, _emberMomentUtilsHelperCompute, _emberMomentHelpersBase) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports['default'] = _emberMomentHelpersBase['default'].extend({
    globalAllowEmpty: false,

    compute: (0, _emberMomentUtilsHelperCompute['default'])(function (params, _ref) {
      var hidePrefix = _ref.hidePrefix;
      var locale = _ref.locale;
      var timeZone = _ref.timeZone;

      this._super.apply(this, arguments);

      return this.morphMoment(_moment['default'].apply(undefined, _toConsumableArray(params)), { locale: locale, timeZone: timeZone }).toNow(hidePrefix);
    })
  });
});
define('ember-moment/helpers/now', ['exports', 'ember-moment/helpers/-base'], function (exports, _emberMomentHelpersBase) {
  'use strict';

  exports['default'] = _emberMomentHelpersBase['default'].extend({
    compute: function compute() {
      this._super.apply(this, arguments);

      return new Date();
    }
  });
});
define('ember-moment/services/moment', ['exports', 'ember', 'moment'], function (exports, _ember, _moment2) {
  'use strict';

  var computed = _ember['default'].computed;
  var logger = _ember['default'].Logger;

  exports['default'] = _ember['default'].Service.extend({
    _timeZone: null,

    locale: null,
    defaultFormat: null,

    init: function init() {
      this._super.apply(this, arguments);

      if (!this.get('defaultFormat')) {
        this.set('defaultFormat', 'LLLL');
      }
    },

    timeZone: computed('_timeZone', {
      get: function get() {
        return this.get('_timeZone');
      },

      set: function set(propertyKey, timeZone) {
        if (!_moment2['default'].tz) {
          logger.warn('[ember-moment] attempted to set timezone, but moment-timezone unavailable.');
          return;
        }

        this.set('_timeZone', timeZone);

        return timeZone;
      }
    }),

    changeLocale: function changeLocale(locale) {
      this.set('locale', locale);
    },

    changeTimeZone: function changeTimeZone(timeZone) {
      this.set('timeZone', timeZone);
    },

    isMoment: function isMoment(obj) {
      return _moment2['default'].isMoment(obj);
    },

    moment: function moment() {
      var time = _moment2['default'].apply(undefined, arguments);
      var locale = this.get('locale');
      var timeZone = this.get('timeZone');

      if (locale) {
        time = time.locale(locale);
      }

      if (timeZone && time.tz) {
        time = time.tz(timeZone);
      }

      return time;
    }
  });
});
define('ember-moment/utils/get-dependent-keys', ['exports', 'ember', 'ember-moment/utils/is-descriptor'], function (exports, _ember, _emberMomentUtilsIsDescriptor) {
  // source: ember-cpm
  // https://github.com/cibernox/ember-cpm/blob/7b974567c92e45a815ee18c6cb62e3ba1fa99f1d/addon/utils.js#L49-L73

  'use strict';

  var typeOf = _ember['default'].typeOf;

  function getDependentKeys(argumentArr) {
    return argumentArr.reduce(function (out, item) {
      switch (typeOf(item)) {
        case 'string':
          var containsSpaces = item.indexOf(' ') !== -1;
          if (!containsSpaces) {
            out.push(item);
          }
          break;
        case 'boolean':
        case 'number':
          break;
        default:
          if (item && item._dependentKeys && (0, _emberMomentUtilsIsDescriptor['default'])(item)) {
            out = out.concat(item._dependentKeys);
          }
          break;
      }

      return out;
    }, []);
  }

  exports['default'] = getDependentKeys;
});
define('ember-moment/utils/get-value', ['exports', 'ember', 'ember-moment/utils/is-descriptor'], function (exports, _ember, _emberMomentUtilsIsDescriptor) {
  // source: ember-cpm
  // https://github.com/cibernox/ember-cpm/blob/7b974567c92e45a815ee18c6cb62e3ba1fa99f1d/addon/utils.js#L75-L99

  'use strict';

  var typeOf = _ember['default'].typeOf;
  var get = _ember['default'].get;

  /**
   Evaluate a value, which could either be a property key or a literal
   if the value is a string, the object that the computed property is installed
   on will be checked for a property of the same name. If one is found, it will
   be evaluated, and the result will be returned. Otherwise the string value its
   self will be returned
   All non-string values pass straight through, and are returned unaltered
   @method getVal
   @param val value to evaluate
   */
  function getValue(val) {
    if (typeOf(val) === 'string') {
      var propVal = get(this, val);

      return 'undefined' === typeof propVal ? val : propVal;
    } else if ((0, _emberMomentUtilsIsDescriptor['default'])(val)) {
      var funcName = val.func ? 'func' : // Ember < 1.11
      '_getter'; // Ember >= 1.11
      return val.altKey ? get(this, val.altKey) : val[funcName].apply(this);
    } else {
      return val;
    }
  }

  exports['default'] = getValue;
});
define('ember-moment/utils/helper-compute', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var isBlank = _ember['default'].isBlank;

  exports['default'] = function (cb) {
    return function (params, hash) {
      if (!params || params && params.length === 0) {
        throw new TypeError('ember-moment: Invalid Number of arguments, expected at least 1');
      }

      var datetime = params[0];

      var allowEmpty = hash.allowEmpty || hash['allow-empty'];

      if (allowEmpty === undefined || allowEmpty === null) {
        allowEmpty = !!this.get('globalAllowEmpty');
      }

      if (isBlank(datetime)) {
        if (allowEmpty) {
          return;
        } else {
          _ember['default'].Logger.warn('ember-moment: an empty value (null, undefined, or "") was passed to moment-format');
        }
      }

      return cb.apply(this, arguments);
    };
  };
});
define('ember-moment/utils/is-descriptor', ['exports', 'ember'], function (exports, _ember) {
  // source: ember-cpm
  // https://github.com/cibernox/ember-cpm/blob/7b974567c92e45a815ee18c6cb62e3ba1fa99f1d/addon/utils.js#L17-L20

  'use strict';

  var typeOf = _ember['default'].typeOf;
  var Descriptor = _ember['default'].Descriptor;

  function isDescriptor(prop) {
    return typeOf(prop) === 'object' && (prop.constructor === Descriptor || // Ember < 1.11
    prop.isDescriptor); // Ember >= 1.11.0
  }

  exports['default'] = isDescriptor;
});
define('ember-osf/adapters/collection', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
    'use strict';

    exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({
        buildURL: function buildURL(_, __, ___, requestType) {
            // Embed linked_nodes
            var base = this._super.apply(this, arguments);
            if (['createRecord', 'updateRecord', 'deleteRecord'].indexOf(requestType) === -1) {
                return base + '?embed=linked_nodes';
            } else {
                return base;
            }
        }
    });
});
define('ember-osf/adapters/comment-report', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/comment', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/contributor', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
    'use strict';

    exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({
        buildURL: function buildURL(modelName, id, snapshot, requestType) {
            // jshint ignore:line
            if (requestType === 'createRecord' || requestType === 'findRecord') {
                var nodeId;
                var sendEmail = true;
                if (snapshot) {
                    nodeId = snapshot.record.get('nodeId');
                    sendEmail = snapshot.record.get('sendEmail');
                } else {
                    nodeId = id.split('-').shift();
                }

                var node = this.store.peekRecord('node', nodeId);
                if (node) {
                    var base = this._buildRelationshipURL(node._internalModel.createSnapshot(), 'contributors');

                    if (requestType === 'findRecord') {
                        return '' + base + id.split('-').pop() + '/';
                    }

                    // Needed for Ember Data to update the inverse record's (the node's) relationship
                    var requestUrl = base + '?embed=node';

                    if (!sendEmail) {
                        requestUrl += '&send_email=false';
                    }

                    return requestUrl;
                } else {
                    throw new Error('Trying to add a contributor to a Node that hasn\'t been loaded into the store');
                }
            }
            return this._super.apply(this, arguments);
        }
    });
});
define('ember-osf/adapters/draft-registration', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/file-contents', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/file-provider', ['exports', 'ember-osf/adapters/osf-adapter', 'ember-osf/mixins/file-cache-bypass'], function (exports, _emberOsfAdaptersOsfAdapter, _emberOsfMixinsFileCacheBypass) {
    'use strict';

    exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend(_emberOsfMixinsFileCacheBypass['default'], {
        pathForType: function pathForType() {
            return 'files';
        }
    });
});
define('ember-osf/adapters/file-version', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/file', ['exports', 'ember-osf/adapters/osf-adapter', 'ember-osf/mixins/file-cache-bypass'], function (exports, _emberOsfAdaptersOsfAdapter, _emberOsfMixinsFileCacheBypass) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend(_emberOsfMixinsFileCacheBypass['default'], {});
});
define('ember-osf/adapters/institution', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/log', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/metaschema', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/node-link', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/node', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
    'use strict';

    exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({
        buildURL: function buildURL(modelName, id, snapshot, requestType) {
            // jshint ignore:line
            if (requestType === 'createRecord') {
                var _parent = snapshot.record.belongsTo('parent').belongsToRelationship.members.list[0];
                if (_parent) {
                    return this._buildRelationshipURL(_parent.createSnapshot(), 'children');
                }
            }
            return this._super.apply(this, arguments);
        }
    });
});
define('ember-osf/adapters/osf-adapter', ['exports', 'ember', 'ember-data', 'ember-data-has-many-query', 'ember-get-config', 'ember-osf/mixins/generic-data-adapter', 'ember-inflector'], function (exports, _ember, _emberData, _emberDataHasManyQuery, _emberGetConfig, _emberOsfMixinsGenericDataAdapter, _emberInflector) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule adapters
     */

    /**
     * Base adapter class for all OSF APIv2 endpoints
     *
     * @class OsfAdapter
     * @extends DS.JSONAPIAdapter
     * @uses HasManyQuery.RESTAdapterMixin
     * @uses GenericDataAdapterMixin
     */
    exports['default'] = _emberData['default'].JSONAPIAdapter.extend(_emberDataHasManyQuery['default'].RESTAdapterMixin, _emberOsfMixinsGenericDataAdapter['default'], {
        authorizer: _emberGetConfig['default']['ember-simple-auth'].authorizer,
        host: _emberGetConfig['default'].OSF.apiUrl,
        namespace: _emberGetConfig['default'].OSF.apiNamespace,
        buildURL: function buildURL(modelName, id, snapshot, requestType) {
            var url = this._super.apply(this, arguments);
            var options = (snapshot ? snapshot.adapterOptions : false) || {};
            if (requestType === 'deleteRecord' || requestType === 'updateRecord' || requestType === 'findRecord') {
                if (snapshot.record.get('links.self')) {
                    url = snapshot.record.get('links.self');
                }
            } else if (options.url) {
                url = options.url;
            }

            // Fix issue where CORS request failed on 301s: Ember does not seem to append trailing
            // slash to URLs for single documents, but DRF redirects to force a trailing slash
            if (url.lastIndexOf('/') !== url.length - 1) {
                url += '/';
            }
            return url;
        },
        /**
         * Construct a URL for a relationship create/update/delete.
         *
         * @method _buildRelationshipURL
         * @private
         * @param {DS.Snapshot} snapshot
         * @param {String} relationship the relationship to build a url for
         * @return {String} a URL
         **/
        _buildRelationshipURL: function _buildRelationshipURL(snapshot, relationship) {
            var links = relationship ? snapshot.record.get('relationshipLinks.' + _ember['default'].String.underscore(relationship) + '.links') : false;
            if (links && (links.self || links.related)) {
                return links.self ? links.self.href : links.related.href;
            }
            return null;
        },
        /**
         * Handle creation of related resources
         *
         * @method _createRelated
         * @private
         * @param {DS.Store} store
         * @param {DS.Snapshot} snapshot snapshot of inverse record
         * @param {DS.Snapshot[]} createdSnapshots
         * @param {String} relationship
         * @param {String} url
         * @param {Boolean} isBulk
         **/
        _createRelated: function _createRelated(store, snapshot, createdSnapshots, relationship, url) {
            var isBulk = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];
            // jshint ignore:line
            // TODO support bulk create?
            // if (isBulk) {
            //
            // }
            return createdSnapshots.map(function (s) {
                return s.record.save({
                    adapterOptions: {
                        nested: true,
                        url: url,
                        requestType: 'create'
                    }
                }).then(function (res) {
                    snapshot.record.resolveRelationship(relationship).addCanonicalRecord(s.record._internalModel);
                    return res;
                });
            });
        },
        /**
         * Handle add(s) of related resources. This differs from CREATEs in that the related
         * record is already saved and is just being associated with the inverse record.
         *
         * @method _addRelated
         * @private
         * @param {DS.Store} store
         * @param {DS.Snapshot} snapshot snapshot of inverse record
         * @param {DS.Snapshot[]} addedSnapshots
         * @param {String} relationship
         * @param {String} url
         * @param {Boolean} isBulk
         **/
        _addRelated: function _addRelated(store, snapshot, addedSnapshots, relationship, url) {
            var isBulk = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];

            return this._doRelatedRequest(store, snapshot, addedSnapshots, relationship, url, 'POST', isBulk).then(function (res) {
                addedSnapshots.forEach(function (s) {
                    snapshot.record.resolveRelationship(relationship).addCanonicalRecord(s.record._internalModel);
                });
                return res;
            });
        },
        /**
         * Handle update(s) of related resources
         *
         * @method _updateRelated
         * @private
         * @param {DS.Store} store
         * @param {DS.Snapshot} snapshot snapshot of inverse record
         * @param {DS.Snapshot[]} updatedSnapshots
         * @param {String} relationship
         * @param {String} url
         * @param {Boolean} isBulk
         **/
        _updateRelated: function _updateRelated(store, snapshot, updatedSnapshots, relationship, url) {
            var isBulk = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];

            return this._doRelatedRequest(store, snapshot, updatedSnapshots, relationship, url, 'PATCH', isBulk).then(function (res) {
                var relatedType = (0, _emberInflector.singularize)(snapshot.record[relationship].meta().type);
                res.data.forEach(function (item) {
                    var record = store.push(store.normalize(relatedType, item));
                    snapshot.record.resolveRelationship(relationship).addCanonicalRecord(record._internalModel);
                });
                return res;
            });
        },
        /**
         * Handle removal of related resources. This differs from DELETEs in that the related
         * record is not deleted, just dissociated from the inverse record.
         *
         * @method _removeRelated
         * @private
         * @param {DS.Store} store
         * @param {DS.Snapshot} snapshot snapshot of inverse record
         * @param {DS.Snapshot[]} removedSnapshots
         * @param {String} relationship
         * @param {String} url
         * @param {Boolean} isBulk
         **/
        _removeRelated: function _removeRelated(store, snapshot, removedSnapshots, relationship, url) {
            var isBulk = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];

            return this._doRelatedRequest(store, snapshot, removedSnapshots, relationship, url, 'DELETE', isBulk).then(function (res) {
                removedSnapshots.forEach(function (s) {
                    return snapshot.record.resolveRelationship(relationship).removeCanonicalRecord(s.record._internalModel);
                });
                return res || [];
            });
        },
        /**
         * Handle deletion of related resources
         *
         * @method _deleteRelated
         * @private
         * @param {DS.Store} store
         * @param {DS.Snapshot} snapshot snapshot of inverse record
         * @param {DS.Snapshot[]} deletedSnapshots
         * @param {String} relationship
         * @param {String} url
         * @param {Boolean} isBulk
         **/
        _deleteRelated: function _deleteRelated(store, snapshot, deletedSnapshots, relationship, url) {
            var isBulk = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];
            // jshint ignore:line
            return this._removeRelated.apply(this, arguments).then(function () {
                deletedSnapshots.forEach(function (s) {
                    return s.record.unloadRecord();
                });
            });
        },
        /**
         * A helper for making _*Related requests
         *
         * @method _doRelatedRequest
         * @private
         * @param {DS.Store} store
         * @param {DS.Snapshot} snapshot snapshot of inverse record
         * @param {DS.Snapshot[]} relatedSnapshots
         * @param {String} relationship
         * @param {String} url
         * @param {String} requestMethod
         * @param {Boolean} isBulk
         **/
        _doRelatedRequest: function _doRelatedRequest(store, snapshot, relatedSnapshots, relationship, url, requestMethod) {
            var isBulk = arguments.length <= 6 || arguments[6] === undefined ? false : arguments[6];

            var data = {};
            var relatedMeta = snapshot.record[relationship].meta();
            var type = (0, _emberInflector.singularize)(relatedMeta.type);
            var serializer = store.serializerFor(type);
            if (relatedMeta.options.serializerType) {
                serializer = store.serializerFor(relatedMeta.options.serializerType);
            }
            if (_ember['default'].isArray(relatedSnapshots)) {
                data.data = relatedSnapshots.map(function (relatedSnapshot) {
                    var item = {};
                    serializer.serializeIntoHash(item, store.modelFor(type), relatedSnapshot, {
                        forRelationship: true,
                        isBulk: isBulk
                    });
                    if (_ember['default'].isArray(item.data) && item.data.length === 1) {
                        return item.data[0];
                    }
                    return item.data;
                });
            } else {
                serializer.serializeIntoHash(data, store.modelFor(type), relatedSnapshots, {
                    forRelationship: true,
                    isBulk: isBulk
                });
            }
            return this.ajax(url, requestMethod, {
                data: data,
                isBulk: isBulk
            }).then(function (res) {
                if (!_ember['default'].$.isArray(res.data)) {
                    res.data = [res.data];
                }
                return res;
            });
        },
        /**
         * Delegate a series of requests based on a snapshot, relationship, and a change.
         * The change argument can be 'delete', 'remove', 'update', 'add', 'create'
         *
         * @method _handleRelatedRequest
         * @private
         * @param {DS.Store} store
         * @param {DS.Model} type
         * @param {DS.Snapshot} snapshot
         * @param {String} relationship
         * @param {String} change
         **/
        _handleRelatedRequest: function _handleRelatedRequest(store, type, snapshot, relationship, change) {
            var related = snapshot.record.get('_dirtyRelationships.' + relationship + '.' + change).map(function (r) {
                if (r._internalModel) {
                    return r._internalModel.createSnapshot();
                }
                return r.createSnapshot();
            });
            if (!related.length) {
                return [];
            }

            var relatedMeta = snapshot.record[relationship].meta();
            var url = this._buildRelationshipURL(snapshot, relationship);
            var adapter = store.adapterFor(type.modelName);
            var allowBulk = relatedMeta.options['allowBulk' + _ember['default'].String.capitalize(change)];

            if (related.record) {
                related = [related];
            }

            var response;
            response = adapter['_' + change + 'Related'](store, snapshot, related, relationship, url, allowBulk);
            return response;
        },
        updateRecord: function updateRecord(store, type, snapshot) {
            var _this = this;

            var relatedRequests = {};
            var dirtyRelationships = snapshot.record.get('_dirtyRelationships');
            Object.keys(dirtyRelationships).forEach(function (relationship) {
                var promises = [];
                var changed = dirtyRelationships[relationship];
                Object.keys(changed).forEach(function (change) {
                    promises = promises.concat(_this._handleRelatedRequest(store, type, snapshot, relationship, change) || []);
                });
                if (promises.length) {
                    relatedRequests[relationship] = _ember['default'].RSVP.allSettled(promises);
                }
            });
            var relatedPromise = _ember['default'].RSVP.hashSettled(relatedRequests);
            if (Object.keys(snapshot.record.changedAttributes()).length) {
                return this._super.apply(this, arguments).then(function (response) {
                    return relatedPromise.then(function () {
                        return response;
                    });
                });
            } else {
                return relatedPromise.then(function () {
                    return null;
                });
            }
        },
        ajaxOptions: function ajaxOptions(_, __, options) {
            var ret = this._super.apply(this, arguments);
            if (options && options.isBulk) {
                ret.contentType = 'application/vnd.api+json; ext=bulk';
            }
            return ret;
        },
        pathForType: function pathForType(modelName) {
            var underscored = _ember['default'].String.underscore(modelName);
            return _ember['default'].String.pluralize(underscored);
        }
    });
});
define('ember-osf/adapters/registration', ['exports', 'ember-osf/adapters/osf-adapter'], function (exports, _emberOsfAdaptersOsfAdapter) {
  'use strict';

  exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({});
});
define('ember-osf/adapters/user', ['exports', 'ember-osf/adapters/osf-adapter', 'ember'], function (exports, _emberOsfAdaptersOsfAdapter, _ember) {
    'use strict';

    exports['default'] = _emberOsfAdaptersOsfAdapter['default'].extend({
        findHasMany: function findHasMany(store, snapshot, url, relationship) {
            var id = snapshot.id;
            var type = snapshot.modelName;

            url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findHasMany'));

            // If fetching user nodes, will embed root and parent.
            if (relationship.type === 'node') {
                url += '?embed=parent&embed=root';
                if (snapshot.record.get('query-params')) {
                    url += '&' + _ember['default'].$.param(snapshot.record.get('query-params'));
                }
            }
            return this.ajax(url, 'GET');
        }
    });
});
define('ember-osf/authenticators/osf-cookie', ['exports', 'ember', 'ember-simple-auth/authenticators/base', 'ember-get-config', 'ember-osf/utils/ajax-helpers'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase, _emberGetConfig, _emberOsfUtilsAjaxHelpers) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule authenticators
     */

    /**
     * Ember-simple-auth compatible authenticator based on session cookie.
     *
     * Intended to be used with the authorizer of the same name.
     *
     * @class OsfCookieAuthenticator
     * @extends ember-simple-auth/BaseAuthenticator
     */
    exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
        // HACK: Lets us clear session manually, rather than after .invalidate method resolves
        session: _ember['default'].inject.service('session'),

        _test: function _test() {
            return (0, _emberOsfUtilsAjaxHelpers.authenticatedAJAX)({
                method: 'GET',
                url: _emberGetConfig['default'].OSF.apiUrl + '/' + _emberGetConfig['default'].OSF.apiNamespace + '/users/me/',
                dataType: 'json',
                contentType: 'application/json',
                xhrFields: {
                    withCredentials: true
                }
            }).then(function (res) {
                return res.data;
            });
        },
        restore: function restore() /* data */{
            return this._test().fail(this.invalidate);
        },

        /**
         * Send a request to the flask application to trigger invalidation of session remotely
         * @method invalidate
         */
        invalidate: function invalidate(data) {
            if (!data || data.id && data.status !== 401) {
                // If invalidate is called when loading the page to check if a cookie has permissions, don't redirect the user
                // But if invalidate is called without arguments, or for any other reason, interpret this as a straight logout request
                //   (and let the session get invalidated next time at the start of first page load)
                // Can't do this via AJAX request because it redirects to CAS, and AJAX + redirect = CORS issue

                // Manually clear session before user leaves the page, since we aren't sticking around for ESA to do so later
                this.get('session.session')._clear(true).then(function () {
                    return window.location = _emberGetConfig['default'].OSF.url + 'logout/';
                });
            } else {
                // This branch is expected to be called when a test request reveals the user to lack permissions... so session should be wiped
                return _ember['default'].RSVP.resolve();
            }
        },
        /**
         * For now, simply verify that a token is present and can be used
         * @method authenticate
         * @param code
         * @return {Promise}
         */
        authenticate: function authenticate(code) {
            var jqDeferred = this._test(code);
            return new _ember['default'].RSVP.Promise(function (resolve, reject) {
                // TODO: Improve param capture
                jqDeferred.done(function (value) {
                    return resolve(value);
                });
                jqDeferred.fail(function (reason) {
                    return reject(reason);
                });
            });
        }
    });
});
define('ember-osf/authenticators/osf-token', ['exports', 'ember', 'ember-simple-auth/authenticators/base', 'ember-get-config'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase, _emberGetConfig) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule authenticators
     */

    /**
     * Ember-simple-auth compatible authenticator based on OAuth2 bearer tokens.
     *
     * Intended to be used with the authorizer of the same name.
     *
     * @class OsfTokenAuthenticator
     * @extends ember-simple-auth/BaseAuthenticator
     */
    exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
        _test: function _test(accessToken) {
            return _ember['default'].$.ajax({
                method: 'GET',
                url: _emberGetConfig['default'].OSF.apiUrl + '/' + _emberGetConfig['default'].OSF.apiNamespace + '/users/me/',
                dataType: 'json',
                contentType: 'application/json',
                xhrFields: {
                    withCredentials: false
                },
                headers: {
                    Authorization: 'Bearer ' + accessToken
                }
            }).then(function (res) {
                res.data.attributes.accessToken = accessToken;
                return res.data;
            });
        },
        restore: function restore(data) {
            var accessToken = data.attributes.accessToken;
            return this._test(accessToken).fail(this.invalidate);
        },
        authenticate: function authenticate(accessToken) {
            // Adds the entire API user endpoint record to the session store as given
            var jqDeferred = this._test(accessToken);
            return new _ember['default'].RSVP.Promise(function (resolve, reject) {
                // TODO: Improve param capture
                jqDeferred.done(function (value) {
                    return resolve(value);
                });
                jqDeferred.fail(function (reason) {
                    return reject(reason);
                });
            });
        }
    });
});
define('ember-osf/authorizers/osf-cookie', ['exports', 'ember-simple-auth/authorizers/base'], function (exports, _emberSimpleAuthAuthorizersBase) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule authorizers
   */

  /**
   * Ember-simple-auth compatible authorizer based on session cookie.
   *
   * Intended to be used with the authenticator of the same name.
   *
   * @class OsfCookieAuthorizer
   * @extends ember-simple-auth/BaseAuthorizer
   */
  exports['default'] = _emberSimpleAuthAuthorizersBase['default'].extend({
    authorize: function authorize() /*data, block*/{
      // Cookies will be sent automatically with requests; no specific actions needed
    }
  });
});
define('ember-osf/authorizers/osf-token', ['exports', 'ember-simple-auth/authorizers/base'], function (exports, _emberSimpleAuthAuthorizersBase) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule authorizers
   */

  /**
   * Ember-simple-auth compatible authorizer based on OAuth2 bearer tokens.
   *
   * Intended to be used with the authenticator of the same name.
   *
   * @class OsfTokenAuthorizer
   * @extends ember-simple-auth/BaseAuthorizer
   */
  exports['default'] = _emberSimpleAuthAuthorizersBase['default'].extend({
    authorize: function authorize(sessionData, setHeader) {
      setHeader('Authorization', 'Bearer ' + sessionData.attributes.accessToken);
    }
  });
});
define('ember-osf/components/comment-detail/component', ['exports', 'ember', 'ember-osf/components/comment-detail/template'], function (exports, _ember, _emberOsfComponentsCommentDetailTemplate) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * Display information about an individual comment, including controls to edit, delete, and report.
   * This component is typically used as part of the `comment-pane` component; see that component for further information.
   *
   * Sample usage:
   * ```handlebars
   * {{comment-detail
   *   comment=comment
   *   editComment=attrs.editComment
   *   deleteComment=attrs.deleteComment
   *   restoreComment=attrs.restoreComment
   *   reportComment=attrs.reportComment}}
   * ```
   * @class comment-detail
   * @param {DS.Model} comment The comment to display
   * @param {action} editComment
   * @param {action} deleteComment
   * @param {action} restoreComment
   * @param {action} reportComment
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsCommentDetailTemplate['default'],
    comment: null
  });
});
define("ember-osf/components/comment-detail/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 12
              },
              "end": {
                "line": 7,
                "column": 12
              }
            },
            "moduleName": "modules/ember-osf/components/comment-detail/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-warning");
            var el2 = dom.createTextNode("Restore");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["element", "action", [["get", "restoreComment", ["loc", [null, [6, 33], [6, 47]]], 0, 0, 0, 0], ["get", "comment", ["loc", [null, [6, 48], [6, 55]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 24], [6, 57]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/comment-detail/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            Comment deleted\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "comment.canEdit", ["loc", [null, [5, 19], [5, 34]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 12], [7, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 12
              },
              "end": {
                "line": 18,
                "column": 12
              }
            },
            "moduleName": "modules/ember-osf/components/comment-detail/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-success");
            var el2 = dom.createTextNode("Edit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-danger");
            var el2 = dom.createTextNode("Delete");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "comment.content", ["loc", [null, [15, 30], [15, 45]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [15, 16], [15, 47]]], 0, 0], ["element", "action", [["get", "editComment", ["loc", [null, [16, 33], [16, 44]]], 0, 0, 0, 0], ["get", "comment", ["loc", [null, [16, 45], [16, 52]]], 0, 0, 0, 0]], [], ["loc", [null, [16, 24], [16, 54]]], 0, 0], ["element", "action", [["get", "deleteComment", ["loc", [null, [17, 33], [17, 46]]], 0, 0, 0, 0], ["get", "comment", ["loc", [null, [17, 47], [17, 54]]], 0, 0, 0, 0]], [], ["loc", [null, [17, 24], [17, 56]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 12
              },
              "end": {
                "line": 21,
                "column": 12
              }
            },
            "moduleName": "modules/ember-osf/components/comment-detail/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-warning");
            var el2 = dom.createTextNode("Report");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["content", "comment.content", ["loc", [null, [19, 22], [19, 41]]], 0, 0, 0, 0], ["element", "action", [["get", "reportComment", ["loc", [null, [20, 33], [20, 46]]], 0, 0, 0, 0], ["get", "comment", ["loc", [null, [20, 47], [20, 54]]], 0, 0, 0, 0]], [], ["loc", [null, [20, 24], [20, 56]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/comment-detail/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(":\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(element3, 3, 3);
          return morphs;
        },
        statements: [["content", "comment.dateCreated", ["loc", [null, [12, 16], [12, 39]]], 0, 0, 0, 0], ["block", "if", [["get", "comment.canEdit", ["loc", [null, [14, 19], [14, 34]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [14, 12], [21, 19]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/comment-detail/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "comment.deleted", ["loc", [null, [2, 10], [2, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 4], [23, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('ember-osf/components/comment-form/component', ['exports', 'ember', 'ember-osf/components/comment-form/template'], function (exports, _ember, _emberOsfComponentsCommentFormTemplate) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * Allow users to add comments to a page.
   *
   * This component is typically used as part of the `comment-pane` component; see that component for further information.
   * Sample usage:
   * ```handlebars
   * {{comment-form addComment=attrs.addComment}}
   * ```
   *
   * @class comment-form
   * @param {action} addComment The action to fire when adding a new comment to the discussion. Returns a promise.
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsCommentFormTemplate['default'],
    _commentText: null,

    actions: {
      /**
       * Call a passed-in closure action to handle submitting a comment. Reset the form if save succeeds.
       * @method addComment
       * @param {String} text The text of the comment to create
       */
      addComment: function addComment(text) {
        var _this = this;

        var res = this.attrs.addComment(text);
        res.then(function () {
          return _this.set('_commentText', '');
        });
      }
    }
  });
});
define("ember-osf/components/comment-form/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/comment-form/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "btn btn-success");
        var el3 = dom.createTextNode("\n        Add comment\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createAttrMorph(element1, 'disabled');
        morphs[2] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [["inline", "textarea", [], ["class", "form-control", "maxlength", "500", "placeholder", "Add a comment", "value", ["subexpr", "@mut", [["get", "_commentText", ["loc", [null, [2, 86], [2, 98]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 4], [2, 100]]], 0, 0], ["attribute", "disabled", ["subexpr", "if", [["subexpr", "not", [["get", "_commentText", ["loc", [null, [3, 92], [3, 104]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 87], [3, 105]]], 0, 0], true], [], ["loc", [null, [null, null], [3, 112]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["addComment", ["get", "_commentText", ["loc", [null, [3, 34], [3, 46]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 12], [3, 48]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/comment-pane/component', ['exports', 'ember', 'ember-osf/components/comment-pane/template'], function (exports, _ember, _emberOsfComponentsCommentPaneTemplate) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * Display a list of comments, as well as a form to submit new comments.
   * See CommentableMixin for controller actions that can be used with this component.
   *
   * Sample usage:
   * ```handlebars
   * {{comment-pane
   *   comments=comments
   *   addComment=(action 'addComment')
   *   editComment=(action 'editComment')
   *   deleteComment=(action 'deleteComment')
   *   restoreComment=(action 'restoreComment')
   *   reportComment=(action 'reportComment')}}
   * ```
   * @class comment-pane
   * @param {Comment[]} comments An array of comments to be displayed
   * @param {action} addComment
   * @param {action} editComment
   * @param {action} deleteComment
   * @param {action} restoreComment
   * @param {action} reportComment
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsCommentPaneTemplate['default'],
    comments: null
  });
});
define("ember-osf/components/comment-pane/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/comment-pane/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "comment-detail", [], ["comment", ["subexpr", "@mut", [["get", "comment", ["loc", [null, [4, 12], [4, 19]]], 0, 0, 0, 0]], [], [], 0, 0], "editComment", ["subexpr", "@mut", [["get", "attrs.editComment", ["loc", [null, [5, 16], [5, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "deleteComment", ["subexpr", "@mut", [["get", "attrs.deleteComment", ["loc", [null, [6, 18], [6, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "restoreComment", ["subexpr", "@mut", [["get", "attrs.restoreComment", ["loc", [null, [7, 19], [7, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "reportComment", ["subexpr", "@mut", [["get", "attrs.reportComment", ["loc", [null, [8, 18], [8, 37]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 4], [8, 39]]], 0, 0]],
        locals: ["comment"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/comment-pane/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    (none)\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/comment-pane/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Comments");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "each", [["get", "comments", ["loc", [null, [2, 8], [2, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 0], [11, 9]]]], ["inline", "comment-form", [], ["addComment", ["subexpr", "@mut", [["get", "attrs.addComment", ["loc", [null, [13, 26], [13, 42]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [13, 0], [13, 44]]], 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('ember-osf/components/dropzone-widget/component', ['exports', 'ember', 'ember-get-config', 'ember-osf/components/dropzone-widget/template'], function (exports, _ember, _emberGetConfig, _emberOsfComponentsDropzoneWidgetTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Support file uploads via dropzone.
     * Accepts dropzone event listeners as parameters (e.g. success, error, addedfile)
     *
     * Sample usage:
     * ```handlebars
     * {{dropzone-widget
     *   preUpload=attrs.preUpload
     *   buildUrl=buildUrl
     *   success=attrs.success
     *   defaultMessage=defaultMessage
     *   options=dropzoneOptions}}
     * ```
     *
     * @class dropzone-widget
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsDropzoneWidgetTemplate['default'],
        session: _ember['default'].inject.service(),
        classNames: ['dropzone'],
        didInsertElement: function didInsertElement() {
            var _this = this;

            var preUpload = this.get('preUpload');
            var dropzoneOptions = this.get('options') || {};

            if (!this.get('buildUrl') && !preUpload && !dropzoneOptions.url) {
                console.error('Need to define url somewhere');
            }
            var drop = new Dropzone('#' + this.elementId, { // jshint ignore:line
                url: function url(file) {
                    return typeof _this.get('buildUrl') === 'function' ? _this.get('buildUrl')(file) : _this.get('buildUrl');
                },
                autoProcessQueue: false,
                dictDefaultMessage: this.get('defaultMessage') || 'Drop files here to upload'
            });

            // Set osf session header
            var headers = {};

            var authType = _emberGetConfig['default']['ember-simple-auth'].authorizer;
            this.get('session').authorize(authType, function (headerName, content) {
                headers[headerName] = content;
            });
            dropzoneOptions.headers = headers;
            dropzoneOptions.withCredentials = _emberGetConfig['default'].authorizationType === 'cookie';

            // Attach preUpload to addedfile event
            drop.on('addedfile', function (file) {
                if (preUpload) {
                    preUpload(_this, drop, file).then(function () {
                        return drop.processFile(file);
                    });
                } else {
                    drop.processFile(file);
                }
            });

            // Set dropzone options
            drop.options = _ember['default'].merge(drop.options, dropzoneOptions);

            // Attach dropzone event listeners: http://www.dropzonejs.com/#events
            drop.events.forEach(function (event) {
                if (typeof _this.get(event) === 'function') {
                    drop.on(event, function () {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        return _this.get(event).apply(undefined, [_this, drop].concat(args));
                    });
                }
            });
        }
    });
});
define("ember-osf/components/dropzone-widget/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/dropzone-widget/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/eosf-project-nav/component', ['exports', 'ember', 'ember-data', 'ember-osf/components/eosf-project-nav/template', 'ember-osf/const/permissions'], function (exports, _ember, _emberData, _emberOsfComponentsEosfProjectNavTemplate, _emberOsfConstPermissions) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Project header navigation bar, with links to various sub-pages within a project
     * Sample usage:
     * ```handlebars
     * {{eosf-project-nav
     *   node=node
     *   user=user}}
     * ```
     * @class eosf-project-nav
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsEosfProjectNavTemplate['default'],
        node: null,
        user: null,

        projectLabel: _ember['default'].computed('node.category', function () {
            var category = this.get('node.category');
            return category === 'project' ? 'Project' : 'Component';
        }),

        isProjectContributor: _ember['default'].computed('user', 'node', function () {
            // Is the user a contributor on this node? (returns false if the user is not logged in)
            var node = this.get('node');
            var userID = this.get('user.id');

            return _emberData['default'].PromiseObject.create({
                promise: node.isContributor(userID)
            });
        }),

        /**
         * If this is a withdrawn registration, hide a block of buttons.
         * @property isWithdrawnRegistration
         */
        isWithdrawnRegistration: _ember['default'].computed.and('node.isRegistration', 'node.withdrawn'),

        parentExists: _ember['default'].computed('node', function () {
            // Determine if a parent exists (field not empty), without trying to fetch it.
            // This provides a way to use conditionals without errors that hang the page
            var node = this.get('node');
            return !!node.belongsTo('parent').link();
        }),
        showParentProjectLink: _ember['default'].computed('node.parent', function () {
            // TODO: Rewrite this to rely on embeds, which are more efficient
            // If the parent node is not visible to the contributor, it will be identified in the API response, but not accessible.
            // Only show the parent link if the relationship resolves to a successful response.
            var parent = this.get('node.parent');
            if (parent) {
                // Report whether the parent relationship request failed.
                var response = parent.then(function () {
                    return true;
                })['catch'](function () {
                    return false;
                });
                return _emberData['default'].PromiseObject.create({
                    promise: response
                });
            }
            // If no parent, don't show parent link.
            return false;
        }),
        showAnalyticsTab: _ember['default'].computed.or('node.public', 'isProjectContributor'),
        showRegistrationsTab: _ember['default'].computed('node.isRegistration', 'node.isAnonymous', function () {
            // Do not show registrations tab for view-only links
            return !this.get('node.isRegistration') && !this.get('node.isAnonymous');
        }),
        showForksTab: _ember['default'].computed.not('node.isAnonymous'),
        showContributorsTab: _ember['default'].computed.alias('isProjectContributor'),
        showSettingsTab: _ember['default'].computed('node', function () {
            var node = this.get('node');
            if (node.get('isProject')) {
                return node.get('currentUserPermissions').indexOf(_emberOsfConstPermissions['default'].WRITE) !== -1;
            } else if (node.get('isRegistration')) {
                return node.get('currentUserPermissions').indexOf(_emberOsfConstPermissions['default'].ADMIN) !== -1;
            }
            return false; // No idea what this resource is, so don't show tab
        }),

        showCommentsButton: _ember['default'].computed('node', function () {
            // TODO: Implement. Depends on resolution of https://openscience.atlassian.net/browse/OSF-6701
            // <!--% if user['can_comment'] or node['has_comments']:-->
            return false;
        })
    });
});
define("ember-osf/components/eosf-project-nav/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 28
              },
              "end": {
                "line": 23,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n                                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "data-toggle", "tooltip");
            dom.setAttribute(el2, "data-placement", "bottom");
            dom.setAttribute(el2, "class", "eosf-project-nav-parent");
            var el3 = dom.createTextNode("\n                                        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "fa fa-level-down fa-rotate-180");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element7, 'href');
            morphs[1] = dom.createAttrMorph(element7, 'title');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "node.parent.links.html", ["loc", [null, [19, 47], [19, 69]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "title", ["concat", [["get", "node.parent.title", ["loc", [null, [19, 104], [19, 121]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 28
              },
              "end": {
                "line": 26,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "data-toggle", "tooltip");
            dom.setAttribute(el2, "title", "Parent project is private");
            dom.setAttribute(el2, "data-placement", "bottom");
            dom.setAttribute(el2, "class", "eosf-project-nav-private-parent");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "fa fa-level-down fa-rotate-180 text-muted");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("  ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 24
            },
            "end": {
              "line": 27,
              "column": 24
            }
          },
          "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showParentProjectLink", ["loc", [null, [17, 34], [17, 55]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [17, 28], [26, 35]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 28
              },
              "end": {
                "line": 44,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("Analytics");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [43, 47], [43, 62]]], 0, 0, 0, 0], "analytics/"], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 28
              },
              "end": {
                "line": 47,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("Registrations");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [46, 47], [46, 62]]], 0, 0, 0, 0], "registrations/"], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 28
              },
              "end": {
                "line": 50,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("Forks");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element2, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [49, 47], [49, 62]]], 0, 0, 0, 0], "forks/"], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 28
              },
              "end": {
                "line": 54,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("Contributors");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [53, 47], [53, 62]]], 0, 0, 0, 0], "contributors/"], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 56,
                "column": 28
              },
              "end": {
                "line": 58,
                "column": 28
              }
            },
            "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("Settings");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [57, 47], [57, 62]]], 0, 0, 0, 0], "settings/"], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 24
            },
            "end": {
              "line": 59,
              "column": 24
            }
          },
          "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "id", "projectNavFiles");
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("\n                                    Files\n                                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("Wiki");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1, 1]);
          var element6 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element5, 'href');
          morphs[1] = dom.createAttrMorph(element6, 'href');
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [35, 43], [35, 58]]], 0, 0, 0, 0], "files/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [40, 43], [40, 58]]], 0, 0, 0, 0], "wiki/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "showAnalyticsTab", ["loc", [null, [42, 34], [42, 50]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [42, 28], [44, 35]]]], ["block", "if", [["get", "showRegistrationsTab", ["loc", [null, [45, 34], [45, 54]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [45, 28], [47, 35]]]], ["block", "if", [["get", "showForksTab", ["loc", [null, [48, 34], [48, 46]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [48, 28], [50, 35]]]], ["block", "if", [["get", "showContributorsTab", ["loc", [null, [52, 34], [52, 53]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [52, 28], [54, 35]]]], ["block", "if", [["get", "showSettingsTab", ["loc", [null, [56, 34], [56, 49]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [56, 28], [58, 35]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 24
            },
            "end": {
              "line": 70,
              "column": 24
            }
          },
          "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "id", "commentsLink");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "href", "");
          dom.setAttribute(el2, "class", "visible-xs cp-handle");
          dom.setAttribute(el2, "data-bind", "click:removeCount");
          dom.setAttribute(el2, "data-toggle", "collapse");
          dom.setAttribute(el2, "data-target", "#projectSubnav .navbar-collapse");
          var el3 = dom.createTextNode("\n                                    Comments\n                                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "data-bind", "if: unreadComments() !== 0");
          var el4 = dom.createTextNode("\n                                        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "data-bind", "text: displayCount");
          dom.setAttribute(el4, "class", "badge");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/eosf-project-nav/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "projectBanner");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "subhead");
        dom.setAttribute(el2, "id", "overview");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("nav");
        dom.setAttribute(el3, "id", "projectSubnav");
        dom.setAttribute(el3, "class", "navbar osf-project-navbar");
        dom.setAttribute(el3, "role", "navigation");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "container");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "navbar-header");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "button");
        dom.setAttribute(el6, "class", "navbar-toggle collapsed");
        dom.setAttribute(el6, "data-toggle", "collapse");
        dom.setAttribute(el6, "data-target", ".project-nav");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "sr-only");
        var el8 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "fa fa-bars fa-lg");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "class", "navbar-brand visible-xs");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" Navigation\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "collapse navbar-collapse project-nav");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("ul");
        dom.setAttribute(el6, "class", "nav navbar-nav");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        dom.setAttribute(el8, "class", "project-title");
        var el9 = dom.createTextNode("\n                                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                            ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [0, 1, 1, 1]);
        var element9 = dom.childAt(element8, [1, 3]);
        var element10 = dom.childAt(element8, [3, 1]);
        var element11 = dom.childAt(element10, [3, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element9, 'href');
        morphs[1] = dom.createMorphAt(element9, 1, 1);
        morphs[2] = dom.createMorphAt(element10, 1, 1);
        morphs[3] = dom.createAttrMorph(element11, 'href');
        morphs[4] = dom.createMorphAt(element11, 1, 1);
        morphs[5] = dom.createMorphAt(element10, 5, 5);
        morphs[6] = dom.createMorphAt(element10, 6, 6);
        return morphs;
      },
      statements: [["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [10, 63], [10, 78]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "projectLabel", ["loc", [null, [11, 24], [11, 40]]], 0, 0, 0, 0], ["block", "if", [["get", "parentExists", ["loc", [null, [16, 30], [16, 42]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [16, 24], [27, 31]]]], ["attribute", "href", ["concat", [["get", "node.links.html", ["loc", [null, [29, 39], [29, 54]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "node.title", ["loc", [null, [30, 32], [30, 46]]], 0, 0, 0, 0], ["block", "unless", [["get", "isWithdrawnRegistration", ["loc", [null, [33, 34], [33, 57]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [33, 24], [59, 35]]]], ["block", "if", [["get", "showCommentsButton", ["loc", [null, [60, 30], [60, 48]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [60, 24], [70, 31]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('ember-osf/components/file-browser-icon/component', ['exports', 'ember', 'ember-osf/components/file-browser-icon/template'], function (exports, _ember, _emberOsfComponentsFileBrowserIconTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Display the correct file tree icon for on the item to be displayed
     *
     * Sample usage:
     * ```handlebars
     * {{file-browser-icon
     * item=item}}
     * ```
     * @class file-browser-icon
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsFileBrowserIconTemplate['default'],
        tagName: 'span',

        iconName: _ember['default'].computed('item', 'item.expanded', function () {
            // TODO: More icons!
            if (this.get('item.isNode')) {
                // TODO node types
                return 'cube';
            }
            if (this.get('item.isProvider')) {
                // TODO provider-specific icons
                return 'hdd-o';
            }
            if (this.get('item.isFolder')) {
                return 'folder';
            }
            // TODO file types
            return 'file-o';
        })
    });
});
define("ember-osf/components/file-browser-icon/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-browser-icon/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "fa-icon", [["get", "iconName", ["loc", [null, [1, 10], [1, 18]]], 0, 0, 0, 0]], ["fixedWidth", true], ["loc", [null, [1, 0], [1, 36]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/file-browser-item/component', ['exports', 'ember', 'ember-osf/components/file-browser-item/template'], function (exports, _ember, _emberOsfComponentsFileBrowserItemTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsFileBrowserItemTemplate['default'],
        classNames: ['file-browser-item'],

        selected: _ember['default'].computed('selectedItems.[]', function () {
            // TODO: This would be better if selectedItems were a hash. Can Ember
            // observe when properties are added to or removed from an object?
            var selectedItems = this.get('selectedItems');
            var index = selectedItems.indexOf(this.get('item'));
            return index > -1;
        }),

        click: function click() {
            this.sendAction('selectItem', this.get('item'));
        },

        doubleClick: function doubleClick() {
            var item = this.get('item');
            if (item.get('canHaveChildren')) {
                this.sendAction('navigateToItem', item);
            } else {
                this.sendAction('openItem', item);
            }
        },

        actions: {
            open: function open() {
                this.sendAction('openItem', this.get('item'));
            }
        }
    });
});
define("ember-osf/components/file-browser-item/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-browser-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(element0, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "file-browser-icon", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [2, 25], [2, 29]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 0], [2, 31]]], 0, 0], ["element", "action", ["open"], [], ["loc", [null, [3, 3], [3, 20]]], 0, 0], ["content", "item.itemName", ["loc", [null, [3, 21], [3, 38]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/file-browser/component', ['exports', 'ember', 'ember-osf/components/file-browser/template', 'ember-osf/utils/load-relationship'], function (exports, _ember, _emberOsfComponentsFileBrowserTemplate, _emberOsfUtilsLoadRelationship) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /*
     * Wrapper for file items. Includes state for the item's row.
     *
     */
    var FileItem = _ember['default'].ObjectProxy.extend({
        isSelected: false,

        // TODO (Abram) update childItems when `children` or `files` changes
        // TODO (Abram) catch and display errors
        childItems: _ember['default'].computed('_files.[]', '_children.[]', function () {
            var files = this._setupLoadAll('files', '_files', '_filesLoaded');
            var children = this._setupLoadAll('children', '_children', '_childrenLoaded');

            var wrappedItems = _ember['default'].A();
            if (files) {
                wrappedItems.addObjects(files.map(wrapItem));
            }
            if (children) {
                wrappedItems.addObjects(children.map(wrapItem));
            }
            return wrappedItems;
        }),
        _files: null,
        _children: null,

        childItemsLoaded: _ember['default'].computed.and('_filesLoaded', '_childrenLoaded'),
        _filesLoaded: false,
        _childrenLoaded: false,

        _setupLoadAll: function _setupLoadAll(relationship, destName, loaded) {
            var _this = this;

            var dest = this.get(destName);
            if (dest === null) {
                var model = this.get('content');
                if (relationship in model) {
                    dest = this.set(destName, _ember['default'].A());
                    (0, _emberOsfUtilsLoadRelationship['default'])(model, relationship, dest).then(function () {
                        _this.set(loaded, true);
                    });
                } else {
                    this.set(loaded, true);
                }
            }
            return dest;
        }
    });

    function wrapItem(item) {
        if (item instanceof FileItem) {
            return item;
        }
        return FileItem.create({
            content: item
        });
    }

    function unwrapItem(item) {
        if (item instanceof FileItem) {
            return item.get('content');
        }
        return item;
    }

    /**
     * File browser widget
     *
     * Sample usage:
     * ```handlebars
     * {{file-browser
     *  rootItem=item
     *  openFile=(action 'openFile')
     *  openNode=(action 'openNode')}}
     * ```
     * @class file-browser
     */
    exports['default'] = _ember['default'].Component.extend({
        // TODO: Improve documentation in the future
        layout: _emberOsfComponentsFileBrowserTemplate['default'],
        classNames: ['file-browser'],
        itemHeight: 30,

        breadcrumbs: null,

        rootItem: _ember['default'].computed('breadcrumbs.[]', {
            get: function get() {
                return this.get('breadcrumbs.firstObject');
            },
            set: function set(_, item) {
                var wrappedItem = wrapItem(item);
                this.set('breadcrumbs', _ember['default'].A([wrappedItem]));
            }
        }),
        atRoot: _ember['default'].computed.equal('breadcrumbs.length', 1),
        currentParent: _ember['default'].computed.readOnly('breadcrumbs.lastObject'),
        items: _ember['default'].computed.readOnly('currentParent.childItems'),
        itemsLoaded: _ember['default'].computed.readOnly('currentParent.childItemsLoaded'),
        selectedItems: _ember['default'].computed.filterBy('items', 'isSelected', true),

        loadedChanged: _ember['default'].observer('itemsLoaded', function () {
            var containerWidth = this.$().width();
            this.set('itemWidth', containerWidth);
        }),

        actions: {
            selectItem: function selectItem(item) {
                item.set('isSelected', true);
                if (item.get('isFile') && this.get('selectFile')) {
                    this.sendAction('selectFile', unwrapItem(item));
                }
                if (item.get('isNode') && this.get('selectNode')) {
                    this.sendAction('selectNode', unwrapItem(item));
                }
            },

            openItem: function openItem(item) {
                if (item.get('isFile') && this.get('openFile')) {
                    this.sendAction('openFile', unwrapItem(item));
                }
                if (item.get('isNode') && this.get('openNode')) {
                    this.sendAction('openNode', unwrapItem(item));
                }
                if (item.get('canHaveChildren')) {
                    this.send('navigateToItem', item);
                }
            },

            navigateToItem: function navigateToItem(item) {
                var breadcrumbs = this.get('breadcrumbs');
                var index = breadcrumbs.indexOf(item);
                if (index === -1) {
                    // TODO: Valid to assume item is a child of currentParent?
                    breadcrumbs.pushObject(item);
                } else {
                    var slicedBread = breadcrumbs.slice(0, index + 1);
                    this.set('breadcrumbs', _ember['default'].A(slicedBread));
                }
            },

            navigateUp: function navigateUp() {
                var breadcrumbs = this.get('breadcrumbs');
                if (breadcrumbs.length === 1) {
                    return;
                }
                breadcrumbs.popObject();
            }
        }
    });
});
define("ember-osf/components/file-browser/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/file-browser/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["navigateToItem", ["get", "item", ["loc", [null, [4, 41], [4, 45]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 15], [4, 47]]], 0, 0], ["inline", "file-browser-icon", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [5, 41], [5, 45]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [5, 16], [5, 47]]], 0, 0], ["content", "item.itemName", ["loc", [null, [6, 16], [6, 33]]], 0, 0, 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/file-browser/template.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/file-browser/template.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "file-browser-item", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [20, 33], [20, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "navigateToItem", ["subexpr", "action", ["navigateToItem"], [], ["loc", [null, [21, 23], [21, 48]]], 0, 0], "selectItem", ["subexpr", "action", ["selectItem"], [], ["loc", [null, [22, 19], [22, 40]]], 0, 0], "openItem", ["subexpr", "action", ["openItem"], [], ["loc", [null, [23, 17], [23, 36]]], 0, 0]], ["loc", [null, [20, 8], [24, 10]]], 0, 0]],
        locals: ["item", "index"],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/file-browser/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "fa-icon", ["spinner"], ["size", 3, "pulse", true], ["loc", [null, [27, 8], [27, 47]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-browser/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ol");
        dom.setAttribute(el1, "class", "breadcrumb");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "file-browser-list");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        morphs[3] = dom.createMorphAt(element1, 2, 2);
        return morphs;
      },
      statements: [["block", "each", [["get", "breadcrumbs", ["loc", [null, [2, 12], [2, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [9, 13]]]], ["block", "if", [["get", "selectedItems", ["loc", [null, [12, 6], [12, 19]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [12, 0], [14, 7]]]], ["block", "ember-collection", [], ["items", ["subexpr", "@mut", [["get", "items", ["loc", [null, [17, 30], [17, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "cell-layout", ["subexpr", "fixed-grid-layout", [["get", "itemWidth", ["loc", [null, [18, 39], [18, 48]]], 0, 0, 0, 0], ["get", "itemHeight", ["loc", [null, [18, 49], [18, 59]]], 0, 0, 0, 0]], [], ["loc", [null, [18, 20], [18, 60]]], 0, 0]], 2, null, ["loc", [null, [17, 4], [25, 25]]]], ["block", "unless", [["get", "itemsLoaded", ["loc", [null, [26, 14], [26, 25]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [26, 4], [28, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define('ember-osf/components/file-chooser/component', ['exports', 'ember', 'ember-osf/components/file-chooser/template'], function (exports, _ember, _emberOsfComponentsFileChooserTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * This component lets the user choose a list of files from their computer, by
     * drag-and-drop, a file browser, or whatever method the developer wants.
     *
     * Exposed to parent context (bindable attributes)
     *  - `files`: mutable list of chosen File objects
     *  - `multiple`: boolean (default `true`), when `false`, only keeps the most
     *          recently chosen File in the list
     *  - `onChoose`: callback function called each time a file is added, with the
     *          new File object as the only argument
     *
     * Exposed to block context
     *  - `this`: the component object itself, so the block can invoke actions
     *      example:
     *      ```handlebars
     *          {{#file-chooser files=fileList as |component|}}
     *              {{input type='file'
     *                  change=(action 'onFileInputChange' target=component)}}
     *          {{/file-chooser}}
     *      ```
     *
     * Actions
     *  - `onFileInputChange`: handle the `change` event on a file input
     *  - `onChooseFile`: add a file to the chosen list
     *
     * Styling
     *  - This component's element has the `drop-zone` class
     *  - While the user is holding dragged files over this component, it
     *    has the `drop-zone-ready` class
     *
     * @class file-chooser component
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsFileChooserTemplate['default'],
        classNames: ['drop-zone'],
        classNameBindings: ['dropZoneReady'],
        dropZoneReady: false,
        multiple: true,

        dragOver: function dragOver(event) {
            if (event.dataTransfer.types.indexOf('Files') > -1) {
                this.set('dropZoneReady', true);
                event.dataTransfer.dropEffect = 'move';
                return false;
            } else {
                event.dataTransfer.dropEffect = 'none';
            }
        },

        dragLeave: function dragLeave(event) {
            this.set('dropZoneReady', false);
            event.dataTransfer.dropEffect = '';
        },

        drop: function drop(event) {
            event.preventDefault();
            this.set('dropZoneReady', false);
            for (var i = 0; i < event.dataTransfer.files.length; i++) {
                var file = event.dataTransfer.files[i];
                this._chooseIfFile(file);
            }
        },

        actions: {
            onFileInputChange: function onFileInputChange(event) {
                for (var i = 0; i < event.target.files.length; i++) {
                    var file = event.target.files[i];
                    this.send('onChooseFile', file);
                }
            },

            onChooseFile: function onChooseFile(file) {
                var files = this.get('files');
                if (typeof files === 'undefined') {
                    this.set('files', _ember['default'].A());
                    files = this.get('files');
                }
                if (this.get('multiple')) {
                    files.pushObject(file);
                } else {
                    this.set('files', _ember['default'].A([file]));
                }

                var callback = this.get('onChoose');
                if (callback) {
                    callback(file);
                }
            }
        },

        _chooseIfFile: function _chooseIfFile(file) {
            var _this = this;

            // HACK: There's not a cross-browser way to see the contents of
            // dragged-and-dropped directories, but there's also not a good way to
            // tell whether a given File object is a directory. Hence, this:
            var p = new _ember['default'].RSVP.Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.onload = function () {
                    return resolve();
                }; // it's a file
                reader.onerror = function () {
                    return reject();
                }; // it's a directory or something
                reader.readAsText(file.slice(0, 5));
            });
            p.then(function () {
                return _this.send('onChooseFile', file);
            });
            p['catch'](function () {
                return _this.set('errorMessage', 'Cannot upload directories (' + file.name + ')');
            });
        }
    });
});
define("ember-osf/components/file-chooser/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/file-chooser/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [2, 12], [2, 16]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 4], [2, 18]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "modules/ember-osf/components/file-chooser/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("Error: ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "errorMessage", ["loc", [null, [12, 20], [12, 36]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 12
                },
                "end": {
                  "line": 19,
                  "column": 12
                }
              },
              "moduleName": "modules/ember-osf/components/file-chooser/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "file.name", ["loc", [null, [18, 20], [18, 33]]], 0, 0, 0, 0]],
            locals: ["file"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "modules/ember-osf/components/file-chooser/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createTextNode("Chosen files");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "files", ["loc", [null, [17, 20], [17, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [17, 12], [19, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/file-chooser/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n        You can also drag and drop a file from your computer.\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "file", "multiple", ["subexpr", "@mut", [["get", "multiple", ["loc", [null, [5, 37], [5, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "change", ["subexpr", "action", ["onFileInputChange"], [], ["loc", [null, [6, 19], [6, 47]]], 0, 0]], ["loc", [null, [5, 8], [6, 49]]], 0, 0], ["block", "if", [["get", "errorMessage", ["loc", [null, [11, 10], [11, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [11, 4], [13, 11]]]], ["block", "if", [["get", "files", ["loc", [null, [14, 10], [14, 15]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [14, 4], [21, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-chooser/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [22, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('ember-osf/components/file-renderer/component', ['exports', 'ember', 'ember-osf/components/file-renderer/template', 'ember-get-config'], function (exports, _ember, _emberOsfComponentsFileRendererTemplate, _emberGetConfig) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * Render the provided url in an iframe via MFR
   *
   * Sample usage:
   * ```handlebars
   * {{file-renderer
   *   download=model.links.download
   *     width="800" height="1000" allowfullscreen=true}}
   * ```
   * @class file-renderer
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsFileRendererTemplate['default'],
    download: null,
    width: '100%',
    height: '100%',
    allowfullscreen: true,
    mfrUrl: _ember['default'].computed('download', function () {
      var base = _emberGetConfig['default'].OSF.renderUrl;
      var download = this.get('download');
      var renderUrl = base + '?url=' + encodeURIComponent(download + '?direct&mode=render&initialWidth=766');
      return renderUrl;
    })
  });
});
define("ember-osf/components/file-renderer/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/file-renderer/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("iframe");
          dom.setAttribute(el1, "scrolling", "yes");
          dom.setAttribute(el1, "marginheight", "0");
          dom.setAttribute(el1, "frameborder", "0");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          morphs[1] = dom.createAttrMorph(element0, 'width');
          morphs[2] = dom.createAttrMorph(element0, 'height');
          morphs[3] = dom.createAttrMorph(element0, 'allowfullscreen');
          return morphs;
        },
        statements: [["attribute", "src", ["get", "mfrUrl", ["loc", [null, [2, 18], [2, 24]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "width", ["get", "width", ["loc", [null, [2, 35], [2, 40]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "height", ["get", "height", ["loc", [null, [2, 52], [2, 58]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "allowfullscreen", ["get", "allowfullscreen", ["loc", [null, [2, 128], [2, 143]]], 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-renderer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "download", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [4, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('ember-osf/components/file-version/component', ['exports', 'ember', 'ember-osf/components/file-version/template'], function (exports, _ember, _emberOsfComponentsFileVersionTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Display information about one revision of a file
     *
     * Sample usage:
     * ```handlebars
     * {{file-version
     * version=version
     * download='download'}}
     * ```
     * @class file-version
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsFileVersionTemplate['default'],
        classNames: ['file-version'],
        tagName: 'tr',

        actions: {
            downloadVersion: function downloadVersion(version) {
                this.sendAction('download', version);
            }
        }
    });
});
define("ember-osf/components/file-version/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-version/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createElement("button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createElementMorph(element0);
        morphs[3] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["content", "version.id", ["loc", [null, [1, 4], [1, 18]]], 0, 0, 0, 0], ["content", "version.size", ["loc", [null, [2, 4], [2, 20]]], 0, 0, 0, 0], ["element", "action", ["downloadVersion", ["get", "version.id", ["loc", [null, [3, 39], [3, 49]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 12], [3, 51]]], 0, 0], ["inline", "fa-icon", ["download"], [], ["loc", [null, [3, 52], [3, 74]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/file-widget/component', ['exports', 'ember', 'ember-osf/components/file-widget/template', 'ember-osf/utils/auth', 'ember-osf/utils/load-relationship'], function (exports, _ember, _emberOsfComponentsFileWidgetTemplate, _emberOsfUtilsAuth, _emberOsfUtilsLoadRelationship) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Widget to quickly upload a file to a selected project
     * ```handlebars
     * {{file-widget
     *   preUpload=(action 'preUpload')
     *   buildUrl=(action 'buildUrl')
     *   listeners=dropzoneOptions
     *   options=dropzoneOptions}}
     * ```
     * @class file-widget
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsFileWidgetTemplate['default'],
        authUrl: (0, _emberOsfUtilsAuth.getAuthUrl)(),
        session: _ember['default'].inject.service(),
        currentUser: _ember['default'].inject.service(),
        fileManager: _ember['default'].inject.service(),
        user: null,
        query: null,
        userNodes: _ember['default'].A(),
        selectedNode: null,
        _url: null,
        init: function init() {
            this._super.apply(this, arguments);
            if (this.get('session.isAuthenticated')) {
                this._setCurrentUser();
            }
        },
        _setCurrentUser: function _setCurrentUser() {
            var _this = this;

            this.get('currentUser').load().then(function (user) {
                return _this.set('user', user);
            });
        },
        onGetCurrentUser: _ember['default'].observer('user', function () {
            var user = this.get('user');
            if (user) {
                (0, _emberOsfUtilsLoadRelationship['default'])(user, 'nodes', this.get('userNodes'));
            } else {
                this.set('userNodes', _ember['default'].A());
            }
        }),
        actions: {
            loginSuccess: function loginSuccess() {
                this._setCurrentUser();
            },
            loginFail: function loginFail() {
                // TODO
            },
            deselectNode: function deselectNode() {
                this.set('selectedNode', null);
            },
            selectNodeFile: function selectNodeFile(file) {
                this.send('selectFile', file.get('links.download'));
            },
            selectNode: function selectNode(node) {
                console.log(node);
            },
            selectFile: function selectFile(url) {
                console.log(url);
            },
            preUpload: function preUpload() {
                return new _ember['default'].RSVP.Promise(function (resolve) {
                    return resolve();
                });
            }
        }
    });
});
define("ember-osf/components/file-widget/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 20
                },
                "end": {
                  "line": 15,
                  "column": 20
                }
              },
              "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-default login-button");
              var el2 = dom.createTextNode("\n                            Login to OSF\n                        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element3, 'onclick');
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["login"], ["target", ["get", "popup", ["loc", [null, [12, 101], [12, 106]]], 0, 0, 0, 0]], ["loc", [null, [null, null], [12, 108]]], 0, 0], 0, 0, 0, 0]],
            locals: ["popup"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 16
              },
              "end": {
                "line": 16,
                "column": 16
              }
            },
            "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "oauth-popup", [], ["authUrl", ["subexpr", "@mut", [["get", "authUrl", ["loc", [null, [11, 43], [11, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "loginSuccess", ["subexpr", "action", ["loginSuccess"], [], ["loc", [null, [11, 64], [11, 87]]], 0, 0], "loginFail", ["subexpr", "action", ["loginFail"], [], ["loc", [null, [11, 98], [11, 118]]], 0, 0]], 0, null, ["loc", [null, [11, 20], [15, 36]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 20
                },
                "end": {
                  "line": 20,
                  "column": 20
                }
              },
              "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "class", "icon-flag");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("strong");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'src');
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "src", ["concat", [["get", "country.flagUrl", ["loc", [null, [19, 36], [19, 51]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "node.title", ["loc", [null, [19, 82], [19, 96]]], 0, 0, 0, 0]],
            locals: ["node"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 16
              },
              "end": {
                "line": 21,
                "column": 16
              }
            },
            "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("Choose an OSF project:");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "power-select", [], ["options", ["subexpr", "@mut", [["get", "userNodes", ["loc", [null, [18, 44], [18, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "closeOnSelect", false, "searchField", "title", "selected", ["subexpr", "@mut", [["get", "selectedNode", ["loc", [null, [18, 103], [18, 115]]], 0, 0, 0, 0]], [], [], 0, 0], "onchange", ["subexpr", "action", [["subexpr", "mut", [["get", "selectedNode", ["loc", [null, [18, 138], [18, 150]]], 0, 0, 0, 0]], [], ["loc", [null, [18, 133], [18, 151]]], 0, 0]], [], ["loc", [null, [18, 125], [18, 152]]], 0, 0]], 0, null, ["loc", [null, [18, 20], [20, 37]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 23,
              "column": 8
            }
          },
          "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-sm-6");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "dropzone-box");
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-sm-6");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "dropzone-widget", [], ["preUpload", ["subexpr", "@mut", [["get", "attrs.preUpload", ["loc", [null, [6, 48], [6, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "buildUrl", ["subexpr", "@mut", [["get", "buildUrl", ["loc", [null, [6, 73], [6, 81]]], 0, 0, 0, 0]], [], [], 0, 0], "listeners", ["subexpr", "@mut", [["get", "dropzoneListeners", ["loc", [null, [6, 92], [6, 109]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "dropzoneOptions", ["loc", [null, [6, 118], [6, 133]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 20], [6, 135]]], 0, 0], ["block", "if", [["subexpr", "not", [["get", "session.isAuthenticated", ["loc", [null, [10, 27], [10, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 22], [10, 51]]], 0, 0]], [], 0, 1, ["loc", [null, [10, 16], [21, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 8
            }
          },
          "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-default");
          var el3 = dom.createTextNode("Back");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "selectedNode.title", ["loc", [null, [24, 16], [24, 38]]], 0, 0, 0, 0], ["element", "action", ["deselectNode"], [], ["loc", [null, [24, 71], [24, 96]]], 0, 0], ["inline", "file-browser", [], ["rootNode", ["subexpr", "@mut", [["get", "selectedNode", ["loc", [null, [25, 36], [25, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "onClickFile", ["subexpr", "action", ["selectNodeFile"], [], ["loc", [null, [26, 24], [26, 49]]], 0, 0]], ["loc", [null, [25, 12], [27, 14]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/file-widget/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "eosf-file-widget-box");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "not", [["get", "selectedNode", ["loc", [null, [3, 19], [3, 31]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 14], [3, 32]]], 0, 0]], [], 0, 1, ["loc", [null, [3, 8], [28, 15]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('ember-osf/components/oauth-popup/component', ['exports', 'ember', 'ember-osf/components/oauth-popup/template', 'ember-osf/utils/auth'], function (exports, _ember, _emberOsfComponentsOauthPopupTemplate, _emberOsfUtilsAuth) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Log a user in via OAuth2 in a popup window, without requiring a redirect
     *
     * Sample usage:
     * ```handlebars
     * {{#oauth-popup
     *   authUrl=authUrl
     *   loginSuccess=(action 'loginSuccess')
     *   loginFail=(action 'loginFail') as |popup|}}
     *    <button class="btn btn-default login-button" onclick={{action 'login' target=popup}} >
     *       Login to OSF
     *    </button>
     * {{/oauth-popup}}
     * ```
     * @class oauth-popup
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsOauthPopupTemplate['default'],
        tagName: '',
        session: _ember['default'].inject.service(),
        popupHeight: 550,
        popupWidth: 500,
        authUrl: null,
        popup: null,
        redirectRoute: null,
        _openPopup: function _openPopup() {
            var _this = this;

            var _getProperties = this.getProperties('popupWidth', 'popupHeight', 'popup');

            var popupHeight = _getProperties.popupHeight;
            var popupWidth = _getProperties.popupWidth;
            var popup = _getProperties.popup;

            if (popup) {
                popup.close();
            }
            var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
            var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

            var left = width / 2 - popupWidth / 2;
            var top = height / 2;
            this.set('popup', window.open(this.get('authUrl'), 'Authentication', 'resizeable=true, width=' + popupWidth + ', height=' + popupHeight + ', top=' + top + ', left=' + left));
            // Puts focus on the new window
            if (window.focus) {
                this.popup.focus();
            }

            // wait for the popup window to be closed, by the user or completion of authorization redirect.
            return new _ember['default'].RSVP.Promise(function (resolve /* , reject */) {
                var timer = window.setInterval(function () {
                    popup = _this.get('popup');
                    if (!popup || popup.location.origin === window.location.origin) {
                        var accessToken = (0, _emberOsfUtilsAuth.getTokenFromHash)(popup.location.hash);
                        popup.close();
                        window.clearInterval(timer);
                        resolve(accessToken);
                    }
                }, 100);
            });
        },
        actions: {
            login: function login() {
                var _this2 = this;

                this._openPopup().then(function (accessToken) {
                    return _this2.get('session').authenticate('authenticator:osf-token', accessToken).then(function () {
                        return _this2.sendAction('loginSuccess');
                    }, function (err) {
                        return _this2.sendAction('loginFail', err);
                    });
                });
            }
        }
    });
});
define("ember-osf/components/oauth-popup/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/oauth-popup/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [2, 12], [2, 16]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 4], [2, 18]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/oauth-popup/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-warning");
          var el2 = dom.createTextNode(" Login ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["login"], [], ["loc", [null, [4, 12], [4, 30]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/oauth-popup/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('ember-osf/components/osf-copyright/component', ['exports', 'ember', 'ember-osf/components/osf-copyright/template'], function (exports, _ember, _emberOsfComponentsOsfCopyrightTemplate) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * Display copyright information as a footer
   * @class osf-copyright
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsOsfCopyrightTemplate['default']
  });
});
define("ember-osf/components/osf-copyright/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/osf-copyright/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container copyright");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-12");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n                Copyright © 2011-2016\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "http://centerforopenscience.org");
        var el6 = dom.createTextNode("Center for Open Science");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" |\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://github.com/CenterForOpenScience/centerforopenscience.org/blob/master/TERMS_OF_USE.md");
        var el6 = dom.createTextNode("Terms of Use");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" |\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://github.com/CenterForOpenScience/centerforopenscience.org/blob/master/PRIVACY_POLICY.md");
        var el6 = dom.createTextNode("Privacy Policy");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/osf-footer/component', ['exports', 'ember', 'ember-osf/components/osf-footer/template'], function (exports, _ember, _emberOsfComponentsOsfFooterTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Display the OSF footer
     * @class osf-footer
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsOsfFooterTemplate['default'],
        supportEmail: _ember['default'].computed(function () {
            return '<n uers=\"znvygb:pbagnpg@bfs.vb\" ery=\"absbyybj\">Pbagnpg</n>'.replace(/[a-zA-Z]/g, function (e) {
                return String.fromCharCode((e <= 'Z' ? 90 : 122) >= (e = e.charCodeAt(0) + 13) ? e : e - 26);
            });
        })
    });
});
define("ember-osf/components/osf-footer/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/osf-footer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment(" template-lint triple-curlies=false ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("footer");
        dom.setAttribute(el1, "class", "footer m-t-lg m-b-lg p-lg bg-color-light");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-2 col-md-3 col-md-offset-1");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        var el6 = dom.createTextNode("OSF");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "explore/activity/");
        var el8 = dom.createTextNode("Explore");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "support");
        var el8 = dom.createTextNode("FAQ/Guides");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "https://api.osf.io/v2/docs/");
        var el8 = dom.createTextNode("API");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "https://github.com/CenterForOpenScience/osf.io");
        var el8 = dom.createTextNode("Source Code");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-5 col-md-4");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        var el6 = dom.createTextNode("Center for Open Science");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "http://cos.io");
        var el8 = dom.createTextNode("Home");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "ezcuj/wiki/home/");
        var el8 = dom.createTextNode("Reproducibility Project: Psychology");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "e81xl/wiki/home/");
        var el8 = dom.createTextNode("Reproducibility Project: Cancer Biology");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "http://cos.io/top/");
        var el8 = dom.createTextNode("TOP Guidelines");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "https://www.givinglibrary.org/organizations/center-for-open-science");
        var el8 = dom.createTextNode("Donate");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-4 col-md-3");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        var el6 = dom.createTextNode("Socialize");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "http://twitter.com/OSFramework");
        dom.setAttribute(el5, "aria-label", "Twitter");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-twitter fa-2x");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://www.facebook.com/OpenScienceFramework");
        dom.setAttribute(el5, "aria-label", "Facebook");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-facebook fa-2x");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://groups.google.com/forum/#!forum/openscienceframework");
        dom.setAttribute(el5, "aria-label", "Google Group");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-group fa-2x");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://www.github.com/centerforopenscience");
        dom.setAttribute(el5, "aria-label", "GitHub");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-github fa-2x");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://plus.google.com/103557785986281627994");
        dom.setAttribute(el5, "aria-label", "Google Plus");
        dom.setAttribute(el5, "rel", "publisher");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "fa fa-google-plus fa-2x");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [2, 1, 1, 1, 3, 3]), 1, 1);
        return morphs;
      },
      statements: [["content", "supportEmail", ["loc", [null, [10, 24], [10, 42]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/osf-mode-footer/component', ['exports', 'ember', 'ember-osf/components/osf-mode-footer/template', 'ember-get-config'], function (exports, _ember, _emberOsfComponentsOsfModeFooterTemplate, _emberGetConfig) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * If development mode, display a red banner in the footer
   * @class osf-mode-footer
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsOsfModeFooterTemplate['default'],
    isDevMode: _emberGetConfig['default'].OSF.backend !== 'prod'
  });
});
define("ember-osf/components/osf-mode-footer/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "modules/ember-osf/components/osf-mode-footer/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "devmode");
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("WARNING");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(": This site is running in development mode.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/osf-mode-footer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isDevMode", ["loc", [null, [1, 6], [1, 15]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('ember-osf/components/osf-navbar/component', ['exports', 'ember', 'ember-osf/components/osf-navbar/template', 'ember-get-config'], function (exports, _ember, _emberOsfComponentsOsfNavbarTemplate, _emberGetConfig) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Display the OSF navbar
     *
     * Sample usage:
     * ```handlebars
     * {{osf-navbar
     *   loginAction=loginAction
     *   hideSearch=true}}
     * ```
     *
     * @class osf-navbar
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsOsfNavbarTemplate['default'],
        session: _ember['default'].inject.service(),
        currentUser: _ember['default'].inject.service(),
        onSearchPage: false,
        /**
         * Whether search icons and functionality show up
         * @property hideSearch
         * @type {Boolean}
         */
        hideSearch: false,

        /**
         * The URL to use for signup. May be overridden, eg for special campaign pages
         *
         * @property signupUrl
         * @type {String}
         */
        signupUrl: _emberGetConfig['default'].OSF.url + 'register',

        gravatarUrl: _ember['default'].computed('user', function () {
            var imgLink = this.get('user.links.profile_image');
            if (imgLink) {
                imgLink += '&s=25';
            }
            return imgLink;
        }),
        fullName: null,
        host: _emberGetConfig['default'].OSF.url,
        user: null,
        showSearch: false,
        _loadCurrentUser: function _loadCurrentUser() {
            var _this = this;

            this.get('currentUser').load().then(function (user) {
                return _this.set('user', user);
            });
        },
        init: function init() {
            this._super.apply(this, arguments);
            // TODO: React to changes in service/ event?
            if (this.get('session.isAuthenticated')) {
                this._loadCurrentUser();
            }
        },
        // TODO: These parameters are defined in osf settings.py; make sure ember config matches.
        allowLogin: true,
        enableInstitutions: true,
        actions: {
            toggleSearch: function toggleSearch() {
                this.toggleProperty('showSearch');
            },
            logout: function logout() {
                // TODO: May not work well if logging out from page that requires login- check?
                this.get('session').invalidate();
            }
        }
    });
});
define("ember-osf/components/osf-navbar/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 20
              },
              "end": {
                "line": 19,
                "column": 20
              }
            },
            "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "visible-xs");
            dom.setAttribute(el1, "data-bind", "click : toggleSearch, css: searchCSS");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "class", "osf-xs-search pull-right");
            dom.setAttribute(el2, "style", "padding-top: 12px");
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "rel", "tooltip");
            dom.setAttribute(el3, "data-placement", "bottom");
            dom.setAttribute(el3, "title", "Search OSF");
            dom.setAttribute(el3, "class", "fa fa-search fa-lg fa-inverse");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element15 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element15);
            return morphs;
          },
          statements: [["element", "action", ["toggleSearch"], [], ["loc", [null, [15, 64], [15, 89]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 16
            },
            "end": {
              "line": 20,
              "column": 16
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "onSearchPage", ["loc", [null, [12, 31], [12, 43]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 20], [19, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 16
            },
            "end": {
              "line": 25,
              "column": 16
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "navbar-brand navbar-service");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element14 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element14, 'href');
          morphs[1] = dom.createMorphAt(element14, 1, 1);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "serviceUrl", ["loc", [null, [24, 67], [24, 77]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "service", ["loc", [null, [24, 82], [24, 93]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 20
            },
            "end": {
              "line": 32,
              "column": 20
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "id", "osfNavDashboard");
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("Dashboard");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "id", "osfNavMyProjects");
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("My Projects");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1, 0]);
          var element13 = dom.childAt(fragment, [3, 0]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element12, 'href');
          morphs[1] = dom.createAttrMorph(element13, 'href');
          return morphs;
        },
        statements: [["attribute", "href", ["get", "host", ["loc", [null, [30, 59], [30, 63]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [31, 61], [31, 65]]], 0, 0, 0, 0], "myprojects/"], 0, 0, 0, 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 20
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "dropdown");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "href", "/support/");
          var el3 = dom.createTextNode("Support");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 24
              },
              "end": {
                "line": 54,
                "column": 24
              }
            },
            "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "hidden-xs");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("\n                                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "rel", "tooltip");
            dom.setAttribute(el3, "data-placement", "bottom");
            dom.setAttribute(el3, "title", "Search OSF");
            dom.setAttribute(el3, "class", "fa fa-search fa-lg");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element11 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element11, 'onclick');
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["toggleSearch"], [], ["loc", [null, [null, null], [50, 68]]], 0, 0], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 20
            },
            "end": {
              "line": 55,
              "column": 20
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "onSearchPage", ["loc", [null, [48, 35], [48, 47]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [48, 24], [54, 35]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 20
            },
            "end": {
              "line": 82,
              "column": 20
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "dropdown");
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "href", "#");
          dom.setAttribute(el2, "class", "dropdown-toggle nav-user-dropdown");
          dom.setAttribute(el2, "data-toggle", "dropdown");
          dom.setAttribute(el2, "role", "button");
          dom.setAttribute(el2, "aria-expanded", "false");
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "osf-gravatar");
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("img");
          dom.setAttribute(el4, "alt", "User gravatar");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "caret");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "dropdown-menu");
          dom.setAttribute(el2, "role", "menu");
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "fa fa-user fa-lg p-r-xs");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" My Profile");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "fa fa-life-ring fa-lg p-r-xs");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Support");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "fa fa-cog fa-lg p-r-xs");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Settings");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode("\n                                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "fa fa-sign-out fa-lg p-r-xs");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" Log out");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n                            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element4, [1, 1]);
          var element6 = dom.childAt(element3, [3]);
          var element7 = dom.childAt(element6, [1, 1]);
          var element8 = dom.childAt(element6, [3, 1]);
          var element9 = dom.childAt(element6, [5, 1]);
          var element10 = dom.childAt(element6, [7, 1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element5, 'src');
          morphs[1] = dom.createMorphAt(element4, 3, 3);
          morphs[2] = dom.createAttrMorph(element7, 'href');
          morphs[3] = dom.createAttrMorph(element8, 'href');
          morphs[4] = dom.createAttrMorph(element9, 'href');
          morphs[5] = dom.createAttrMorph(element10, 'onclick');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "gravatarUrl", ["loc", [null, [61, 48], [61, 59]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "user.fullName", ["loc", [null, [62, 40], [62, 57]]], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [67, 47], [67, 51]]], 0, 0, 0, 0], "profile/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [70, 47], [70, 51]]], 0, 0, 0, 0], "support/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [74, 47], [74, 51]]], 0, 0, 0, 0], "settings/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "onclick", ["subexpr", "action", ["logout"], [], ["loc", [null, [null, null], [77, 66]]], 0, 0], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 83,
                  "column": 24
                },
                "end": {
                  "line": 91,
                  "column": 24
                }
              },
              "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "dropdown sign-in");
              dom.setAttribute(el1, "data-bind", "with: $root.signIn");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "btn-group");
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "href", "${domain}login/?campaign=institution&redirect_url=${redirect_url}");
              dom.setAttribute(el3, "class", "btn btn-info btn-top-login");
              var el4 = dom.createTextNode("\n                                        Sign in ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "hidden-xs");
              var el5 = dom.createElement("i");
              dom.setAttribute(el5, "class", "fa fa-arrow-right");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 91,
                  "column": 24
                },
                "end": {
                  "line": 98,
                  "column": 24
                }
              },
              "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "dropdown sign-in");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-sm-12");
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "class", "btn btn-success btn-top-signup m-r-xs");
              var el4 = dom.createTextNode("Sign Up");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "class", "btn btn-info btn-top-login m-r-xs");
              var el4 = dom.createTextNode("Sign in");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element0, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'href');
              morphs[1] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["attribute", "href", ["concat", [["get", "signupUrl", ["loc", [null, [94, 47], [94, 56]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", [["get", "loginAction", ["loc", [null, [95, 48], [95, 59]]], 0, 0, 0, 0]], [], ["loc", [null, [95, 39], [95, 61]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 20
              },
              "end": {
                "line": 99,
                "column": 20
              }
            },
            "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "if", [["get", "institution", ["loc", [null, [83, 30], [83, 41]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [83, 24], [98, 31]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 20
            },
            "end": {
              "line": 99,
              "column": 20
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "allowLogin", ["loc", [null, [82, 30], [82, 40]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [82, 20], [99, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "search-dropdown", [], ["action", "toggleSearch"], ["loc", [null, [105, 8], [105, 49]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 108,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/osf-navbar/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "osf-nav-wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("nav");
        dom.setAttribute(el2, "class", "navbar navbar-inverse navbar-fixed-top");
        dom.setAttribute(el2, "id", "navbarScope");
        dom.setAttribute(el2, "role", "navigation");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "container");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "navbar-header");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        dom.setAttribute(el5, "class", "navbar-toggle collapsed");
        dom.setAttribute(el5, "data-toggle", "collapse");
        dom.setAttribute(el5, "data-target", "#navbar");
        dom.setAttribute(el5, "aria-expanded", "false");
        dom.setAttribute(el5, "aria-controls", "navbar");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "sr-only");
        var el7 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "icon-bar");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "icon-bar");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "icon-bar");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "navbar-brand hidden-sm hidden-xs");
        dom.setAttribute(el5, "href", "/");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "osf-navbar-logo");
        dom.setAttribute(el6, "width", "27");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Open Science Framework");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "navbar-brand visible-sm visible-xs");
        dom.setAttribute(el5, "href", "/");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "osf-navbar-logo");
        dom.setAttribute(el6, "width", "27");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" OSF");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "id", "navbar");
        dom.setAttribute(el4, "class", "navbar-collapse collapse navbar-right");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        dom.setAttribute(el5, "class", "nav navbar-nav");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6, "class", "dropdown");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7, "href", "#");
        dom.setAttribute(el7, "class", "dropdown-toggle");
        dom.setAttribute(el7, "data-toggle", "dropdown");
        dom.setAttribute(el7, "role", "button");
        dom.setAttribute(el7, "aria-expanded", "false");
        var el8 = dom.createTextNode("Browse ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "caret");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        dom.setAttribute(el7, "class", "dropdown-menu");
        dom.setAttribute(el7, "role", "menu");
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("a");
        var el10 = dom.createTextNode("New Projects");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("a");
        var el10 = dom.createTextNode("Registry");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("a");
        var el10 = dom.createTextNode("Meetings");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                            ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("a");
        var el10 = dom.createTextNode("Preprints");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element16 = dom.childAt(fragment, [0]);
        var element17 = dom.childAt(element16, [1, 1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element17, [3, 1]);
        var element20 = dom.childAt(element19, [3, 3]);
        var element21 = dom.childAt(element20, [1, 0]);
        var element22 = dom.childAt(element20, [3, 0]);
        var element23 = dom.childAt(element20, [5, 0]);
        var element24 = dom.childAt(element20, [7, 0]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(element18, 3, 3);
        morphs[1] = dom.createMorphAt(element18, 9, 9);
        morphs[2] = dom.createMorphAt(element19, 1, 1);
        morphs[3] = dom.createAttrMorph(element21, 'href');
        morphs[4] = dom.createAttrMorph(element22, 'href');
        morphs[5] = dom.createAttrMorph(element23, 'href');
        morphs[6] = dom.createAttrMorph(element24, 'href');
        morphs[7] = dom.createMorphAt(element19, 5, 5);
        morphs[8] = dom.createMorphAt(element19, 6, 6);
        morphs[9] = dom.createMorphAt(element19, 7, 7);
        morphs[10] = dom.createMorphAt(element16, 3, 3);
        return morphs;
      },
      statements: [["block", "unless", [["get", "hideSearch", ["loc", [null, [11, 27], [11, 37]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [11, 16], [20, 27]]]], ["block", "if", [["get", "service", ["loc", [null, [23, 22], [23, 29]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [23, 16], [25, 23]]]], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [29, 26], [29, 49]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [29, 20], [32, 27]]]], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [36, 43], [36, 47]]], 0, 0, 0, 0], "explore/activity/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [37, 43], [37, 47]]], 0, 0, 0, 0], "search/?q=*&filter=registration"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [38, 43], [38, 47]]], 0, 0, 0, 0], "meetings/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "href", ["concat", [["get", "host", ["loc", [null, [39, 43], [39, 47]]], 0, 0, 0, 0], "preprints/"], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "unless", [["get", "session.isAuthenticated", ["loc", [null, [42, 31], [42, 54]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [42, 20], [46, 31]]]], ["block", "unless", [["get", "hideSearch", ["loc", [null, [47, 31], [47, 41]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [47, 20], [55, 31]]]], ["block", "if", [["get", "session.isAuthenticated", ["loc", [null, [56, 27], [56, 50]]], 0, 0, 0, 0]], [], 5, 6, ["loc", [null, [56, 20], [99, 27]]]], ["block", "if", [["get", "showSearch", ["loc", [null, [104, 10], [104, 20]]], 0, 0, 0, 0]], [], 7, null, ["loc", [null, [104, 4], [106, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define('ember-osf/components/osf-paginator/component', ['exports', 'ember', 'ember-osf/components/osf-paginator/template'], function (exports, _ember, _emberOsfComponentsOsfPaginatorTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * OSF Paginator adapted from osf/website/static/js/paginator.js
     *
     * Sample usage:
     * ```handlebars
     * {{osf-paginator
     *   totalSearchResults=totalSearchResults
     *   fetchResults=(action 'fetchResults')
     *   query=query}}
     * ```
     * @class osf-paginator
     * @param {integer} totalSearchResults Number of total search results to be paginated
     * @param {action} fetchResults - action for fetching other pages of results
     * @param {string} query - Query needed for fetchResults action.
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsOsfPaginatorTemplate['default'],
        currentPage: 1,
        pages: _ember['default'].computed('totalSearchResults', function () {
            var totalSearchResults = this.get('totalSearchResults');
            return Math.ceil(totalSearchResults / 10);
        }),
        paginators: _ember['default'].computed('currentPage', 'pages', function () {
            var currentPage = this.get('currentPage') - 1;
            var MAX_PAGES_ON_PAGINATOR = 7;
            var MAX_PAGES_ON_PAGINATOR_SIDE = 5;
            var pages = this.get('pages');
            var paginator = _ember['default'].A();

            if (pages > 1) {
                paginator.pushObject('<');
                paginator.pushObject(1);
            }

            if (pages <= MAX_PAGES_ON_PAGINATOR) {
                for (var i = 1; i < pages - 1; i++) {
                    paginator.pushObject(i + 1);
                }
            } else if (currentPage < MAX_PAGES_ON_PAGINATOR_SIDE - 1) {
                for (var j = 1; j < MAX_PAGES_ON_PAGINATOR_SIDE; j++) {
                    paginator.pushObject(j + 1);
                }
                paginator.pushObject('...');
            } else if (currentPage > pages - MAX_PAGES_ON_PAGINATOR_SIDE) {
                paginator.pushObject('...');
                for (var k = pages - MAX_PAGES_ON_PAGINATOR_SIDE; k < pages - 1; k++) {
                    paginator.pushObject(k + 1);
                }
            } else {
                paginator.pushObject('...');
                for (var l = currentPage - 1; l <= currentPage + 1; l++) {
                    paginator.pushObject(l + 1);
                }
                paginator.pushObject('...');
            }

            paginator.push(pages);
            paginator.push('>');
            return paginator;
        }),
        actions: {
            findResults: function findResults(query, page) {
                var _this = this;

                this.attrs.fetchResults(query, page).then(function () {
                    _this.set('currentPage', page);
                });
            },
            nextPage: function nextPage(query) {
                var page = this.get('currentPage');
                if (page < this.get('pages')) {
                    this.send('findResults', query, page + 1);
                }
            },
            previousPage: function previousPage(query) {
                var page = this.get('currentPage');
                if (page > 1) {
                    this.send('findResults', query, page - 1);
                }
            }
        }
    });
});
define("ember-osf/components/osf-paginator/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 5,
                "column": 8
              }
            },
            "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "href", "#");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [0]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            morphs[1] = dom.createElementMorph(element5);
            morphs[2] = dom.createMorphAt(element5, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["subexpr", "if", [["subexpr", "eq", [["get", "currentPage", ["loc", [null, [4, 31], [4, 42]]], 0, 0, 0, 0], 1], [], ["loc", [null, [4, 27], [4, 45]]], 0, 0], "disabled"], [], ["loc", [null, [null, null], [4, 58]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["previousPage", ["get", "query", ["loc", [null, [4, 95], [4, 100]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 71], [4, 102]]], 0, 0], ["content", "page", ["loc", [null, [4, 104], [4, 112]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "href", "#");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [0]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element2, 'class');
              morphs[1] = dom.createElementMorph(element3);
              morphs[2] = dom.createMorphAt(element3, 0, 0);
              return morphs;
            },
            statements: [["attribute", "class", ["subexpr", "if", [["subexpr", "eq", [["get", "currentPage", ["loc", [null, [6, 31], [6, 42]]], 0, 0, 0, 0], ["get", "pages", ["loc", [null, [6, 43], [6, 48]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 27], [6, 49]]], 0, 0], "disabled"], [], ["loc", [null, [null, null], [6, 62]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["nextPage", ["get", "query", ["loc", [null, [6, 96], [6, 101]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 76], [6, 103]]], 0, 0], ["content", "page", ["loc", [null, [6, 105], [6, 113]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "disabled");
                var el2 = dom.createElement("a");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
                return morphs;
              },
              statements: [["content", "page", ["loc", [null, [8, 36], [8, 44]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.7.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 8
                  },
                  "end": {
                    "line": 11,
                    "column": 8
                  }
                },
                "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createElement("a");
                dom.setAttribute(el2, "href", "#");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [0]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element0, 'class');
                morphs[1] = dom.createElementMorph(element1);
                morphs[2] = dom.createMorphAt(element1, 0, 0);
                return morphs;
              },
              statements: [["attribute", "class", ["subexpr", "if", [["subexpr", "eq", [["get", "page", ["loc", [null, [10, 31], [10, 35]]], 0, 0, 0, 0], ["get", "currentPage", ["loc", [null, [10, 36], [10, 47]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 27], [10, 48]]], 0, 0], "active"], [], ["loc", [null, [null, null], [10, 59]]], 0, 0], 0, 0, 0, 0], ["element", "action", ["findResults", ["get", "query", ["loc", [null, [10, 96], [10, 101]]], 0, 0, 0, 0], ["get", "page", ["loc", [null, [10, 102], [10, 106]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 73], [10, 108]]], 0, 0], ["content", "page", ["loc", [null, [10, 110], [10, 118]]], 0, 0, 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.7.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "page", ["loc", [null, [7, 22], [7, 26]]], 0, 0, 0, 0], "..."], [], ["loc", [null, [7, 18], [7, 33]]], 0, 0]], [], 0, 1, ["loc", [null, [7, 8], [11, 8]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.7.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 11,
                "column": 8
              }
            },
            "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "page", ["loc", [null, [5, 22], [5, 26]]], 0, 0, 0, 0], ">"], [], ["loc", [null, [5, 18], [5, 31]]], 0, 0]], [], 0, 1, ["loc", [null, [5, 8], [11, 8]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.7.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "page", ["loc", [null, [3, 18], [3, 22]]], 0, 0, 0, 0], "<"], [], ["loc", [null, [3, 14], [3, 27]]], 0, 0]], [], 0, 1, ["loc", [null, [3, 8], [11, 15]]]]],
        locals: ["page"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/osf-paginator/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "pagination pull-right");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "paginators", ["loc", [null, [2, 12], [2, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 4], [12, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('ember-osf/components/pagination-control/component', ['exports', 'ember', 'ember-osf/components/pagination-control/template'], function (exports, _ember, _emberOsfComponentsPaginationControlTemplate) {
    'use strict';

    var _slice = Array.prototype.slice;

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Display a simple pagination control that advances the page. Intended for use with PaginatedRouteMixin.
     * @class pagination-control
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsPaginationControlTemplate['default'],
        currentPage: null,
        pageCount: null,

        // Bounds checking for control buttons
        disablePageReverse: _ember['default'].computed.lte('currentPage', 1),
        disablePageForward: _ember['default'].computed('currentPage', 'pageCount', function () {
            return this.get('currentPage') >= this.get('pageCount');
        }),

        // TODO: This actions hash feels a bit kludgy
        actions: {
            next: function next() {
                return this.sendAction.apply(this, ['next'].concat(_slice.call(arguments)));
            },

            previous: function previous() {
                return this.sendAction.apply(this, ['previous'].concat(_slice.call(arguments)));
            },

            goToPage: function goToPage(pageNumber) {
                return this.sendAction('goToPage', pageNumber);
            }
        }
    });
});
define("ember-osf/components/pagination-control/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/pagination-control/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "btn btn-primary");
        var el3 = dom.createTextNode("Previous");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "btn btn-primary");
        var el3 = dom.createTextNode("Next");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    Page ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" of ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element1, 'disabled');
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createAttrMorph(element2, 'disabled');
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createAttrMorph(element4, 'value');
        morphs[5] = dom.createAttrMorph(element4, 'onchange');
        morphs[6] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["attribute", "disabled", ["get", "disablePageReverse", ["loc", [null, [2, 69], [2, 87]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["previous"], [], ["loc", [null, [2, 36], [2, 57]]], 0, 0], ["attribute", "disabled", ["get", "disablePageForward", ["loc", [null, [3, 65], [3, 83]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["next"], [], ["loc", [null, [3, 36], [3, 53]]], 0, 0], ["attribute", "value", ["get", "currentPage", ["loc", [null, [7, 24], [7, 35]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "onchange", ["subexpr", "action", ["goToPage"], ["value", "target.value"], ["loc", [null, [null, null], [7, 89]]], 0, 0], 0, 0, 0, 0], ["content", "pageCount", ["loc", [null, [7, 94], [7, 107]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/search-dropdown/component', ['exports', 'ember', 'ember-osf/components/search-dropdown/template', 'ember-get-config'], function (exports, _ember, _emberOsfComponentsSearchDropdownTemplate, _emberGetConfig) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Display a search dropdown as used in the OSF navbar
     *
     * Sample usage:
     * ```handlebars
     *   {{#search-dropdown action='toggleSearch'}}
     * ```
     * @class search-dropdown
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsSearchDropdownTemplate['default'],
        host: _emberGetConfig['default'].OSF.url,
        query: null,
        actions: {
            // Runs toggleSearch in parent component, osf-navbar
            toggleSearch: function toggleSearch() {
                this.sendAction('action');
            },
            updateQuery: function updateQuery(value) {
                this.set('query', value);
            },
            search: function search() {
                var query = this.get('query');
                if (query) {
                    window.location.href = this.host + 'search/?q=' + query;
                }
            }
        }
    });
});
define("ember-osf/components/search-dropdown/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/search-dropdown/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "osf-search");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-md-12");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "class", "input-group");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "id", "searchPageFullBar");
        dom.setAttribute(el6, "name", "search-placeholder");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "class", "osf-search-input form-control");
        dom.setAttribute(el6, "placeholder", "Search");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "id", "searchBarLabel");
        dom.setAttribute(el6, "class", "search-label-placeholder");
        dom.setAttribute(el6, "for", "search-placeholder");
        var el7 = dom.createTextNode("Search");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "input-group-btn");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "type", "submit");
        dom.setAttribute(el7, "class", "btn osf-search-btn");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8, "class", "fa fa-arrow-circle-right fa-lg");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "type", "button");
        dom.setAttribute(el7, "class", "btn osf-search-btn");
        dom.setAttribute(el7, "data-toggle", "modal");
        dom.setAttribute(el7, "data-target", "#search-help-modal");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8, "class", "fa fa-question fa-lg");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "type", "button");
        dom.setAttribute(el7, "class", "btn osf-search-btn");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8, "class", "fa fa-times fa-lg");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1, 1, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [5, 5]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createAttrMorph(element1, 'onchange');
        morphs[2] = dom.createAttrMorph(element2, 'onclick');
        return morphs;
      },
      statements: [["element", "action", ["search"], ["on", "submit"], ["loc", [null, [5, 42], [5, 73]]], 0, 0], ["attribute", "onchange", ["subexpr", "action", ["updateQuery"], ["value", "target.value"], ["loc", [null, [null, null], [6, 104]]], 0, 0], 0, 0, 0, 0], ["attribute", "onclick", ["subexpr", "action", ["toggleSearch"], [], ["loc", [null, [null, null], [11, 106]]], 0, 0], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/sign-up/component', ['exports', 'ember', 'ember-osf/components/sign-up/template'], function (exports, _ember, _emberOsfComponentsSignUpTemplate) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule components
   */

  /**
   * Display a simple signup form
   * @class sign-up
   */
  exports['default'] = _ember['default'].Component.extend({
    layout: _emberOsfComponentsSignUpTemplate['default']
  });
});
define("ember-osf/components/sign-up/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 70,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/sign-up/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("article");
        dom.setAttribute(el1, "class", "sign-up");
        dom.setAttribute(el1, "role", "region");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "toggle-box toggle-box-right toggle-box-active p-h-lg");
        dom.setAttribute(el2, "style", "height: auto;");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form-horizontal");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        dom.setAttribute(el4, "class", "m-b-lg");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "col-sm-4 control-label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-8");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "text");
        dom.setAttribute(el6, "class", "form-control");
        dom.setAttribute(el6, "autofocus", "");
        dom.setAttribute(el6, "required", "");
        dom.setAttribute(el6, "aria-required", "true");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "col-sm-4 control-label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-8");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "email");
        dom.setAttribute(el6, "class", "form-control");
        dom.setAttribute(el6, "required", "");
        dom.setAttribute(el6, "aria-required", "true");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "col-sm-4 control-label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-8");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "email");
        dom.setAttribute(el6, "class", "form-control");
        dom.setAttribute(el6, "required", "");
        dom.setAttribute(el6, "aria-required", "true");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "class", "col-sm-4 control-label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-8");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6, "type", "password");
        dom.setAttribute(el6, "class", "form-control");
        dom.setAttribute(el6, "required", "");
        dom.setAttribute(el6, "aria-required", "true");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "col-sm-offset-4 col-sm-8");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "submit");
        dom.setAttribute(el6, "class", "btn pull-right btn-success");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3, 1]);
        var element6 = dom.childAt(element1, [5]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [3, 1]);
        var element9 = dom.childAt(element1, [7]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(element9, [3, 1]);
        var element12 = dom.childAt(element1, [9]);
        var element13 = dom.childAt(element12, [1]);
        var element14 = dom.childAt(element12, [3, 1]);
        var morphs = new Array(22);
        morphs[0] = dom.createAttrMorph(element0, 'aria-labelledby');
        morphs[1] = dom.createAttrMorph(element2, 'id');
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createAttrMorph(element4, 'for');
        morphs[4] = dom.createMorphAt(element4, 0, 0);
        morphs[5] = dom.createAttrMorph(element5, 'id');
        morphs[6] = dom.createAttrMorph(element5, 'placeholder');
        morphs[7] = dom.createAttrMorph(element7, 'for');
        morphs[8] = dom.createMorphAt(element7, 0, 0);
        morphs[9] = dom.createAttrMorph(element8, 'id');
        morphs[10] = dom.createAttrMorph(element8, 'placeholder');
        morphs[11] = dom.createAttrMorph(element10, 'for');
        morphs[12] = dom.createMorphAt(element10, 0, 0);
        morphs[13] = dom.createAttrMorph(element11, 'id');
        morphs[14] = dom.createAttrMorph(element11, 'placeholder');
        morphs[15] = dom.createAttrMorph(element13, 'for');
        morphs[16] = dom.createMorphAt(element13, 0, 0);
        morphs[17] = dom.createAttrMorph(element14, 'id');
        morphs[18] = dom.createAttrMorph(element14, 'placeholder');
        morphs[19] = dom.createMorphAt(dom.childAt(element1, [11, 1]), 0, 0);
        morphs[20] = dom.createMorphAt(dom.childAt(element1, [13, 1, 1]), 0, 0);
        morphs[21] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "aria-labelledby", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [1, 65], [1, 69]]], 0, 0, 0, 0], "signup-heading-title"], [], ["loc", [null, [null, null], [1, 94]]], 0, 0], 0, 0, 0, 0], ["attribute", "id", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [4, 44], [4, 48]]], 0, 0, 0, 0], "signup-heading-title"], [], ["loc", [null, [null, null], [4, 73]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["eosf.signup.headingTitle"], [], ["loc", [null, [4, 75], [4, 107]]], 0, 0], ["attribute", "for", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [6, 37], [6, 41]]], 0, 0, 0, 0], "signup-input-name"], [], ["loc", [null, [null, null], [6, 63]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["eosf.signup.labelInputName"], [], ["loc", [null, [6, 95], [6, 129]]], 0, 0], ["attribute", "id", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [11, 33], [11, 37]]], 0, 0, 0, 0], "signup-input-name"], [], ["loc", [null, [null, null], [11, 59]]], 0, 0], 0, 0, 0, 0], ["attribute", "placeholder", ["subexpr", "t", ["eosf.signup.labelInputName"], [], ["loc", [null, [null, null], [12, 66]]], 0, 0], 0, 0, 0, 0], ["attribute", "for", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [20, 37], [20, 41]]], 0, 0, 0, 0], "signup-input-email"], [], ["loc", [null, [null, null], [20, 64]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["eosf.signup.labelInputEmail"], [], ["loc", [null, [20, 96], [20, 131]]], 0, 0], ["attribute", "id", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [25, 33], [25, 37]]], 0, 0, 0, 0], "signup-input-email"], [], ["loc", [null, [null, null], [25, 60]]], 0, 0], 0, 0, 0, 0], ["attribute", "placeholder", ["subexpr", "t", ["eosf.signup.labelInputEmail"], [], ["loc", [null, [null, null], [26, 67]]], 0, 0], 0, 0, 0, 0], ["attribute", "for", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [33, 37], [33, 41]]], 0, 0, 0, 0], "signup-input-confirm-email"], [], ["loc", [null, [null, null], [33, 72]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["eosf.signup.labelConfirmEmail"], [], ["loc", [null, [33, 105], [33, 142]]], 0, 0], ["attribute", "id", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [38, 33], [38, 37]]], 0, 0, 0, 0], "signup-input-confirm-email"], [], ["loc", [null, [null, null], [38, 68]]], 0, 0], 0, 0, 0, 0], ["attribute", "placeholder", ["subexpr", "t", ["eosf.signup.placeholderConfirmEmail"], [], ["loc", [null, [null, null], [39, 75]]], 0, 0], 0, 0, 0, 0], ["attribute", "for", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [46, 37], [46, 41]]], 0, 0, 0, 0], "signup-input-password"], [], ["loc", [null, [null, null], [46, 67]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["eosf.signup.labelInputPassword"], [], ["loc", [null, [46, 100], [46, 138]]], 0, 0], ["attribute", "id", ["subexpr", "elem-id", [["get", "this", ["loc", [null, [51, 33], [51, 37]]], 0, 0, 0, 0], "signup-input-password"], [], ["loc", [null, [null, null], [51, 63]]], 0, 0], 0, 0, 0, 0], ["attribute", "placeholder", ["subexpr", "t", ["eosf.signup.labelInputPassword"], [], ["loc", [null, [null, null], [52, 70]]], 0, 0], 0, 0, 0, 0], ["inline", "t", ["eosf.signup.textTosNotice"], [], ["loc", [null, [59, 19], [59, 52]]], 0, 0], ["inline", "t", ["eosf.signup.buttonSubmit"], [], ["loc", [null, [63, 77], [63, 109]]], 0, 0], ["content", "yield", ["loc", [null, [68, 7], [68, 16]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/components/tags-widget/component', ['exports', 'ember', 'ember-osf/components/tags-widget/template'], function (exports, _ember, _emberOsfComponentsTagsWidgetTemplate) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule components
     */

    /**
     * Allow the user to view and manage tags.
     * See TaggableMixin for controller actions that can be used with this component.
     *
     * For more information on configuration options, see documentation for [jquery-tags-input](https://github.com/xoxco/jQuery-Tags-Input).
     *
     * ```handlebars
     * {{tags-widget
     *   addATag=(action 'addATag' model)
     *   removeATag=(action 'removeATag' model)
     *   tags=model.tags}}
     * ```
     * @class tags-widget
     * @extends Ember.Component
     */
    exports['default'] = _ember['default'].Component.extend({
        layout: _emberOsfComponentsTagsWidgetTemplate['default'],

        /**
         * Whether the user is allowed to edit tags.
         * @property canEdit
         * @type {Boolean}
         */
        canEdit: true, // TODO: Implement editing decision logic in the future
        tags: [],

        tagName: 'input',
        type: 'text',
        attributeBindings: ['name', 'type', 'value', 'id'],

        _initialize: _ember['default'].on('didInsertElement', function () {
            _ember['default'].run.scheduleOnce('afterRender', this, function () {
                var _this = this;

                this.$().tagsInput({
                    width: '100%',
                    interactive: this.get('canEdit'),
                    maxChars: 128,
                    onAddTag: function onAddTag(tag) {
                        _this.send('addATag', tag);
                    },
                    onRemoveTag: function onRemoveTag(tag) {
                        _this.send('removeATag', tag);
                    }
                });
            });
        }),

        didRender: function didRender() {
            // Rerender the list of tags whenever the node model changes. Useful if node.tags is not defined when page loads.
            // Provide a default value in case tags weren't defined when component first rendered
            var tags = this.get('tags') || [];
            // Reset & replace existing tag list with new items
            this.$().importTags(tags.join(', '));
        },

        actions: {
            addATag: function addATag(tag) {
                // Calls a curried closure action which was provided the model
                this.attrs.addATag(tag);
            },
            removeATag: function removeATag(tag) {
                // Don't try to delete a blank tag (would result in a server error)
                if (!tag) {
                    return false;
                }
                this.attrs.removeATag(tag);
            }
        }
    });
});
define("ember-osf/components/tags-widget/template", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "modules/ember-osf/components/tags-widget/template.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('ember-osf/const/permissions', ['exports'], function (exports) {
    'use strict';

    var ADMIN = 'admin';
    var READ = 'read';
    var WRITE = 'write';

    /**
     * Provide human-readable labels for permissions fields. Useful in dropdown UI.
     * @property permissionSelector
     * @final
     * @type {*[]}
     */
    // TODO: Document constants in YUIDoc format
    var permissionSelector = [{ value: READ, text: 'Read' }, { value: WRITE, text: 'Read + Write' }, { value: ADMIN, text: 'Administrator' }];

    exports['default'] = {
        ADMIN: ADMIN,
        READ: READ,
        WRITE: WRITE,
        PERMISSIONS: [READ, WRITE, ADMIN],
        CREATOR_PERMISSIONS: [READ, WRITE, ADMIN],
        DEFAULT_CONTRIBUTOR_PERMISSIONS: [READ, WRITE]
    };
    exports.permissionSelector = permissionSelector;
});
define('ember-osf/helpers/elem-id', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  exports.elemId = elemId;

  /**
   * @module ember-osf
   * @submodule helpers
   */

  /**
   * Generate a unique HTML element ID for this element. Given "someid" for component instance 123, returns "ember123-someid"
   *
   * Useful to ensure unique IDs, eg for when component is reused in page.
   * @class elem-id
   * @param {Ember.Object} obj The instance with ID to use
   * @param {Ember.suffix} suffix The base attribute to name
   */

  function elemId(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var obj = _ref2[0];
    var suffix = _ref2[1];

    _ember['default'].assert('Must pass a valid object', obj);
    return _ember['default'].guidFor(obj) + '-' + suffix;
  }

  exports['default'] = _ember['default'].Helper.helper(elemId);
});
define('ember-osf/instance-initializers/ember-osf', ['exports', 'ember-osf/locales/en-us/translations'], function (exports, _emberOsfLocalesEnUsTranslations) {
    'use strict';

    exports.initialize = initialize;

    /*
    Automatically expose translations for addon in a way that can be merged in with app
        https://github.com/jamesarosen/ember-i18n/issues/255
     */

    function initialize(appInstance) {
        var i18n = appInstance.lookup('service:i18n');
        i18n.addTranslations('en-US', _emberOsfLocalesEnUsTranslations['default']);
    }

    exports['default'] = {
        name: 'ember-osf',
        initialize: initialize
    };
});
define("ember-osf/locales/en-us/config", ["exports"], function (exports) {
    // Ember-I18n includes configuration for common locales. Most users
    // can safely delete this file. Use it if you need to override behavior
    // for a locale or define behavior for a locale that Ember-I18n
    // doesn't know about.
    "use strict";

    exports["default"] = {
        // rtl: [true|FALSE],
        //
        // pluralForm: function(count) {
        //   if (count === 0) { return 'zero'; }
        //   if (count === 1) { return 'one'; }
        //   if (count === 2) { return 'two'; }
        //   if (count < 5) { return 'few'; }
        //   if (count >= 5) { return 'many'; }
        //   return 'other';
        // }
    };
});
define('ember-osf/locales/en-us/translations', ['exports'], function (exports) {
    'use strict';

    exports['default'] = {
        // "some.translation.key": "Text for some.translation.key",
        //
        // "a": {
        //   "nested": {
        //     "key": "Text for a.nested.key"
        //   }
        // },
        //
        // "key.with.interpolation": "Text with {{anInterpolation}}"
        eosf: {
            signup: {
                headingTitle: 'Create a free account',
                labelInputName: 'Full name',
                labelInputEmail: 'Email',
                labelConfirmEmail: 'Confirm Email',
                placeholderConfirmEmail: 'Re-enter email',
                labelInputPassword: 'Password',
                textTosNotice: 'By clicking "Create account", you agree to our <a href="https://github.com/CenterForOpenScience/centerforopenscience.org/blob/master/TERMS_OF_USE.md">Terms</a> and that you have read our <a href="https://github.com/CenterForOpenScience/centerforopenscience.org/blob/master/PRIVACY_POLICY.md">Privacy Policy</a>, including our information on <a href="https://github.com/CenterForOpenScience/centerforopenscience.org/blob/master/PRIVACY_POLICY.md#f-cookies">Cookie Use</a>.',
                buttonSubmit: 'Create account'
            }
        }
    };
});
define('ember-osf/mixins/cas-authenticated-route', ['exports', 'ember', 'ember-osf/utils/auth'], function (exports, _ember, _emberOsfUtilsAuth) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Replacement for Ember-simple-auth AuthenticatedRouteMixin. Instead of redirecting to an internal route,
     *   this mixin redirects to CAS login URL, and brings the user back to the last requested page afterwards
     *
     * For OAuth this is done via the state parameter, and for cookies this is done via the service parameter. (TODO: Need a mixin that detects this!)
     *
     * @class CasAuthenticatedRouteMixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        /**
          The session service.
          @property session
          @readOnly
          @type SessionService
          @public
        */
        session: _ember['default'].inject.service('session'),
        routing: _ember['default'].inject.service('-routing'),

        /**
          Checks whether the session is authenticated, and if it is not, redirects to the login URL. (Sending back to this page after a successful transition)
           __If `beforeModel` is overridden in a route that uses this mixin, the route's
         implementation must call `this._super(...arguments)`__ so that the mixin's
         `beforeModel` method is actually executed.
          @method beforeModel
          @public
        */
        beforeModel: function beforeModel(transition) {
            if (!this.get('session.isAuthenticated')) {
                // Reference: http://stackoverflow.com/a/39054607/414097
                var routing = this.get('routing');
                var params = Object.values(transition.params).filter(function (param) {
                    return Object.values(param).length;
                });
                var url = routing.generateURL(transition.targetName, params, transition.queryParams);
                window.location = (0, _emberOsfUtilsAuth.getAuthUrl)(url);
            } else {
                return this._super.apply(this, arguments);
            }
        }
    });
});
define('ember-osf/mixins/commentable', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Controller mixin that implements basic commenting functionality. Uses the base model in the route model hook.
     * @class CommentableMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({

        /**
         * The list of comments associated with a model. Defaults to using the model hook, and ensures that new comments
         * are shown first (to match API convention)
         *
         * @public
         * @property comments
         * @type Comment[]
         */
        comments: _ember['default'].computed.sort('model.comments', function (a, b) {
            // As new records are added, they do not necessarily respect the newest-first ordering used by the API. Enforce.
            // FIXME: Until the API returns, newly added comments may not have creation date set, in which case sorting fails. Assume anything without a date is new.
            var aTime = a.get('dateCreated') || new Date();
            var bTime = b.get('dateCreated') || new Date();
            return bTime - aTime;
        }),

        actions: {
            /**
             * Action that adds a new comment targeting the model by GUID.
             * @method addComment
             * @param {String} text The text of the new comment
             * @return {Promise} The newly created comment
             */
            addComment: function addComment(text) {
                // Assumes that the page's model hook is the target for the comment
                var model = this.get('model');
                var commentsRel = model.get('comments');

                var comment = this.store.createRecord('comment', {
                    content: text,
                    targetID: model.get('guid') || model.id,
                    targetType: _ember['default'].Inflector.inflector.pluralize(model.constructor.modelName)
                });
                commentsRel.pushObject(comment);
                return model.save().then(function () {
                    return comment;
                });
            },
            /**
             * Action that edits an existing comment.
             * @method editComment
             * @param {DS.Model} comment A comment model
             * @return {Promise}
             */
            editComment: function editComment(comment) {
                return comment.save();
            },
            /**
             * Action that handles deletion of an existing comment.
             * @method deleteComment
             * @param comment
             * @return {Promise}
             */
            deleteComment: function deleteComment(comment) {
                comment.set('deleted', true);
                return comment.save();
            },
            /**
             * Action that restores a deleted comment.
             * @method restoreComment
             * @param comment
             * @return {Promise}
             */
            restoreComment: function restoreComment(comment) {
                comment.set('deleted', false);
                return comment.save();
            },
            /**
             * Action that reports a comment for administrative review
             * @method reportComment
             * @return {Promise}
             */
            reportComment: function reportComment() {
                // TODO: Implement
                console.log('Consider this comment reported');
            }
        }
    });
});
define('ember-osf/mixins/fetch-all-route', ['exports', 'ember', 'ember-osf/mixins/infinity-custom'], function (exports, _ember, _emberOsfMixinsInfinityCustom) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * The FetchAllRouteMixin supports loading *all* records from a specified model or relationship.
     * Essentially, it un-paginates an API
     *
     * This may be useful for select applications (such as frontend-powered search boxes), but is strongly discouraged
     * for most applications. Consider using available pagination functionality instead.
     *
     * @class FetchAllRouteMixin
     * @public
     * @extends Ember.Mixin
     * @uses InfinityCustom
     */
    exports['default'] = _ember['default'].Mixin.create(_emberOsfMixinsInfinityCustom['default'], {
        /**
         * The name of the URL parameter used by the API to control number of results per page
         * @property {String} perPageParam
         * @default page[size]
         */
        perPageParam: 'page[size]',
        /**
         * The name of the URL parameter used by the API to control the page requested
         * @property {String} pageParam
         * @default page
         */
        pageParam: 'page',
        /**
         * The name of the payload field that specifies how many pages are to be loaded. For OSF APIv2, this calculated field is added by serializer.
         *
         * @property {String} totalPagesParam
         * @default meta.total
         */
        totalPagesParam: 'meta.total',

        /**
         * If a string is provided, will set infinite fetch on the relationship with the specified name,
         * from the model specified in the route's model hook
         *
         * @property relationshipToFetch
         * @type String
         * @default null
         */
        relationshipToFetch: null,

        /**
         * Relationship querying reloads the relationship, so it can not be used as an in-place storage for the de-paginated list of records
         * As an ugly workaround, provide a new storage place that will not reflect mutations or updates to the list
         *
         * @property allRelated
         */
        allRelated: null,

        /**
         * Sets up fetch-all query for a relationship field.
         * @public
         * @method setupRelationshipFetch
         * @param controller
         * @param model
         */
        setupRelationshipFetch: function setupRelationshipFetch(controller, model) {
            var _this = this;

            // TODO: In the future, provide API for additional relationship query options
            var storage = this.get('allRelated') || _ember['default'].A();
            controller.set('allRelated', storage);

            this.infinityModel(this.get('relationshipToFetch'), {
                modelPath: 'controller.allRelated',
                _storeFindMethod: model.query.bind(model)
            }).then(function (newObjects) {
                // Relationships use intermediate storage, so we can't assume the first page of query records will be auto-added
                _this._doUpdate(newObjects);
                return newObjects;
            });
        },

        setupController: function setupController(controller, model) {
            // If a relationship is specified, implicitly and automatically set the infinityModel to the related field of the model
            if (this.get('relationshipToFetch')) {
                this.setupRelationshipFetch(controller, model);
            }
            return this._super.apply(this, arguments);
        },

        /**
         * Event listener that fetches more results automatically
         * As written, this does not handle fetch errors, and will not retry once an error is encountered
         *
         * @method infinityModelUpdated
         */
        infinityModelUpdated: function infinityModelUpdated() {
            this.send('infinityLoad');
        },

        /**
         * Model queries pass unchanged, but relationship queries require custom transformations to work with Ember-infinity
         *
         * ember-data-has-many-query returns a DS.ManyArray, but Ember-infinity will not work unless given an ArrayProxy instance (with .content)
         *
         * @method afterInfinityModel
         * @param infinityModelPromiseResult
         * @return {*}
         */
        afterInfinityModel: function afterInfinityModel(infinityModelPromiseResult) {
            var rel = this.get('relationshipToFetch');
            if (rel) {
                return _ember['default'].ArrayProxy.create({
                    content: infinityModelPromiseResult.toArray(),
                    meta: infinityModelPromiseResult.get('meta')
                });
            } else {
                return infinityModelPromiseResult;
            }
        },

        // TODO: Add a "forceReload" action that flushes the stored results and refetches (for use with relationships)
        actions: {
            /**
             * Convenience action for clickable buttons, mainly for use with debugging
             * @method getMore
             */
            getMore: function getMore() {
                this.send('infinityLoad');
            }
        }
    });
});
define('ember-osf/mixins/file-cache-bypass', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * This is a hack to resolve a server-side race condition.
     * After creating/modifying/deleting a file through Waterbutler, it can take
     * a fraction of a second for the API's cache to properly update, and
     * trying to reload the file model in that time can return stale data.
     *
     * This adapter mixin appends a nonce to requests that are likely to run into
     * that race condition, forcing a cache miss.
     *
     * @class FileCacheBypassMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        fileManager: _ember['default'].inject.service(),

        // HACK: Messing with Ember Data's privates.
        ajaxOptions: function ajaxOptions() {
            var options = this._super.apply(this, arguments);
            if (this.get('fileManager').isReloadingUrl(options.url)) {
                var prefix = options.url.indexOf('?') === -1 ? '?' : '&';
                var nonce = Date.now();
                // The name of the query parameter doesn't matter, just the nonce
                options.url += prefix + 'cachebypass=' + nonce;
            }
            return options;
        }
    });
});
define('ember-osf/mixins/file-item', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule mixins
   */

  /**
   * File-like models are `node`, `file-provider`, and `file`/folder.
   * This mixin provides a polymorphic interface for file-like items, and is intended to be used with models.
   *
   * @class FileItemMixin
   * @extends Ember.Mixin
   */
  exports['default'] = _ember['default'].Mixin.create({
    itemName: _ember['default'].computed.or('name', 'title'),
    // https://github.com/emberjs/ember.js/issues/14014
    // isNode: Ember.computed.equal('constructor.modelName', 'node'),
    // isProvider: Ember.computed.equal('constructor.modelName', 'file-provider'),
    isNode: false,
    isProvider: false,
    isFolder: _ember['default'].computed.and('_isFileModel', '_isFolder'),
    isFile: _ember['default'].computed.and('_isFileModel', '_isFile'),
    canHaveChildren: _ember['default'].computed.or('isNode', 'isProvider', 'isFolder'),

    // _isFileModel: Ember.computed.equal('constructor.modelName', 'file'),
    _isFileModel: false,
    _isFolder: _ember['default'].computed.equal('kind', 'folder'),
    _isFile: _ember['default'].computed.equal('kind', 'file')
  });
});
define('ember-osf/mixins/generic-data-adapter', ['exports', 'ember', 'ember-simple-auth/mixins/data-adapter-mixin', 'ember-get-config'], function (exports, _ember, _emberSimpleAuthMixinsDataAdapterMixin, _emberGetConfig) {
    'use strict';

    /**
     * Extend the Ember-Simple-Auth adapter to provide cookie support (when necessary).
     * This allows the same addon to define an adapter that works with two authentication types.
     *
     * This particularly applies to local development, as without it cookies are not sent from the ember app to the api domain
     *
     * @class GenericDataADapter
     */
    exports['default'] = _ember['default'].Mixin.create(_emberSimpleAuthMixinsDataAdapterMixin['default'], {
        ajaxOptions: function ajaxOptions() {
            var hash = this._super.apply(this, arguments);

            // TODO: This mechanism is quite ugly, and will require manual ajax requests (such as the file manager) to set fields separately;
            //  getting requests to send cookies without triggering cross-origin rules would be strongly preferable
            if (_emberGetConfig['default'].authorizationType === 'cookie') {
                _ember['default'].$.extend(hash, {
                    xhrFields: {
                        withCredentials: true
                    }
                });
            }
            return hash;
        }
    });
});
define('ember-osf/mixins/infinity-custom', ['exports', 'ember', 'ember-infinity/mixins/route'], function (exports, _ember, _emberInfinityMixinsRoute) {
  'use strict';

  var assign = _ember['default'].assign || _ember['default'].merge;

  /**
   * @module ember-osf
   * @submodule mixins
   */

  /**
   * A custom overlay on ember-infinity that supports loading infinite and paginated relationships
   * For the most part, the API and semantics are identical to ember infinity, except that the means of configuring the store find method is more flexible
   *  (supporting relationship queries that do not operate via store methods)
  
   * @class InfinityCustomMixin
   * @extends Ember.Mixin
   * @uses InfinityRoute
   */
  exports['default'] = _ember['default'].Mixin.create(_emberInfinityMixinsRoute['default'], {
    /**
     * Repurpose an ember-infinity hook to override the method used for queries
     * @property _storeFindMethod
     * @type {function}
     * @default this.store.query
     */
    _storeFindMethod: null,

    /**
     Use the infinityModel method in the place of `this.store.find('model')` to
     initialize the Infinity Model for your route.
      @method infinityModel
     @param {String} modelName The name of the model.
     @param {Object} options Optional, the perPage and startingPage to load from.
     @param {Object} boundParams Optional, any route properties to be included as additional params.
     @return {Promise}
     */
    infinityModel: function infinityModel(modelName, options, boundParams) {
      this.set('_infinityModelName', modelName);

      options = options ? assign({}, options) : {};
      var startingPage = options.startingPage === undefined ? 0 : options.startingPage - 1;

      var perPage = options.perPage || this.get('_perPage');
      var modelPath = options.modelPath || this.get('_modelPath');

      var store = this.get('store');
      // Make storeFindMethod configurable, and default to store.query (with appropriate value of `this`)
      var _storeFindMethod = options._storeFindMethod ? options._storeFindMethod : store.get('query').bind(store);

      delete options.startingPage;
      delete options.perPage;
      delete options.modelPath;
      delete options._storeFindMethod;

      this.setProperties({
        currentPage: startingPage,
        _firstPageLoaded: false,
        _perPage: perPage,
        _modelPath: modelPath,
        _storeFindMethod: _storeFindMethod,
        _extraParams: options
      });

      if (typeof boundParams === 'object') {
        this.set('_boundParams', boundParams);
      }

      return this._loadNextPage();
    },

    /**
     request the next page from the adapter
      @private
     @method _requestNextPage
     @return {Promise} A Promise that resolves the next page of objects
     */
    _requestNextPage: function _requestNextPage() {
      var modelName = this.get('_infinityModelName');
      var nextPage = this.incrementProperty('currentPage');
      var params = this._buildParams(nextPage);

      return this._storeFindMethod(modelName, params).then(this._afterInfinityModel(this));
    }
  });
});
define('ember-osf/mixins/node-actions', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Controller mixin that implements common actions performed on nodes.
     * @class NodeActionsMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        /**
         * The node to perform these actions on. If not specified, defaults to the model hook.
         * @property node
         * @type DS.Model
         */
        node: null,
        model: null,
        _node: _ember['default'].computed.or('node', 'model'),
        /**
         * Helper method that affiliates an institution with a node.
         *
         * @method _affiliateNode
         * @private
         * @param {DS.Model} node Node record
         * @param {Object} institution Institution record
         * @return {Promise} Returns a promise that resolves to the updated node with the newly created institution relationship
         */
        _affiliateNode: function _affiliateNode(node, institution) {
            node.get('affiliatedInstitutions').pushObject(institution);
            return node.save();
        },
        actions: {
            /**
             * Update a node
             *
             * @method updateNode
             * @param {String} title New title of the node
             * @param {String} description New Description of the node
             * @param {String} category New node category
             * @param {Boolean} isPublic Should this node be publicly-visible?
             * @return {Promise} Returns a promise that resolves to the updated node
             */
            updateNode: function updateNode(title, description, category, isPublic) {
                var node = this.get('_node');
                if (title) {
                    node.set('title', title);
                }
                if (category) {
                    node.set('category', category);
                }
                if (description) {
                    node.set('description', description);
                }
                if (isPublic !== null) {
                    node.set('public', isPublic);
                }
                return node.save();
            },
            /**
             * Delete a node
             *
             * @method deleteNode
             * @return {Promise} Returns a promise that resolves after the deletion of the node.
             */
            deleteNode: function deleteNode() {
                var node = this.get('_node');
                return node.destroyRecord();
            },
            /**
             * Affiliate a node with an institution
             *
             * @method affiliateNode
             * @param {String} institutionId ID of the institutution to be affiliated
             * @return {Promise} Returns a promise that resolves to the updated node
             * with the newly affiliated institution relationship
             */
            affiliateNode: function affiliateNode(institutionId) {
                var _this = this;

                var node = this.get('_node');
                return this.store.findRecord('institution', institutionId).then(function (institution) {
                    return _this._affiliateNode(node, institution);
                });
            },
            /**
             * Unaffiliate a node with an institution
             *
             * @method unaffiliateNode
             * @param {Object} institution Institution relationship to be removed from node
             * @return {Promise} Returns a promise that resolves to the updated node
             * with the affiliated institution relationship removed.
             */
            unaffiliateNode: function unaffiliateNode(institution) {
                var node = this.get('_node');
                node.get('affiliatedInstitutions').removeObject(institution);
                return node.save();
            },
            /**
             * Add a contributor to a node
             *
             * @method addContributor
             * @param {String} userId ID of user that will be a contributor on the node
             * @param {String} permission User permission level. One of "read", "write", or "admin". Default: "write".
             * @param {Boolean} isBibliographic Whether user will be included in citations for the node. "default: true"
             * @param {Boolean} sendEmail Whether user will receive an email when added. "default: true"
             * @return {Promise} Returns a promise that resolves to the newly created contributor object.
             */
            addContributor: function addContributor(userId, permission, isBibliographic, sendEmail) {
                var _get;

                // jshint ignore:line
                return (_get = this.get('_node')).addContributor.apply(_get, arguments);
            },
            /**
             * Remove a contributor from a node
             *
             * @method removeContributor
             * @param {Object} contributor Contributor relationship that will be removed from node
             * @return {Promise} Returns a promise that will resolve upon contributor deletion.
             * User itself will not be removed.
             */
            removeContributor: function removeContributor(contributor) {
                var node = this.get('_node');
                return node.removeContributor(contributor);
            },
            /**
             * Update contributors of a node. Makes a bulk request to the APIv2.
             *
             * @method updateContributors
             * @param {Contributor[]} contributors Contributor relationships on the node.
             * @param {Object} permissionsChanges Dictionary mapping contributor ids to desired permissions.
             * @param {Object} bibliographicChanges Dictionary mapping contributor ids to desired bibliographic statuses
             * @return {Promise} Returns a promise that resolves to the updated node
             * with edited contributor relationships.
             */
            updateContributors: function updateContributors(contributors, permissionsChanges, bibliographicChanges) {
                var _get2;

                // jshint ignore:line
                return (_get2 = this.get('_node')).updateContributors.apply(_get2, arguments);
            },

            /**
             * Update contributors of a node. Makes a bulk request to the APIv2.
             *
             * @method updateContributor
             * @param {Contributor} contributor relationship on the node.
             * @param {string} permissions desired permissions.
             * @param {boolean} bibliographic desired bibliographic statuses
             * @return {Promise} Returns a promise that resolves to the updated node
             * with edited contributor relationships.
             */
            updateContributor: function updateContributor(contributor, permissions, bibliographic) {
                var _get3;

                // jshint ignore:line
                return (_get3 = this.get('_node')).updateContributor.apply(_get3, arguments);
            },
            /**
             * Reorder contributors on a node, and manually updates store.
             *
             * @method reorderContributors
             * @param {Object} contributor Contributor record to be modified
             * @param {Integer} newIndex Contributor's new position in the list
             * @param {Array} contributors New contributor list in correct order
             * @return {Promise} Returns a promise that resolves to the updated contributor.
             */
            reorderContributors: function reorderContributors(contributor, newIndex, contributors) {
                var _this2 = this;

                contributor.set('index', newIndex);
                return contributor.save().then(function () {
                    contributors.forEach(function (contrib, index) {
                        if (contrib.id !== contributor.id) {
                            var payload = contrib.serialize();
                            payload.data.attributes = {
                                permission: contrib.get('permission'),
                                bibliographic: contrib.get('bibliographic'),
                                index: index
                            };
                            payload.data.id = contrib.get('id');
                            _this2.store.pushPayload(payload);
                        }
                    });
                });
            },
            /**
             * Add a child (component) to a node.
             *
             * @method addChild
             * @param {String} title Title for the child
             * @param {String} description Description for the child
             * @param {String} category Category for the child
             * @return {Promise} Returns a promise that resolves to the newly created child node.
             */
            addChild: function addChild(title, description, category) {
                return this.get('_node').addChild(title, description, category);
            },
            /**
             * Add a node link (pointer) to another node
             *
             * @method addNodeLink
             * @param {String} targetNodeId ID of the node for which you wish to create a pointer
             * @return {Promise} Returns a promise that resolves to model for the newly created NodeLink
             */
            addNodeLink: function addNodeLink(targetNodeId) {
                var node = this.get('_node');
                var nodeLink = this.store.createRecord('node-link', {
                    target: targetNodeId
                });
                node.get('nodeLinks').pushObject(nodeLink);
                return node.save().then(function () {
                    return nodeLink;
                });
            },
            /**
             * Remove a node link (pointer) to another node
             *
             * @method removeNodeLink
             * @param {Object} nodeLink nodeLink record to be destroyed.
             * @return {Promise} Returns a promise that resolves after the node link has been removed.  This does not delete
             * the target node itself.
             */
            removeNodeLink: function removeNodeLink(nodeLink) {
                return nodeLink.destroyRecord();
            }
        }
    });
});
define('ember-osf/mixins/osf-agnostic-auth-controller', ['exports', 'ember', 'ember-get-config', 'ember-osf/mixins/osf-token-login-controller', 'ember-osf/mixins/osf-cookie-login-controller'], function (exports, _ember, _emberGetConfig, _emberOsfMixinsOsfTokenLoginController, _emberOsfMixinsOsfCookieLoginController) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */
    var AuthMixin;

    var authType = _emberGetConfig['default'].authorizationType;
    if (authType === 'token') {
        AuthMixin = _emberOsfMixinsOsfTokenLoginController['default'];
    } else if (authType === 'cookie') {
        AuthMixin = _emberOsfMixinsOsfCookieLoginController['default'];
    } else {
        throw new _ember['default'].Error('Unrecognized authorization type: ' + authType);
    }
    /**
     * Controller mixin for authentication-agnostic login: defines the application at runtime to use the authentication method
     *   specified in environment config. Intended to be used in tandem with OsfAuthController mixin.
     * Some authentication methods (eg cookies) are not available to third-party applications.
     * This has limited use, since most applications will only need to support one method. It may be useful for ember apps
     *   that run inside the OSF, eg to use the standalone dev server, or to offer support for branded apps
     *   on third-party domains.
     *
     * @class OsfAgnosticAuthController
     * @extends Ember.Mixin
     * @uses ember-osf/OsfCookieLoginController
     * @uses ember-osf/OsfTokenLoginController
     */
    exports['default'] = AuthMixin;
});
define('ember-osf/mixins/osf-agnostic-auth-route', ['exports', 'ember', 'ember-get-config', 'ember-osf/mixins/osf-token-login-route', 'ember-osf/mixins/osf-cookie-login-route'], function (exports, _ember, _emberGetConfig, _emberOsfMixinsOsfTokenLoginRoute, _emberOsfMixinsOsfCookieLoginRoute) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    var AuthMixin;

    var authType = _emberGetConfig['default'].authorizationType;
    if (authType === 'token') {
        AuthMixin = _emberOsfMixinsOsfTokenLoginRoute['default'];
    } else if (authType === 'cookie') {
        AuthMixin = _emberOsfMixinsOsfCookieLoginRoute['default'];
    } else {
        throw new _ember['default'].Error('Unrecognized authorization type: ' + authType);
    }
    /**
     * Route mixin for authentication-agnostic login: defines the application at runtime to use the authentication method
     *   specified in environment config. Intended to be used in tandem with OsfAgnosticAuthRoute mixin.
     * Some authentication methods (eg cookies) are not available to third-party applications.
     * This has limited use, since most applications will only need to support one method. It may be useful for ember apps
     *   that run inside the OSF, eg to use the standalone dev server, or to offer support for branded apps
     *   on third-party domains.
     *
     * @class OsfAgnosticAuthRoute
     * @extends Ember.Mixin
     * @uses ember-osf/OsfCookieLoginRoute
     * @uses ember-osf/OsfTokenLoginRoute
     */
    exports['default'] = AuthMixin;
});
define('ember-osf/mixins/osf-cookie-login-controller', ['exports', 'ember', 'ember-osf/utils/auth'], function (exports, _ember, _emberOsfUtilsAuth) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Controller mixin for login based on OSF cookie authentication. Intended to be used in tandem with OsfCookieLoginRoute mixin.
     * This auth method is not available to third-party applications.
     *
     * @class OsfCookieLoginController
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        session: _ember['default'].inject.service('session'),

        queryParams: ['ticket'],
        ticket: null,

        actions: {
            login: function login() {
                window.location = (0, _emberOsfUtilsAuth.getAuthUrl)(window.location);
            },
            loginSuccess: function loginSuccess() {},
            loginFail: function loginFail() {}
        }
    });
});
define('ember-osf/mixins/osf-cookie-login-route', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * @module ember
   * @submodule mixins
   */

  /**
   * Route mixin for login based on OSF cookie authentication. Intended to be used in tandem with OsfCookieLoginController mixin.
   * This auth method is not available to third-party applications.
   *
   * @class OsfCookieLoginRoute
   * @extends Ember.Mixin
   * @uses ember-simple-auth/UnauthenticatedRouteMixin
   */
  exports['default'] = _ember['default'].Mixin.create({
    session: _ember['default'].inject.service(),
    beforeModel: function beforeModel() {
      // Determine whether the user is logged in by making a test request. This is quite a crude way of
      // determining whether the user has a cookie and should be improved in the future.

      // TODO: Should this check for resolution of a promise?
      this._super.apply(this, arguments);

      if (this.get('session.isAuthenticated')) return;

      // Block transition until auth attempt resolves. If auth fails, let the page load normally.
      return this.get('session').authenticate('authenticator:osf-cookie')['catch'](function (err) {
        return console.log('Authentication failed: ', err);
      });
    }
  });
});
define('ember-osf/mixins/osf-token-login-controller', ['exports', 'ember', 'ember-osf/utils/auth'], function (exports, _ember, _emberOsfUtilsAuth) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Controller mixin to add support for OAuth2 token based authentication
     *
     * Intended to be used in tandem with OsfTokenLoginRouteMixin
     *
     * @class OsfTokenLoginControllerMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        session: _ember['default'].inject.service(),
        actions: {
            login: function login() {
                window.location = (0, _emberOsfUtilsAuth.getAuthUrl)(window.location);
            },
            loginSuccess: function loginSuccess() {},
            loginFail: function loginFail() {}
        }
    });
});
define('ember-osf/mixins/osf-token-login-route', ['exports', 'ember', 'ember-get-config', 'ember-osf/utils/auth'], function (exports, _ember, _emberGetConfig, _emberOsfUtilsAuth) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Route mixin to add support for OAuth2 token based authentication
     *
     * Intended to be used in tandem with OsfTokenLoginControllerMixin
     *
     * @class OsfTokenLoginRouteMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        session: _ember['default'].inject.service(),
        beforeModel: function beforeModel() {
            // TODO: Should this check for resolution of a promise?
            this._super.apply(this, arguments);

            var accessToken;
            if (_emberGetConfig['default'].OSF.isLocal) {
                accessToken = _emberGetConfig['default'].OSF.accessToken;
            } else {
                accessToken = (0, _emberOsfUtilsAuth.getTokenFromHash)(window.location.hash);
                if (!accessToken) {
                    return null;
                }
                window.location.hash = '';
            }

            return this.get('session').authenticate('authenticator:osf-token', accessToken)['catch'](function (err) {
                return console.log('Authentication failed: ', err);
            });
        }
    });
});
define('ember-osf/mixins/paginated-controller', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Controller mixin to support fetching paginated results
     *
     * Because this uses query parameters, it should be used in tandem with PaginatedRouteMixin
     *
     * @class PaginatedControllerMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        queryParams: ['page', 'page_size'],
        page: 1, // Current page
        page_size: null, // Number of results per page. Param may be omitted.

        totalResults: _ember['default'].computed('model', function () {
            return this.get('model.meta.pagination.total');
        }),
        totalPages: _ember['default'].computed('model', 'totalResults', function () {
            var results = this.get('totalResults');
            var pageSize = this.get('model.meta.pagination.per_page');
            return Math.ceil(results / pageSize);
        }),

        actions: {
            previous: function previous() {
                this.decrementProperty('page', 1);
            },
            next: function next() {
                this.incrementProperty('page', 1);
            },
            goToPage: function goToPage(pageNumber) {
                this.set('page', pageNumber);
            }
        }
    });
});
define('ember-osf/mixins/paginated-route', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Route mixin to support fetching paginated results
     *
     * Because this uses query parameters, it should be used in tandem with PaginatedControllerMixin
     *
     * @class PaginatedRouteMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        // When page numbers are updated, fetch the new results from the server
        queryParams: {
            page: {
                refreshModel: true
            },
            page_size: {
                refreshModel: true
            }
        },

        /**
         * Allow configuration of the backend URL parameter used for page #
         * @property pageParam
         * @type String
         * @default "page"
         */
        pageParam: 'page',

        /**
         * Allow configuration of the backend URL parameter for number of results per page
         * @property perPageParam
         * @type String
         * @default "page[size]"
         */
        perPageParam: 'page[size]',

        /**
         * Fetch a route-specified page of results from an external API
         *
         * To use this argument, pass the params from the model hook as the first argument.
         * ```javascript
         * model(routeParams) {
         *   return this.queryForPage('user', routeParams);
         * }
         * ```
         *
         * @method queryForPage
         * @param modelName The name of the model to query in the store
         * @param routeParams Parameters dictionary available to the model hook; must be passed in manually
         * @param userParams Additional user-specified query parameters to further customize the query
         * @return {Promise}
         */
        queryForPage: function queryForPage(modelName, routeParams, userParams) {
            userParams = userParams || {};
            var params = Object.assign({}, userParams || {}, routeParams);

            // TODO: Are routeParams necessary?
            // Rename the ember-route URL params to what the backend API expects, and remove the old param if necessary
            var page = params.page;
            delete params.page;

            var pageSize = params.page_size;
            delete params.page_size;
            if (page) {
                params[this.get('pageParam')] = page;
            }
            if (pageSize) {
                params[this.get('perPageParam')] = pageSize;
            }
            return this.store.query(modelName, params);
        }
    });
});
define('ember-osf/mixins/registration-actions', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule mixins
     */

    /**
     * Controller mixin that implements common actions performed on registrations (and registration drafts).
     * @class RegistrationActionsMixin
     * @extends Ember.Mixin
     */
    exports['default'] = _ember['default'].Mixin.create({
        /**
         * TODO: Document this parameter
         * @property node
         * @type DS.Model
         */
        node: null,
        /**
         * The draft to perform these actions on. If not specified, defaults to the model hook.
         * @property draft
         * @type DS.Model
         */
        draft: null,
        model: null,
        _draft: _ember['default'].computed.or('draft', 'model'),
        /**
         * Update the current registration metadata with new responses. Takes the
         * currentMetadata and recursively merges in the newMetadata.
         *
         * @method _updateMetadata
         * @param {Object} currentMetadata The registration metadata at last save.
         * @param {Object} newMetadata New registration metadata.
         * @return {Object} Returns merge of currentMetadata and newMetadata
         */
        _updateMetadata: function _updateMetadata(currentMetadata, newMetadata) {
            var map = new Map(Object.entries(newMetadata));
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = map.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var items = _step.value;

                    var key = items[0];
                    var value = items[1];
                    if (typeof value === 'object') {
                        var newValue = this._updateMetadata(currentMetadata[key] || {}, value);
                        currentMetadata[key] = newValue;
                    } else {
                        currentMetadata[key] = newMetadata[key];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return currentMetadata;
        },
        /**
         * Build the request payload used when creating a registration from a draft.
         *
         * @method _generateRegistrationPayload
         * @private
         * @param {String} draft ID of the draft registration
         * @param {String} registrationChoice Either "immediate" or "embargo".
         * @param {Date} liftEmbargo if registrationChoice === "embargo", liftEmbargo should be the date to lift the embargo.
         * @return {Object} Returns the attributes portion of the payload for creating a registration.
         */
        _generateRegistrationPayload: function _generateRegistrationPayload(draft, registrationChoice, liftEmbargo) {
            var registrationPayload = {
                draftRegistration: draft.id,
                registrationChoice: registrationChoice
            };
            if (registrationChoice === 'embargo') {
                registrationPayload.liftEmbargo = liftEmbargo;
            }
            return registrationPayload;
        },
        actions: {
            /**
             * Create a draft registration of the node.
             *
             * @method createDraft
             * @param {String} schemaId ID of the chosen registration schema
             * @return {Promise} Returns a promise that resolves to the updated node - with the
             * newly created draft registration.
             */
            createDraft: function createDraft(schemaId) {
                var node = this.get('node');
                var draft = this.store.createRecord('draft-registration', {
                    registrationSupplement: schemaId
                });
                node.get('draftRegistrations').pushObject(draft);
                return node.save();
            },
            /**
             * Delete a draft registration of the node.
             *
             * @method deleteDraft
             * @param {Object} draft Draft to be deleted
             * @return {Promise} Returns a promise that resolves after the deletion of the draft.
             */
            deleteDraft: function deleteDraft(draft) {
                return draft.destroyRecord();
            },
            /**
             * Edit a draft registration of the node
             *
             * @method editDraft
             * @param {Object} updatedMetadata Responses to questions in the registration
             * schema, nested in the format the registration schema expects
             * to questions in the registration schema
             * @return {Promise} Returns a promise that resolves to the updated draft
             */
            editDraft: function editDraft(updatedMetadata) {
                var draft = this.get('_draft');
                var metadataClone = JSON.parse(JSON.stringify(draft.get('registrationMetadata')));
                var updatedRegistrationMetadata = this._updateMetadata(metadataClone, updatedMetadata);
                draft.set('registrationMetadata', updatedRegistrationMetadata);
                return draft.save();
            },
            /**
             * Register a draft (creates a registration from a draft)
             *
             * @method registerDraft
             * @param {Object} updatedMetadata esponses to questions in the registration
             * schema, nested in the format the registration schema expects
             * @param {String} registrationChoice Either "immediate" or "embargo".
             * @param {Date} liftEmbargo if registrationChoice === "embargo", liftEmbargo should be the date to lift the embargo.
             * @return {Promise} Returns a promise that resolves to the updated node with the newly created registration relationship
             */
            registerDraft: function registerDraft(updatedMetadata, registrationChoice, liftEmbargo) {
                var node = this.get('node');
                var draft = this.get('_draft');
                // Update metadata one last time if changes have been made since last save.
                if (Object.keys(updatedMetadata).length !== 0) {
                    this.send('editDraft', updatedMetadata, 'registration');
                }
                var registrationPayload = this._generateRegistrationPayload(draft, registrationChoice, liftEmbargo);
                var registration = this.store.createRecord('registration', registrationPayload);
                node.get('registrations').pushObject(registration);
                return node.save();
            }
        }
    });
});
define('ember-osf/mixins/taggable-mixin', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule mixins
   */

  /**
   * Controller mixin that implements basic tagging functionality. Uses the model defined in the model hook.
   * @class TaggableMixin
   * @extends Ember.Mixin
   */
  exports['default'] = _ember['default'].Mixin.create({
    actions: {
      /**
       * Appends a tag to the current array of tags on the resource.  Copies current
       * list of tags, appends new tag to copy, and then sets tags on the resource
       * as the modified copy.
       *
       * @method addATag
       * @param {DS.Model} model A model instance that supports tags functionality
       * @param {String} tag New tag to be added to list.
       */
      addATag: function addATag(model, tag) {
        var currentTags = model.get('tags').slice(0);
        _ember['default'].A(currentTags);
        currentTags.pushObject(tag);
        model.set('tags', currentTags);
        return model.save();
      },
      /**
       * Removes a tag from the current array of tags on the resource.
       *
       * @method removeATag
       * @param {DS.Model} model A model instance that supports tags functionality
       * @param {String} tag Tag to be removed from list.
       */
      removeATag: function removeATag(model, tag) {
        var currentTags = model.get('tags').slice(0);
        currentTags.splice(currentTags.indexOf(tag), 1);
        model.set('tags', currentTags);
        model.save();
      }
    }
  });
});
define('ember-osf/models/collection', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 collections
     * For field and usage information, see:
     * * https://api.osf.io/v2/docs/#!/v2/Collection_List_GET
     *
     * @class Collection
     */
    exports['default'] = _emberOsfModelsOsfModel['default'].extend({
        title: _emberData['default'].attr('string'),
        dateCreated: _emberData['default'].attr('date'),
        dateModified: _emberData['default'].attr('date'),
        bookmarks: _emberData['default'].attr('boolean'),
        // nodeLinks: DS.hasMany('node-links', {
        //     inverse:null
        // }),
        linkedNodes: _emberData['default'].hasMany('nodes', {
            inverse: null,
            serializerType: 'linked-node'
        })

    });
});
define('ember-osf/models/comment-report', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 comment reports. Primarily accessed via relationship fields.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/Comment_Reports_List_GET
   *
   * @class CommentReport
   */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend({
    category: _emberData['default'].attr('string'),
    text: _emberData['default'].belongsTo('comment')
  });
});
define('ember-osf/models/comment', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 comments. This model may be used with one of several API endpoints. It may be queried directly,
   *  or accessed via relationship fields.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/Comment_Detail_GET
   * * https://api.osf.io/v2/docs/#!/v2/Node_Comments_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Registration_Comments_List_GET
   *
   * @class Comment
   */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend({
    // TODO validation: maxLength
    content: _emberData['default'].attr('string'),
    page: _emberData['default'].attr('string'),

    // Placeholder for comment creation: allow specifying attributes that are sent to the server, but not as attributes
    // Both type and ID will be serialized into relationships field
    targetID: _emberData['default'].attr('string'),
    targetType: _emberData['default'].attr('string'),

    // TODO dynamic belongsTo
    user: _emberData['default'].belongsTo('user'),
    node: _emberData['default'].belongsTo('node'),
    replies: _emberData['default'].hasMany('comment', {
      inverse: null
    }),

    //reports: DS.hasMany('comment-report'),

    dateCreated: _emberData['default'].attr('date'),
    dateModified: _emberData['default'].attr('date'),
    modified: _emberData['default'].attr('boolean'),
    deleted: _emberData['default'].attr('boolean'),
    isAbuse: _emberData['default'].attr('boolean'),
    hasChildren: _emberData['default'].attr('boolean'),
    canEdit: _emberData['default'].attr('boolean')
  });
});
define('ember-osf/models/contributor', ['exports', 'ember', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _ember, _emberData, _emberOsfModelsOsfModel) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 contributors. Primarily accessed via relationship fields.
     * For field and usage information, see:
     * * https://api.osf.io/v2/docs/#!/v2/Node_Contributors_List_GET
     * @class Contributor
     */
    exports['default'] = _emberOsfModelsOsfModel['default'].extend({
        bibliographic: _emberData['default'].attr('boolean'),
        permission: _emberData['default'].attr('string'),

        _userId: null,
        userId: _ember['default'].computed('_userId', {
            get: function get() {
                if (this.get('isNew')) {
                    return this.get('_userId');
                } else {
                    return this.get('id').split('-').pop();
                }
            },
            set: function set(_, userId) {
                this.set('_userId', userId);
            }
        }).volatile(),
        _nodeId: null,
        nodeId: _ember['default'].computed('_nodeId', {
            get: function get() {
                if (this.get('isNew')) {
                    return this.get('_nodeId');
                } else {
                    return this.get('id').split('-').shift();
                }
            },
            set: function set(_, nodeId) {
                this.set('_nodeId', nodeId);
            }
        }).volatile(),

        users: _emberData['default'].belongsTo('user'),
        unregisteredContributor: _emberData['default'].attr('string'),
        index: _emberData['default'].attr('number'),
        fullName: _emberData['default'].attr('string'),
        email: _emberData['default'].attr('string'),
        sendEmail: _emberData['default'].attr('boolean'),

        node: _emberData['default'].belongsTo('node', {
            inverse: 'contributors'
        })
    });
});
define('ember-osf/models/draft-registration', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 draft registrations.
     * This model represents draft registration data and can be accessed as a relationship of a node.
     * For information on how to interact with a node's draft registrations, see:
     * * https://api.osf.io/v2/docs/#!/v2/Node_Draft_Registrations_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Node_Draft_Registration_Detail_GET
     * @class DraftRegistration
     */
    exports['default'] = _emberOsfModelsOsfModel['default'].extend({
        registrationSupplement: _emberData['default'].attr('string'),
        registrationMetadata: _emberData['default'].attr(),
        datetimeInitiated: _emberData['default'].attr('date'),
        datetimeUpdated: _emberData['default'].attr('date'),
        branchedFrom: _emberData['default'].belongsTo('node', {
            inverse: null
        }),
        initiator: _emberData['default'].belongsTo('user', {
            inverse: null
        }),
        registrationSchema: _emberData['default'].belongsTo('metaschema', {
            inverse: null
        })
    });
});
define('ember-osf/models/file-provider', ['exports', 'ember-data', 'ember-osf/models/osf-model', 'ember-osf/mixins/file-item'], function (exports, _emberData, _emberOsfModelsOsfModel, _emberOsfMixinsFileItem) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 file providers. Primarily used in relationship fields.
   * This model is used for basic file provider metadata. To interact with file contents directly, see the `file-manager` service.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/Node_Providers_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Node_Provider_Detail_GET
   * * https://api.osf.io/v2/docs/#!/v2/Registration_Providers_List_GET
   * @class FileProvider
   */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend(_emberOsfMixinsFileItem['default'], {
    isProvider: true,

    name: _emberData['default'].attr('string'),
    kind: _emberData['default'].attr('string'),
    path: _emberData['default'].attr('string'),
    provider: _emberData['default'].attr('string'),
    files: _emberData['default'].hasMany('file'),
    node: _emberData['default'].belongsTo('node')
  });
});
define('ember-osf/models/file-version', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 file versions. Primarily used in relationship fields.
   * This model is used for basic file version metadata. To interact with file contents directly, see the `file-manager` service.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/File_Versions_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/File_Version_Detail_GET
   * @class FileVersion
  */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend({
    size: _emberData['default'].attr('number'),
    contentType: _emberData['default'].attr('string')
  });
});
define('ember-osf/models/file', ['exports', 'ember-data', 'ember-osf/models/osf-model', 'ember-osf/mixins/file-item'], function (exports, _emberData, _emberOsfModelsOsfModel, _emberOsfMixinsFileItem) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 files. This model may be used with one of several API endpoints. It may be queried directly,
   *  or (more commonly) accessed via relationship fields.
   * This model is used for basic file metadata. To interact with file contents directly, see the `file-manager` service.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/File_Detail_GET
   * * https://api.osf.io/v2/docs/#!/v2/Node_Files_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Node_File_Detail_GET
   * * https://api.osf.io/v2/docs/#!/v2/Registration_Files_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Registration_File_Detail_GET
   * @class File
   */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend(_emberOsfMixinsFileItem['default'], {
    _isFileModel: true,

    name: _emberData['default'].attr('string'),
    kind: _emberData['default'].attr('string'),
    guid: _emberData['default'].attr('string'),
    path: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    provider: _emberData['default'].attr('string'),
    materializedPath: _emberData['default'].attr('string'),
    lastTouched: _emberData['default'].attr('date'),
    dateModified: _emberData['default'].attr('date'),
    dateCreated: _emberData['default'].attr('date'),
    extra: _emberData['default'].attr(),
    tags: _emberData['default'].attr(),

    parentFolder: _emberData['default'].belongsTo('file', { inverse: 'files' }),

    // Folder attributes
    files: _emberData['default'].hasMany('file', { inverse: 'parentFolder' }),

    // File attributes
    versions: _emberData['default'].hasMany('file-version'),
    comments: _emberData['default'].hasMany('comment'),
    node: _emberData['default'].belongsTo('node'), // TODO: In the future apiv2 may also need to support this pointing at nodes OR registrations
    checkout: _emberData['default'].attr('string')
  });
});
define('ember-osf/models/institution', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 institutions. This model may be used with one of several API endpoints. It may be queried directly,
     *  or accessed via relationship fields.
     * For field and usage information, see:
     * * https://api.osf.io/v2/docs/#!/v2/Institution_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Institution_Detail_GET
     * * https://api.osf.io/v2/docs/#!/v2/Node_Institutions_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Registration_Institutions_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/User_Institutions_GET
     * @class Institution
     */
    exports['default'] = _emberOsfModelsOsfModel['default'].extend({
        name: _emberData['default'].attr('string'),
        description: _emberData['default'].attr('string'),
        logoPath: _emberData['default'].attr('string'),
        authUrl: _emberData['default'].attr('string'),

        users: _emberData['default'].hasMany('users', {
            inverse: 'affiliatedInstitutions'
        }),
        nodes: _emberData['default'].hasMany('nodes', {
            inverse: 'affiliatedInstitutions'
        }),
        registrations: _emberData['default'].hasMany('registrations', {
            inverse: 'affiliatedInstitutions'
        })
    });
});
define('ember-osf/models/log', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 log entries. This model may be used with one of several API endpoints. It may be queried directly,
     *  or accessed via relationship fields.
     * For field and usage information, see:
     * * https://api.osf.io/v2/docs/#!/v2/Node_Log_Detail_GET
     * * https://api.osf.io/v2/docs/#!/v2/Node_Log_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Registration_Log_List_GET
     * @class Log
     */
    exports['default'] = _emberOsfModelsOsfModel['default'].extend({
        date: _emberData['default'].attr('date'),
        action: _emberData['default'].attr('string'),
        params: _emberData['default'].attr(),
        node: _emberData['default'].belongsTo('node', {
            inverse: null
        }),
        originalNode: _emberData['default'].belongsTo('node', {
            inverse: 'logs'
        }),
        user: _emberData['default'].belongsTo('user'),
        linkedNode: _emberData['default'].belongsTo('node', {
            inverse: null
        }),
        templateNode: _emberData['default'].belongsTo('node', {
            inverse: null
        })
    });
});
define('ember-osf/models/metaschema', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 metaschemas.
   * This model describes metaschemas and can be directly queried.
   * For information on how to retrieve metaschemas see:
   * * https://api.osf.io/v2/docs/#!/v2/Meta_Schemas_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Meta_Schema_Detail_GET
   * @class Metaschema
   */

  exports['default'] = _emberOsfModelsOsfModel['default'].extend({
    name: _emberData['default'].attr('string'),
    schemaVersion: _emberData['default'].attr('number'),
    schema: _emberData['default'].attr()
  });
});
define('ember-osf/models/node-link', ['exports', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _emberData, _emberOsfModelsOsfModel) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 node links. This model may refer to one of several API endpoints. It may be queried directly,
   *  or accessed via relationship fields.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/Node_Links_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Node_Links_Detail_GET
   * * https://api.osf.io/v2/docs/#!/v2/Registration_Node_Links_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/Registration_Node_Links_Detail_GET
   * @class NodeLink
   */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend({
    targetNode: _emberData['default'].belongsTo('node')
  });
});
define('ember-osf/models/node', ['exports', 'ember', 'ember-data', 'ember-osf/models/osf-model', 'ember-osf/mixins/file-item'], function (exports, _ember, _emberData, _emberOsfModelsOsfModel, _emberOsfMixinsFileItem) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 nodes. This model may be used with one of several API endpoints. It may be queried directly,
     *  or accessed via relationship fields.
     * For field and usage information, see:
     * * https://api.osf.io/v2/docs/#!/v2/Node_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Node_Detail_GET
     * * https://api.osf.io/v2/docs/#!/v2/Node_Children_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Linked_Nodes_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Node_Forks_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/User_Nodes_GET
     * @class Node
     */
    exports['default'] = _emberOsfModelsOsfModel['default'].extend(_emberOsfMixinsFileItem['default'], {
        isNode: true,

        title: _emberData['default'].attr('string'),
        description: _emberData['default'].attr('string'),
        category: _emberData['default'].attr('string'),

        currentUserPermissions: _emberData['default'].attr('string'),

        fork: _emberData['default'].attr('boolean'),
        collection: _emberData['default'].attr('boolean'),
        registration: _emberData['default'].attr('boolean'),
        'public': _emberData['default'].attr('boolean'),

        dateCreated: _emberData['default'].attr('date'),
        dateModified: _emberData['default'].attr('date'),

        tags: _emberData['default'].attr(),

        templateFrom: _emberData['default'].attr('string'),

        parent: _emberData['default'].belongsTo('node', {
            inverse: 'children'
        }),
        children: _emberData['default'].hasMany('nodes', {
            inverse: 'parent'
        }),
        affiliatedInstitutions: _emberData['default'].hasMany('institutions', {
            inverse: 'nodes'
        }),
        comments: _emberData['default'].hasMany('comments'),
        contributors: _emberData['default'].hasMany('contributors', {
            allowBulkUpdate: true,
            allowBulkRemove: true,
            inverse: 'node'
        }),

        files: _emberData['default'].hasMany('file-provider'),
        //forkedFrom: DS.belongsTo('node'),
        nodeLinks: _emberData['default'].hasMany('node-links', {
            inverse: null
        }),
        registrations: _emberData['default'].hasMany('registrations', {
            inverse: 'registeredFrom'
        }),

        draftRegistrations: _emberData['default'].hasMany('draft-registrations', {
            inverse: 'branchedFrom'
        }),

        root: _emberData['default'].belongsTo('node', {
            inverse: null
        }),
        logs: _emberData['default'].hasMany('logs'),

        // These are only computeds because maintaining separate flag values on different classes would be a headache TODO: Improve.
        /**
         * Is this a project? Flag can be used to provide template-specific behavior for different resource types.
         * @property isProject
         * @type boolean
         */
        isProject: _ember['default'].computed.equal('constructor.modelName', 'node'),
        /**
         * Is this a registration? Flag can be used to provide template-specific behavior for different resource types.
         * @property isRegistration
         * @type boolean
         */
        isRegistration: _ember['default'].computed.equal('constructor.modelName', 'registration'),

        /**
         * Is this node being viewed through an anonymized, view-only link?
         * @property isAnonymous
         * @type boolean
         */
        isAnonymous: _ember['default'].computed.bool('meta.anonymous'),

        /**
         * Determine whether the specified user ID is a contributor on this node
         * @method isContributor
         * @param {String} userId
         * @returns {boolean} Whether the specified user is a contributor on this node
         */
        isContributor: function isContributor(userId) {
            // Return true if there is at least one matching contributor for this user ID
            if (!userId) {
                return new _ember['default'].RSVP.Promise(function (resolve) {
                    return resolve(false);
                });
            }
            var contribId = this.get('id') + '-' + userId;
            return this.store.findRecord('contributor', contribId).then(function () {
                return true;
            }, function () {
                return false;
            });
        },

        save: function save() {
            // Some duplicate logic from osf-model#save needed to support
            // contributor edits being saved through the node
            // Note: order is important here so _dirtyRelationships gets set by the _super call
            var promise = this._super.apply(this, arguments);
            if (!this.get('_dirtyRelationships.contributors')) {
                this.set('_dirtyRelationships.contributors', {});
            }

            var contributors = this.hasMany('contributors').hasManyRelationship;
            this.set('_dirtyRelationships.contributors.update', contributors.members.list.filter(function (m) {
                return !m.record.get('isNew') && Object.keys(m.record.changedAttributes()).length > 0;
            }));
            // Need to included created contributors even in relationship
            // hasLoaded is false
            this.set('_dirtyRelationships.contributors.create', contributors.members.list.filter(function (m) {
                return m.record.get('isNew');
            }));
            // Contributors are a 'real' delete, not just a de-reference
            this.set('_dirtyRelationships.contributors.delete', this.get('_dirtyRelationships.contributors.remove') || []);
            this.set('_dirtyRelationships.contributors.remove', []);
            return promise;
        },

        addChild: function addChild(title, description, category) {
            var child = this.store.createRecord('node', {
                title: title,
                category: category || 'project',
                description: description || null,
                parent: this
            });

            return child.save();
        },

        addContributor: function addContributor(userId, permission, isBibliographic, sendEmail, fullName, email) {
            var contrib = this.store.createRecord('contributor', {
                permission: permission,
                bibliographic: isBibliographic,
                sendEmail: sendEmail,
                nodeId: this.get('id'),
                userId: userId,
                fullName: fullName,
                email: email
            });

            return contrib.save();
        },

        removeContributor: function removeContributor(contributor) {
            return contributor.destroyRecord();
        },

        updateContributor: function updateContributor(contributor, permissions, bibliographic) {
            if (!_ember['default'].isEmpty(permissions)) contributor.set('permission', permissions);
            if (!_ember['default'].isEmpty(bibliographic)) contributor.set('bibliographic', bibliographic);
            return contributor.save();
        },

        updateContributors: function updateContributors(contributors, permissionsChanges, bibliographicChanges) {
            var _this = this;

            var payload = contributors.filter(function (contrib) {
                return contrib.id in permissionsChanges || contrib.id in bibliographicChanges;
            }).map(function (contrib) {
                if (contrib.id in permissionsChanges) {
                    contrib.set('permission', permissionsChanges[contrib.id]);
                }

                if (contrib.id in bibliographicChanges) {
                    contrib.set('bibliographic', bibliographicChanges[contrib.id]);
                }

                return contrib.serialize({
                    includeId: true,
                    includeUser: false
                }).data;
            });

            return this.store.adapterFor('contributor').ajax(this.get('links.relationships.contributors.links.related.href'), 'PATCH', {
                data: {
                    data: payload
                },
                isBulk: true
            }).then(function (resp) {
                _this.store.pushPayload(resp);
                return contributors;
            });
        }
    });
});
define('ember-osf/models/osf-model', ['exports', 'ember', 'ember-data', 'ember-data-has-many-query'], function (exports, _ember, _emberData, _emberDataHasManyQuery) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Common properties and behaviors shared by all OSF APIv2 models
     *
     * @class OsfModel
     * @public
     */
    exports['default'] = _emberData['default'].Model.extend(_emberDataHasManyQuery['default'].ModelMixin, {
        links: _emberData['default'].attr('links'),
        embeds: _emberData['default'].attr('embed'),

        relationshipLinks: _ember['default'].computed.alias('links.relationships'),
        _dirtyRelationships: null,
        isNewOrDirty: function isNewOrDirty() {
            return this.get('isNew') || Object.keys(this.changedAttributes()).length;
        },
        init: function init() {
            this._super.apply(this, arguments);
            this.set('_dirtyRelationships', _ember['default'].Object.create({}));
        },
        /**
         * Looks up relationship on model and returns hasManyRelationship
         * or belongsToRelationship object.
         *
         * @method resolveRelationship
         * @private
         * @param {String} rel Name of the relationship on the model
         **/
        resolveRelationship: function resolveRelationship(rel) {
            var relation;
            var meta = this[rel].meta();
            if (meta.kind === 'hasMany') {
                relation = this.hasMany(rel).hasManyRelationship;
            } else if (meta.kind === 'belongsTo') {
                relation = this.belongsTo(rel).belongsToRelationship;
            }
            return relation;
        },
        save: function save() {
            var _this = this;

            var options = arguments.length <= 0 || arguments[0] === undefined ? {
                adapterOptions: {}
            } : arguments[0];

            if (options.adapterOptions.nested) {
                return this._super.apply(this, arguments);
            }

            this.set('_dirtyRelationships', {});
            this.eachRelationship(function (rel) {
                var relation = _this.resolveRelationship(rel);
                // TODO(samchrisinger): not sure if hasLoaded is a subset if the hasData state
                if (relation.hasData && relation.hasLoaded) {
                    var canonicalIds = relation.canonicalMembers.list.map(function (member) {
                        return member.record.get('id');
                    });
                    var currentIds = relation.members.list.map(function (member) {
                        return member.record.get('id');
                    });
                    var changes = {
                        create: relation.members.list.filter(function (m) {
                            return m.record.get('isNew');
                        }),
                        add: relation.members.list.filter(function (m) {
                            return !m.record.get('isNew') && canonicalIds.indexOf(m.record.get('id')) === -1;
                        }),
                        remove: relation.canonicalMembers.list.filter(function (m) {
                            return currentIds.indexOf(m.record.get('id')) === -1;
                        })
                    };

                    var other = _this.get('_dirtyRelationships.${rel}') || {};
                    _ember['default'].merge(other, changes);
                    _this.set('_dirtyRelationships.' + rel, other);
                }
            });
            return this._super.apply(this, arguments);
        }
    });
});
define('ember-osf/models/registration', ['exports', 'ember-data', 'ember-osf/models/node'], function (exports, _emberData, _emberOsfModelsNode) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule models
     */

    /**
     * Model for OSF APIv2 registrations. This model may be used with one of several API endpoints. It may be queried directly,
     *  or accessed via relationship fields.
     * For field and usage information, see:
     * * https://api.osf.io/v2/docs/#!/v2/Registration_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/Registration_Detail_GET
     * * https://api.osf.io/v2/docs/#!/v2/Registration_Children_List_GET
     * * https://api.osf.io/v2/docs/#!/v2/User_Registrations_GET
     *
     * @class Registration
     */
    exports['default'] = _emberOsfModelsNode['default'].extend({
        dateRegistered: _emberData['default'].attr('date'),
        pendingRegistrationApproval: _emberData['default'].attr('boolean'),
        embargoEndDate: _emberData['default'].attr('date'),
        pendingEmbargoApproval: _emberData['default'].attr('boolean'),
        withdrawn: _emberData['default'].attr('boolean'),
        withdrawalJustification: _emberData['default'].attr('string'),
        pendingWithdrawal: _emberData['default'].attr('boolean'),

        registrationSupplement: _emberData['default'].attr('string'),
        registeredMeta: _emberData['default'].attr(),

        registeredFrom: _emberData['default'].belongsTo('node', {
            inverse: 'registrations'
        }),
        registeredBy: _emberData['default'].belongsTo('user', {
            inverse: null
        }),
        contributors: _emberData['default'].hasMany('contributors'),
        comments: _emberData['default'].hasMany('comments'),
        draftRegistration: _emberData['default'].attr('string'),
        registrationChoice: _emberData['default'].attr('string'),
        liftEmbargo: _emberData['default'].attr()
        //more relationship
    });
});
define('ember-osf/models/user', ['exports', 'ember', 'ember-data', 'ember-osf/models/osf-model'], function (exports, _ember, _emberData, _emberOsfModelsOsfModel) {
  'use strict';

  /**
   * @module ember-osf
   * @submodule models
   */

  /**
   * Model for OSF APIv2 users. This model may be used with one of several API endpoints. It may be queried directly,
   *  or accessed via relationship fields.
   * For field and usage information, see:
   * * https://api.osf.io/v2/docs/#!/v2/User_List_GET
   * * https://api.osf.io/v2/docs/#!/v2/User_Detail_GET
   * * https://api.osf.io/v2/docs/#!/v2/Institution_User_List_GET
   * @class User
   */
  exports['default'] = _emberOsfModelsOsfModel['default'].extend({
    fullName: _emberData['default'].attr('string'),
    givenName: _emberData['default'].attr('string'),
    middleNames: _emberData['default'].attr(),
    familyName: _emberData['default'].attr('string'),

    dateRegistered: _emberData['default'].attr('date'),
    // email
    username: _emberData['default'].attr('string'),

    nodes: _emberData['default'].hasMany('nodes'),
    registrations: _emberData['default'].hasMany('registrations'),

    affiliatedInstitutions: _emberData['default'].hasMany('institutions', {
      inverse: 'users'
    }),

    // Calculated fields
    profileURL: _ember['default'].computed.alias('links.html'),
    profileImage: _ember['default'].computed.alias('links.profile_image')
  });
});
define('ember-osf/serializers/collection', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/comment-report', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/comment', ['exports', 'ember', 'ember-osf/serializers/osf-serializer'], function (exports, _ember, _emberOsfSerializersOsfSerializer) {
    'use strict';

    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({
        serialize: function serialize(snapshot, options) {
            // jshint ignore:line
            // Add relationships field to identify comment target
            var serialized = this._super.apply(this, arguments);

            // For POST requests specifically, two additional fields are needed
            var targetID = snapshot.record.get('targetID');
            var targetType = snapshot.record.get('targetType');
            // TODO: Find a better way to detect request type, so this can enforce fields that are needed for creation (but not for editing)
            //Ember.assert('Must provide target ID', targetID);
            //Ember.assert('Must provide target type', targetType);

            if (targetID && targetType) {
                serialized.data.relationships = {
                    target: {
                        data: {
                            id: targetID,
                            type: targetType
                        }
                    }
                };
            }
            return serialized;
        },
        extractRelationships: function extractRelationships(modelClass, resourceHash) {
            // TODO: remove when https://openscience.atlassian.net/browse/OSF-6646 is done
            resourceHash = this._super(modelClass, resourceHash);
            resourceHash.replies.links.related = _ember['default'].copy(resourceHash.replies.links.self);
            return resourceHash;
        }
    });
});
define('ember-osf/serializers/contributor', ['exports', 'ember', 'ember-osf/serializers/osf-serializer'], function (exports, _ember, _emberOsfSerializersOsfSerializer) {
    'use strict';

    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({
        serialize: function serialize(snapshot) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            // Restore relationships to serialized data
            var serialized = this._super(snapshot, options);

            var opts = {};

            if (snapshot.record.get('isNew')) {
                opts = {
                    includeUser: true
                };
            }
            _ember['default'].merge(opts, options);

            // APIv2 expects contributor information to be nested under relationships.
            if (opts.includeUser) {
                serialized.data.relationships = {
                    users: {
                        data: {
                            id: snapshot.record.get('userId'),
                            type: 'users'
                        }
                    }
                };
            }
            return serialized;
        }
    });
});
define('ember-osf/serializers/draft-registration', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/file-contents', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/file-provider', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
    'use strict';

    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({
        modelNameFromPayloadKey: function modelNameFromPayloadKey() {
            return 'file-provider';
        }
    });
});
define('ember-osf/serializers/file-version', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/file', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
    'use strict';

    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({

        /*
         * `checkout` is included on the `file` payload as a relationship to a user,
         * but when checking a file in/out, the API expects a `checkout` attribute
         * containing only the user ID.
         *
         * This override lets us always treat `checkout` as a string attribute.
         */
        normalize: function normalize(modelClass, resourceHash) {
            var checkoutRel = resourceHash.relationships.checkout;
            if (checkoutRel) {
                var id = checkoutRel.links.related.meta.id;
                resourceHash.attributes.checkout = id;
                delete resourceHash.relationships.checkout;
            }
            return this._super(modelClass, resourceHash);
        }
    });
});
define('ember-osf/serializers/institution', ['exports', 'ember-osf/serializers/osf-serializer', 'ember-inflector'], function (exports, _emberOsfSerializersOsfSerializer, _emberInflector) {
    'use strict';

    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({
        serializeIntoHash: function serializeIntoHash(hash, typeClass, snapshot, options) {
            if (options.forRelationship) {
                hash.data = [{
                    id: snapshot.record.get('id'),
                    type: (0, _emberInflector.pluralize)(typeClass.modelName)
                }];
                return hash;
            }
            return this._super(hash, typeClass, snapshot, options);
        }
    });
});
define('ember-osf/serializers/linked-node', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
    'use strict';

    // TODO Dawn - a linked-node serializer is actually using the node model - Ember doesn't like this.
    // Need to figure out a better place to create the request.
    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({
        serializeIntoHash: function serializeIntoHash(hash, typeClass, snapshot, options) {
            if (options.forRelationship) {
                hash.data = [{
                    id: snapshot.record.get('id'),
                    type: 'linked_nodes'
                }];
                return hash;
            }
            return this._super(hash, typeClass, snapshot, options);
        }
    });
});
define('ember-osf/serializers/metaschema', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/node-link', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
    'use strict';

    exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({
        serialize: function serialize(snapshot, options) {
            var serialized = this._super(snapshot, options);
            // APIv2 expects node link information to be nested under relationships.
            serialized.data.relationships = {
                nodes: {
                    data: {
                        id: snapshot.record.target,
                        type: 'nodes'
                    }
                }
            };
            return serialized;
        }
    });
});
define('ember-osf/serializers/node', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/osf-serializer', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule serializers
     */

    /**
     * Base serializer class for all OSF APIv2 endpoints. Provides custom behaviors for embeds, relationships, and pagination.
     * @class OsfSerializer
     * @extends DS.JSONAPISerializer
     */
    exports['default'] = _emberData['default'].JSONAPISerializer.extend({
        attrs: {
            links: {
                serialize: false
            },
            embeds: {
                serialize: false
            }
        },

        /**
         * Extract information about records embedded inside this request
         * @method _extractEmbeds
         * @param {Object} resourceHash
         * @return {Array}
         * @private
         */
        _extractEmbeds: function _extractEmbeds(resourceHash) {
            var _this = this;

            if (!resourceHash.embeds) {
                return []; // Nothing to do
            }
            var included = [];
            resourceHash.relationships = resourceHash.relationships || {};
            for (var embedded in resourceHash.embeds) {
                if (!(embedded || resourceHash.embeds[embedded])) {
                    continue;
                }
                //TODO Pagination probably breaks here
                var data = resourceHash.embeds[embedded].data || resourceHash.embeds[embedded];
                if (Array.isArray(data)) {
                    included = included.concat(data);
                } else {
                    included.push(data);
                }
                resourceHash.embeds[embedded].type = embedded;
                // Merges links returned from embedded object with relationship links, so all returned links are available.
                var embeddedLinks = resourceHash.embeds[embedded].links || {};
                resourceHash.embeds[embedded].links = Object.assign(embeddedLinks, resourceHash.relationships[embedded].links);
                resourceHash.relationships[embedded] = resourceHash.embeds[embedded];
                resourceHash.relationships[embedded].is_embedded = true;
            }
            delete resourceHash.embeds;
            //Recurse in, includeds are only processed on the top level. Embeds are nested.
            return included.concat(included.reduce(function (acc, include) {
                return acc.concat(_this._extractEmbeds(include));
            }, []));
        },

        _mergeFields: function _mergeFields(resourceHash) {
            // ApiV2 `links` exist outside the attributes field; make them accessible to the data model
            if (resourceHash.links) {
                // TODO: Should also test whether model class defines a links field
                resourceHash.attributes.links = resourceHash.links;
            }
            this._extractEmbeds(resourceHash);

            if (resourceHash.relationships && resourceHash.attributes.links) {
                resourceHash.attributes.links = _ember['default'].$.extend(resourceHash.attributes.links, {
                    relationships: resourceHash.relationships
                });
            }
            return resourceHash;
        },

        extractAttributes: function extractAttributes(modelClass, resourceHash) {
            resourceHash = this._mergeFields(resourceHash);
            return this._super(modelClass, resourceHash);
        },

        keyForAttribute: function keyForAttribute(key) {
            return _ember['default'].String.underscore(key);
        },

        keyForRelationship: function keyForRelationship(key) {
            return _ember['default'].String.underscore(key);
        },

        serialize: function serialize(snapshot, options) {
            var serialized = this._super(snapshot, options);
            serialized.data.type = _ember['default'].String.underscore(serialized.data.type);
            // Only send dirty attributes in request
            if (!snapshot.record.get('isNew')) {
                for (var attribute in serialized.data.attributes) {
                    if (!(_ember['default'].String.camelize(attribute) in snapshot.record.changedAttributes())) {
                        delete serialized.data.attributes[attribute];
                    }
                }
            }
            // Don't send relationships to the server; this can lead to 500 errors.
            delete serialized.data.relationships;
            return serialized;
        },

        serializeAttribute: function serializeAttribute(snapshot, json, key, attribute) {
            // jshint ignore:line
            // In certain cases, a field may be omitted from the server payload, but have a value (undefined)
            // when serialized from the model. (eg node.template_from)
            // Omit fields with a value of undefined before sending to the server. (but still allow null to be sent)
            var val = snapshot.attr(key);
            if (val !== undefined) {
                this._super.apply(this, arguments);
            }
        },

        normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {
            // jshint ignore:line
            // Ember data does not yet support pagination. For any request that returns more than one result, extract
            //  links.meta from the payload links section, and add to the model metadata manually.
            var documentHash = this._super.apply(this, arguments);
            documentHash.meta = documentHash.meta || {};
            documentHash.meta.pagination = _ember['default'].get(payload || {}, 'links.meta');
            documentHash.meta.total = Math.ceil(documentHash.meta.pagination.total / documentHash.meta.pagination.per_page);
            return documentHash;
        }
    });
});
define('ember-osf/serializers/registration', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/serializers/user', ['exports', 'ember-osf/serializers/osf-serializer'], function (exports, _emberOsfSerializersOsfSerializer) {
  'use strict';

  exports['default'] = _emberOsfSerializersOsfSerializer['default'].extend({});
});
define('ember-osf/services/current-user', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule services
     */

    /**
     * Access information about the currently logged in user
     *
     * @class current-user
     * @extends Ember.Service
     */
    exports['default'] = _ember['default'].Service.extend({
        store: _ember['default'].inject.service(),
        session: _ember['default'].inject.service(),
        /**
         * If logged in, return the ID of the current user, else return null.
         *
         * @property currentUserId
         * @type {String|null}
         */
        currentUserId: _ember['default'].computed('session.data.authenticated', function () {
            var session = this.get('session');
            if (session.get('isAuthenticated')) {
                return session.get('data.authenticated.id');
            } else {
                return null;
            }
        }),
        /**
         * Fetch information about the currently logged in user. If no user is logged in, this method returns a rejected promise.
         * @method load
         * @return {Promise}
         */
        load: function load() {
            var _this = this;

            return new _ember['default'].RSVP.Promise(function (resolve, reject) {
                var currentUserId = _this.get('currentUserId');
                if (currentUserId) {
                    var currentUser = _this.get('store').peekRecord('user', currentUserId);
                    if (currentUser) {
                        resolve(currentUser);
                    } else {
                        _this.get('store').findRecord('user', currentUserId).then(function (user) {
                            return resolve(user);
                        }, reject);
                    }
                } else {
                    reject();
                }
            });
        }
    });
});
define('ember-osf/services/file-manager', ['exports', 'ember', 'ember-get-config', 'ember-osf/utils/ajax-helpers'], function (exports, _ember, _emberGetConfig, _emberOsfUtilsAjaxHelpers) {
    'use strict';

    /**
     * @module ember-osf
     * @submodule services
     */

    /**
     * An Ember service for doing things to files.
     * Essentially a wrapper for the Waterbutler API.
     * http://waterbutler.readthedocs.io/
     *
     * @class file-manager
     * @extends Ember.Service
     */
    exports['default'] = _ember['default'].Service.extend({
        session: _ember['default'].inject.service(),
        store: _ember['default'].inject.service(),

        /**
         * Get a URL to download the given file.
         *
         * @method getDownloadUrl
         * @param {file} file A `file` model
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the URL.
         * @param {Object} [options.query.version] `file-version` ID
         * @return {String} Download URL
         */
        getDownloadUrl: function getDownloadUrl(file) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var url = file.get('links.download');

            if (!options.query) {
                options.query = {};
            }
            if (file.get('isFolder')) {
                options.query.zip = '';
            }
            var queryString = _ember['default'].$.param(options.query);
            if (queryString.length) {
                return url + '?' + queryString;
            } else {
                return url;
            }
        },

        /**
         * Download the contents of the given file.
         *
         * @method getContents
         * @param {file} file A `file` model with `isFolder == false`.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves to the file contents or rejects
         * with an error message.
         */
        getContents: function getContents(file) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var url = file.get('links.download');
            return this._waterbutlerRequest('GET', url, options);
        },

        /**
         * Upload a new version of an existing file.
         *
         * @method updateContents
         * @param {file} file A `file` model with `isFolder == false`.
         * @param {Object} contents A native `File` object or another appropriate
         * payload for uploading.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves to the updated `file` model or
         * rejects with an error message.
         */
        updateContents: function updateContents(file, contents) {
            var _this = this;

            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            var url = file.get('links').upload;
            if (!options.query) {
                options.query = {};
            }
            options.query.kind = 'file';
            options.data = contents;

            var p = this._waterbutlerRequest('PUT', url, options);
            return p.then(function () {
                return _this._reloadModel(file);
            });
        },

        /**
         * Check out a file, so only the current user can modify it.
         *
         * @method checkOut
         * @param {file} file `file` model with `isFolder == false`.
         * @return {Promise} Promise that resolves on success or rejects with an
         * error message.
         */
        checkOut: function checkOut(file) {
            var _this2 = this;

            return _ember['default'].run(function () {
                var userID = _this2.get('session.data.authenticated.id');
                file.set('checkout', userID);
                return file.save()['catch'](function (error) {
                    file.rollbackAttributes();
                    throw error;
                });
            });
        },

        /**
         * Check in a file, so anyone with permission can modify it.
         *
         * @method checkOut
         * @param {file} file `file` model with `isFolder == false`.
         * @return {Promise} Promise that resolves on success or rejects with an
         * error message.
         */
        checkIn: function checkIn(file) {
            return _ember['default'].run(function () {
                file.set('checkout', null);
                return file.save()['catch'](function (error) {
                    file.rollbackAttributes();
                    throw error;
                });
            });
        },

        /**
         * Create a new folder
         *
         * @method addSubfolder
         * @param {file} folder Location of the new folder, a `file` model with
         * `isFolder == true`.
         * @param {String} name Name of the folder to create.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves to the new folder's model or
         * rejects with an error message.
         */
        addSubfolder: function addSubfolder(folder, name) {
            var _this3 = this;

            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            var url = folder.get('links').new_folder;
            if (!options.query) {
                options.query = {};
            }
            options.query.name = name;
            options.query.kind = 'folder';

            // HACK: This is the only WB link that already has a query string
            var queryStart = url.search(/\?kind=folder$/);
            if (queryStart > -1) {
                url = url.slice(0, queryStart);
            }
            var p = this._waterbutlerRequest('PUT', url, options);
            return p.then(function () {
                return _this3._getNewFileInfo(folder, name);
            });
        },

        /**
         * Upload a file
         *
         * @method uploadFile
         * @param {file} folder Location of the new file, a `file` model with
         * `isFolder == true`.
         * @param {String} name Name of the new file.
         * @param {Object} contents A native `File` object or another appropriate
         * payload for uploading.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves to the new file's model or
         * rejects with an error message.
         */
        uploadFile: function uploadFile(folder, name, contents) {
            var _this4 = this;

            var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

            var url = folder.get('links').upload;
            options.data = contents;
            if (!options.query) {
                options.query = {};
            }
            options.query.name = name;
            options.query.kind = 'file';

            var p = this._waterbutlerRequest('PUT', url, options);
            return p.then(function () {
                return _this4._getNewFileInfo(folder, name);
            });
        },

        /**
         * Rename a file or folder
         *
         * @method rename
         * @param {file} file `file` model to rename.
         * @param {String} newName New name for the file.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves to the updated `file` model or
         * rejects with an error message.
         */
        rename: function rename(file, newName) {
            var _this5 = this;

            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            var url = file.get('links').move;
            options.data = JSON.stringify({ action: 'rename', rename: newName });

            var p = this._waterbutlerRequest('POST', url, options);
            return p.then(function () {
                return _this5._reloadModel(file);
            });
        },

        /**
         * Move (or copy) a file or folder
         *
         * @method move
         * @param {file} file `file` model to move.
         * @param {file} targetFolder Where to move the file, a `file` model with
         * `isFolder == true`.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @param {String} [options.data.rename] If specified, also rename the file
         * to the given name.
         * @param {String} [options.data.resource] Optional node ID. If specified,
         * move the file to that node.
         * @param {String} [options.data.provider] Optional provider name. If
         * specified, move the file to that provider.
         * @param {String} [options.data.action='move'] Either 'move' or 'copy'.
         * @param {String} [options.data.conflict='replace'] Specifies what to do if
         * a file of the same name already exists in the target folder. If 'keep',
         * rename this file to avoid conflict. If replace, the existing file is
         * destroyed.
         * @return {Promise} Promise that resolves to the the updated (or newly
         * created) `file` model or rejects with an error message.
         */
        move: function move(file, targetFolder) {
            var _this6 = this;

            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            var url = file.get('links').move;
            var defaultData = {
                action: 'move',
                path: targetFolder.get('path')
            };
            _ember['default'].$.extend(defaultData, options.data);
            options.data = JSON.stringify(defaultData);

            var p = this._waterbutlerRequest('POST', url, options);
            return p.then(function (wbResponse) {
                var name = wbResponse.data.attributes.name;
                return _this6._getNewFileInfo(targetFolder, name);
            });
        },

        /**
         * Copy a file or folder.
         * Convenience method for `move` with `options.copy == true`.
         *
         * @method copy
         * @param {file} file `file` model to copy.
         * @param {file} targetFolder Where to copy the file, a `file` model with
         * `isFolder == true`.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @param {String} [options.data.rename] If specified, also rename the file
         * to the given name.
         * @param {String} [options.data.resource] Optional node ID. If specified,
         * move the file to that node.
         * @param {String} [options.data.provider] Optional provider name. If
         * specified, move the file to that provider.
         * @param {String} [options.data.conflict='replace'] Specifies what to do if
         * a file of the same name already exists in the target folder. If 'keep',
         * rename this file to avoid conflict. If replace, the existing file is
         * destroyed.
         * @return {Promise} Promise that resolves to the the new `file` model or
         * rejects with an error message.
         */
        copy: function copy(file, targetFolder) {
            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            if (!options.data) {
                options.data = {};
            }
            options.data.action = 'copy';
            return this.move(file, targetFolder, options);
        },

        /**
         * Delete a file or folder
         *
         * @method deleteFile
         * @param {file} file `file` model to delete.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves on success or rejects with an
         * error message.
         */
        deleteFile: function deleteFile(file) {
            var _this7 = this;

            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var url = file.get('links')['delete'];
            var p = this._waterbutlerRequest('DELETE', url, options);
            return p.then(function () {
                return file.get('parentFolder').then(function (parent) {
                    if (parent) {
                        return _this7._reloadModel(parent.get('files'));
                    } else {
                        _this7.get('store').unloadRecord(file);
                        return true;
                    }
                });
            });
        },

        /**
         * Check whether the given url corresponds to a model that is currently
         * reloading after a file operation.
         *
         * Used by `mixin:file-cache-bypass` to avoid a race condition where the
         * cache might return stale, inaccurate data.
         *
         * @method isReloadingUrl
         * @param {String} url
         * @return {Boolean} `true` if `url` corresponds to a pending reload on a
         * model immediately after a Waterbutler action, otherwise `false`.
         */
        isReloadingUrl: function isReloadingUrl(url) {
            return !!this._reloadingUrls[url];
        },

        /**
         * Hash set of URLs for `model.reload()` calls that are still pending.
         *
         * @property _reloadingUrls
         * @private
         */
        _reloadingUrls: {},

        /**
         * Force-reload a model from the API.
         *
         * @method _reloadModel
         * @private
         * @param {Object} model `file` model or a `files` relationship
         * @return {Promise} Promise that resolves to the reloaded model or
         * rejects with an error message.
         */
        _reloadModel: function _reloadModel(model) {
            var _this8 = this;

            // If it's a file model, it has its own URL in `links.info`.
            var reloadUrl = model.get('links.info');
            if (!reloadUrl) {
                // If it's not a file model, it must be a relationship.
                // HACK: Looking at Ember's privates.
                reloadUrl = model.get('content.relationship.link');
            }
            if (reloadUrl) {
                this._reloadingUrls[reloadUrl] = true;
            }

            return model.reload().then(function (freshModel) {
                if (reloadUrl) {
                    delete _this8._reloadingUrls[reloadUrl];
                }
                return freshModel;
            })['catch'](function (error) {
                if (reloadUrl) {
                    delete _this8._reloadingUrls[reloadUrl];
                }
                throw error;
            });
        },

        /**
         * Make a Waterbutler request
         *
         * @method _waterbutlerRequest
         * @private
         * @param {String} method HTTP method for the request.
         * @param {String} url Waterbutler URL.
         * @param {Object} [options] Options hash
         * @param {Object} [options.query] Key-value hash of query parameters to
         * add to the request URL.
         * @param {Object} [options.data] Payload to be sent.
         * @return {Promise} Promise that resolves to the data returned from the
         * server on success, or rejects with an error message.
         */
        _waterbutlerRequest: function _waterbutlerRequest(method, url) {
            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            if (options.query) {
                var queryString = _ember['default'].$.param(options.query);
                url = url + '?' + queryString;
            }

            var headers = {};
            var authType = _emberGetConfig['default']['ember-simple-auth'].authorizer;
            this.get('session').authorize(authType, function (headerName, content) {
                headers[headerName] = content;
            });

            return new _ember['default'].RSVP.Promise(function (resolve, reject) {
                var p = (0, _emberOsfUtilsAjaxHelpers.authenticatedAJAX)({
                    url: url,
                    method: method,
                    headers: headers,
                    data: options.data,
                    processData: false
                });
                p.done(function (data) {
                    return resolve(data);
                });
                p.fail(function (_, __, error) {
                    return reject(error);
                });
            });
        },

        /**
         * Get the `file` model for a newly created file.
         *
         * @method _getNewFileInfo
         * @private
         * @param {file} parentFolder Model for the new file's parent folder.
         * @param {String} name Name of the new file.
         * @return {Promise} Promise that resolves to the new file's model or
         * rejects with an error message.
         */
        _getNewFileInfo: function _getNewFileInfo(parentFolder, name) {
            var p = parentFolder.query('files', {
                'filter[name]': name
            });
            return p.then(function (files) {
                var file = files.findBy('name', name);
                if (!file) {
                    throw 'Cannot load metadata for uploaded file.';
                }
                return file;
            });
        }
    });
});
define('ember-osf/transforms/embed', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    'use strict';

    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            return serialized;
        },

        serialize: function serialize(deserialized) {
            return deserialized;
        }
    });
});
define('ember-osf/transforms/links', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    /*
     An empty stub. For now just leave links as a vanilla JS Object
    */
    'use strict';

    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            return serialized;
        },
        serialize: function serialize(deserialized) {
            return deserialized;
        }
    });
});
define('ember-osf/utils/ajax-helpers', ['exports', 'ember', 'ember-get-config'], function (exports, _ember, _emberGetConfig) {
    'use strict';

    /**
     * Helper functions for asynchronous behavior
     *
     * @module ember-osf
     * @module utils
     */

    /**
     * Helper functions to support AJAX requests
     * @class ajax-helpers
     */

    /**
     * Performs an AJAX request with any additional authorization config as needed for the configured authorization type.
     * Allows manual AJAX requests to be authorization-agnostic when using this addon.
     *
     * Primarily used to set XHR flags on manual AJAX requests, for cookie based authorization.
     * @method authenticatedAJAX
     * @param {Object} options
     * @return {Promise}
     */
    function authenticatedAJAX(options) {
        if (_emberGetConfig['default'].authorizationType === 'cookie') {
            _ember['default'].merge(options, {
                xhrFields: {
                    withCredentials: true
                }
            });
        }
        return _ember['default'].$.ajax(options);
    }
    exports.authenticatedAJAX = authenticatedAJAX;
});
define('ember-osf/utils/auth', ['exports', 'ember', 'ember-get-config'], function (exports, _ember, _emberGetConfig) {
    'use strict';

    var _slicedToArray = (function () {
        function sliceIterator(arr, i) {
            var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;_e = err;
            } finally {
                try {
                    if (!_n && _i['return']) _i['return']();
                } finally {
                    if (_d) throw _e;
                }
            }return _arr;
        }return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError('Invalid attempt to destructure non-iterable instance');
            }
        };
    })();

    // jscs:disable disallowArrayDestructuringReturn

    /**
     * @module ember-osf
     * @submodule utils
     */

    /**
     * @class auth
     */

    /**
     * Retrieve the correct URL for OAuth 2.0 authentication in the OSF, including any additional configurable parameters
     * @private
     * @method getOAuthUrl
     * @param {string} nextUri Where to send the browser after a successful login request
     * @return {string}
     */
    function getOAuthUrl(nextUri) {
        // OAuth requires that redirect URI match what was registered, exactly. We may need a parameter to signify next
        //   transition, if the user wants to return to ember at the point where they left off before needing to log in.
        // For now, we will put this in the `state` parameter (always returned unchanged) and implement that functionality in ember later.
        // To avoid abuse, the application should forcibly truncate state, eg make it relative to the application rootURL
        //   (should not be possible to use the ember app as just an external redirect service)
        var uri = _emberGetConfig['default'].OSF.oauthUrl + '?response_type=token&scope=' + _emberGetConfig['default'].OSF.scope + '&client_id=' + _emberGetConfig['default'].OSF.clientId + '&redirect_uri=' + encodeURIComponent(_emberGetConfig['default'].OSF.redirectUri);
        if (nextUri) {
            uri += '&state=' + encodeURIComponent(nextUri);
        }
        return uri;
    }

    /**
     * Retrieve the correct URL for cookie-based in the OSF, including any additional configurable parameters
     * @private
     * @method getCookieAuthUrl
     * @param {string} nextUri Where to send the browser after a successful login request
     * @return {string}
     */
    function getCookieAuthUrl(nextUri) {
        nextUri = nextUri || _emberGetConfig['default'].OSF.redirectUri;
        var loginUri = _emberGetConfig['default'].OSF.url + 'login?next=' + encodeURIComponent(nextUri);
        return _emberGetConfig['default'].OSF.cookieLoginUrl + '?service=' + encodeURIComponent(loginUri);
    }

    /**
     * Return the appropriate auth URL for the specified authorization mechanism (as specified in application configuration)
     * Currently supports `token` and `cookie` based authorization
     * @public
     * @method getAuthUrl
     * @return {string}
     */
    function getAuthUrl() {
        var authType = _emberGetConfig['default'].authorizationType;
        if (authType === 'token') {
            return getOAuthUrl.apply(undefined, arguments);
        } else if (authType === 'cookie') {
            return getCookieAuthUrl.apply(undefined, arguments);
        } else {
            throw new _ember['default'].Error('Unrecognized authorization type: ' + authType);
        }
    }

    function getTokenFromHash(hash) {
        hash = hash.substring(1).split('&');
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = hash[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var chunk = _step.value;

                var _chunk$split = chunk.split('=');

                var _chunk$split2 = _slicedToArray(_chunk$split, 2);

                var key = _chunk$split2[0];
                var value = _chunk$split2[1];

                if (key === 'access_token') {
                    return value;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return null;
    }

    exports.getAuthUrl = getAuthUrl;
    exports.getTokenFromHash = getTokenFromHash;
});
define('ember-osf/utils/load-relationship', ['exports', 'ember'], function (exports, _ember) {
    'use strict';

    exports['default'] = loadAll;

    function loadAll(model, relationship, dest) {
        var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

        var page = options.page || 1;
        var query = {
            'page[size]': 10,
            page: page
        };
        query = _ember['default'].merge(query, options || {});
        _ember['default'].set(model, 'query-params', query);

        return model.query(relationship, query).then(function (results) {
            dest.pushObjects(results.toArray());

            var total = results.meta.pagination.total;
            var pageSize = results.meta.pagination.per_page;
            var remaining = total - page * pageSize;
            if (remaining > 0) {
                query.page = page + 1;
                query['page[size]'] = pageSize;
                return loadAll(model, relationship, dest, query);
            }
        });
    }
});
define('ember-radio-buttons/components/radio-button', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = _ember['default'].Component.extend({
    tagName: 'input',
    type: 'radio',
    attributeBindings: ['type', 'htmlChecked:checked', 'value', 'name', 'disabled'],

    value: null,
    checked: null,

    htmlChecked: _ember['default'].computed('value', 'checked', function () {
      return this.get('value') === this.get('checked');
    }),

    change: function change() {
      this.set('checked', this.get('value'));
    },

    _setCheckedProp: function _setCheckedProp() {
      if (!this.$()) {
        return;
      }
      this.$().prop('checked', this.get('htmlChecked'));
    },

    _updateElementValue: _ember['default'].observer('htmlChecked', function () {
      _ember['default'].run.once(this, '_setCheckedProp');
    })
  });
});
define('ember-radio-buttons/index', ['exports', 'ember-radio-buttons/components/radio-button'], function (exports, _emberRadioButtonsComponentsRadioButton) {
  'use strict';

  exports['default'] = _emberRadioButtonsComponentsRadioButton['default'];
});
define('ember-resolver/container-debug-adapter', ['exports', 'ember', 'ember-resolver/utils/module-registry'], function (exports, _ember, _emberResolverUtilsModuleRegistry) {
  'use strict';

  var ContainerDebugAdapter = _ember['default'].ContainerDebugAdapter;

  var ModulesContainerDebugAdapter = null;

  function getPod(type, key, prefix) {
    var match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));
    if (match) {
      return match[1];
    }
  }

  // Support Ember < 1.5-beta.4
  // TODO: Remove this after 1.5.0 is released
  if (typeof ContainerDebugAdapter !== 'undefined') {

    /*
     * This module defines a subclass of Ember.ContainerDebugAdapter that adds two
     * important features:
     *
     *  1) is able provide injections to classes that implement `extend`
     *     (as is typical with Ember).
     */

    ModulesContainerDebugAdapter = ContainerDebugAdapter.extend({
      _moduleRegistry: null,

      init: function init() {
        this._super.apply(this, arguments);

        if (!this._moduleRegistry) {
          this._moduleRegistry = new _emberResolverUtilsModuleRegistry['default']();
        }
      },

      /**
        The container of the application being debugged.
        This property will be injected
        on creation.
         @property container
        @default null
      */

      /**
        The resolver instance of the application
        being debugged. This property will be injected
        on creation.
         @property resolver
        @default null
      */

      /**
        Returns true if it is possible to catalog a list of available
        classes in the resolver for a given type.
         @method canCatalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {boolean} whether a list is available for this type.
      */
      canCatalogEntriesByType: function canCatalogEntriesByType() /* type */{
        return true;
      },

      /**
        Returns the available classes a given type.
         @method catalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {Array} An array of classes.
      */
      catalogEntriesByType: function catalogEntriesByType(type) {
        var moduleNames = this._moduleRegistry.moduleNames();
        var types = _ember['default'].A();

        var prefix = this.namespace.modulePrefix;

        for (var i = 0, l = moduleNames.length; i < l; i++) {
          var key = moduleNames[i];

          if (key.indexOf(type) !== -1) {
            // Check if it's a pod module
            var name = getPod(type, key, this.namespace.podModulePrefix || prefix);
            if (!name) {
              // Not pod
              name = key.split(type + 's/').pop();

              // Support for different prefix (such as ember-cli addons).
              // Uncomment the code below when
              // https://github.com/ember-cli/ember-resolver/pull/80 is merged.

              //var match = key.match('^/?(.+)/' + type);
              //if (match && match[1] !== prefix) {
              // Different prefix such as an addon
              //name = match[1] + '@' + name;
              //}
            }
            types.addObject(name);
          }
        }
        return types;
      }
    });
  }

  exports['default'] = ModulesContainerDebugAdapter;
});
define('ember-resolver/index', ['exports', 'ember-resolver/resolver'], function (exports, _emberResolverResolver) {
  'use strict';

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberResolverResolver['default'];
    }
  });
});
define('ember-resolver/resolver', ['exports', 'ember', 'ember-resolver/utils/module-registry', 'ember-resolver/utils/class-factory', 'ember-resolver/utils/make-dictionary'], function (exports, _ember, _emberResolverUtilsModuleRegistry, _emberResolverUtilsClassFactory, _emberResolverUtilsMakeDictionary) {
  /*globals require */

  'use strict';

  /*
   * This module defines a subclass of Ember.DefaultResolver that adds two
   * important features:
   *
   *  1) The resolver makes the container aware of es6 modules via the AMD
   *     output. The loader's _moduleEntries is consulted so that classes can be
   *     resolved directly via the module loader, without needing a manual
   *     `import`.
   *  2) is able to provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */

  var _Ember$String = _ember['default'].String;
  var underscore = _Ember$String.underscore;
  var classify = _Ember$String.classify;
  var get = _ember['default'].get;
  var DefaultResolver = _ember['default'].DefaultResolver;

  function parseName(fullName) {
    /*jshint validthis:true */

    if (fullName.parsedName === true) {
      return fullName;
    }

    var prefix, type, name;
    var fullNameParts = fullName.split('@');

    // HTMLBars uses helper:@content-helper which collides
    // with ember-cli namespace detection.
    // This will be removed in a future release of HTMLBars.
    if (fullName !== 'helper:@content-helper' && fullNameParts.length === 2) {
      var prefixParts = fullNameParts[0].split(':');

      if (prefixParts.length === 2) {
        prefix = prefixParts[1];
        type = prefixParts[0];
        name = fullNameParts[1];
      } else {
        var nameParts = fullNameParts[1].split(':');

        prefix = fullNameParts[0];
        type = nameParts[0];
        name = nameParts[1];
      }
    } else {
      fullNameParts = fullName.split(':');
      type = fullNameParts[0];
      name = fullNameParts[1];
    }

    var fullNameWithoutType = name;
    var namespace = get(this, 'namespace');
    var root = namespace;

    return {
      parsedName: true,
      fullName: fullName,
      prefix: prefix || this.prefix({ type: type }),
      type: type,
      fullNameWithoutType: fullNameWithoutType,
      name: name,
      root: root,
      resolveMethodName: "resolve" + classify(type)
    };
  }

  function resolveOther(parsedName) {
    /*jshint validthis:true */

    _ember['default'].assert('`modulePrefix` must be defined', this.namespace.modulePrefix);

    var normalizedModuleName = this.findModuleName(parsedName);

    if (normalizedModuleName) {
      var defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);

      if (defaultExport === undefined) {
        throw new Error(" Expected to find: '" + parsedName.fullName + "' within '" + normalizedModuleName + "' but got 'undefined'. Did you forget to `export default` within '" + normalizedModuleName + "'?");
      }

      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
        defaultExport = (0, _emberResolverUtilsClassFactory['default'])(defaultExport);
      }

      return defaultExport;
    } else {
      return this._super(parsedName);
    }
  }

  // Ember.DefaultResolver docs:
  //   https://github.com/emberjs/ember.js/blob/master/packages/ember-application/lib/system/resolver.js
  var Resolver = DefaultResolver.extend({
    resolveOther: resolveOther,
    parseName: parseName,
    resolveTemplate: resolveOther,
    pluralizedTypes: null,
    moduleRegistry: null,

    makeToString: function makeToString(factory, fullName) {
      return '' + this.namespace.modulePrefix + '@' + fullName + ':';
    },

    shouldWrapInClassFactory: function shouldWrapInClassFactory() /* module, parsedName */{
      return false;
    },

    init: function init() {
      this._super();
      this.moduleBasedResolver = true;

      if (!this._moduleRegistry) {
        this._moduleRegistry = new _emberResolverUtilsModuleRegistry['default']();
      }

      this._normalizeCache = (0, _emberResolverUtilsMakeDictionary['default'])();

      this.pluralizedTypes = this.pluralizedTypes || (0, _emberResolverUtilsMakeDictionary['default'])();

      if (!this.pluralizedTypes.config) {
        this.pluralizedTypes.config = 'config';
      }

      this._deprecatedPodModulePrefix = false;
    },

    normalize: function normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
    },

    _normalize: function _normalize(fullName) {
      // replace `.` with `/` in order to make nested controllers work in the following cases
      // 1. `needs: ['posts/post']`
      // 2. `{{render "posts/post"}}`
      // 3. `this.render('posts/post')` from Route
      var split = fullName.split(':');
      if (split.length > 1) {
        return split[0] + ':' + _ember['default'].String.dasherize(split[1].replace(/\./g, '/'));
      } else {
        return fullName;
      }
    },

    pluralize: function pluralize(type) {
      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
    },

    podBasedLookupWithPrefix: function podBasedLookupWithPrefix(podPrefix, parsedName) {
      var fullNameWithoutType = parsedName.fullNameWithoutType;

      if (parsedName.type === 'template') {
        fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
      }

      return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
    },

    podBasedModuleName: function podBasedModuleName(parsedName) {
      var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;

      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    },

    podBasedComponentsInSubdir: function podBasedComponentsInSubdir(parsedName) {
      var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      podPrefix = podPrefix + '/components';

      if (parsedName.type === 'component' || parsedName.fullNameWithoutType.match(/^components/)) {
        return this.podBasedLookupWithPrefix(podPrefix, parsedName);
      }
    },

    resolveEngine: function resolveEngine(parsedName) {
      var engineName = parsedName.fullNameWithoutType;
      var engineModule = engineName + '/engine';

      if (this._moduleRegistry.has(engineModule)) {
        return this._extractDefaultExport(engineModule);
      }
    },

    resolveRouteMap: function resolveRouteMap(parsedName) {
      var engineName = parsedName.fullNameWithoutType;
      var engineRoutesModule = engineName + '/routes';

      if (this._moduleRegistry.has(engineRoutesModule)) {
        var routeMap = this._extractDefaultExport(engineRoutesModule);

        _ember['default'].assert('The route map for ' + engineName + ' should be wrapped by \'buildRoutes\' before exporting.', routeMap.isRouteMap);

        return routeMap;
      }
    },

    mainModuleName: function mainModuleName(parsedName) {
      // if router:main or adapter:main look for a module with just the type first
      var tmpModuleName = parsedName.prefix + '/' + parsedName.type;

      if (parsedName.fullNameWithoutType === 'main') {
        return tmpModuleName;
      }
    },

    defaultModuleName: function defaultModuleName(parsedName) {
      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
    },

    prefix: function prefix(parsedName) {
      var tmpPrefix = this.namespace.modulePrefix;

      if (this.namespace[parsedName.type + 'Prefix']) {
        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
      }

      return tmpPrefix;
    },

    /**
      A listing of functions to test for moduleName's based on the provided
     `parsedName`. This allows easy customization of additional module based
     lookup patterns.
      @property moduleNameLookupPatterns
     @returns {Ember.Array}
     */
    moduleNameLookupPatterns: _ember['default'].computed(function () {
      return [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName];
    }),

    findModuleName: function findModuleName(parsedName, loggingDisabled) {
      var moduleNameLookupPatterns = this.get('moduleNameLookupPatterns');
      var moduleName;

      for (var index = 0, _length = moduleNameLookupPatterns.length; index < _length; index++) {
        var item = moduleNameLookupPatterns[index];

        var tmpModuleName = item.call(this, parsedName);

        // allow treat all dashed and all underscored as the same thing
        // supports components with dashes and other stuff with underscores.
        if (tmpModuleName) {
          tmpModuleName = this.chooseModuleName(tmpModuleName);
        }

        if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {
          moduleName = tmpModuleName;
        }

        if (!loggingDisabled) {
          this._logLookup(moduleName, parsedName, tmpModuleName);
        }

        if (moduleName) {
          return moduleName;
        }
      }
    },

    chooseModuleName: function chooseModuleName(moduleName) {
      var underscoredModuleName = underscore(moduleName);

      if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {
        throw new TypeError("Ambiguous module names: `" + moduleName + "` and `" + underscoredModuleName + "`");
      }

      if (this._moduleRegistry.has(moduleName)) {
        return moduleName;
      } else if (this._moduleRegistry.has(underscoredModuleName)) {
        return underscoredModuleName;
      } else {
        // workaround for dasherized partials:
        // something/something/-something => something/something/_something
        var partializedModuleName = moduleName.replace(/\/-([^\/]*)$/, '/_$1');

        if (this._moduleRegistry.has(partializedModuleName)) {
          _ember['default'].deprecate('Modules should not contain underscores. ' + 'Attempted to lookup "' + moduleName + '" which ' + 'was not found. Please rename "' + partializedModuleName + '" ' + 'to "' + moduleName + '" instead.', false, { id: 'ember-resolver.underscored-modules', until: '3.0.0' });

          return partializedModuleName;
        } else {
          return moduleName;
        }
      }
    },

    // used by Ember.DefaultResolver.prototype._logLookup
    lookupDescription: function lookupDescription(fullName) {
      var parsedName = this.parseName(fullName);

      var moduleName = this.findModuleName(parsedName, true);

      return moduleName;
    },

    // only needed until 1.6.0-beta.2 can be required
    _logLookup: function _logLookup(found, parsedName, description) {
      if (!_ember['default'].ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {
        return;
      }

      var symbol, padding;

      if (found) {
        symbol = '[✓]';
      } else {
        symbol = '[ ]';
      }

      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }

      if (!description) {
        description = this.lookupDescription(parsedName);
      }

      _ember['default'].Logger.info(symbol, parsedName.fullName, padding, description);
    },

    knownForType: function knownForType(type) {
      var moduleKeys = this._moduleRegistry.moduleNames();

      var items = (0, _emberResolverUtilsMakeDictionary['default'])();
      for (var index = 0, length = moduleKeys.length; index < length; index++) {
        var moduleName = moduleKeys[index];
        var fullname = this.translateToContainerFullname(type, moduleName);

        if (fullname) {
          items[fullname] = true;
        }
      }

      return items;
    },

    translateToContainerFullname: function translateToContainerFullname(type, moduleName) {
      var prefix = this.prefix({ type: type });

      // Note: using string manipulation here rather than regexes for better performance.
      // pod modules
      // '^' + prefix + '/(.+)/' + type + '$'
      var podPrefix = prefix + '/';
      var podSuffix = '/' + type;
      var start = moduleName.indexOf(podPrefix);
      var end = moduleName.indexOf(podSuffix);

      if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {
        return type + ':' + moduleName.slice(start + podPrefix.length, end);
      }

      // non-pod modules
      // '^' + prefix + '/' + pluralizedType + '/(.+)$'
      var pluralizedType = this.pluralize(type);
      var nonPodPrefix = prefix + '/' + pluralizedType + '/';

      if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {
        return type + ':' + moduleName.slice(nonPodPrefix.length);
      }
    },

    _extractDefaultExport: function _extractDefaultExport(normalizedModuleName) {
      var module = require(normalizedModuleName, null, null, true /* force sync */);

      if (module && module['default']) {
        module = module['default'];
      }

      return module;
    }
  });

  Resolver.reopenClass({
    moduleBasedResolver: true
  });

  exports['default'] = Resolver;
});
define('ember-resolver/utils/class-factory', ['exports'], function (exports) {
  'use strict';

  exports['default'] = classFactory;

  function classFactory(klass) {
    return {
      create: function create(injections) {
        if (typeof klass.extend === 'function') {
          return klass.extend(injections);
        } else {
          return klass;
        }
      }
    };
  }
});
define("ember-resolver/utils/create", ["exports", "ember"], function (exports, _ember) {
  "use strict";

  var create = Object.create || _ember["default"].create;
  if (!(create && !create(null).hasOwnProperty)) {
    throw new Error("This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg");
  }

  exports["default"] = create;
});
define('ember-resolver/utils/make-dictionary', ['exports', 'ember-resolver/utils/create'], function (exports, _emberResolverUtilsCreate) {
  'use strict';

  exports['default'] = makeDictionary;

  function makeDictionary() {
    var cache = (0, _emberResolverUtilsCreate['default'])(null);
    cache['_dict'] = null;
    delete cache['_dict'];
    return cache;
  }
});
define('ember-resolver/utils/module-registry', ['exports', 'ember'], function (exports, _ember) {
  /*globals requirejs, require */

  'use strict';

  if (typeof requirejs.entries === 'undefined') {
    requirejs.entries = requirejs._eak_seen;
  }

  function ModuleRegistry(entries) {
    this._entries = entries || requirejs.entries;
  }

  ModuleRegistry.prototype.moduleNames = function ModuleRegistry_moduleNames() {
    return (Object.keys || _ember['default'].keys)(this._entries);
  };

  ModuleRegistry.prototype.has = function ModuleRegistry_has(moduleName) {
    return moduleName in this._entries;
  };

  ModuleRegistry.prototype.get = function ModuleRegistry_get(moduleName) {
    var exportName = arguments.length <= 1 || arguments[1] === undefined ? 'default' : arguments[1];

    var module = require(moduleName);
    return module && module[exportName];
  };

  exports['default'] = ModuleRegistry;
});
define("ember-select-2/components/select-2", ["exports", "ember"], function (exports, _ember) {
  "use strict";

  var get = _ember["default"].get;
  var run = _ember["default"].run;

  /**
   * Ember select-2 component wrapping the jQuery select2 plugin while
   * respecting Ember data bindings and getter/setter methods on the content.
   *
   * Terminology:
   *  - Value: The currently selected value(s). Propagated to controllers etc.
   *    through the "value=..."" binding. Types:
   *    - Object: when using select-2 without any further configuration
   *    - Array of Objects: when using select-2 with "multiple=true"
   *    - Mixed: when using select-2 with "optionValuePath=..."
   *    - Array of Mixed: when using select-2 with "multiple=true" and
   *      "optionValuePath=..."
   *
   *  - Content: Array of Objects used to present to the user for choosing the
   *    selected values. "content" cannot be an Array of Strings, the Objects are
   *    expected to have an "id" and a property to be used as the label (by default,
   *    it is "text", but it can be overwritten via "optionLabelPath"). These
   *    properties can be computed properties or just plain JavaScript values.
   */
  var Select2Component = _ember["default"].Component.extend({
    tagName: "input",
    classNames: ["form-control"],
    classNameBindings: ["inputSize"],
    attributeBindings: ["style", "tabindex"],
    style: _ember["default"].String.htmlSafe("display: hidden;"),
    tabindex: 0,

    // Bindings that may be overwritten in the template
    inputSize: "input-md",
    cssClass: null,
    optionIdPath: "id",
    optionValuePath: null,
    optionLabelPath: 'text',
    optionLabelSelectedPath: null,
    optionHeadlinePath: 'text',
    optionDescriptionPath: 'description',
    placeholder: null,
    multiple: false,
    allowClear: false,
    enabled: true,
    query: null,
    typeaheadSearchingText: 'Searching…',
    typeaheadNoMatchesText: 'No matches found',
    typeaheadErrorText: 'Loading failed',
    searchEnabled: true,
    minimumInputLength: null,
    maximumInputLength: null,
    valueSeparator: ',',

    // internal state
    _hasSelectedMissingItems: false,
    _hasPendingContentPromise: _ember["default"].computed.alias('content.isPending'),
    _hasFailedContentPromise: _ember["default"].computed.alias('content.isRejected'),
    _hasPendingValuePromise: _ember["default"].computed.alias('value.isPending'),
    _hasFailedValuePromise: _ember["default"].computed.alias('value.isRejected'),
    _typeaheadMode: _ember["default"].computed.bool('query'),

    didInsertElement: function didInsertElement() {
      var self = this,
          options = {},
          optionIdPath = this.get('optionIdPath'),
          optionLabelPath = this.get('optionLabelPath'),
          optionLabelSelectedPath = this.get('optionLabelSelectedPath'),
          optionHeadlinePath = this.get('optionHeadlinePath'),
          optionDescriptionPath = this.get('optionDescriptionPath'),
          content = this.get('content');

      // ensure select2 is loaded
      _ember["default"].assert("select2 has to exist on Ember.$.fn.select2", typeof _ember["default"].$.fn.select2 === "function");

      // setup
      options.placeholder = this.get('placeholder');
      options.multiple = this.get('multiple');
      options.allowClear = this.get('allowClear');
      options.minimumResultsForSearch = this.get('searchEnabled') ? 0 : -1;
      options.minimumInputLength = this.get('minimumInputLength');
      options.maximumInputLength = this.get('maximumInputLength');

      // ensure there is a value separator if needed (= when in multiple selection with value binding)
      var missesValueSeperator = this.get('multiple') && this.get('optionValuePath') && !this.get('valueSeparator');
      _ember["default"].assert("select2#didInsertElement: You must specify a valueSeparator when in multiple mode.", !missesValueSeperator);

      options.separator = this.get('valueSeparator');

      // override select2's default id fetching behavior
      options.id = function (e) {
        return e === undefined ? null : get(e, optionIdPath);
      };

      // allowClear is only allowed with placeholder
      _ember["default"].assert("To use allowClear, you have to specify a placeholder", !options.allowClear || options.placeholder);

      // search can't be disabled for multiple selection mode
      var illegalSearchInMultipleMode = options.multiple && !this.get('searchEnabled');
      _ember["default"].assert("Search field can't be disabled for multiple selection mode", !illegalSearchInMultipleMode);

      /*
        Formatting functions that ensure that the passed content is escaped in
        order to prevent XSS vulnerabilities. Escaping can be avoided by passing
        Handlebars.SafeString as "text", "headline" or "description" values.
         Generates the html used in the dropdown list (and is implemented to
        include the description html if available).
       */
      options.formatResult = function (item) {
        if (!item) {
          return;
        }

        var output,
            id = get(item, optionIdPath),
            text = get(item, optionLabelPath),
            headline = get(item, optionHeadlinePath),
            description = get(item, optionDescriptionPath);

        if (item.children) {
          output = _ember["default"].Handlebars.Utils.escapeExpression(headline);
        } else {
          output = _ember["default"].Handlebars.Utils.escapeExpression(text);
        }

        // only for "real items" (no group headers) that have a description
        if (id && description) {
          output += " <span class=\"text-muted\">" + _ember["default"].Handlebars.Utils.escapeExpression(description) + "</span>";
        }

        return output;
      };

      /*
        Generates the html used in the closed select input, displaying the
        currently selected element(s). Works like "formatResult" but
        produces shorter output by leaving out the description.
       */
      options.formatSelection = function (item) {
        if (!item) {
          return;
        }

        // if set, use the optionLabelSelectedPath for formatting selected items,
        // otherwise use the usual optionLabelPath
        var text = get(item, optionLabelSelectedPath || optionLabelPath);

        // escape text unless it's passed as a Handlebars.SafeString
        return _ember["default"].Handlebars.Utils.escapeExpression(text);
      };

      /*
        Provides a list of items that should be displayed for the current query
        term. Uses the default select2 matcher (which handles diacritics) with the
        Ember compatible getter method for optionLabelPath.
       */
      options.query = function (query) {
        var select2 = this;

        if (self.get('_typeaheadMode')) {
          var deferred = _ember["default"].RSVP.defer('select2#query: ' + query.term);

          self.sendAction('query', query, deferred);

          deferred.promise.then(function (result) {
            var data = result;
            var more = false;

            if (result instanceof _ember["default"].ArrayProxy) {
              data = result.toArray();
            } else if (!Array.isArray(result)) {
              if (result.data instanceof _ember["default"].ArrayProxy) {
                data = result.data.toArray();
              } else {
                data = result.data;
              }
              more = result.more;
            }

            query.callback({
              results: data,
              more: more
            });
          }, function (reason) {
            query.callback({
              hasError: true,
              errorThrown: reason
            });
          });
        } else {
          _ember["default"].assert("select2 has no content!", self.get('content'));

          var filteredContent = self.get("content").reduce(function (results, item) {
            // items may contain children, so filter them, too
            var filteredChildren = [];

            if (item.children) {
              filteredChildren = item.children.reduce(function (children, child) {
                if (select2.matcher(query.term, get(child, optionLabelPath)) || select2.matcher(query.term, get(child, optionHeadlinePath))) {
                  children.push(child);
                }
                return children;
              }, []);
            }

            // apply the regular matcher
            if (select2.matcher(query.term, get(item, optionLabelPath)) || select2.matcher(query.term, get(item, optionHeadlinePath))) {
              // keep this item either if itself matches
              results.push(item);
            } else if (filteredChildren.length) {
              // or it has children that matched the term
              var result = _ember["default"].$.extend({}, item, { children: filteredChildren });
              results.push(result);
            }
            return results;
          }, []);

          query.callback({
            results: filteredContent
          });
        }
      };

      /*
        Supplies the string used when searching for options, can be set via
        `typeaheadSearchingText`
       */
      options.formatSearching = function () {
        var text = self.get('typeaheadSearchingText');

        return _ember["default"].String.htmlSafe(text);
      };

      /*
        Format the no matches message, substituting the %@ placeholder with the
        html-escaped user input
       */
      options.formatNoMatches = function (term) {
        var text = self.get('typeaheadNoMatchesText');
        if (text instanceof _ember["default"].Handlebars.SafeString) {
          text = text.string;
        }

        term = _ember["default"].Handlebars.Utils.escapeExpression(term);

        return _ember["default"].String.htmlSafe(_ember["default"].String.fmt(text, term));
      };

      /*
        Format the error message, substituting the %@ placeholder with the promise
        rejection reason
       */
      options.formatAjaxError = function (jqXHR, textStatus, errorThrown) {
        var text = self.get('typeaheadErrorText');

        return _ember["default"].String.htmlSafe(_ember["default"].String.fmt(text, errorThrown));
      };

      /*
        Maps "value" -> "object" when using select2 with "optionValuePath" set,
        and one time directly when setting up the select2 plugin even without "oVP".
        (but with empty value, which will just skip the method)
         Provides an object or an array of objects (depending on "multiple") that
        are referenced by the current select2 "val".
         When there are keys that can not be matched to objects, the select2 input
        will be disabled and a warning will be printed on the console.
        This is important in case the "content" has yet to be loaded but the
        "value" is already set and must not be accidentally changed because the
        inout cannot yet display all the options that are required.
         To disable this behaviour, remove those keys from "value" that can't be
        matched by objects from "content".
       */
      options.initSelection = function (element, callback) {
        var value = element.val(),
            content = self.get("content"),
            contentIsArrayProxy = _ember["default"].ArrayProxy.detectInstance(content),
            multiple = self.get("multiple"),
            optionValuePath = self.get("optionValuePath");

        if (!value || !value.length) {
          return callback([]);
        }

        // this method should not be needed without the optionValuePath option
        // but make sure there is an appropriate error just in case.
        _ember["default"].assert("select2#initSelection has been called without an \"" + "optionValuePath\" set.", optionValuePath);

        _ember["default"].assert("select2#initSelection can not map string values to full objects " + "in typeahead mode. Please open a github issue if you have questions to this.", !self.get('_typeaheadMode'));

        var values;
        var filteredContent = [];

        // only split select2's string value on valueSeparator when in multiple mode
        if (self.get('multiple')) {
          var separator = self.get('valueSeparator');
          values = value.split(separator);
        } else {
          values = [value];
        }

        // for every object, check if its optionValuePath is in the selected
        // values array and save it to the right position in filteredContent
        var contentLength = get(content, 'length'),
            unmatchedValues = values.length,
            matchIndex;

        // START loop over content
        for (var i = 0; i < contentLength; i++) {
          var item = contentIsArrayProxy ? content.objectAt(i) : content[i];
          matchIndex = -1;

          if (item.children && item.children.length) {
            // take care of either nested data...
            for (var c = 0; c < item.children.length; c++) {
              var child = item.children[c];
              matchIndex = values.indexOf("" + get(child, optionValuePath));
              if (matchIndex !== -1) {
                filteredContent[matchIndex] = child;
                unmatchedValues--;
              }
              // break loop if all values are found
              if (unmatchedValues === 0) {
                break;
              }
            }
          } else {
            // ...or flat data structure: try to match simple item
            matchIndex = values.indexOf("" + get(item, optionValuePath));
            if (matchIndex !== -1) {
              filteredContent[matchIndex] = item;
              unmatchedValues--;
            }
            // break loop if all values are found
            if (unmatchedValues === 0) {
              break;
            }
          }
        }
        // END loop over content

        if (unmatchedValues === 0) {
          self.set('_hasSelectedMissingItems', false);
        } else {
          // disable the select2 element if there are keys left in the values
          // array that were not matched to an object
          self.set('_hasSelectedMissingItems', true);

          _ember["default"].warn("select2#initSelection was not able to map each \"" + optionValuePath + "\" to an object from \"content\". The remaining " + "keys are: " + values + ". The input will be disabled until a) the " + "desired objects is added to the \"content\" array or b) the " + "\"value\" is changed.", !values.length);
        }

        if (multiple) {
          // return all matched objects
          return callback(filteredContent);
        } else {
          // only care about the first match in single selection mode
          return callback(filteredContent[0]);
        }
      };

      /*
        Forward a custom css class to the components container and dropdown.
        The value will be read from the `cssClass` binding
       */
      options.containerCssClass = options.dropdownCssClass = function () {
        return self.get('cssClass') || '';
      };

      this._select = this.$().select2(options);

      this._select.on("change", run.bind(this, function () {
        // grab currently selected data from select plugin
        var data = this._select.select2("data");
        // call our callback for further processing
        this.selectionChanged(data);
      }));

      this.addObserver('content.[]', this.valueChanged);
      this.addObserver('content.@each.' + optionLabelPath, this.valueChanged);
      this.addObserver('content.@each.' + optionLabelSelectedPath, this.valueChanged);
      this.addObserver('content.@each.' + optionHeadlinePath, this.valueChanged);
      this.addObserver('content.@each.' + optionDescriptionPath, this.valueChanged);
      this.addObserver('value', this.valueChanged);

      // trigger initial data sync to set select2 to the external "value"
      this.valueChanged();

      // eventually disable input when content is PromiseProxy
      if (_ember["default"].PromiseProxyMixin.detect(content)) {
        // enabling/siabling is done via binding to _hasPendingContentPromise
        // provide error for rejected promise, though.
        content.then(null, function (reason) {
          _ember["default"].warn("select2: content promise was reject with reason " + reason + ". Recovering from this is not (yet) implemented.");
        });
      }

      this.watchDisabled();
    },

    /**
     * Teardown to prevent memory leaks
     */
    willDestroyElement: function willDestroyElement() {
      // If an assertion caused the component not to render, we can't remove it from the dom.
      if (this._select) {
        this._select.off("change");
        this._select.select2("destroy");
      }

      this.removeObserver('content.[]', this.valueChanged);
      this.removeObserver('content.@each.' + this.get('optionLabelPath'), this.valueChanged);
      this.removeObserver('content.@each.' + this.get('optionLabelSelectedPath'), this.valueChanged);
      this.removeObserver('content.@each.' + this.get('optionHeadlinePath'), this.valueChanged);
      this.removeObserver('content.@each.' + this.get('optionDescriptionPath'), this.valueChanged);
      this.removeObserver('value', this.valueChanged);
    },

    /**
     * Respond to selection changes originating from the select2 element. If
     * select2 is working with full objects just use them to set the value,
     * use the optionValuePath otherwise.
     *
     * @param  {String|Object} data   Currently selected value
     */
    selectionChanged: function selectionChanged(data) {
      var value,
          multiple = this.get("multiple"),
          optionValuePath = this.get("optionValuePath");

      // if there is a optionValuePath, don't set value to the complete object,
      // but only the property referred to by optionValuePath
      if (optionValuePath) {
        if (multiple) {
          // data is an array, so use getEach
          value = _ember["default"].A(data).getEach(optionValuePath);
        } else {
          // treat data as a single object
          value = get(data, optionValuePath);
        }
      } else {
        value = data;
      }

      this.set("value", value);
      _ember["default"].run.schedule('actions', this, function () {
        this.sendAction('didSelect', value, this);
      });
    },

    /**
     * Respond to external value changes. If select2 is working with full objects,
     * use the "data" API, otherwise just set the "val" property and let the
     * "initSelection" figure out which object was meant by that.
     */
    valueChanged: function valueChanged() {
      var self = this,
          value = this.get("value"),
          optionValuePath = this.get("optionValuePath");

      if (_ember["default"].PromiseProxyMixin.detect(value)) {
        // schedule re-setting value after promise is settled
        value.then(function (value) {
          if (value === null || value === undefined) {
            self._select.select2("val", null);
          }
        }, function (reason) {
          _ember["default"].warn("select2: value promise was reject with reason " + reason + ". Recovering from this is not (yet) implemented.");
        });
      }

      if (optionValuePath) {
        // when there is a optionValuePath, the external value is a primitive value
        // so use the "val" method
        if (this.get("multiple") && "string" === typeof value && value.length > 0) {
          // split the value on the specified separator
          value = value.split(this.get("valueSeparator"));
        }
        this._select.select2("val", value);
      } else {
        // otherwise set the full object via "data"
        this._select.select2("data", value);
      }
    },

    /**
     * Watch properties that determine the disabled state of the input.
     */
    watchDisabled: _ember["default"].observer('_hasSelectedMissingItems', '_hasPendingContentPromise', '_hasFailedContentPromise', '_hasPendingValuePromise', '_hasFailedValuePromise', 'enabled', function () {
      var select = this._select,
          disabled = this.get('_hasSelectedMissingItems') || this.get('_hasPendingContentPromise') || this.get('_hasFailedContentPromise') || this.get('_hasPendingValuePromise') || this.get('_hasFailedValuePromise') || !this.get('enabled');

      if (select) {
        _ember["default"].run(function () {
          select.select2("readonly", disabled);
        });
      }
    })
  });

  exports["default"] = Select2Component;
});
define('ember-simple-auth/authenticators/base', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var RSVP = _ember['default'].RSVP;

  /**
    The base class for all authenticators. __This serves as a starting point for
    implementing custom authenticators and must not be used directly.__
  
    The authenticator authenticates the session. The actual mechanism used to do
    this might e.g. be posting a set of credentials to a server and in exchange
    retrieving an access token, initiating authentication against an external
    provider like Facebook etc. and depends on the specific authenticator. Any
    data that the authenticator receives upon successful authentication and
    resolves with from the
    {{#crossLink "BaseAuthenticator/authenticate:method"}}{{/crossLink}}
    method is stored in the session and can be accessed via the session service
    and be used by the authorizer (see
    {{#crossLink "BaseAuthorizer/authorize:method"}}{{/crossLink}}) to e.g.
    authorize outgoing requests.
  
    The authenticator also decides whether a set of data that was restored from
    the session store (see
    {{#crossLink "BaseStore/restore:method"}}{{/crossLink}}) makes up an
    authenticated session or not.
  
    __Authenticators for an application are defined in the `app/authenticators`
    directory__, e.g.:
  
    ```js
    // app/authenticators/oauth2.js
    import OAuth2PasswordGrantAuthenticator from 'ember-simple-auth/authenticators/oauth2-password-grant';
  
    export default OAuth2PasswordGrantAuthenticator.extend({
      ...
    });
    ```
  
    and can then be used with the name Ember CLI automatically registers them
    with in the Ember container:
  
    ```js
    // app/components/login-form.js
    export default Ember.Controller.extend({
      session: Ember.inject.service(),
  
      actions: {
        authenticate: function() {
          this.get('session').authenticate('authenticator:oauth2');
        }
      }
    });
    ```
  
    @class BaseAuthenticator
    @module ember-simple-auth/authenticators/base
    @extends Ember.Object
    @uses Ember.Evented
    @public
  */
  exports['default'] = _ember['default'].Object.extend(_ember['default'].Evented, {
    /**
      __Triggered when the authentication data is updated by the authenticator
      due to an external or scheduled event__. This might happen e.g. if the
      authenticator refreshes an expired token or an event is triggered from an
      external authentication provider that the authenticator uses. The session
      handles that event, passes the updated data back to the authenticator's
      {{#crossLink "BaseAuthenticator/restore:method"}}{{/crossLink}}
      method and handles the result of that invocation accordingly.
       @event sessionDataUpdated
      @param {Object} data The updated session data
      @public
    */

    /**
      __Triggered when the authenciation data is invalidated by the authenticator
      due to an external or scheduled event__. This might happen e.g. if a token
      expires or an event is triggered from an external authentication provider
      that the authenticator uses. The session handles that event and will
      invalidate itself when it is triggered.
       @event sessionDataInvalidated
      @public
    */

    /**
      Restores the session from a session data object. __This method is invoked
      by the session either on application startup if session data is restored
      from the session store__ or when properties in the store change due to
      external events (e.g. in another tab) and the new session data needs to be
      validated for whether it constitutes an authenticated session.
       __This method returns a promise. A resolving promise results in the session
      becoming or remaining authenticated.__ Any data the promise resolves with
      will be saved in and accessible via the session service's
      `data.authenticated` property (see
      {{#crossLink "SessionService/data:property"}}{{/crossLink}}). A rejecting
      promise indicates that `data` does not constitute a valid session and will
      result in the session being invalidated or remaining unauthencicated.
       The `BaseAuthenticator`'s implementation always returns a rejecting
      promise. __This method must be overridden in subclasses.__
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore: function restore() {
      return RSVP.reject();
    },

    /**
      Authenticates the session with the specified `args`. These options vary
      depending on the actual authentication mechanism the authenticator
      implements (e.g. a set of credentials or a Facebook account id etc.). __The
      session will invoke this method in order to authenticate itself__ (see
      {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}}).
       __This method returns a promise. A resolving promise will result in the
      session becoming authenticated.__ Any data the promise resolves with will
      be saved in and accessible via the session service's `data.authenticated`
      property (see {{#crossLink "SessionService/data:property"}}{{/crossLink}}).
      A rejecting promise indicates that authentication failed and will result in
      the session remaining unauthenticated.
       The `BaseAuthenticator`'s implementation always returns a rejecting promise
      and thus never authenticates the session. __This method must be overridden
      in subclasses__.
       @method authenticate
      @param {Any} [...args] The arguments that the authenticator requires to authenticate the session
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
      @public
    */
    authenticate: function authenticate() {
      return RSVP.reject();
    },

    /**
      This method is invoked as a callback when the session is invalidated. While
      the session will invalidate itself and clear all authenticated session data,
      it might be necessary for some authenticators to perform additional tasks
      (e.g. invalidating an access token on the server side).
       __This method returns a promise. A resolving promise will result in the
      session becoming unauthenticated.__ A rejecting promise will result in
      invalidation being intercepted and the session remaining authenticated.
       The `BaseAuthenticator`'s implementation always returns a resolving promise
      and thus never intercepts session invalidation. __This method doesn't have
      to be overridden in custom authenticators__ if no actions need to be
      performed on session invalidation.
       @method invalidate
      @param {Object} data The current authenticated session data
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated
      @public
    */
    invalidate: function invalidate() {
      return RSVP.resolve();
    }
  });
});
define('ember-simple-auth/authenticators/devise', ['exports', 'ember', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase) {
  'use strict';

  var Promise = _ember['default'].RSVP.Promise;
  var isEmpty = _ember['default'].isEmpty;
  var run = _ember['default'].run;
  var get = _ember['default'].get;
  var $ = _ember['default'].$;

  /**
    Authenticator that works with the Ruby gem
    [devise](https://github.com/plataformatec/devise).
  
    __As token authentication is not actually part of devise anymore, the server
    needs to implement some customizations__ to work with this authenticator -
    see [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6).
  
    @class DeviseAuthenticator
    @module ember-simple-auth/authenticators/devise
    @extends BaseAuthenticator
    @public
  */
  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
    /**
      The endpoint on the server that the authentication request is sent to.
       @property serverTokenEndpoint
      @type String
      @default '/users/sign_in'
      @public
    */
    serverTokenEndpoint: '/users/sign_in',

    /**
      The devise resource name. __This will be used in the request and also be
      expected in the server's response.__
       @property resourceName
      @type String
      @default 'user'
      @public
    */
    resourceName: 'user',

    /**
      The token attribute name. __This will be used in the request and also be
      expected in the server's response.__
       @property tokenAttributeName
      @type String
      @default 'token'
      @public
    */
    tokenAttributeName: 'token',

    /**
      The identification attribute name. __This will be used in the request and
      also be expected in the server's response.__
       @property identificationAttributeName
      @type String
      @default 'email'
      @public
    */
    identificationAttributeName: 'email',

    /**
      Restores the session from a session data object; __returns a resolving
      promise when there are non-empty
      {{#crossLink "DeviseAuthenticator/tokenAttributeName:property"}}token{{/crossLink}}
      and
      {{#crossLink "DeviseAuthenticator/identificationAttributeName:property"}}identification{{/crossLink}}
      values in `data`__ and a rejecting promise otherwise.
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore: function restore(data) {
      var _getProperties = this.getProperties('tokenAttributeName', 'identificationAttributeName');

      var tokenAttributeName = _getProperties.tokenAttributeName;
      var identificationAttributeName = _getProperties.identificationAttributeName;

      var tokenAttribute = get(data, tokenAttributeName);
      var identificationAttribute = get(data, identificationAttributeName);

      if (!isEmpty(tokenAttribute) && !isEmpty(identificationAttribute)) {
        return Promise.resolve(data);
      } else {
        return Promise.reject();
      }
    },

    /**
      Authenticates the session with the specified `identification` and
      `password`; the credentials are `POST`ed to the
      {{#crossLink "DeviseAuthenticator/serverTokenEndpoint:property"}}server{{/crossLink}}.
      If the credentials are valid the server will responds with a
      {{#crossLink "DeviseAuthenticator/tokenAttributeName:property"}}token{{/crossLink}}
      and
      {{#crossLink "DeviseAuthenticator/identificationAttributeName:property"}}identification{{/crossLink}}.
      __If the credentials are valid and authentication succeeds, a promise that
      resolves with the server's response is returned__, otherwise a promise that
      rejects with the server error is returned.
       @method authenticate
      @param {String} identification The user's identification
      @param {String} password The user's password
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
      @public
    */
    authenticate: function authenticate(identification, password) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var _getProperties2 = _this.getProperties('resourceName', 'identificationAttributeName');

        var resourceName = _getProperties2.resourceName;
        var identificationAttributeName = _getProperties2.identificationAttributeName;

        var data = {};
        data[resourceName] = { password: password };
        data[resourceName][identificationAttributeName] = identification;

        return _this.makeRequest(data).then(function (response) {
          return run(null, resolve, response);
        }, function (xhr) {
          return run(null, reject, xhr.responseJSON || xhr.responseText);
        });
      });
    },

    /**
      Does nothing
       @method invalidate
      @return {Ember.RSVP.Promise} A resolving promise
      @public
    */
    invalidate: function invalidate() {
      return Promise.resolve();
    },

    /**
      Makes a request to the devise server.
       @method makeRequest
      @param {Object} data The request data
      @param {Object} options Ajax configuration object merged into argument of `$.ajax`
      @return {jQuery.Deferred} A promise like jQuery.Deferred as returned by `$.ajax`
      @protected
    */
    makeRequest: function makeRequest(data, options) {
      var serverTokenEndpoint = this.get('serverTokenEndpoint');
      var requestOptions = $.extend({}, {
        url: serverTokenEndpoint,
        type: 'POST',
        dataType: 'json',
        data: data,
        beforeSend: function beforeSend(xhr, settings) {
          xhr.setRequestHeader('Accept', settings.accepts.json);
        }
      }, options || {});

      return $.ajax(requestOptions);
    }
  });
});
define('ember-simple-auth/authenticators/oauth2-password-grant', ['exports', 'ember', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase) {
  /* jscs:disable requireDotNotation */
  'use strict';

  var RSVP = _ember['default'].RSVP;
  var isEmpty = _ember['default'].isEmpty;
  var run = _ember['default'].run;
  var computed = _ember['default'].computed;

  var assign = _ember['default'].assign || _ember['default'].merge;

  /**
    Authenticator that conforms to OAuth 2
    ([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _"Resource
    Owner Password Credentials Grant Type"_.
  
    This authenticator also automatically refreshes access tokens (see
    [RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)) if the
    server supports it.
  
    @class OAuth2PasswordGrantAuthenticator
    @module ember-simple-auth/authenticators/oauth2-password-grant
    @extends BaseAuthenticator
    @public
  */
  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
    /**
      Triggered when the authenticator refreshed the access token (see
      [RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)).
       @event sessionDataUpdated
      @param {Object} data The updated session data
      @public
    */

    /**
      The client_id to be sent to the authentication server (see
      https://tools.ietf.org/html/rfc6749#appendix-A.1). __This should only be
      used for statistics or logging etc. as it cannot actually be trusted since
      it could have been manipulated on the client!__
       @property clientId
      @type String
      @default null
      @public
    */
    clientId: null,

    /**
      The endpoint on the server that authentication and token refresh requests
      are sent to.
       @property serverTokenEndpoint
      @type String
      @default '/token'
      @public
    */
    serverTokenEndpoint: '/token',

    /**
      The endpoint on the server that token revocation requests are sent to. Only
      set this if the server actually supports token revokation. If this is
      `null`, the authenticator will not revoke tokens on session invalidation.
       __If token revocation is enabled but fails, session invalidation will be
      intercepted and the session will remain authenticated (see
      {{#crossLink "OAuth2PasswordGrantAuthenticator/invalidate:method"}}{{/crossLink}}).__
       @property serverTokenRevocationEndpoint
      @type String
      @default null
      @public
    */
    serverTokenRevocationEndpoint: null,

    /**
      Sets whether the authenticator automatically refreshes access tokens if the
      server supports it.
       @property refreshAccessTokens
      @type Boolean
      @default true
      @public
    */
    refreshAccessTokens: true,

    _refreshTokenTimeout: null,

    _clientIdHeader: computed('clientId', function () {
      var clientId = this.get('clientId');

      if (!isEmpty(clientId)) {
        var base64ClientId = window.btoa(clientId.concat(':'));
        return { Authorization: 'Basic ' + base64ClientId };
      }
    }),

    /**
      Restores the session from a session data object; __will return a resolving
      promise when there is a non-empty `access_token` in the session data__ and
      a rejecting promise otherwise.
       If the server issues
      [expiring access tokens](https://tools.ietf.org/html/rfc6749#section-5.1)
      and there is an expired access token in the session data along with a
      refresh token, the authenticator will try to refresh the access token and
      return a promise that resolves with the new access token if the refresh was
      successful. If there is no refresh token or the token refresh is not
      successful, a rejecting promise will be returned.
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore: function restore(data) {
      var _this = this;

      return new RSVP.Promise(function (resolve, reject) {
        var now = new Date().getTime();
        var refreshAccessTokens = _this.get('refreshAccessTokens');
        if (!isEmpty(data['expires_at']) && data['expires_at'] < now) {
          if (refreshAccessTokens) {
            _this._refreshAccessToken(data['expires_in'], data['refresh_token']).then(resolve, reject);
          } else {
            reject();
          }
        } else {
          if (isEmpty(data['access_token'])) {
            reject();
          } else {
            _this._scheduleAccessTokenRefresh(data['expires_in'], data['expires_at'], data['refresh_token']);
            resolve(data);
          }
        }
      });
    },

    /**
      Authenticates the session with the specified `identification`, `password`
      and optional `scope`; issues a `POST` request to the
      {{#crossLink "OAuth2PasswordGrantAuthenticator/serverTokenEndpoint:property"}}{{/crossLink}}
      and receives the access token in response (see
      http://tools.ietf.org/html/rfc6749#section-4.3).
       __If the credentials are valid (and the optionally requested scope is
      granted) and thus authentication succeeds, a promise that resolves with the
      server's response is returned__, otherwise a promise that rejects with the
      error as returned by the server is returned.
       __If the
      [server supports it](https://tools.ietf.org/html/rfc6749#section-5.1), this
      method also schedules refresh requests for the access token before it
      expires.__
       @method authenticate
      @param {String} identification The resource owner username
      @param {String} password The resource owner password
      @param {String|Array} scope The scope of the access request (see [RFC 6749, section 3.3](http://tools.ietf.org/html/rfc6749#section-3.3))
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
      @public
    */
    authenticate: function authenticate(identification, password) {
      var _this2 = this;

      var scope = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

      return new RSVP.Promise(function (resolve, reject) {
        var data = { 'grant_type': 'password', username: identification, password: password };
        var serverTokenEndpoint = _this2.get('serverTokenEndpoint');
        var scopesString = _ember['default'].makeArray(scope).join(' ');
        if (!_ember['default'].isEmpty(scopesString)) {
          data.scope = scopesString;
        }
        _this2.makeRequest(serverTokenEndpoint, data).then(function (response) {
          run(function () {
            var expiresAt = _this2._absolutizeExpirationTime(response['expires_in']);
            _this2._scheduleAccessTokenRefresh(response['expires_in'], expiresAt, response['refresh_token']);
            if (!isEmpty(expiresAt)) {
              response = assign(response, { 'expires_at': expiresAt });
            }
            resolve(response);
          });
        }, function (xhr) {
          run(null, reject, xhr.responseJSON || xhr.responseText);
        });
      });
    },

    /**
      If token revocation is enabled, this will revoke the access token (and the
      refresh token if present). If token revocation succeeds, this method
      returns a resolving promise, otherwise it will return a rejecting promise,
      thus intercepting session invalidation.
       If token revocation is not enabled this method simply returns a resolving
      promise.
       @method invalidate
      @param {Object} data The current authenticated session data
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated
      @public
    */
    invalidate: function invalidate(data) {
      var _this3 = this;

      var serverTokenRevocationEndpoint = this.get('serverTokenRevocationEndpoint');
      function success(resolve) {
        run.cancel(this._refreshTokenTimeout);
        delete this._refreshTokenTimeout;
        resolve();
      }
      return new RSVP.Promise(function (resolve) {
        if (isEmpty(serverTokenRevocationEndpoint)) {
          success.apply(_this3, [resolve]);
        } else {
          (function () {
            var requests = [];
            _ember['default'].A(['access_token', 'refresh_token']).forEach(function (tokenType) {
              var token = data[tokenType];
              if (!isEmpty(token)) {
                requests.push(_this3.makeRequest(serverTokenRevocationEndpoint, {
                  'token_type_hint': tokenType, token: token
                }));
              }
            });
            var succeed = function succeed() {
              success.apply(_this3, [resolve]);
            };
            RSVP.all(requests).then(succeed, succeed);
          })();
        }
      });
    },

    /**
      Makes a request to the OAuth 2.0 server.
       @method makeRequest
      @param {String} url The request URL
      @param {Object} data The request data
      @return {jQuery.Deferred} A promise like jQuery.Deferred as returned by `$.ajax`
      @protected
    */
    makeRequest: function makeRequest(url, data) {
      var options = {
        url: url,
        data: data,
        type: 'POST',
        dataType: 'json',
        contentType: 'application/x-www-form-urlencoded'
      };

      var clientIdHeader = this.get('_clientIdHeader');
      if (!isEmpty(clientIdHeader)) {
        options.headers = clientIdHeader;
      }

      return _ember['default'].$.ajax(options);
    },

    _scheduleAccessTokenRefresh: function _scheduleAccessTokenRefresh(expiresIn, expiresAt, refreshToken) {
      var refreshAccessTokens = this.get('refreshAccessTokens');
      if (refreshAccessTokens) {
        var now = new Date().getTime();
        if (isEmpty(expiresAt) && !isEmpty(expiresIn)) {
          expiresAt = new Date(now + expiresIn * 1000).getTime();
        }
        var offset = (Math.floor(Math.random() * 5) + 5) * 1000;
        if (!isEmpty(refreshToken) && !isEmpty(expiresAt) && expiresAt > now - offset) {
          run.cancel(this._refreshTokenTimeout);
          delete this._refreshTokenTimeout;
          if (!_ember['default'].testing) {
            this._refreshTokenTimeout = run.later(this, this._refreshAccessToken, expiresIn, refreshToken, expiresAt - now - offset);
          }
        }
      }
    },

    _refreshAccessToken: function _refreshAccessToken(expiresIn, refreshToken) {
      var _this4 = this;

      var data = { 'grant_type': 'refresh_token', 'refresh_token': refreshToken };
      var serverTokenEndpoint = this.get('serverTokenEndpoint');
      return new RSVP.Promise(function (resolve, reject) {
        _this4.makeRequest(serverTokenEndpoint, data).then(function (response) {
          run(function () {
            expiresIn = response['expires_in'] || expiresIn;
            refreshToken = response['refresh_token'] || refreshToken;
            var expiresAt = _this4._absolutizeExpirationTime(expiresIn);
            var data = assign(response, { 'expires_in': expiresIn, 'expires_at': expiresAt, 'refresh_token': refreshToken });
            _this4._scheduleAccessTokenRefresh(expiresIn, null, refreshToken);
            _this4.trigger('sessionDataUpdated', data);
            resolve(data);
          });
        }, function (xhr, status, error) {
          _ember['default'].Logger.warn('Access token could not be refreshed - server responded with ' + error + '.');
          reject();
        });
      });
    },

    _absolutizeExpirationTime: function _absolutizeExpirationTime(expiresIn) {
      if (!isEmpty(expiresIn)) {
        return new Date(new Date().getTime() + expiresIn * 1000).getTime();
      }
    }
  });
});
define('ember-simple-auth/authenticators/test', ['exports', 'ember', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase) {
  'use strict';

  var RSVP = _ember['default'].RSVP;

  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
    restore: function restore(data) {
      return RSVP.resolve(data);
    },

    authenticate: function authenticate(data) {
      return RSVP.resolve(data);
    },

    invalidate: function invalidate() {
      return RSVP.resolve();
    }
  });
});
define('ember-simple-auth/authenticators/torii', ['exports', 'ember', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase) {
  'use strict';

  var RSVP = _ember['default'].RSVP;
  var isEmpty = _ember['default'].isEmpty;

  /**
    Authenticator that wraps the
    [Torii library](https://github.com/Vestorly/torii) and thus allows to connect
    any external authentication provider that torii defines a provider for.
  
    In order to use this authenticator, __the application needs to have the
    [torii addon](https://github.com/Vestorly/torii) installed and must inject
    the torii service into the authenticator__:
  
    ```js
    // app/authenticators/torii.js
    import ToriiAuthenticator from 'ember-simple-auth/authenticators/torii';
  
    export default ToriiAuthenticator.extend({
      torii: Ember.inject.service()
    });
    ```
  
    @class ToriiAuthenticator
    @module ember-simple-auth/authenticators/torii
    @extends BaseAuthenticator
    @public
  */
  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({
    _provider: null,

    /**
      Restores the session by calling the torii provider's `fetch` method.
       __Many torii providers do not implement the `fetch` method__. If the
      provider in use does not implement the method simply add it as follows:
       ```js
      // app/torii-providers/facebook.js
      import FacebookOauth2Provider from 'torii/providers/facebook-oauth2';
       export default FacebookOauth2Provider.extend({
        fetch(data) {
          return data;
        }
      });
      ```
       @method restore
      @param {Object} data The data to restore the session from
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated
      @public
    */
    restore: function restore(data) {
      var _this = this;

      this._assertToriiIsPresent();

      data = data || {};
      if (!isEmpty(data.provider)) {
        var _ret = (function () {
          var _data = data;
          var provider = _data.provider;

          return {
            v: _this.get('torii').fetch(data.provider, data).then(function (data) {
              _this._authenticateWithProvider(provider, data);
              return data;
            }, function () {
              return delete _this._provider;
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else {
        delete this._provider;
        return RSVP.reject();
      }
    },

    /**
      Authenticates the session by opening the specified torii provider. For more
      documentation on torii and its providers abstraction, see the
      [project's README](https://github.com/Vestorly/torii#readme), specifically
      the
      [section on providers](https://github.com/Vestorly/torii#configuring-a-torii-provider).
       @method authenticate
      @param {String} provider The torii provider to authenticate the session with
      @param {Object} options The options to pass to the torii provider
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated
      @public
    */
    authenticate: function authenticate(provider, options) {
      var _this2 = this;

      this._assertToriiIsPresent();

      return this.get('torii').open(provider, options || {}).then(function (data) {
        _this2._authenticateWithProvider(provider, data);
        return data;
      });
    },

    /**
      Closes the torii provider. If the provider is successfully closed, this
      method returns a resolving promise, otherwise it will return a rejecting
      promise, thus intercepting session invalidation.
       @method invalidate
      @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated
      @public
    */
    invalidate: function invalidate(data) {
      var _this3 = this;

      return this.get('torii').close(this._provider, data).then(function () {
        delete _this3._provider;
      });
    },

    _authenticateWithProvider: function _authenticateWithProvider(provider, data) {
      data.provider = provider;
      this._provider = data.provider;
    },

    _assertToriiIsPresent: function _assertToriiIsPresent() {
      var torii = this.get('torii');
      _ember['default'].assert('You are trying to use the torii authenticator but torii is not available. Inject torii into the authenticator with "torii: Ember.inject.service()".', _ember['default'].isPresent(torii));
    }
  });
});
define('ember-simple-auth/authorizers/base', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  /**
    The base class for all authorizers. __This serves as a starting point for
    implementing custom authorizers and must not be used directly.__
  
    Authorizers use the session data aqcuired by an authenticator when
    authenticating the session to construct authrorization data that can e.g. be
    injected into outgoing network requests etc. Depending on the authorization
    mechanism the authorizer implements, that authorization data might be an HTTP
    header, query string parameters, a cookie etc.
  
    __The authorizer has to fit the authenticator__ (see
    {{#crossLink "BaseAuthenticator"}}{{/crossLink}})
    as it can only use data that the authenticator acquires when authenticating
    the session.
  
    @class BaseAuthorizer
    @module ember-simple-auth/authorizers/base
    @extends Ember.Object
    @public
  */
  exports['default'] = _ember['default'].Object.extend({
    /**
      Authorizes a block of code. This method will be invoked by the session
      service's {{#crossLink "SessionService/authorize:method"}}{{/crossLink}}
      method which will pass the current authenticated session data (see
      {{#crossLink "SessionService/data:property"}}{{/crossLink}}) and a block.
      Depending on the mechanism it implements, the authorizer transforms the
      session data into authorization data and invokes the block with that data.
       `BaseAuthorizer`'s implementation does nothing. __This method must be
      overridden in custom authorizers.__
       @method authorize
      @param {Object} data The current authenticated session data
      @param {Function} block The callback to call with the authorization data
      @public
    */
    authorize: function authorize() {}
  });
});
define('ember-simple-auth/authorizers/devise', ['exports', 'ember', 'ember-simple-auth/authorizers/base'], function (exports, _ember, _emberSimpleAuthAuthorizersBase) {
  'use strict';

  var isEmpty = _ember['default'].isEmpty;

  /**
    Authorizer that works with the Ruby gem
    [devise](https://github.com/plataformatec/devise); includes the user's token
    and identification from the session data in the `Authorization` HTTP header,
    e.g.:
  
    ```
    Authorization: token="234rtgjneroigne4" email="user@domain.tld"
    ```
  
    __As token authentication is not actually part of devise anymore, the server
    needs to implement some customizations__ to work with this authenticator -
    see [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6).
  
    @class DeviseAuthorizer
    @module ember-simple-auth/authorizers/devise
    @extends BaseAuthorizer
    @public
  */
  exports['default'] = _emberSimpleAuthAuthorizersBase['default'].extend({
    /**
      The token attribute name.
       @property tokenAttributeName
      @type String
      @default 'token'
      @public
    */
    tokenAttributeName: 'token',

    /**
      The identification attribute name.
       @property identificationAttributeName
      @type String
      @default 'email'
      @public
    */
    identificationAttributeName: 'email',

    /**
      Includes the user's token (see
      {{#crossLink "DeviseAuthenticator/tokenAttributeName:property"}}{{/crossLink}})
      and identification (see
      {{#crossLink "DeviseAuthenticator/identificationAttributeName:property"}}{{/crossLink}})
      in the `Authorization` header.
       @method authorize
      @param {Object} data The data that the session currently holds
      @param {Function} block(headerName,headerContent) The callback to call with the authorization data; will receive the header name and header content as arguments
      @public
    */
    authorize: function authorize(data, block) {
      var _getProperties = this.getProperties('tokenAttributeName', 'identificationAttributeName');

      var tokenAttributeName = _getProperties.tokenAttributeName;
      var identificationAttributeName = _getProperties.identificationAttributeName;

      var userToken = data[tokenAttributeName];
      var userIdentification = data[identificationAttributeName];

      if (!isEmpty(userToken) && !isEmpty(userIdentification)) {
        var authData = tokenAttributeName + '="' + userToken + '", ' + identificationAttributeName + '="' + userIdentification + '"';
        block('Authorization', 'Token ' + authData);
      }
    }
  });
});
define('ember-simple-auth/authorizers/oauth2-bearer', ['exports', 'ember', 'ember-simple-auth/authorizers/base'], function (exports, _ember, _emberSimpleAuthAuthorizersBase) {
  /* jscs:disable requireDotNotation */
  'use strict';

  var isEmpty = _ember['default'].isEmpty;

  /**
    Authorizer that conforms to OAuth 2
    ([RFC 6749](http://tools.ietf.org/html/rfc6749)); includes the access token
    from the session data as a bearer token
    ([RFC 6750](http://tools.ietf.org/html/rfc6750)) in the `Authorization`
    header, e.g.:
  
    ```
    Authorization: Bearer 234rtgjneroigne4
    ```
  
    @class OAuth2BearerAuthorizer
    @module ember-simple-auth/authorizers/oauth2-bearer
    @extends BaseAuthorizer
    @public
  */
  exports['default'] = _emberSimpleAuthAuthorizersBase['default'].extend({
    /**
      Includes the access token from the session data into the `Authorization`
      header as a Bearer token, e.g.:
       ```
      Authorization: Bearer 234rtgjneroigne4
      ```
       @method authorize
      @param {Object} data The data that the session currently holds
      @param {Function} block(headerName,headerContent) The callback to call with the authorization data; will receive the header name and header content as arguments
      @public
    */
    authorize: function authorize(data, block) {
      var accessToken = data['access_token'];

      if (!isEmpty(accessToken)) {
        block('Authorization', 'Bearer ' + accessToken);
      }
    }
  });
});
define('ember-simple-auth/configuration', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var getWithDefault = _ember['default'].getWithDefault;

  var DEFAULTS = {
    baseURL: '',
    authenticationRoute: 'login',
    routeAfterAuthentication: 'index',
    routeIfAlreadyAuthenticated: 'index'
  };

  /**
    Ember Simple Auth's configuration object.
  
    To change any of these values, set them on the application's environment
    object, e.g.:
  
    ```js
    // config/environment.js
    ENV['ember-simple-auth'] = {
      authenticationRoute: 'sign-in'
    };
    ```
  
    @class Configuration
    @extends Object
    @module ember-simple-auth/configuration
    @public
  */
  exports['default'] = {
    /**
      The base URL of the application as configured in `config/environment.js`.
       @property baseURL
      @readOnly
      @static
      @type String
      @default ''
      @public
    */
    baseURL: DEFAULTS.baseURL,

    /**
      The route to transition to for authentication. The
      {{#crossLink "AuthenticatedRouteMixin"}}{{/crossLink}} will transition to
      this route when a route that implements the mixin is accessed when the
      route is not authenticated.
       @property authenticationRoute
      @readOnly
      @static
      @type String
      @default 'login'
      @public
    */
    authenticationRoute: DEFAULTS.authenticationRoute,

    /**
      The route to transition to after successful authentication.
       @property routeAfterAuthentication
      @readOnly
      @static
      @type String
      @default 'index'
      @public
    */
    routeAfterAuthentication: DEFAULTS.routeAfterAuthentication,

    /**
      The route to transition to if a route that implements the
      {{#crossLink "UnauthenticatedRouteMixin"}}{{/crossLink}} is accessed when
      the session is authenticated.
       @property routeIfAlreadyAuthenticated
      @readOnly
      @static
      @type String
      @default 'index'
      @public
    */
    routeIfAlreadyAuthenticated: DEFAULTS.routeIfAlreadyAuthenticated,

    load: function load(config) {
      for (var property in this) {
        if (this.hasOwnProperty(property) && _ember['default'].typeOf(this[property]) !== 'function') {
          this[property] = getWithDefault(config, property, DEFAULTS[property]);
        }
      }
    }
  };
});
define('ember-simple-auth/initializers/setup-session-service', ['exports', 'ember-simple-auth/utils/inject'], function (exports, _emberSimpleAuthUtilsInject) {
  'use strict';

  exports['default'] = setupSessionStore;

  function setupSessionStore(registry) {
    (0, _emberSimpleAuthUtilsInject['default'])(registry, 'service:session', 'session', 'session:main');
  }
});
define('ember-simple-auth/initializers/setup-session', ['exports', 'ember', 'ember-simple-auth/internal-session', 'ember-simple-auth/session-stores/ephemeral', 'ember-simple-auth/utils/inject'], function (exports, _ember, _emberSimpleAuthInternalSession, _emberSimpleAuthSessionStoresEphemeral, _emberSimpleAuthUtilsInject) {
  'use strict';

  exports['default'] = setupSession;

  function setupSession(registry) {
    registry.register('session:main', _emberSimpleAuthInternalSession['default']);

    var store = 'session-store:application';
    if (_ember['default'].testing) {
      store = 'session-store:test';
      registry.register(store, _emberSimpleAuthSessionStoresEphemeral['default']);
    }
    (0, _emberSimpleAuthUtilsInject['default'])(registry, 'session:main', 'store', store);
  }
});
define('ember-simple-auth/instance-initializers/setup-session-restoration', ['exports', 'ember-simple-auth/utils/lookup'], function (exports, _emberSimpleAuthUtilsLookup) {
  'use strict';

  exports['default'] = setupSessionRestoration;

  function setupSessionRestoration(instance) {
    var applicationRoute = (0, _emberSimpleAuthUtilsLookup['default'])(instance, 'route:application');
    var session = (0, _emberSimpleAuthUtilsLookup['default'])(instance, 'session:main');
    var originalBeforeModel = applicationRoute.beforeModel;
    var applyOriginalBeforeModel = function applyOriginalBeforeModel() {
      return originalBeforeModel.apply(applicationRoute, arguments);
    };
    applicationRoute.reopen({
      beforeModel: function beforeModel() {
        var _arguments = arguments;

        return session.restore().then(function () {
          return applyOriginalBeforeModel.apply(undefined, _arguments);
        }, function () {
          return applyOriginalBeforeModel.apply(undefined, _arguments);
        });
      }
    });
  }
});
define('ember-simple-auth/internal-session', ['exports', 'ember', 'ember-getowner-polyfill'], function (exports, _ember, _emberGetownerPolyfill) {
  'use strict';

  var RSVP = _ember['default'].RSVP;
  var isNone = _ember['default'].isNone;
  var isEmpty = _ember['default'].isEmpty;

  var assign = _ember['default'].assign || _ember['default'].merge;

  exports['default'] = _ember['default'].ObjectProxy.extend(_ember['default'].Evented, {
    authenticator: null,
    store: null,
    isAuthenticated: false,
    attemptedTransition: null,

    init: function init() {
      this._super.apply(this, arguments);
      this.set('content', { authenticated: {} });
      this._busy = false;
      this._bindToStoreEvents();
    },

    authenticate: function authenticate(authenticatorFactory) {
      var _this = this;

      this._busy = true;
      _ember['default'].assert('Session#authenticate requires the authenticator to be specified, was "' + authenticatorFactory + '"!', !isEmpty(authenticatorFactory));
      var authenticator = this._lookupAuthenticator(authenticatorFactory);
      _ember['default'].assert('No authenticator for factory "' + authenticatorFactory + '" could be found!', !isNone(authenticator));

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return authenticator.authenticate.apply(authenticator, args).then(function (content) {
        _this._busy = false;
        return _this._setup(authenticatorFactory, content, true);
      }, function (error) {
        var rejectWithError = function rejectWithError() {
          return RSVP.Promise.reject(error);
        };

        _this._busy = false;
        return _this._clear().then(rejectWithError, rejectWithError);
      });
    },

    invalidate: function invalidate() {
      var _this2 = this;

      this._busy = true;
      _ember['default'].assert('Session#invalidate requires the session to be authenticated!', this.get('isAuthenticated'));

      var authenticator = this._lookupAuthenticator(this.authenticator);
      return authenticator.invalidate(this.content.authenticated).then(function () {
        authenticator.off('sessionDataUpdated');
        _this2._busy = false;
        return _this2._clear(true);
      }, function (error) {
        _this2.trigger('sessionInvalidationFailed', error);
        _this2._busy = false;
        return RSVP.Promise.reject(error);
      });
    },

    restore: function restore() {
      var _this3 = this;

      this._busy = true;
      var reject = function reject() {
        return RSVP.Promise.reject();
      };

      return this._callStoreAsync('restore').then(function (restoredContent) {
        var _ref = restoredContent.authenticated || {};

        var authenticatorFactory = _ref.authenticator;

        if (!!authenticatorFactory) {
          delete restoredContent.authenticated.authenticator;
          var authenticator = _this3._lookupAuthenticator(authenticatorFactory);
          return authenticator.restore(restoredContent.authenticated).then(function (content) {
            _this3.set('content', restoredContent);
            _this3._busy = false;
            return _this3._setup(authenticatorFactory, content);
          }, function (err) {
            _ember['default'].Logger.debug('The authenticator "' + authenticatorFactory + '" rejected to restore the session - invalidating…');
            if (err) {
              _ember['default'].Logger.debug(err);
            }
            _this3._busy = false;
            return _this3._clearWithContent(restoredContent).then(reject, reject);
          });
        } else {
          delete (restoredContent || {}).authenticated;
          _this3._busy = false;
          return _this3._clearWithContent(restoredContent).then(reject, reject);
        }
      }, function () {
        _this3._busy = false;
        return _this3._clear().then(reject, reject);
      });
    },

    _callStoreAsync: function _callStoreAsync(method) {
      var _store;

      for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }

      var result = (_store = this.store)[method].apply(_store, params);

      if (typeof result === 'undefined' || typeof result.then === 'undefined') {
        _ember['default'].deprecate('Ember Simple Auth: Synchronous stores have been deprecated. Make sure your custom store\'s ' + method + ' method returns a promise.', false, {
          id: 'ember-simple-auth.session-store.synchronous-' + method,
          until: '2.0.0'
        });
        return RSVP.Promise.resolve(result);
      } else {
        return result;
      }
    },

    _setup: function _setup(authenticator, authenticatedContent, trigger) {
      var _this4 = this;

      trigger = !!trigger && !this.get('isAuthenticated');
      this.beginPropertyChanges();
      this.setProperties({
        isAuthenticated: true,
        authenticator: authenticator
      });
      _ember['default'].set(this.content, 'authenticated', authenticatedContent);
      this._bindToAuthenticatorEvents();

      return this._updateStore().then(function () {
        _this4.endPropertyChanges();
        if (trigger) {
          _this4.trigger('authenticationSucceeded');
        }
      }, function () {
        _this4.setProperties({
          isAuthenticated: false,
          authenticator: null
        });
        _ember['default'].set(_this4.content, 'authenticated', {});
        _this4.endPropertyChanges();
      });
    },

    _clear: function _clear(trigger) {
      var _this5 = this;

      trigger = !!trigger && this.get('isAuthenticated');
      this.beginPropertyChanges();
      this.setProperties({
        isAuthenticated: false,
        authenticator: null
      });
      _ember['default'].set(this.content, 'authenticated', {});

      return this._updateStore().then(function () {
        _this5.endPropertyChanges();
        if (trigger) {
          _this5.trigger('invalidationSucceeded');
        }
      }, function () {
        return _this5.endPropertyChanges();
      });
    },

    _clearWithContent: function _clearWithContent(content, trigger) {
      this.set('content', content);
      return this._clear(trigger);
    },

    setUnknownProperty: function setUnknownProperty(key, value) {
      _ember['default'].assert('"authenticated" is a reserved key used by Ember Simple Auth!', key !== 'authenticated');
      var result = this._super(key, value);
      this._updateStore();
      return result;
    },

    _updateStore: function _updateStore() {
      var data = this.content;
      if (!_ember['default'].isEmpty(this.authenticator)) {
        _ember['default'].set(data, 'authenticated', assign({ authenticator: this.authenticator }, data.authenticated || {}));
      }
      return this._callStoreAsync('persist', data);
    },

    _bindToAuthenticatorEvents: function _bindToAuthenticatorEvents() {
      var _this6 = this;

      var authenticator = this._lookupAuthenticator(this.authenticator);
      authenticator.off('sessionDataUpdated');
      authenticator.off('sessionDataInvalidated');
      authenticator.on('sessionDataUpdated', function (content) {
        _this6._setup(_this6.authenticator, content);
      });
      authenticator.on('sessionDataInvalidated', function () {
        _this6._clear(true);
      });
    },

    _bindToStoreEvents: function _bindToStoreEvents() {
      var _this7 = this;

      this.store.on('sessionDataUpdated', function (content) {
        if (!_this7._busy) {
          (function () {
            _this7._busy = true;

            var _ref2 = content.authenticated || {};

            var authenticatorFactory = _ref2.authenticator;

            if (!!authenticatorFactory) {
              delete content.authenticated.authenticator;
              var authenticator = _this7._lookupAuthenticator(authenticatorFactory);
              authenticator.restore(content.authenticated).then(function (authenticatedContent) {
                _this7.set('content', content);
                _this7._busy = false;
                _this7._setup(authenticatorFactory, authenticatedContent, true);
              }, function (err) {
                _ember['default'].Logger.debug('The authenticator "' + authenticatorFactory + '" rejected to restore the session - invalidating…');
                if (err) {
                  _ember['default'].Logger.debug(err);
                }
                _this7._busy = false;
                _this7._clearWithContent(content, true);
              });
            } else {
              _this7._busy = false;
              _this7._clearWithContent(content, true);
            }
          })();
        }
      });
    },

    _lookupAuthenticator: function _lookupAuthenticator(authenticator) {
      return (0, _emberGetownerPolyfill['default'])(this).lookup(authenticator);
    }
  });
});
define('ember-simple-auth/mixins/application-route-mixin', ['exports', 'ember', 'ember-simple-auth/configuration'], function (exports, _ember, _emberSimpleAuthConfiguration) {
  'use strict';

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  })();

  var inject = _ember['default'].inject;

  /**
    The mixin for the application route; __defines methods that are called when
    the session was successfully authenticated (see
    {{#crossLink "SessionService/authenticationSucceeded:event"}}{{/crossLink}})
    or invalidated__ (see
    {{#crossLink "SessionService/invalidationSucceeded:event"}}{{/crossLink}}).
  
    __Using this mixin is optional.__ The session events can also be handled
    manually, e.g. in an instance initializer:
  
    ```js
    // app/instance-initializers/session-events.js
    export function initialize(instance) {
      const applicationRoute = instance.container.lookup('route:application');
      const session          = instance.container.lookup('service:session');
      session.on('authenticationSucceeded', function() {
        applicationRoute.transitionTo('index');
      });
      session.on('invalidationSucceeded', function() {
        window.location.reload();
      });
    };
  
    export default {
      initialize,
      name:  'session-events',
      after: 'ember-simple-auth'
    };
    ```
  
    __When using the `ApplicationRouteMixin` you need to specify
    `needs: ['service:session']` in the application route's unit test.__
  
    @class ApplicationRouteMixin
    @module ember-simple-auth/mixins/application-route-mixin
    @extends Ember.Mixin
    @public
  */
  exports['default'] = _ember['default'].Mixin.create({
    /**
      The session service.
       @property session
      @readOnly
      @type SessionService
      @public
    */
    session: inject.service('session'),

    init: function init() {
      this._super.apply(this, arguments);
      this._subscribeToSessionEvents();
    },

    _subscribeToSessionEvents: function _subscribeToSessionEvents() {
      var _this = this,
          _arguments = arguments;

      _ember['default'].A([['authenticationSucceeded', 'sessionAuthenticated'], ['invalidationSucceeded', 'sessionInvalidated']]).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var event = _ref2[0];
        var method = _ref2[1];

        _this.get('session').on(event, _ember['default'].run.bind(_this, function () {
          _this[method].apply(_this, _arguments);
        }));
      });
    },

    /**
      This method handles the session's
      {{#crossLink "SessionService/authenticationSucceeded:event"}}{{/crossLink}}
      event. If there is a transition that was previously intercepted by
      {{#crossLink "AuthenticatedRouteMixin/beforeModel:method"}}the
      AuthenticatedRouteMixin's `beforeModel` method{{/crossLink}} it will retry
      it. If there is no such transition, this action transitions to the
      {{#crossLink "Configuration/routeAfterAuthentication:property"}}{{/crossLink}}.
       @method sessionAuthenticated
      @public
    */
    sessionAuthenticated: function sessionAuthenticated() {
      var attemptedTransition = this.get('session.attemptedTransition');

      if (attemptedTransition) {
        attemptedTransition.retry();
        this.set('session.attemptedTransition', null);
      } else {
        this.transitionTo(_emberSimpleAuthConfiguration['default'].routeAfterAuthentication);
      }
    },

    /**
      This method handles the session's
      {{#crossLink "SessionService/invalidationSucceeded:event"}}{{/crossLink}}
      event. __It reloads the Ember.js application__ by redirecting the browser
      to the application's root URL so that all in-memory data (such as Ember
      Data stores etc.) gets cleared.
       If the Ember.js application will be used in an environment where the users
      don't have direct access to any data stored on the client (e.g.
      [cordova](http://cordova.apache.org)) this action can be overridden to e.g.
      simply transition to the index route.
       @method sessionInvalidated
      @public
    */
    sessionInvalidated: function sessionInvalidated() {
      if (!_ember['default'].testing) {
        window.location.replace(_emberSimpleAuthConfiguration['default'].baseURL);
      }
    }
  });
});
define('ember-simple-auth/mixins/authenticated-route-mixin', ['exports', 'ember', 'ember-simple-auth/configuration'], function (exports, _ember, _emberSimpleAuthConfiguration) {
  'use strict';

  var service = _ember['default'].inject.service;

  /**
    __This mixin is used to make routes accessible only if the session is
    authenticated.__ It defines a `beforeModel` method that aborts the current
    transition and instead transitions to the
    {{#crossLink "Configuration/authenticationRoute:property"}}{{/crossLink}} if
    the session is not authenticated.
  
    ```js
    // app/routes/protected.js
    import AuthenticatedRouteMixin from 'ember-simple-auth/mixins/authenticated-route-mixin';
  
    export default Ember.Route.extend(AuthenticatedRouteMixin);
    ```
  
    @class AuthenticatedRouteMixin
    @module ember-simple-auth/mixins/authenticated-route-mixin
    @extends Ember.Mixin
    @public
  */
  exports['default'] = _ember['default'].Mixin.create({
    /**
      The session service.
       @property session
      @readOnly
      @type SessionService
      @public
    */
    session: service('session'),

    /**
      Checks whether the session is authenticated and if it is not aborts the
      current transition and instead transitions to the
      {{#crossLink "Configuration/authenticationRoute:property"}}{{/crossLink}}.
      If the current transition is aborted, this method will save it in the
      session service's
      {{#crossLink "SessionService/attemptedTransition:property"}}{{/crossLink}}
      property so that  it can be retried after the session was authenticated
      (see
      {{#crossLink "ApplicationRouteMixin/sessionAuthenticated:method"}}{{/crossLink}}.
       __If `beforeModel` is overridden in a route that uses this mixin, the route's
     implementation must call `this._super(...arguments)`__ so that the mixin's
     `beforeModel` method is actually executed.
       @method beforeModel
      @param {Transition} transition The transition that lead to this route
      @public
    */
    beforeModel: function beforeModel(transition) {
      if (!this.get('session.isAuthenticated')) {
        _ember['default'].assert('The route configured as Configuration.authenticationRoute cannot implement the AuthenticatedRouteMixin mixin as that leads to an infinite transitioning loop!', this.get('routeName') !== _emberSimpleAuthConfiguration['default'].authenticationRoute);

        transition.abort();
        this.set('session.attemptedTransition', transition);
        this.transitionTo(_emberSimpleAuthConfiguration['default'].authenticationRoute);
      } else {
        return this._super.apply(this, arguments);
      }
    }
  });
});
define('ember-simple-auth/mixins/data-adapter-mixin', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var service = _ember['default'].inject.service;

  /**
    __This mixin can be used to make Ember Data adapters authorize all outgoing
    API requests by injecting a header.__ It works with all authorizers that call
    the authorization callback (see
    {{#crossLink "BaseAuthorizer/authorize:method"}}{{/crossLink}}) with header
    name and header content arguments.
  
    __The `DataAdapterMixin` will also invalidate the session whenever it
    receives a 401 response for an API request.__
  
    ```js
    // app/adapters/application.js
    import DS from 'ember-data';
    import DataAdapterMixin from 'ember-simple-auth/mixins/data-adapter-mixin';
  
    export default DS.JSONAPIAdapter.extend(DataAdapterMixin, {
      authorizer: 'authorizer:application'
    });
    ```
  
    __The `DataAdapterMixin` requires Ember Data 1.13 or later.__
  
    @class DataAdapterMixin
    @module ember-simple-auth/mixins/data-adapter-mixin
    @extends Ember.Mixin
    @public
  */

  exports['default'] = _ember['default'].Mixin.create({
    /**
      The session service.
       @property session
      @readOnly
      @type SessionService
      @public
    */
    session: service('session'),

    /**
      The authorizer that is used to authorize API requests. The authorizer has
      to call the authorization callback (see
      {{#crossLink "BaseAuthorizer/authorize:method"}}{{/crossLink}}) with header
      name and header content arguments. __This property must be overridden in
      adapters using this mixin.__
       @property authorizer
      @type String
      @default null
      @public
    */
    authorizer: null,

    /**
      Defines a `beforeSend` hook (see http://api.jquery.com/jQuery.ajax/) that
      injects a request header containing the authorization data as constructed
      by the {{#crossLink "DataAdapterMixin/authorizer:property"}}{{/crossLink}}
      (see
      {{#crossLink "SessionService/authorize:method"}}{{/crossLink}}). The
      specific header name and contents depend on the actual auhorizer that is
      used.
       @method ajaxOptions
      @protected
    */
    ajaxOptions: function ajaxOptions() {
      var _this = this;

      var authorizer = this.get('authorizer');
      _ember['default'].assert("You're using the DataAdapterMixin without specifying an authorizer. Please add `authorizer: 'authorizer:application'` to your adapter.", _ember['default'].isPresent(authorizer));

      var hash = this._super.apply(this, arguments);
      var beforeSend = hash.beforeSend;

      hash.beforeSend = function (xhr) {
        _this.get('session').authorize(authorizer, function (headerName, headerValue) {
          xhr.setRequestHeader(headerName, headerValue);
        });
        if (beforeSend) {
          beforeSend(xhr);
        }
      };
      return hash;
    },

    /**
      This method is called for every response that the adapter receives from the
      API. If the response has a 401 status code it invalidates the session (see
      {{#crossLink "SessionService/invalidate:method"}}{{/crossLink}}).
       @method handleResponse
      @param {Number} status The response status as received from the API
      @protected
    */
    handleResponse: function handleResponse(status) {
      if (status === 401 && this.get('session.isAuthenticated')) {
        this.get('session').invalidate();
      }
      return this._super.apply(this, arguments);
    }
  });
});
define('ember-simple-auth/mixins/unauthenticated-route-mixin', ['exports', 'ember', 'ember-simple-auth/configuration'], function (exports, _ember, _emberSimpleAuthConfiguration) {
  'use strict';

  var service = _ember['default'].inject.service;

  /**
    __This mixin is used to make routes accessible only if the session is
    not authenticated__ (e.g. login and registration routes). It defines a
    `beforeModel` method that aborts the current transition and instead
    transitions to the
    {{#crossLink "Configuration/routeIfAlreadyAuthenticated:property"}}{{/crossLink}}
    if the session is authenticated.
  
    ```js
    // app/routes/login.js
    import UnauthenticatedRouteMixin from 'ember-simple-auth/mixins/unauthenticated-route-mixin';
  
    export default Ember.Route.extend(UnauthenticatedRouteMixin);
    ```
  
    @class UnauthenticatedRouteMixin
    @module ember-simple-auth/mixins/unauthenticated-route-mixin
    @extends Ember.Mixin
    @public
  */
  exports['default'] = _ember['default'].Mixin.create({
    /**
      The session service.
       @property session
      @readOnly
      @type SessionService
      @public
    */
    session: service('session'),

    /**
      Checks whether the session is authenticated and if it is aborts the current
      transition and instead transitions to the
      {{#crossLink "Configuration/routeIfAlreadyAuthenticated:property"}}{{/crossLink}}.
       __If `beforeModel` is overridden in a route that uses this mixin, the route's
     implementation must call `this._super(...arguments)`__ so that the mixin's
     `beforeModel` method is actually executed.
       @method beforeModel
      @param {Transition} transition The transition that lead to this route
      @public
    */
    beforeModel: function beforeModel(transition) {
      if (this.get('session').get('isAuthenticated')) {
        transition.abort();
        _ember['default'].assert('The route configured as Configuration.routeIfAlreadyAuthenticated cannot implement the UnauthenticatedRouteMixin mixin as that leads to an infinite transitioning loop!', this.get('routeName') !== _emberSimpleAuthConfiguration['default'].routeIfAlreadyAuthenticated);
        this.transitionTo(_emberSimpleAuthConfiguration['default'].routeIfAlreadyAuthenticated);
      } else {
        return this._super.apply(this, arguments);
      }
    }
  });
});
define('ember-simple-auth/services/session', ['exports', 'ember', 'ember-getowner-polyfill'], function (exports, _ember, _emberGetownerPolyfill) {
  'use strict';

  var _slice = Array.prototype.slice;

  var SESSION_DATA_KEY_PREFIX = /^data\./;

  var computed = _ember['default'].computed;

  /**
    __The session service provides access to the current session as well as
    methods to authenticate and invalidate it__ etc. It is the main interface for
    the application to Ember Simple Auth's functionality. It can be injected via
  
    ```js
    // app/components/login-form.js
    import Ember from 'ember';
  
    export default Ember.Component.extend({
      session: Ember.inject.service('session')
    });
    ```
  
    @class SessionService
    @module ember-simple-auth/services/session
    @extends Ember.Service
    @uses Ember.Evented
    @public
  */
  exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented, {
    /**
      Triggered whenever the session is successfully authenticated. This happens
      when the session gets authenticated via
      {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}} but also
      when the session is authenticated in another tab or window of the same
      application and the session state gets synchronized across tabs or windows
      via the store (see
      {{#crossLink "BaseStore/sessionDataUpdated:event"}}{{/crossLink}}).
       When using the {{#crossLink "ApplicationRouteMixin"}}{{/crossLink}} this
      event will automatically get handled (see
      {{#crossLink "ApplicationRouteMixin/sessionAuthenticated:method"}}{{/crossLink}}).
       @event authenticationSucceeded
      @public
    */

    /**
      Triggered whenever the session is successfully invalidated. This happens
      when the session gets invalidated via
      {{#crossLink "SessionService/invalidate:method"}}{{/crossLink}} but also
      when the session is invalidated in another tab or window of the same
      application and the session state gets synchronized across tabs or windows
      via the store (see
      {{#crossLink "BaseStore/sessionDataUpdated:event"}}{{/crossLink}}).
       When using the {{#crossLink "ApplicationRouteMixin"}}{{/crossLink}} this
      event will automatically get handled (see
      {{#crossLink "ApplicationRouteMixin/sessionInvalidated:method"}}{{/crossLink}}).
       @event invalidationSucceeded
      @public
    */

    /**
      Returns whether the session is currently authenticated.
       @property isAuthenticated
      @type Boolean
      @readOnly
      @default false
      @public
    */
    isAuthenticated: computed.oneWay('session.isAuthenticated'),

    /**
      The current session data as a plain object. The
      `authenticated` key holds the session data that the authenticator resolved
      with when the session was authenticated (see
      {{#crossLink "BaseAuthenticator/authenticate:method"}}{{/crossLink}}) and
      that will be cleared when the session is invalidated. This data cannot be
      written. All other session data is writable and will not be cleared when
      the session is invalidated.
       @property data
      @type Object
      @readOnly
      @default { authenticated: {} }
      @public
    */
    data: computed.oneWay('session.content'),

    /**
      The session store.
       @property store
      @type BaseStore
      @readOnly
      @default null
      @public
    */
    store: computed.oneWay('session.store'),

    /**
      A previously attempted but intercepted transition (e.g. by the
      {{#crossLink "AuthenticatedRouteMixin"}}{{/crossLink}}). If an attempted
      transition is present, the
      {{#crossLink "ApplicationRouteMixin"}}{{/crossLink}} will retry it when the
      session becomes authenticated (see
      {{#crossLink "ApplicationRouteMixin/sessionAuthenticated:method"}}{{/crossLink}}).
       @property attemptedTransition
      @type Transition
      @default null
      @public
    */
    attemptedTransition: computed.alias('session.attemptedTransition'),

    init: function init() {
      this._super.apply(this, arguments);
      this._forwardSessionEvents();
    },

    set: function set(key, value) {
      var setsSessionData = SESSION_DATA_KEY_PREFIX.test(key);
      if (setsSessionData) {
        var sessionDataKey = 'session.' + key.replace(SESSION_DATA_KEY_PREFIX, '');
        return this._super(sessionDataKey, value);
      } else {
        return this._super.apply(this, arguments);
      }
    },

    _forwardSessionEvents: function _forwardSessionEvents() {
      var _this = this,
          _arguments = arguments;

      _ember['default'].A(['authenticationSucceeded', 'invalidationSucceeded']).forEach(function (event) {
        var session = _this.get('session');
        // the internal session won't be available in route unit tests
        if (session) {
          session.on(event, function () {
            _this.trigger.apply(_this, [event].concat(_slice.call(_arguments)));
          });
        }
      });
    },

    /**
      __Authenticates the session with an `authenticator`__ and appropriate
      arguments. The authenticator implements the actual steps necessary to
      authenticate the session (see
      {{#crossLink "BaseAuthenticator/authenticate:method"}}{{/crossLink}}) and
      returns a promise after doing so. The session handles the returned promise
      and when it resolves becomes authenticated, otherwise remains
      unauthenticated. All data the authenticator resolves with will be
      accessible via the
      {{#crossLink "SessionService/data:property"}}session data's{{/crossLink}}
      `authenticated` property.
       __This method returns a promise. A resolving promise indicates that the
      session was successfully authenticated__ while a rejecting promise
      indicates that authentication failed and the session remains
      unauthenticated. The promise does not resolve with a value; instead, the
      data returned from the authenticator is available via the
      {{#crossLink "SessionService/data:property"}}{{/crossLink}} property.
       When authentication succeeds this will trigger the
      {{#crossLink "SessionService/authenticationSucceeded:event"}}{{/crossLink}}
      event.
       @method authenticate
      @param {String} authenticator The authenticator to use to authenticate the session
      @param {Any} [...args] The arguments to pass to the authenticator; depending on the type of authenticator these might be a set of credentials, a Facebook OAuth Token, etc.
      @return {Ember.RSVP.Promise} A promise that resolves when the session was authenticated successfully and rejects otherwise
      @public
    */
    authenticate: function authenticate() {
      var session = this.get('session');

      return session.authenticate.apply(session, arguments);
    },

    /**
      __Invalidates the session with the authenticator it is currently
      authenticated with__ (see
      {{#crossLink "SessionService/authenticate:method"}}{{/crossLink}}). This
      invokes the authenticator's
      {{#crossLink "BaseAuthenticator/invalidate:method"}}{{/crossLink}} method
      and handles the returned promise accordingly.
       This method returns a promise. A resolving promise indicates that the
      session was successfully invalidated while a rejecting promise indicates
      that invalidation failed and the session remains authenticated. Once the
      session is successfully invalidated it clears all of its authenticated data
      (see {{#crossLink "SessionService/data:property"}}{{/crossLink}}).
       When invalidation succeeds this will trigger the
      {{#crossLink "SessionService/invalidationSucceeded:event"}}{{/crossLink}}
      event.
       @method invalidate
      @return {Ember.RSVP.Promise} A promise that resolves when the session was invalidated successfully and rejects otherwise
      @public
    */
    invalidate: function invalidate() {
      var session = this.get('session');

      return session.invalidate.apply(session, arguments);
    },

    /**
      Authorizes a block of code with an authorizer (see
      {{#crossLink "BaseAuthorizer/authorize:method"}}{{/crossLink}}) if the
      session is authenticated. If the session is not currently authenticated
      this method does nothing.
       ```js
      this.get('session').authorize('authorizer:oauth2-bearer', (headerName, headerValue) => {
        xhr.setRequestHeader(headerName, headerValue);
      });
      ```
       @method authorize
      @param {String} authorizer The authorizer to authorize the block with
      @param {Function} block The block of code to call with the authorization data generated by the authorizer
      @public
    */
    authorize: function authorize(authorizerFactory, block) {
      if (this.get('isAuthenticated')) {
        var authorizer = (0, _emberGetownerPolyfill['default'])(this).lookup(authorizerFactory);
        var sessionData = this.get('data.authenticated');
        authorizer.authorize(sessionData, block);
      }
    }
  });
});
define('ember-simple-auth/session-stores/adaptive', ['exports', 'ember', 'ember-simple-auth/session-stores/base', 'ember-simple-auth/session-stores/local-storage', 'ember-simple-auth/session-stores/cookie'], function (exports, _ember, _emberSimpleAuthSessionStoresBase, _emberSimpleAuthSessionStoresLocalStorage, _emberSimpleAuthSessionStoresCookie) {
  /* global localStorage */
  'use strict';

  var computed = _ember['default'].computed;

  var LOCAL_STORAGE_TEST_KEY = '_ember_simple_auth_test_key';

  /**
    Session store that persists data in the browser's `localStorage` (see
    {{#crossLink "LocalStorageStore"}}{{/crossLink}}) if that is available or in
    a cookie (see {{#crossLink "CookieStore"}}{{/crossLink}}) if it is not.
  
    __This is the default store that Ember Simple Auth will use when the
    application doesn't define a custom store.__
  
    @class AdaptiveStore
    @module ember-simple-auth/session-stores/adaptive
    @extends BaseStore
    @public
  */
  exports['default'] = _emberSimpleAuthSessionStoresBase['default'].extend({
    /**
      The `localStorage` key the store persists data in if `localStorage` is
      available.
       @property localStorageKey
      @type String
      @default 'ember_simple_auth:session'
      @public
    */
    localStorageKey: 'ember_simple_auth:session',

    /**
      The domain to use for the cookie if `localStorage` is not available, e.g.,
      "example.com", ".example.com" (which includes all subdomains) or
      "subdomain.example.com". If not explicitly set, the cookie domain defaults
      to the domain the session was authneticated on.
       @property cookieDomain
      @type String
      @default null
      @public
    */
    cookieDomain: null,

    /**
      The name of the cookie to use if `localStorage` is not available.
       @property cookieName
      @type String
      @default ember_simple_auth:session
      @public
    */
    cookieName: 'ember_simple_auth:session',

    /**
      The expiration time for the cookie in seconds if `localStorage` is not
      available. A value of `null` will make the cookie a session cookie that
      expires and gets deleted when the browser is closed.
       @property cookieExpirationTime
      @default null
      @type Integer
      @public
    */
    cookieExpirationTime: null,

    _isLocalStorageAvailable: computed(function () {
      try {
        localStorage.setItem(LOCAL_STORAGE_TEST_KEY, true);
        localStorage.removeItem(LOCAL_STORAGE_TEST_KEY);
        return true;
      } catch (e) {
        return false;
      }
    }),

    init: function init() {
      this._super.apply(this, arguments);

      var store = undefined;
      if (this.get('_isLocalStorageAvailable')) {
        var options = { key: this.get('localStorageKey') };
        store = this._createStore(_emberSimpleAuthSessionStoresLocalStorage['default'], options);
      } else {
        var options = this.getProperties('cookieDomain', 'cookieName', 'cookieExpirationTime');
        store = this._createStore(_emberSimpleAuthSessionStoresCookie['default'], options);
      }
      this.set('_store', store);
    },

    _createStore: function _createStore(storeType, options) {
      var _this = this;

      var store = storeType.create(options);

      store.on('sessionDataUpdated', function (data) {
        _this.trigger('sessionDataUpdated', data);
      });
      return store;
    },

    /**
      Persists the `data` in the `localStorage` if it is available or in a cookie
      if it is not.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist: function persist() {
      var _get;

      return (_get = this.get('_store')).persist.apply(_get, arguments);
    },

    /**
      Returns all data currently stored in the `localStorage` if that is
      available - or if it is not, in the cookie - as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore: function restore() {
      return this.get('_store').restore();
    },

    /**
      Clears the store by deleting the
      {{#crossLink "LocalStorageStore/key:property"}}{{/crossLink}} from
      `localStorage` if that is available or by deleting the cookie if it is not.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear: function clear() {
      return this.get('_store').clear();
    }
  });
});
define('ember-simple-auth/session-stores/base', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var RSVP = _ember['default'].RSVP;

  /**
    The base class for all session stores. __This serves as a starting point for
    implementing custom session stores and must not be used directly.__
  
    Session Stores persist the session's state so that it survives a page reload
    and is synchronized across multiple tabs or windows of the same application.
  
    @class BaseStore
    @module ember-simple-auth/session-stores/base
    @extends Ember.Object
    @uses Ember.Evented
    @public
  */
  exports['default'] = _ember['default'].Object.extend(_ember['default'].Evented, {
    /**
      Triggered when the session store's data changes due to an external event,
      e.g. from another tab or window of the same application. The session
      handles that event, passes the updated data to its authenticator's
      {{#crossLink "BaseAuthenticator/restore:method"}}{{/crossLink}} method and
      handles the result of that invocation accordingly.
       @event sessionDataUpdated
      @param {Object} data The updated session data
      @public
    */

    /**
      Persists the `data`. This replaces all currently stored data.
       `BaseStores`'s implementation always returns a rejecting promise. __This
      method must be overridden in subclasses__.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist: function persist() {
      return RSVP.reject();
    },

    /**
      Returns all data currently stored as a plain object.
       `BaseStores`'s implementation always returns a rejecting promise. __This
      method must be overridden in subclasses__.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore: function restore() {
      return RSVP.reject();
    },

    /**
      Clears the store.
       `BaseStores`'s implementation always returns a rejecting promise. __This
      method must be overridden in subclasses__.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear: function clear() {
      return RSVP.reject();
    }
  });
});
define('ember-simple-auth/session-stores/cookie', ['exports', 'ember', 'ember-simple-auth/session-stores/base', 'ember-simple-auth/utils/objects-are-equal'], function (exports, _ember, _emberSimpleAuthSessionStoresBase, _emberSimpleAuthUtilsObjectsAreEqual) {
  'use strict';

  var RSVP = _ember['default'].RSVP;
  var computed = _ember['default'].computed;
  var next = _ember['default'].run.next;

  /**
    Session store that persists data in a cookie.
  
    By default the cookie session store uses a session cookie that expires and is
    deleted when the browser is closed. The cookie expiration period can be
    configured by setting the
    {{#crossLink "CookieStore/cookieExpirationTime:property"}}{{/crossLink}}
    property. This can be used to implement "remember me" functionality that will
    either store the session persistently or in a session cookie depending on
    whether the user opted in or not:
  
    ```js
    // app/controllers/login.js
    export default Ember.Controller.extend({
      rememberMe: false,
  
      _rememberMeChanged: Ember.observer('rememberMe', function() {
        const expirationTime = this.get('rememberMe') ? (14 * 24 * 60 * 60) : null;
        this.set('session.store.cookieExpirationTime', expirationTime);
      }
    });
    ```
  
    __In order to keep multiple tabs/windows of an application in sync, this
    store has to periodically (every 500ms) check the cookie for changes__ as
    there are no events for cookie changes that the store could subscribe to. If
    the application does not need to make sure all session data is deleted when
    the browser is closed, the
    {{#crossLink "LocalStorageStore"}}`localStorage` session store{{/crossLink}}
    should be used.
  
    @class CookieStore
    @module ember-simple-auth/session-stores/cookie
    @extends BaseStore
    @public
  */
  exports['default'] = _emberSimpleAuthSessionStoresBase['default'].extend({
    /**
      The domain to use for the cookie, e.g., "example.com", ".example.com"
      (which includes all subdomains) or "subdomain.example.com". If not
      explicitly set, the cookie domain defaults to the domain the session was
      authneticated on.
       @property cookieDomain
      @type String
      @default null
      @public
    */
    cookieDomain: null,

    /**
      The name of the cookie.
       @property cookieName
      @type String
      @default ember_simple_auth:session
      @public
    */
    cookieName: 'ember_simple_auth:session',

    /**
      The expiration time for the cookie in seconds. A value of `null` will make
      the cookie a session cookie that expires and gets deleted when the browser
      is closed.
       @property cookieExpirationTime
      @default null
      @type Integer
      @public
    */
    cookieExpirationTime: null,

    _secureCookies: window.location.protocol === 'https:',

    _syncDataTimeout: null,

    _renewExpirationTimeout: null,

    _isPageVisible: computed(function () {
      var visibilityState = document.visibilityState || 'visible';
      return visibilityState === 'visible';
    }).volatile(),

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);

      next(function () {
        _this._syncData().then(function () {
          _this._renewExpiration();
        });
      });
    },

    /**
      Persists the `data` in the cookie.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist: function persist(data) {
      this._lastData = data;
      data = JSON.stringify(data || {});
      var expiration = this._calculateExpirationTime();
      this._write(data, expiration);
      return RSVP.resolve();
    },

    /**
      Returns all data currently stored in the cookie as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore: function restore() {
      var data = this._read(this.cookieName);
      if (_ember['default'].isEmpty(data)) {
        return RSVP.resolve({});
      } else {
        return RSVP.resolve(JSON.parse(data));
      }
    },

    /**
      Clears the store by deleting the cookie.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear: function clear() {
      this._write(null, 0);
      this._lastData = {};
      return RSVP.resolve();
    },

    _read: function _read(name) {
      var value = document.cookie.match(new RegExp(name + '=([^;]+)')) || [];
      return decodeURIComponent(value[1] || '');
    },

    _calculateExpirationTime: function _calculateExpirationTime() {
      var cachedExpirationTime = this._read(this.cookieName + ':expiration_time');
      cachedExpirationTime = !!cachedExpirationTime ? new Date().getTime() + cachedExpirationTime * 1000 : null;
      return !!this.cookieExpirationTime ? new Date().getTime() + this.cookieExpirationTime * 1000 : cachedExpirationTime;
    },

    _write: function _write(value, expiration) {
      var path = '; path=/';
      var domain = _ember['default'].isEmpty(this.cookieDomain) ? '' : '; domain=' + this.cookieDomain;
      var expires = _ember['default'].isEmpty(expiration) ? '' : '; expires=' + new Date(expiration).toUTCString();
      var secure = !!this._secureCookies ? ';secure' : '';
      document.cookie = this.cookieName + '=' + encodeURIComponent(value) + domain + path + expires + secure;
      if (expiration !== null) {
        var cachedExpirationTime = this._read(this.cookieName + ':expiration_time');
        document.cookie = this.cookieName + ':expiration_time=' + encodeURIComponent(this.cookieExpirationTime || cachedExpirationTime) + domain + path + expires + secure;
      }
    },

    _syncData: function _syncData() {
      var _this2 = this;

      return this.restore().then(function (data) {
        if (!(0, _emberSimpleAuthUtilsObjectsAreEqual['default'])(data, _this2._lastData)) {
          _this2._lastData = data;
          _this2.trigger('sessionDataUpdated', data);
        }
        if (!_ember['default'].testing) {
          _ember['default'].run.cancel(_this2._syncDataTimeout);
          _this2._syncDataTimeout = _ember['default'].run.later(_this2, _this2._syncData, 500);
        }
      });
    },

    _renew: function _renew() {
      var _this3 = this;

      return this.restore().then(function (data) {
        if (!_ember['default'].isEmpty(data) && data !== {}) {
          data = _ember['default'].typeOf(data) === 'string' ? data : JSON.stringify(data || {});
          var expiration = _this3._calculateExpirationTime();
          _this3._write(data, expiration);
        }
      });
    },

    _renewExpiration: function _renewExpiration() {
      if (!_ember['default'].testing) {
        _ember['default'].run.cancel(this._renewExpirationTimeout);
        this._renewExpirationTimeout = _ember['default'].run.later(this, this._renewExpiration, 60000);
      }
      if (this.get('_isPageVisible')) {
        return this._renew();
      } else {
        return RSVP.resolve();
      }
    }
  });
});
define('ember-simple-auth/session-stores/ephemeral', ['exports', 'ember', 'ember-simple-auth/session-stores/base'], function (exports, _ember, _emberSimpleAuthSessionStoresBase) {
  'use strict';

  var RSVP = _ember['default'].RSVP;

  /**
    Session store that __persists data in memory and thus is not actually
    persistent__. It does also not synchronize the session's state across
    multiple tabs or windows as those cannot share memory. __This store is mainly
    useful for testing and will automatically be used when running tests.__
  
    @class EphemeralStore
    @module ember-simple-auth/session-stores/ephemeral
    @extends BaseStore
    @public
  */
  exports['default'] = _emberSimpleAuthSessionStoresBase['default'].extend({
    init: function init() {
      this._super.apply(this, arguments);
      this.clear();
    },

    /**
      Persists the `data`. This replaces all currently stored data.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist: function persist(data) {
      this._data = JSON.stringify(data || {});

      return RSVP.resolve();
    },

    /**
      Returns all data currently stored as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore: function restore() {
      var data = JSON.parse(this._data) || {};

      return RSVP.resolve(data);
    },

    /**
      Clears the store.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear: function clear() {
      delete this._data;
      this._data = '{}';

      return RSVP.resolve();
    }
  });
});
define('ember-simple-auth/session-stores/local-storage', ['exports', 'ember', 'ember-simple-auth/session-stores/base', 'ember-simple-auth/utils/objects-are-equal'], function (exports, _ember, _emberSimpleAuthSessionStoresBase, _emberSimpleAuthUtilsObjectsAreEqual) {
  /* global localStorage */
  'use strict';

  var RSVP = _ember['default'].RSVP;

  /**
    Session store that persists data in the browser's `localStorage`.
  
    __`localStorage` is not available in Safari when running in private mode. In
    general it is better to use the
    {{#crossLink "AdaptiveStore"}}{{/crossLink}} that automatically falls back to
    the {{#crossLink "CookieStore"}}{{/crossLink}} when `localStorage` is not
    available.__
  
    @class LocalStorageStore
    @module ember-simple-auth/session-stores/local-storage
    @extends BaseStore
    @public
  */
  exports['default'] = _emberSimpleAuthSessionStoresBase['default'].extend({
    /**
      The `localStorage` key the store persists data in.
       @property key
      @type String
      @default 'ember_simple_auth:session'
      @public
    */
    key: 'ember_simple_auth:session',

    init: function init() {
      this._super.apply(this, arguments);

      this._bindToStorageEvents();
    },

    /**
      Persists the `data` in the `localStorage`.
       @method persist
      @param {Object} data The data to persist
      @return {Ember.RSVP.Promise} A promise that resolves when the data has successfully been persisted and rejects otherwise.
      @public
    */
    persist: function persist(data) {
      this._lastData = data;
      data = JSON.stringify(data || {});
      localStorage.setItem(this.key, data);

      return RSVP.resolve();
    },

    /**
      Returns all data currently stored in the `localStorage` as a plain object.
       @method restore
      @return {Ember.RSVP.Promise} A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.
      @public
    */
    restore: function restore() {
      var data = localStorage.getItem(this.key);

      return RSVP.resolve(JSON.parse(data) || {});
    },

    /**
      Clears the store by deleting the
      {{#crossLink "LocalStorageStore/key:property"}}{{/crossLink}} from
      `localStorage`.
       @method clear
      @return {Ember.RSVP.Promise} A promise that resolves when the store has been cleared successfully and rejects otherwise.
      @public
    */
    clear: function clear() {
      localStorage.removeItem(this.key);
      this._lastData = {};

      return RSVP.resolve();
    },

    _bindToStorageEvents: function _bindToStorageEvents() {
      var _this = this;

      _ember['default'].$(window).bind('storage', function (e) {
        if (e.originalEvent.key === _this.key) {
          _this.restore().then(function (data) {
            if (!(0, _emberSimpleAuthUtilsObjectsAreEqual['default'])(data, _this._lastData)) {
              _this._lastData = data;
              _this.trigger('sessionDataUpdated', data);
            }
          });
        }
      });
    }
  });
});
define("ember-simple-auth/utils/inject", ["exports"], function (exports) {
  "use strict";

  exports["default"] = function (registry, factoryNameOrType, property, injectionName) {
    var inject = registry.inject || registry.injection;
    inject.call(registry, factoryNameOrType, property, injectionName);
  };
});
define("ember-simple-auth/utils/lookup", ["exports"], function (exports) {
  "use strict";

  exports["default"] = function (instance, factoryName) {
    if (instance.lookup) {
      return instance.lookup(factoryName);
    } else {
      return instance.container.lookup(factoryName);
    }
  };
});
define('ember-simple-auth/utils/objects-are-equal', ['exports'], function (exports) {
  'use strict';

  exports['default'] = objectsAreEqual;

  function objectsAreEqual(a, b) {
    function compare(x, y) {
      var property = undefined;
      if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
        return true;
      }

      if (x === y) {
        return true;
      }

      if (!(x instanceof Object && y instanceof Object)) {
        return false;
      }

      for (property in y) {
        if (y.hasOwnProperty(property) !== x.hasOwnProperty(property)) {
          return false;
        } else if (typeof y[property] !== typeof x[property]) {
          return false;
        }
      }

      for (property in x) {
        if (y.hasOwnProperty(property) !== x.hasOwnProperty(property)) {
          return false;
        } else if (typeof y[property] !== typeof x[property]) {
          return false;
        }

        switch (typeof x[property]) {
          case 'object':
            if (!compare(x[property], y[property])) {
              return false;
            }
            break;
          default:
            if (x[property] !== y[property]) {
              return false;
            }
            break;
        }
      }

      return true;
    }

    return compare(a, b);
  }
});
define('ember-truth-helpers/helpers/and', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _emberTruthHelpersUtilsTruthConvert) {
  'use strict';

  exports.andHelper = andHelper;

  function andHelper(params) {
    for (var i = 0, len = params.length; i < len; i++) {
      if ((0, _emberTruthHelpersUtilsTruthConvert['default'])(params[i]) === false) {
        return params[i];
      }
    }
    return params[params.length - 1];
  }
});
define("ember-truth-helpers/helpers/equal", ["exports"], function (exports) {
  "use strict";

  exports.equalHelper = equalHelper;

  function equalHelper(params) {
    return params[0] === params[1];
  }
});
define('ember-truth-helpers/helpers/gt', ['exports'], function (exports) {
  'use strict';

  exports.gtHelper = gtHelper;

  function gtHelper(params, hash) {
    var left = params[0];
    var right = params[1];
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left > right;
  }
});
define('ember-truth-helpers/helpers/gte', ['exports'], function (exports) {
  'use strict';

  exports.gteHelper = gteHelper;

  function gteHelper(params, hash) {
    var left = params[0];
    var right = params[1];
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left >= right;
  }
});
define('ember-truth-helpers/helpers/is-array', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports.isArrayHelper = isArrayHelper;

  function isArrayHelper(params) {
    for (var i = 0, len = params.length; i < len; i++) {
      if (_ember['default'].isArray(params[i]) === false) {
        return false;
      }
    }
    return true;
  }
});
define('ember-truth-helpers/helpers/lt', ['exports'], function (exports) {
  'use strict';

  exports.ltHelper = ltHelper;

  function ltHelper(params, hash) {
    var left = params[0];
    var right = params[1];
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left < right;
  }
});
define('ember-truth-helpers/helpers/lte', ['exports'], function (exports) {
  'use strict';

  exports.lteHelper = lteHelper;

  function lteHelper(params, hash) {
    var left = params[0];
    var right = params[1];
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left <= right;
  }
});
define("ember-truth-helpers/helpers/not-equal", ["exports"], function (exports) {
  "use strict";

  exports.notEqualHelper = notEqualHelper;

  function notEqualHelper(params) {
    return params[0] !== params[1];
  }
});
define('ember-truth-helpers/helpers/not', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _emberTruthHelpersUtilsTruthConvert) {
  'use strict';

  exports.notHelper = notHelper;

  function notHelper(params) {
    for (var i = 0, len = params.length; i < len; i++) {
      if ((0, _emberTruthHelpersUtilsTruthConvert['default'])(params[i]) === true) {
        return false;
      }
    }
    return true;
  }
});
define('ember-truth-helpers/helpers/or', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _emberTruthHelpersUtilsTruthConvert) {
  'use strict';

  exports.orHelper = orHelper;

  function orHelper(params) {
    for (var i = 0, len = params.length; i < len; i++) {
      if ((0, _emberTruthHelpersUtilsTruthConvert['default'])(params[i]) === true) {
        return params[i];
      }
    }
    return params[params.length - 1];
  }
});
define('ember-truth-helpers/helpers/xor', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _emberTruthHelpersUtilsTruthConvert) {
  'use strict';

  exports.xorHelper = xorHelper;

  function xorHelper(params) {
    return (0, _emberTruthHelpersUtilsTruthConvert['default'])(params[0]) !== (0, _emberTruthHelpersUtilsTruthConvert['default'])(params[1]);
  }
});
define('ember-truth-helpers/utils/register-helper', ['exports', 'ember'], function (exports, _ember) {
	'use strict';

	exports.registerHelper = registerHelper;

	function registerHelperIteration1(name, helperFunction) {
		//earlier versions of ember with htmlbars used this
		_ember['default'].HTMLBars.helpers[name] = _ember['default'].HTMLBars.makeBoundHelper(helperFunction);
	}

	function registerHelperIteration2(name, helperFunction) {
		//registerHelper has been made private as _registerHelper
		//this is kept here if anyone is using it
		_ember['default'].HTMLBars.registerHelper(name, _ember['default'].HTMLBars.makeBoundHelper(helperFunction));
	}

	function registerHelperIteration3(name, helperFunction) {
		//latest versin of ember uses this
		_ember['default'].HTMLBars._registerHelper(name, _ember['default'].HTMLBars.makeBoundHelper(helperFunction));
	}

	function registerHelper(name, helperFunction) {
		// Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
		// will be auto-discovered.
		if (_ember['default'].Helper) {
			return;
		}

		if (_ember['default'].HTMLBars._registerHelper) {
			if (_ember['default'].HTMLBars.helpers) {
				registerHelperIteration1(name, helperFunction);
			} else {
				registerHelperIteration3(name, helperFunction);
			}
		} else if (_ember['default'].HTMLBars.registerHelper) {
			registerHelperIteration2(name, helperFunction);
		}
	}
});
define('ember-truth-helpers/utils/truth-convert', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  exports['default'] = truthConvert;

  function truthConvert(result) {
    var truthy = result && _ember['default'].get(result, 'isTruthy');
    if (typeof truthy === 'boolean') {
      return truthy;
    }

    if (_ember['default'].isArray(result)) {
      return _ember['default'].get(result, 'length') !== 0;
    } else {
      return !!result;
    }
  }
});
define('ember-wormhole/components/ember-wormhole', ['exports', 'ember', 'ember-wormhole/templates/components/ember-wormhole', 'ember-wormhole/utils/dom'], function (exports, _ember, _emberWormholeTemplatesComponentsEmberWormhole, _emberWormholeUtilsDom) {
  'use strict';

  var Component = _ember['default'].Component;
  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;
  var run = _ember['default'].run;

  exports['default'] = Component.extend({
    layout: _emberWormholeTemplatesComponentsEmberWormhole['default'],

    /*
     * Attrs
     */
    to: computed.alias('destinationElementId'),
    destinationElementId: null,
    destinationElement: computed('destinationElementId', 'renderInPlace', function () {
      var renderInPlace = this.get('renderInPlace');
      if (renderInPlace) {
        return this._element;
      }
      var id = this.get('destinationElementId');
      if (!id) {
        return null;
      }
      return (0, _emberWormholeUtilsDom.findElementById)(this._dom.document, id);
    }),
    renderInPlace: false,

    /*
     * Lifecycle
     */
    init: function init() {
      this._super.apply(this, arguments);

      this._dom = (0, _emberWormholeUtilsDom.getDOM)(this);

      // Create text nodes used for the head, tail
      this._wormholeHeadNode = this._dom.document.createTextNode('');
      this._wormholeTailNode = this._dom.document.createTextNode('');

      // A prop to help in the mocking of didInsertElement timing for Fastboot
      this._didInsert = false;
    },

    /*
     * didInsertElement does not fire in Fastboot. Here we use willRender and
     * a _didInsert property to approximate the timing. Importantly we want
     * to run appendToDestination after the child nodes have rendered.
     */
    willRender: function willRender() {
      var _this = this;

      this._super.apply(this, arguments);
      if (!this._didInsert) {
        this._didInsert = true;
        run.schedule('afterRender', function () {
          if (_this.isDestroyed) {
            return;
          }
          _this._element = _this._wormholeHeadNode.parentNode;
          if (!_this._element) {
            throw new Error('The head node of a wormhole must be attached to the DOM');
          }
          _this._appendToDestination();
        });
      }
    },

    willDestroyElement: function willDestroyElement() {
      var _this2 = this;

      // not called in fastboot
      this._super.apply(this, arguments);
      this._didInsert = false;
      var _wormholeHeadNode = this._wormholeHeadNode;
      var _wormholeTailNode = this._wormholeTailNode;

      run.schedule('render', function () {
        _this2._removeRange(_wormholeHeadNode, _wormholeTailNode);
      });
    },

    _destinationDidChange: observer('destinationElement', function () {
      var destinationElement = this.get('destinationElement');
      if (destinationElement !== this._wormholeHeadNode.parentNode) {
        run.schedule('render', this, '_appendToDestination');
      }
    }),

    _appendToDestination: function _appendToDestination() {
      var destinationElement = this.get('destinationElement');
      if (!destinationElement) {
        var destinationElementId = this.get('destinationElementId');
        if (destinationElementId) {
          throw new Error('ember-wormhole failed to render into \'#' + this.get('destinationElementId') + '\' because the element is not in the DOM');
        }
        throw new Error('ember-wormhole failed to render content because the destinationElementId was set to an undefined or falsy value.');
      }

      var currentActiveElement = (0, _emberWormholeUtilsDom.getActiveElement)();
      this._appendRange(destinationElement, this._wormholeHeadNode, this._wormholeTailNode);
      if (currentActiveElement && (0, _emberWormholeUtilsDom.getActiveElement)() !== currentActiveElement) {
        currentActiveElement.focus();
      }
    },

    _appendRange: function _appendRange(destinationElement, firstNode, lastNode) {
      while (firstNode) {
        destinationElement.insertBefore(firstNode, null);
        firstNode = firstNode !== lastNode ? lastNode.parentNode.firstChild : null;
      }
    },

    _removeRange: function _removeRange(firstNode, lastNode) {
      var node = lastNode;
      do {
        var next = node.previousSibling;
        if (node.parentNode) {
          node.parentNode.removeChild(node);
          if (node === firstNode) {
            break;
          }
        }
        node = next;
      } while (node);
    }

  });
});
define("ember-wormhole/templates/components/ember-wormhole", ["exports"], function (exports) {
  "use strict";

  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.7.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "modules/ember-wormhole/templates/components/ember-wormhole.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "unbound", [["get", "_wormholeHeadNode", ["loc", [null, [1, 10], [1, 27]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 31]]], 0, 0], ["content", "yield", ["loc", [null, [2, 0], [2, 11]]], 0, 0, 0, 0], ["inline", "unbound", [["get", "_wormholeTailNode", ["loc", [null, [3, 10], [3, 27]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 0], [3, 31]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('ember-wormhole/utils/dom', ['exports'], function (exports) {
  'use strict';

  exports.getActiveElement = getActiveElement;
  exports.findElementById = findElementById;
  exports.getDOM = getDOM;

  /*
   * Implement some helpers methods for interacting with the DOM,
   * be it Fastboot's SimpleDOM or the browser's version.
   */

  function getActiveElement() {
    if (typeof document === 'undefined') {
      return null;
    } else {
      return document.activeElement;
    }
  }

  function childNodesOfElement(element) {
    var children = [];
    var child = element.firstChild;
    while (child) {
      children.push(child);
      child = child.nextSibling;
    }
    return children;
  }

  function findElementById(doc, id) {
    if (doc.getElementById) {
      return doc.getElementById(id);
    }

    var nodes = childNodesOfElement(doc);
    var node = undefined;

    while (nodes.length) {
      node = nodes.shift();

      if (node.getAttribute && node.getAttribute('id') === id) {
        return node;
      }

      nodes = childNodesOfElement(node).concat(nodes);
    }
  }

  // Private Ember API usage. Get the dom implementation used by the current
  // renderer, be it native browser DOM or Fastboot SimpleDOM

  function getDOM(context) {
    var renderer = context.renderer;

    if (renderer._dom) {
      // pre glimmer2
      return renderer._dom;
    } else if (renderer._env && renderer._env.getDOM) {
      // glimmer2
      return renderer._env.getDOM();
    } else {
      throw new Error('ember-wormhole could not get DOM');
    }
  }
});
define('lodash/array', ['exports', 'lodash/array/chunk', 'lodash/array/compact', 'lodash/array/difference', 'lodash/array/drop', 'lodash/array/dropRight', 'lodash/array/dropRightWhile', 'lodash/array/dropWhile', 'lodash/array/fill', 'lodash/array/findIndex', 'lodash/array/findLastIndex', 'lodash/array/first', 'lodash/array/flatten', 'lodash/array/flattenDeep', 'lodash/array/head', 'lodash/array/indexOf', 'lodash/array/initial', 'lodash/array/intersection', 'lodash/array/last', 'lodash/array/lastIndexOf', 'lodash/array/object', 'lodash/array/pull', 'lodash/array/pullAt', 'lodash/array/remove', 'lodash/array/rest', 'lodash/array/slice', 'lodash/array/sortedIndex', 'lodash/array/sortedLastIndex', 'lodash/array/tail', 'lodash/array/take', 'lodash/array/takeRight', 'lodash/array/takeRightWhile', 'lodash/array/takeWhile', 'lodash/array/union', 'lodash/array/uniq', 'lodash/array/unique', 'lodash/array/unzip', 'lodash/array/unzipWith', 'lodash/array/without', 'lodash/array/xor', 'lodash/array/zip', 'lodash/array/zipObject', 'lodash/array/zipWith'], function (exports, _lodashArrayChunk, _lodashArrayCompact, _lodashArrayDifference, _lodashArrayDrop, _lodashArrayDropRight, _lodashArrayDropRightWhile, _lodashArrayDropWhile, _lodashArrayFill, _lodashArrayFindIndex, _lodashArrayFindLastIndex, _lodashArrayFirst, _lodashArrayFlatten, _lodashArrayFlattenDeep, _lodashArrayHead, _lodashArrayIndexOf, _lodashArrayInitial, _lodashArrayIntersection, _lodashArrayLast, _lodashArrayLastIndexOf, _lodashArrayObject, _lodashArrayPull, _lodashArrayPullAt, _lodashArrayRemove, _lodashArrayRest, _lodashArraySlice, _lodashArraySortedIndex, _lodashArraySortedLastIndex, _lodashArrayTail, _lodashArrayTake, _lodashArrayTakeRight, _lodashArrayTakeRightWhile, _lodashArrayTakeWhile, _lodashArrayUnion, _lodashArrayUniq, _lodashArrayUnique, _lodashArrayUnzip, _lodashArrayUnzipWith, _lodashArrayWithout, _lodashArrayXor, _lodashArrayZip, _lodashArrayZipObject, _lodashArrayZipWith) {
  'use strict';

  exports['default'] = {
    'chunk': _lodashArrayChunk['default'],
    'compact': _lodashArrayCompact['default'],
    'difference': _lodashArrayDifference['default'],
    'drop': _lodashArrayDrop['default'],
    'dropRight': _lodashArrayDropRight['default'],
    'dropRightWhile': _lodashArrayDropRightWhile['default'],
    'dropWhile': _lodashArrayDropWhile['default'],
    'fill': _lodashArrayFill['default'],
    'findIndex': _lodashArrayFindIndex['default'],
    'findLastIndex': _lodashArrayFindLastIndex['default'],
    'first': _lodashArrayFirst['default'],
    'flatten': _lodashArrayFlatten['default'],
    'flattenDeep': _lodashArrayFlattenDeep['default'],
    'head': _lodashArrayHead['default'],
    'indexOf': _lodashArrayIndexOf['default'],
    'initial': _lodashArrayInitial['default'],
    'intersection': _lodashArrayIntersection['default'],
    'last': _lodashArrayLast['default'],
    'lastIndexOf': _lodashArrayLastIndexOf['default'],
    'object': _lodashArrayObject['default'],
    'pull': _lodashArrayPull['default'],
    'pullAt': _lodashArrayPullAt['default'],
    'remove': _lodashArrayRemove['default'],
    'rest': _lodashArrayRest['default'],
    'slice': _lodashArraySlice['default'],
    'sortedIndex': _lodashArraySortedIndex['default'],
    'sortedLastIndex': _lodashArraySortedLastIndex['default'],
    'tail': _lodashArrayTail['default'],
    'take': _lodashArrayTake['default'],
    'takeRight': _lodashArrayTakeRight['default'],
    'takeRightWhile': _lodashArrayTakeRightWhile['default'],
    'takeWhile': _lodashArrayTakeWhile['default'],
    'union': _lodashArrayUnion['default'],
    'uniq': _lodashArrayUniq['default'],
    'unique': _lodashArrayUnique['default'],
    'unzip': _lodashArrayUnzip['default'],
    'unzipWith': _lodashArrayUnzipWith['default'],
    'without': _lodashArrayWithout['default'],
    'xor': _lodashArrayXor['default'],
    'zip': _lodashArrayZip['default'],
    'zipObject': _lodashArrayZipObject['default'],
    'zipWith': _lodashArrayZipWith['default']
  };
});
define('lodash/array/chunk', ['exports', 'lodash/internal/baseSlice', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSlice, _lodashInternalIsIterateeCall) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeFloor = Math.floor,
      nativeMax = Math.max;

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `collection` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the new array containing chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(array, size, guard) : size == null) {
      size = 1;
    } else {
      size = nativeMax(nativeFloor(size) || 1, 1);
    }
    var index = 0,
        length = array ? array.length : 0,
        resIndex = -1,
        result = Array(nativeCeil(length / size));

    while (index < length) {
      result[++resIndex] = (0, _lodashInternalBaseSlice['default'])(array, index, index += size);
    }
    return result;
  }

  exports['default'] = chunk;
});
define("lodash/array/compact", ["exports"], function (exports) {
  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  "use strict";

  function compact(array) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  exports["default"] = compact;
});
define('lodash/array/difference', ['exports', 'lodash/internal/baseDifference', 'lodash/internal/baseFlatten', 'lodash/internal/isArrayLike', 'lodash/internal/isObjectLike', 'lodash/function/restParam'], function (exports, _lodashInternalBaseDifference, _lodashInternalBaseFlatten, _lodashInternalIsArrayLike, _lodashInternalIsObjectLike, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates an array of unique `array` values not included in the other
   * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The arrays of values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.difference([1, 2, 3], [4, 2]);
   * // => [1, 3]
   */
  var difference = (0, _lodashFunctionRestParam['default'])(function (array, values) {
    return (0, _lodashInternalIsObjectLike['default'])(array) && (0, _lodashInternalIsArrayLike['default'])(array) ? (0, _lodashInternalBaseDifference['default'])(array, (0, _lodashInternalBaseFlatten['default'])(values, false, true)) : [];
  });

  exports['default'] = difference;
});
define('lodash/array/drop', ['exports', 'lodash/internal/baseSlice', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSlice, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a slice of `array` with `n` elements dropped from the beginning.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to drop.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.drop([1, 2, 3]);
   * // => [2, 3]
   *
   * _.drop([1, 2, 3], 2);
   * // => [3]
   *
   * _.drop([1, 2, 3], 5);
   * // => []
   *
   * _.drop([1, 2, 3], 0);
   * // => [1, 2, 3]
   */
  function drop(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(array, n, guard) : n == null) {
      n = 1;
    }
    return (0, _lodashInternalBaseSlice['default'])(array, n < 0 ? 0 : n);
  }

  exports['default'] = drop;
});
define('lodash/array/dropRight', ['exports', 'lodash/internal/baseSlice', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSlice, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a slice of `array` with `n` elements dropped from the end.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to drop.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropRight([1, 2, 3]);
   * // => [1, 2]
   *
   * _.dropRight([1, 2, 3], 2);
   * // => [1]
   *
   * _.dropRight([1, 2, 3], 5);
   * // => []
   *
   * _.dropRight([1, 2, 3], 0);
   * // => [1, 2, 3]
   */
  function dropRight(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(array, n, guard) : n == null) {
      n = 1;
    }
    n = length - (+n || 0);
    return (0, _lodashInternalBaseSlice['default'])(array, 0, n < 0 ? 0 : n);
  }

  exports['default'] = dropRight;
});
define('lodash/array/dropRightWhile', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseWhile'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseWhile) {
  'use strict';

  /**
   * Creates a slice of `array` excluding elements dropped from the end.
   * Elements are dropped until `predicate` returns falsey. The predicate is
   * bound to `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that match the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropRightWhile([1, 2, 3], function(n) {
   *   return n > 1;
   * });
   * // => [1]
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
   * // => ['barney', 'fred']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
   * // => ['barney']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.dropRightWhile(users, 'active'), 'user');
   * // => ['barney', 'fred', 'pebbles']
   */
  function dropRightWhile(array, predicate, thisArg) {
    return array && array.length ? (0, _lodashInternalBaseWhile['default'])(array, (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3), true, true) : [];
  }

  exports['default'] = dropRightWhile;
});
define('lodash/array/dropWhile', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseWhile'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseWhile) {
  'use strict';

  /**
   * Creates a slice of `array` excluding elements dropped from the beginning.
   * Elements are dropped until `predicate` returns falsey. The predicate is
   * bound to `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropWhile([1, 2, 3], function(n) {
   *   return n < 3;
   * });
   * // => [3]
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
   * // => ['fred', 'pebbles']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.dropWhile(users, 'active', false), 'user');
   * // => ['pebbles']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.dropWhile(users, 'active'), 'user');
   * // => ['barney', 'fred', 'pebbles']
   */
  function dropWhile(array, predicate, thisArg) {
    return array && array.length ? (0, _lodashInternalBaseWhile['default'])(array, (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3), true) : [];
  }

  exports['default'] = dropWhile;
});
define('lodash/array/fill', ['exports', 'lodash/internal/baseFill', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseFill, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Fills elements of `array` with `value` from `start` up to, but not
   * including, `end`.
   *
   * **Note:** This method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to fill.
   * @param {*} value The value to fill `array` with.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _.fill(array, 'a');
   * console.log(array);
   * // => ['a', 'a', 'a']
   *
   * _.fill(Array(3), 2);
   * // => [2, 2, 2]
   *
   * _.fill([4, 6, 8], '*', 1, 2);
   * // => [4, '*', 8]
   */
  function fill(array, value, start, end) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (start && typeof start != 'number' && (0, _lodashInternalIsIterateeCall['default'])(array, value, start)) {
      start = 0;
      end = length;
    }
    return (0, _lodashInternalBaseFill['default'])(array, value, start, end);
  }

  exports['default'] = fill;
});
define('lodash/array/findIndex', ['exports', 'lodash/internal/createFindIndex'], function (exports, _lodashInternalCreateFindIndex) {
  'use strict';

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(chr) {
   *   return chr.user == 'barney';
   * });
   * // => 0
   *
   * // using the `_.matches` callback shorthand
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.findIndex(users, 'active', false);
   * // => 0
   *
   * // using the `_.property` callback shorthand
   * _.findIndex(users, 'active');
   * // => 2
   */
  var findIndex = (0, _lodashInternalCreateFindIndex['default'])();

  exports['default'] = findIndex;
});
define('lodash/array/findLastIndex', ['exports', 'lodash/internal/createFindIndex'], function (exports, _lodashInternalCreateFindIndex) {
  'use strict';

  /**
   * This method is like `_.findIndex` except that it iterates over elements
   * of `collection` from right to left.
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * _.findLastIndex(users, function(chr) {
   *   return chr.user == 'pebbles';
   * });
   * // => 2
   *
   * // using the `_.matches` callback shorthand
   * _.findLastIndex(users, { 'user': 'barney', 'active': true });
   * // => 0
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.findLastIndex(users, 'active', false);
   * // => 2
   *
   * // using the `_.property` callback shorthand
   * _.findLastIndex(users, 'active');
   * // => 0
   */
  var findLastIndex = (0, _lodashInternalCreateFindIndex['default'])(true);

  exports['default'] = findLastIndex;
});
define("lodash/array/first", ["exports"], function (exports) {
  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @alias head
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.first([1, 2, 3]);
   * // => 1
   *
   * _.first([]);
   * // => undefined
   */
  "use strict";

  function first(array) {
    return array ? array[0] : undefined;
  }

  exports["default"] = first;
});
define('lodash/array/flatten', ['exports', 'lodash/internal/baseFlatten', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseFlatten, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Flattens a nested array. If `isDeep` is `true` the array is recursively
   * flattened, otherwise it's only flattened a single level.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to flatten.
   * @param {boolean} [isDeep] Specify a deep flatten.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, 3, [4]]]);
   * // => [1, 2, 3, [4]]
   *
   * // using `isDeep`
   * _.flatten([1, [2, 3, [4]]], true);
   * // => [1, 2, 3, 4]
   */
  function flatten(array, isDeep, guard) {
    var length = array ? array.length : 0;
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(array, isDeep, guard)) {
      isDeep = false;
    }
    return length ? (0, _lodashInternalBaseFlatten['default'])(array, isDeep) : [];
  }

  exports['default'] = flatten;
});
define('lodash/array/flattenDeep', ['exports', 'lodash/internal/baseFlatten'], function (exports, _lodashInternalBaseFlatten) {
  'use strict';

  /**
   * Recursively flattens a nested array.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to recursively flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, 3, [4]]]);
   * // => [1, 2, 3, 4]
   */
  function flattenDeep(array) {
    var length = array ? array.length : 0;
    return length ? (0, _lodashInternalBaseFlatten['default'])(array, true) : [];
  }

  exports['default'] = flattenDeep;
});
define('lodash/array/head', ['exports', 'lodash/array/first'], function (exports, _lodashArrayFirst) {
  'use strict';

  exports['default'] = _lodashArrayFirst['default'];
});
define('lodash/array/indexOf', ['exports', 'lodash/internal/baseIndexOf', 'lodash/internal/binaryIndex'], function (exports, _lodashInternalBaseIndexOf, _lodashInternalBinaryIndex) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Gets the index at which the first occurrence of `value` is found in `array`
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the offset
   * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
   * performs a faster binary search.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {boolean|number} [fromIndex=0] The index to search from or `true`
   *  to perform a binary search on a sorted array.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.indexOf([1, 2, 1, 2], 2);
   * // => 1
   *
   * // using `fromIndex`
   * _.indexOf([1, 2, 1, 2], 2, 2);
   * // => 3
   *
   * // performing a binary search
   * _.indexOf([1, 1, 2, 2], 2, true);
   * // => 2
   */
  function indexOf(array, value, fromIndex) {
    var length = array ? array.length : 0;
    if (!length) {
      return -1;
    }
    if (typeof fromIndex == 'number') {
      fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
    } else if (fromIndex) {
      var index = (0, _lodashInternalBinaryIndex['default'])(array, value);
      if (index < length && (value === value ? value === array[index] : array[index] !== array[index])) {
        return index;
      }
      return -1;
    }
    return (0, _lodashInternalBaseIndexOf['default'])(array, value, fromIndex || 0);
  }

  exports['default'] = indexOf;
});
define('lodash/array/initial', ['exports', 'lodash/array/dropRight'], function (exports, _lodashArrayDropRight) {
  'use strict';

  /**
   * Gets all but the last element of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.initial([1, 2, 3]);
   * // => [1, 2]
   */
  function initial(array) {
    return (0, _lodashArrayDropRight['default'])(array, 1);
  }

  exports['default'] = initial;
});
define('lodash/array/intersection', ['exports', 'lodash/internal/baseIndexOf', 'lodash/internal/cacheIndexOf', 'lodash/internal/createCache', 'lodash/internal/isArrayLike', 'lodash/function/restParam'], function (exports, _lodashInternalBaseIndexOf, _lodashInternalCacheIndexOf, _lodashInternalCreateCache, _lodashInternalIsArrayLike, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates an array of unique values that are included in all of the provided
   * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of shared values.
   * @example
   * _.intersection([1, 2], [4, 2], [2, 1]);
   * // => [2]
   */
  var intersection = (0, _lodashFunctionRestParam['default'])(function (arrays) {
    var othLength = arrays.length,
        othIndex = othLength,
        caches = Array(length),
        indexOf = _lodashInternalBaseIndexOf['default'],
        isCommon = true,
        result = [];

    while (othIndex--) {
      var value = arrays[othIndex] = (0, _lodashInternalIsArrayLike['default'])(value = arrays[othIndex]) ? value : [];
      caches[othIndex] = isCommon && value.length >= 120 ? (0, _lodashInternalCreateCache['default'])(othIndex && value) : null;
    }
    var array = arrays[0],
        index = -1,
        length = array ? array.length : 0,
        seen = caches[0];

    outer: while (++index < length) {
      value = array[index];
      if ((seen ? (0, _lodashInternalCacheIndexOf['default'])(seen, value) : indexOf(result, value, 0)) < 0) {
        var othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if ((cache ? (0, _lodashInternalCacheIndexOf['default'])(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(value);
        }
        result.push(value);
      }
    }
    return result;
  });

  exports['default'] = intersection;
});
define("lodash/array/last", ["exports"], function (exports) {
  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  "use strict";

  function last(array) {
    var length = array ? array.length : 0;
    return length ? array[length - 1] : undefined;
  }

  exports["default"] = last;
});
define('lodash/array/lastIndexOf', ['exports', 'lodash/internal/binaryIndex', 'lodash/internal/indexOfNaN'], function (exports, _lodashInternalBinaryIndex, _lodashInternalIndexOfNaN) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * This method is like `_.indexOf` except that it iterates over elements of
   * `array` from right to left.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {boolean|number} [fromIndex=array.length-1] The index to search from
   *  or `true` to perform a binary search on a sorted array.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.lastIndexOf([1, 2, 1, 2], 2);
   * // => 3
   *
   * // using `fromIndex`
   * _.lastIndexOf([1, 2, 1, 2], 2, 2);
   * // => 1
   *
   * // performing a binary search
   * _.lastIndexOf([1, 1, 2, 2], 2, true);
   * // => 3
   */
  function lastIndexOf(array, value, fromIndex) {
    var length = array ? array.length : 0;
    if (!length) {
      return -1;
    }
    var index = length;
    if (typeof fromIndex == 'number') {
      index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
    } else if (fromIndex) {
      index = (0, _lodashInternalBinaryIndex['default'])(array, value, true) - 1;
      var other = array[index];
      if (value === value ? value === other : other !== other) {
        return index;
      }
      return -1;
    }
    if (value !== value) {
      return (0, _lodashInternalIndexOfNaN['default'])(array, index, true);
    }
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  exports['default'] = lastIndexOf;
});
define('lodash/array/object', ['exports', 'lodash/array/zipObject'], function (exports, _lodashArrayZipObject) {
  'use strict';

  exports['default'] = _lodashArrayZipObject['default'];
});
define('lodash/array/pull', ['exports', 'lodash/internal/baseIndexOf'], function (exports, _lodashInternalBaseIndexOf) {
  'use strict';

  /** Used for native method references. */
  var arrayProto = Array.prototype;

  /** Native method references. */
  var splice = arrayProto.splice;

  /**
   * Removes all provided values from `array` using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.without`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to modify.
   * @param {...*} [values] The values to remove.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3, 1, 2, 3];
   *
   * _.pull(array, 2, 3);
   * console.log(array);
   * // => [1, 1]
   */
  function pull() {
    var args = arguments,
        array = args[0];

    if (!(array && array.length)) {
      return array;
    }
    var index = 0,
        indexOf = _lodashInternalBaseIndexOf['default'],
        length = args.length;

    while (++index < length) {
      var fromIndex = 0,
          value = args[index];

      while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
        splice.call(array, fromIndex, 1);
      }
    }
    return array;
  }

  exports['default'] = pull;
});
define('lodash/array/pullAt', ['exports', 'lodash/internal/baseAt', 'lodash/internal/baseCompareAscending', 'lodash/internal/baseFlatten', 'lodash/internal/basePullAt', 'lodash/function/restParam'], function (exports, _lodashInternalBaseAt, _lodashInternalBaseCompareAscending, _lodashInternalBaseFlatten, _lodashInternalBasePullAt, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Removes elements from `array` corresponding to the given indexes and returns
   * an array of the removed elements. Indexes may be specified as an array of
   * indexes or as individual arguments.
   *
   * **Note:** Unlike `_.at`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to modify.
   * @param {...(number|number[])} [indexes] The indexes of elements to remove,
   *  specified as individual indexes or arrays of indexes.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [5, 10, 15, 20];
   * var evens = _.pullAt(array, 1, 3);
   *
   * console.log(array);
   * // => [5, 15]
   *
   * console.log(evens);
   * // => [10, 20]
   */
  var pullAt = (0, _lodashFunctionRestParam['default'])(function (array, indexes) {
    indexes = (0, _lodashInternalBaseFlatten['default'])(indexes);

    var result = (0, _lodashInternalBaseAt['default'])(array, indexes);
    (0, _lodashInternalBasePullAt['default'])(array, indexes.sort(_lodashInternalBaseCompareAscending['default']));
    return result;
  });

  exports['default'] = pullAt;
});
define('lodash/array/remove', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/basePullAt'], function (exports, _lodashInternalBaseCallback, _lodashInternalBasePullAt) {
  'use strict';

  /**
   * Removes all elements from `array` that `predicate` returns truthy for
   * and returns an array of the removed elements. The predicate is bound to
   * `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * **Note:** Unlike `_.filter`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [1, 2, 3, 4];
   * var evens = _.remove(array, function(n) {
   *   return n % 2 == 0;
   * });
   *
   * console.log(array);
   * // => [1, 3]
   *
   * console.log(evens);
   * // => [2, 4]
   */
  function remove(array, predicate, thisArg) {
    var result = [];
    if (!(array && array.length)) {
      return result;
    }
    var index = -1,
        indexes = [],
        length = array.length;

    predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result.push(value);
        indexes.push(index);
      }
    }
    (0, _lodashInternalBasePullAt['default'])(array, indexes);
    return result;
  }

  exports['default'] = remove;
});
define('lodash/array/rest', ['exports', 'lodash/array/drop'], function (exports, _lodashArrayDrop) {
  'use strict';

  /**
   * Gets all but the first element of `array`.
   *
   * @static
   * @memberOf _
   * @alias tail
   * @category Array
   * @param {Array} array The array to query.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.rest([1, 2, 3]);
   * // => [2, 3]
   */
  function rest(array) {
    return (0, _lodashArrayDrop['default'])(array, 1);
  }

  exports['default'] = rest;
});
define('lodash/array/slice', ['exports', 'lodash/internal/baseSlice', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSlice, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a slice of `array` from `start` up to, but not including, `end`.
   *
   * **Note:** This method is used instead of `Array#slice` to support node
   * lists in IE < 9 and to ensure dense arrays are returned.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function slice(array, start, end) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (end && typeof end != 'number' && (0, _lodashInternalIsIterateeCall['default'])(array, start, end)) {
      start = 0;
      end = length;
    }
    return (0, _lodashInternalBaseSlice['default'])(array, start, end);
  }

  exports['default'] = slice;
});
define('lodash/array/sortedIndex', ['exports', 'lodash/internal/createSortedIndex'], function (exports, _lodashInternalCreateSortedIndex) {
  'use strict';

  /**
   * Uses a binary search to determine the lowest index at which `value` should
   * be inserted into `array` in order to maintain its sort order. If an iteratee
   * function is provided it's invoked for `value` and each element of `array`
   * to compute their sort ranking. The iteratee is bound to `thisArg` and
   * invoked with one argument; (value).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedIndex([30, 50], 40);
   * // => 1
   *
   * _.sortedIndex([4, 4, 5, 5], 5);
   * // => 2
   *
   * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
   *
   * // using an iteratee function
   * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
   *   return this.data[word];
   * }, dict);
   * // => 1
   *
   * // using the `_.property` callback shorthand
   * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
   * // => 1
   */
  var sortedIndex = (0, _lodashInternalCreateSortedIndex['default'])();

  exports['default'] = sortedIndex;
});
define('lodash/array/sortedLastIndex', ['exports', 'lodash/internal/createSortedIndex'], function (exports, _lodashInternalCreateSortedIndex) {
  'use strict';

  /**
   * This method is like `_.sortedIndex` except that it returns the highest
   * index at which `value` should be inserted into `array` in order to
   * maintain its sort order.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedLastIndex([4, 4, 5, 5], 5);
   * // => 4
   */
  var sortedLastIndex = (0, _lodashInternalCreateSortedIndex['default'])(true);

  exports['default'] = sortedLastIndex;
});
define('lodash/array/tail', ['exports', 'lodash/array/rest'], function (exports, _lodashArrayRest) {
  'use strict';

  exports['default'] = _lodashArrayRest['default'];
});
define('lodash/array/take', ['exports', 'lodash/internal/baseSlice', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSlice, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a slice of `array` with `n` elements taken from the beginning.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.take([1, 2, 3]);
   * // => [1]
   *
   * _.take([1, 2, 3], 2);
   * // => [1, 2]
   *
   * _.take([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.take([1, 2, 3], 0);
   * // => []
   */
  function take(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(array, n, guard) : n == null) {
      n = 1;
    }
    return (0, _lodashInternalBaseSlice['default'])(array, 0, n < 0 ? 0 : n);
  }

  exports['default'] = take;
});
define('lodash/array/takeRight', ['exports', 'lodash/internal/baseSlice', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSlice, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a slice of `array` with `n` elements taken from the end.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeRight([1, 2, 3]);
   * // => [3]
   *
   * _.takeRight([1, 2, 3], 2);
   * // => [2, 3]
   *
   * _.takeRight([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.takeRight([1, 2, 3], 0);
   * // => []
   */
  function takeRight(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(array, n, guard) : n == null) {
      n = 1;
    }
    n = length - (+n || 0);
    return (0, _lodashInternalBaseSlice['default'])(array, n < 0 ? 0 : n);
  }

  exports['default'] = takeRight;
});
define('lodash/array/takeRightWhile', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseWhile'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseWhile) {
  'use strict';

  /**
   * Creates a slice of `array` with elements taken from the end. Elements are
   * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
   * and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeRightWhile([1, 2, 3], function(n) {
   *   return n > 1;
   * });
   * // => [2, 3]
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
   * // => ['pebbles']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
   * // => ['fred', 'pebbles']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.takeRightWhile(users, 'active'), 'user');
   * // => []
   */
  function takeRightWhile(array, predicate, thisArg) {
    return array && array.length ? (0, _lodashInternalBaseWhile['default'])(array, (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3), false, true) : [];
  }

  exports['default'] = takeRightWhile;
});
define('lodash/array/takeWhile', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseWhile'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseWhile) {
  'use strict';

  /**
   * Creates a slice of `array` with elements taken from the beginning. Elements
   * are taken until `predicate` returns falsey. The predicate is bound to
   * `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeWhile([1, 2, 3], function(n) {
   *   return n < 3;
   * });
   * // => [1, 2]
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false},
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
   * // => ['barney']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.takeWhile(users, 'active', false), 'user');
   * // => ['barney', 'fred']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.takeWhile(users, 'active'), 'user');
   * // => []
   */
  function takeWhile(array, predicate, thisArg) {
    return array && array.length ? (0, _lodashInternalBaseWhile['default'])(array, (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3)) : [];
  }

  exports['default'] = takeWhile;
});
define('lodash/array/union', ['exports', 'lodash/internal/baseFlatten', 'lodash/internal/baseUniq', 'lodash/function/restParam'], function (exports, _lodashInternalBaseFlatten, _lodashInternalBaseUniq, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates an array of unique values, in order, from all of the provided arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of combined values.
   * @example
   *
   * _.union([1, 2], [4, 2], [2, 1]);
   * // => [1, 2, 4]
   */
  var union = (0, _lodashFunctionRestParam['default'])(function (arrays) {
    return (0, _lodashInternalBaseUniq['default'])((0, _lodashInternalBaseFlatten['default'])(arrays, false, true));
  });

  exports['default'] = union;
});
define('lodash/array/uniq', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseUniq', 'lodash/internal/isIterateeCall', 'lodash/internal/sortedUniq'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseUniq, _lodashInternalIsIterateeCall, _lodashInternalSortedUniq) {
  'use strict';

  /**
   * Creates a duplicate-free version of an array, using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons, in which only the first occurence of each element
   * is kept. Providing `true` for `isSorted` performs a faster search algorithm
   * for sorted arrays. If an iteratee function is provided it's invoked for
   * each element in the array to generate the criterion by which uniqueness
   * is computed. The `iteratee` is bound to `thisArg` and invoked with three
   * arguments: (value, index, array).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias unique
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {boolean} [isSorted] Specify the array is sorted.
   * @param {Function|Object|string} [iteratee] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new duplicate-value-free array.
   * @example
   *
   * _.uniq([2, 1, 2]);
   * // => [2, 1]
   *
   * // using `isSorted`
   * _.uniq([1, 1, 2], true);
   * // => [1, 2]
   *
   * // using an iteratee function
   * _.uniq([1, 2.5, 1.5, 2], function(n) {
   *   return this.floor(n);
   * }, Math);
   * // => [1, 2.5]
   *
   * // using the `_.property` callback shorthand
   * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniq(array, isSorted, iteratee, thisArg) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (isSorted != null && typeof isSorted != 'boolean') {
      thisArg = iteratee;
      iteratee = (0, _lodashInternalIsIterateeCall['default'])(array, isSorted, thisArg) ? undefined : isSorted;
      isSorted = false;
    }
    iteratee = iteratee == null ? iteratee : (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);
    return isSorted ? (0, _lodashInternalSortedUniq['default'])(array, iteratee) : (0, _lodashInternalBaseUniq['default'])(array, iteratee);
  }

  exports['default'] = uniq;
});
define('lodash/array/unique', ['exports', 'lodash/array/uniq'], function (exports, _lodashArrayUniq) {
  'use strict';

  exports['default'] = _lodashArrayUniq['default'];
});
define('lodash/array/unzip', ['exports', 'lodash/internal/arrayFilter', 'lodash/internal/arrayMap', 'lodash/internal/baseProperty', 'lodash/internal/isArrayLike'], function (exports, _lodashInternalArrayFilter, _lodashInternalArrayMap, _lodashInternalBaseProperty, _lodashInternalIsArrayLike) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * This method is like `_.zip` except that it accepts an array of grouped
   * elements and creates an array regrouping the elements to their pre-zip
   * configuration.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array of grouped elements to process.
   * @returns {Array} Returns the new array of regrouped elements.
   * @example
   *
   * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
   * // => [['fred', 30, true], ['barney', 40, false]]
   *
   * _.unzip(zipped);
   * // => [['fred', 'barney'], [30, 40], [true, false]]
   */
  function unzip(array) {
    if (!(array && array.length)) {
      return [];
    }
    var index = -1,
        length = 0;

    array = (0, _lodashInternalArrayFilter['default'])(array, function (group) {
      if ((0, _lodashInternalIsArrayLike['default'])(group)) {
        length = nativeMax(group.length, length);
        return true;
      }
    });
    var result = Array(length);
    while (++index < length) {
      result[index] = (0, _lodashInternalArrayMap['default'])(array, (0, _lodashInternalBaseProperty['default'])(index));
    }
    return result;
  }

  exports['default'] = unzip;
});
define('lodash/array/unzipWith', ['exports', 'lodash/internal/arrayMap', 'lodash/internal/arrayReduce', 'lodash/internal/bindCallback', 'lodash/array/unzip'], function (exports, _lodashInternalArrayMap, _lodashInternalArrayReduce, _lodashInternalBindCallback, _lodashArrayUnzip) {
  'use strict';

  /**
   * This method is like `_.unzip` except that it accepts an iteratee to specify
   * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
   * and invoked with four arguments: (accumulator, value, index, group).
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array of grouped elements to process.
   * @param {Function} [iteratee] The function to combine regrouped values.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new array of regrouped elements.
   * @example
   *
   * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
   * // => [[1, 10, 100], [2, 20, 200]]
   *
   * _.unzipWith(zipped, _.add);
   * // => [3, 30, 300]
   */
  function unzipWith(array, iteratee, thisArg) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    var result = (0, _lodashArrayUnzip['default'])(array);
    if (iteratee == null) {
      return result;
    }
    iteratee = (0, _lodashInternalBindCallback['default'])(iteratee, thisArg, 4);
    return (0, _lodashInternalArrayMap['default'])(result, function (group) {
      return (0, _lodashInternalArrayReduce['default'])(group, iteratee, undefined, true);
    });
  }

  exports['default'] = unzipWith;
});
define('lodash/array/without', ['exports', 'lodash/internal/baseDifference', 'lodash/internal/isArrayLike', 'lodash/function/restParam'], function (exports, _lodashInternalBaseDifference, _lodashInternalIsArrayLike, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates an array excluding all provided values using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to filter.
   * @param {...*} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.without([1, 2, 1, 3], 1, 2);
   * // => [3]
   */
  var without = (0, _lodashFunctionRestParam['default'])(function (array, values) {
    return (0, _lodashInternalIsArrayLike['default'])(array) ? (0, _lodashInternalBaseDifference['default'])(array, values) : [];
  });

  exports['default'] = without;
});
define('lodash/array/xor', ['exports', 'lodash/internal/arrayPush', 'lodash/internal/baseDifference', 'lodash/internal/baseUniq', 'lodash/internal/isArrayLike'], function (exports, _lodashInternalArrayPush, _lodashInternalBaseDifference, _lodashInternalBaseUniq, _lodashInternalIsArrayLike) {
  'use strict';

  /**
   * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
   * of the provided arrays.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of values.
   * @example
   *
   * _.xor([1, 2], [4, 2]);
   * // => [1, 4]
   */
  function xor() {
    var index = -1,
        length = arguments.length;

    while (++index < length) {
      var array = arguments[index];
      if ((0, _lodashInternalIsArrayLike['default'])(array)) {
        var result = result ? (0, _lodashInternalArrayPush['default'])((0, _lodashInternalBaseDifference['default'])(result, array), (0, _lodashInternalBaseDifference['default'])(array, result)) : array;
      }
    }
    return result ? (0, _lodashInternalBaseUniq['default'])(result) : [];
  }

  exports['default'] = xor;
});
define('lodash/array/zip', ['exports', 'lodash/function/restParam', 'lodash/array/unzip'], function (exports, _lodashFunctionRestParam, _lodashArrayUnzip) {
  'use strict';

  /**
   * Creates an array of grouped elements, the first of which contains the first
   * elements of the given arrays, the second of which contains the second elements
   * of the given arrays, and so on.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to process.
   * @returns {Array} Returns the new array of grouped elements.
   * @example
   *
   * _.zip(['fred', 'barney'], [30, 40], [true, false]);
   * // => [['fred', 30, true], ['barney', 40, false]]
   */
  var zip = (0, _lodashFunctionRestParam['default'])(_lodashArrayUnzip['default']);

  exports['default'] = zip;
});
define('lodash/array/zipObject', ['exports', 'lodash/lang/isArray'], function (exports, _lodashLangIsArray) {
  'use strict';

  /**
   * The inverse of `_.pairs`; this method returns an object composed from arrays
   * of property names and values. Provide either a single two dimensional array,
   * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
   * and one of corresponding values.
   *
   * @static
   * @memberOf _
   * @alias object
   * @category Array
   * @param {Array} props The property names.
   * @param {Array} [values=[]] The property values.
   * @returns {Object} Returns the new object.
   * @example
   *
   * _.zipObject([['fred', 30], ['barney', 40]]);
   * // => { 'fred': 30, 'barney': 40 }
   *
   * _.zipObject(['fred', 'barney'], [30, 40]);
   * // => { 'fred': 30, 'barney': 40 }
   */
  function zipObject(props, values) {
    var index = -1,
        length = props ? props.length : 0,
        result = {};

    if (length && !values && !(0, _lodashLangIsArray['default'])(props[0])) {
      values = [];
    }
    while (++index < length) {
      var key = props[index];
      if (values) {
        result[key] = values[index];
      } else if (key) {
        result[key[0]] = key[1];
      }
    }
    return result;
  }

  exports['default'] = zipObject;
});
define('lodash/array/zipWith', ['exports', 'lodash/function/restParam', 'lodash/array/unzipWith'], function (exports, _lodashFunctionRestParam, _lodashArrayUnzipWith) {
  'use strict';

  /**
   * This method is like `_.zip` except that it accepts an iteratee to specify
   * how grouped values should be combined. The `iteratee` is bound to `thisArg`
   * and invoked with four arguments: (accumulator, value, index, group).
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to process.
   * @param {Function} [iteratee] The function to combine grouped values.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new array of grouped elements.
   * @example
   *
   * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
   * // => [111, 222]
   */
  var zipWith = (0, _lodashFunctionRestParam['default'])(function (arrays) {
    var length = arrays.length,
        iteratee = length > 2 ? arrays[length - 2] : undefined,
        thisArg = length > 1 ? arrays[length - 1] : undefined;

    if (length > 2 && typeof iteratee == 'function') {
      length -= 2;
    } else {
      iteratee = length > 1 && typeof thisArg == 'function' ? (--length, thisArg) : undefined;
      thisArg = undefined;
    }
    arrays.length = length;
    return (0, _lodashArrayUnzipWith['default'])(arrays, iteratee, thisArg);
  });

  exports['default'] = zipWith;
});
define('lodash/chain', ['exports', 'lodash/chain/chain', 'lodash/chain/commit', 'lodash/chain/concat', 'lodash/chain/lodash', 'lodash/chain/plant', 'lodash/chain/reverse', 'lodash/chain/run', 'lodash/chain/tap', 'lodash/chain/thru', 'lodash/chain/toJSON', 'lodash/chain/toString', 'lodash/chain/value', 'lodash/chain/valueOf', 'lodash/chain/wrapperChain'], function (exports, _lodashChainChain, _lodashChainCommit, _lodashChainConcat, _lodashChainLodash, _lodashChainPlant, _lodashChainReverse, _lodashChainRun, _lodashChainTap, _lodashChainThru, _lodashChainToJSON, _lodashChainToString, _lodashChainValue, _lodashChainValueOf, _lodashChainWrapperChain) {
  'use strict';

  exports['default'] = {
    'chain': _lodashChainChain['default'],
    'commit': _lodashChainCommit['default'],
    'concat': _lodashChainConcat['default'],
    'lodash': _lodashChainLodash['default'],
    'plant': _lodashChainPlant['default'],
    'reverse': _lodashChainReverse['default'],
    'run': _lodashChainRun['default'],
    'tap': _lodashChainTap['default'],
    'thru': _lodashChainThru['default'],
    'toJSON': _lodashChainToJSON['default'],
    'toString': _lodashChainToString['default'],
    'value': _lodashChainValue['default'],
    'valueOf': _lodashChainValueOf['default'],
    'wrapperChain': _lodashChainWrapperChain['default']
  };
});
define('lodash/chain/chain', ['exports', 'lodash/chain/lodash'], function (exports, _lodashChainLodash) {
  'use strict';

  /**
   * Creates a `lodash` object that wraps `value` with explicit method
   * chaining enabled.
   *
   * @static
   * @memberOf _
   * @category Chain
   * @param {*} value The value to wrap.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36 },
   *   { 'user': 'fred',    'age': 40 },
   *   { 'user': 'pebbles', 'age': 1 }
   * ];
   *
   * var youngest = _.chain(users)
   *   .sortBy('age')
   *   .map(function(chr) {
   *     return chr.user + ' is ' + chr.age;
   *   })
   *   .first()
   *   .value();
   * // => 'pebbles is 1'
   */
  function chain(value) {
    var result = (0, _lodashChainLodash['default'])(value);
    result.__chain__ = true;
    return result;
  }

  exports['default'] = chain;
});
define('lodash/chain/commit', ['exports', 'lodash/chain/wrapperCommit'], function (exports, _lodashChainWrapperCommit) {
  'use strict';

  exports['default'] = _lodashChainWrapperCommit['default'];
});
define('lodash/chain/concat', ['exports', 'lodash/chain/wrapperConcat'], function (exports, _lodashChainWrapperConcat) {
  'use strict';

  exports['default'] = _lodashChainWrapperConcat['default'];
});
define('lodash/chain/lodash', ['exports', 'lodash/internal/LazyWrapper', 'lodash/internal/LodashWrapper', 'lodash/internal/baseLodash', 'lodash/lang/isArray', 'lodash/internal/isObjectLike', 'lodash/internal/wrapperClone'], function (exports, _lodashInternalLazyWrapper, _lodashInternalLodashWrapper, _lodashInternalBaseLodash, _lodashLangIsArray, _lodashInternalIsObjectLike, _lodashInternalWrapperClone) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates a `lodash` object which wraps `value` to enable implicit chaining.
   * Methods that operate on and return arrays, collections, and functions can
   * be chained together. Methods that retrieve a single value or may return a
   * primitive value will automatically end the chain returning the unwrapped
   * value. Explicit chaining may be enabled using `_.chain`. The execution of
   * chained methods is lazy, that is, execution is deferred until `_#value`
   * is implicitly or explicitly called.
   *
   * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
   * fusion is an optimization strategy which merge iteratee calls; this can help
   * to avoid the creation of intermediate data structures and greatly reduce the
   * number of iteratee executions.
   *
   * Chaining is supported in custom builds as long as the `_#value` method is
   * directly or indirectly included in the build.
   *
   * In addition to lodash methods, wrappers have `Array` and `String` methods.
   *
   * The wrapper `Array` methods are:
   * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
   * `splice`, and `unshift`
   *
   * The wrapper `String` methods are:
   * `replace` and `split`
   *
   * The wrapper methods that support shortcut fusion are:
   * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
   * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
   * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
   * and `where`
   *
   * The chainable wrapper methods are:
   * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
   * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
   * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
   * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
   * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
   * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
   * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
   * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
   * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
   * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
   * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
   * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
   * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
   * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
   * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
   * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
   * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
   *
   * The wrapper methods that are **not** chainable by default are:
   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
   * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
   * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
   * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
   * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
   * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
   * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
   * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
   * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
   * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
   * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
   * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
   * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
   * `unescape`, `uniqueId`, `value`, and `words`
   *
   * The wrapper method `sample` will return a wrapped value when `n` is provided,
   * otherwise an unwrapped value is returned.
   *
   * @name _
   * @constructor
   * @category Chain
   * @param {*} value The value to wrap in a `lodash` instance.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var wrapped = _([1, 2, 3]);
   *
   * // returns an unwrapped value
   * wrapped.reduce(function(total, n) {
   *   return total + n;
   * });
   * // => 6
   *
   * // returns a wrapped value
   * var squares = wrapped.map(function(n) {
   *   return n * n;
   * });
   *
   * _.isArray(squares);
   * // => false
   *
   * _.isArray(squares.value());
   * // => true
   */
  function lodash(value) {
    if ((0, _lodashInternalIsObjectLike['default'])(value) && !(0, _lodashLangIsArray['default'])(value) && !(value instanceof _lodashInternalLazyWrapper['default'])) {
      if (value instanceof _lodashInternalLodashWrapper['default']) {
        return value;
      }
      if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
        return (0, _lodashInternalWrapperClone['default'])(value);
      }
    }
    return new _lodashInternalLodashWrapper['default'](value);
  }

  // Ensure wrappers are instances of `baseLodash`.
  lodash.prototype = _lodashInternalBaseLodash['default'].prototype;

  exports['default'] = lodash;
});
define('lodash/chain/plant', ['exports', 'lodash/chain/wrapperPlant'], function (exports, _lodashChainWrapperPlant) {
  'use strict';

  exports['default'] = _lodashChainWrapperPlant['default'];
});
define('lodash/chain/reverse', ['exports', 'lodash/chain/wrapperReverse'], function (exports, _lodashChainWrapperReverse) {
  'use strict';

  exports['default'] = _lodashChainWrapperReverse['default'];
});
define('lodash/chain/run', ['exports', 'lodash/chain/wrapperValue'], function (exports, _lodashChainWrapperValue) {
  'use strict';

  exports['default'] = _lodashChainWrapperValue['default'];
});
define("lodash/chain/tap", ["exports"], function (exports) {
  /**
   * This method invokes `interceptor` and returns `value`. The interceptor is
   * bound to `thisArg` and invoked with one argument; (value). The purpose of
   * this method is to "tap into" a method chain in order to perform operations
   * on intermediate results within the chain.
   *
   * @static
   * @memberOf _
   * @category Chain
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @param {*} [thisArg] The `this` binding of `interceptor`.
   * @returns {*} Returns `value`.
   * @example
   *
   * _([1, 2, 3])
   *  .tap(function(array) {
   *    array.pop();
   *  })
   *  .reverse()
   *  .value();
   * // => [2, 1]
   */
  "use strict";

  function tap(value, interceptor, thisArg) {
    interceptor.call(thisArg, value);
    return value;
  }

  exports["default"] = tap;
});
define("lodash/chain/thru", ["exports"], function (exports) {
  /**
   * This method is like `_.tap` except that it returns the result of `interceptor`.
   *
   * @static
   * @memberOf _
   * @category Chain
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @param {*} [thisArg] The `this` binding of `interceptor`.
   * @returns {*} Returns the result of `interceptor`.
   * @example
   *
   * _('  abc  ')
   *  .chain()
   *  .trim()
   *  .thru(function(value) {
   *    return [value];
   *  })
   *  .value();
   * // => ['abc']
   */
  "use strict";

  function thru(value, interceptor, thisArg) {
    return interceptor.call(thisArg, value);
  }

  exports["default"] = thru;
});
define('lodash/chain/toJSON', ['exports', 'lodash/chain/wrapperValue'], function (exports, _lodashChainWrapperValue) {
  'use strict';

  exports['default'] = _lodashChainWrapperValue['default'];
});
define('lodash/chain/toString', ['exports', 'lodash/chain/wrapperToString'], function (exports, _lodashChainWrapperToString) {
  'use strict';

  exports['default'] = _lodashChainWrapperToString['default'];
});
define('lodash/chain/value', ['exports', 'lodash/chain/wrapperValue'], function (exports, _lodashChainWrapperValue) {
  'use strict';

  exports['default'] = _lodashChainWrapperValue['default'];
});
define('lodash/chain/valueOf', ['exports', 'lodash/chain/wrapperValue'], function (exports, _lodashChainWrapperValue) {
  'use strict';

  exports['default'] = _lodashChainWrapperValue['default'];
});
define('lodash/chain/wrapperChain', ['exports', 'lodash/chain/chain'], function (exports, _lodashChainChain) {
  'use strict';

  /**
   * Enables explicit method chaining on the wrapper object.
   *
   * @name chain
   * @memberOf _
   * @category Chain
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // without explicit chaining
   * _(users).first();
   * // => { 'user': 'barney', 'age': 36 }
   *
   * // with explicit chaining
   * _(users).chain()
   *   .first()
   *   .pick('user')
   *   .value();
   * // => { 'user': 'barney' }
   */
  function wrapperChain() {
    return (0, _lodashChainChain['default'])(this);
  }

  exports['default'] = wrapperChain;
});
define('lodash/chain/wrapperCommit', ['exports', 'lodash/internal/LodashWrapper'], function (exports, _lodashInternalLodashWrapper) {
  'use strict';

  /**
   * Executes the chained sequence and returns the wrapped result.
   *
   * @name commit
   * @memberOf _
   * @category Chain
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2];
   * var wrapped = _(array).push(3);
   *
   * console.log(array);
   * // => [1, 2]
   *
   * wrapped = wrapped.commit();
   * console.log(array);
   * // => [1, 2, 3]
   *
   * wrapped.last();
   * // => 3
   *
   * console.log(array);
   * // => [1, 2, 3]
   */
  function wrapperCommit() {
    return new _lodashInternalLodashWrapper['default'](this.value(), this.__chain__);
  }

  exports['default'] = wrapperCommit;
});
define('lodash/chain/wrapperConcat', ['exports', 'lodash/internal/arrayConcat', 'lodash/internal/baseFlatten', 'lodash/lang/isArray', 'lodash/function/restParam', 'lodash/internal/toObject'], function (exports, _lodashInternalArrayConcat, _lodashInternalBaseFlatten, _lodashLangIsArray, _lodashFunctionRestParam, _lodashInternalToObject) {
  'use strict';

  /**
   * Creates a new array joining a wrapped array with any additional arrays
   * and/or values.
   *
   * @name concat
   * @memberOf _
   * @category Chain
   * @param {...*} [values] The values to concatenate.
   * @returns {Array} Returns the new concatenated array.
   * @example
   *
   * var array = [1];
   * var wrapped = _(array).concat(2, [3], [[4]]);
   *
   * console.log(wrapped.value());
   * // => [1, 2, 3, [4]]
   *
   * console.log(array);
   * // => [1]
   */
  var wrapperConcat = (0, _lodashFunctionRestParam['default'])(function (values) {
    values = (0, _lodashInternalBaseFlatten['default'])(values);
    return this.thru(function (array) {
      return (0, _lodashInternalArrayConcat['default'])((0, _lodashLangIsArray['default'])(array) ? array : [(0, _lodashInternalToObject['default'])(array)], values);
    });
  });

  exports['default'] = wrapperConcat;
});
define('lodash/chain/wrapperPlant', ['exports', 'lodash/internal/baseLodash', 'lodash/internal/wrapperClone'], function (exports, _lodashInternalBaseLodash, _lodashInternalWrapperClone) {
  'use strict';

  /**
   * Creates a clone of the chained sequence planting `value` as the wrapped value.
   *
   * @name plant
   * @memberOf _
   * @category Chain
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2];
   * var wrapped = _(array).map(function(value) {
   *   return Math.pow(value, 2);
   * });
   *
   * var other = [3, 4];
   * var otherWrapped = wrapped.plant(other);
   *
   * otherWrapped.value();
   * // => [9, 16]
   *
   * wrapped.value();
   * // => [1, 4]
   */
  function wrapperPlant(value) {
    var result,
        parent = this;

    while (parent instanceof _lodashInternalBaseLodash['default']) {
      var clone = (0, _lodashInternalWrapperClone['default'])(parent);
      if (result) {
        previous.__wrapped__ = clone;
      } else {
        result = clone;
      }
      var previous = clone;
      parent = parent.__wrapped__;
    }
    previous.__wrapped__ = value;
    return result;
  }

  exports['default'] = wrapperPlant;
});
define('lodash/chain/wrapperReverse', ['exports', 'lodash/internal/LazyWrapper', 'lodash/internal/LodashWrapper', 'lodash/chain/thru'], function (exports, _lodashInternalLazyWrapper, _lodashInternalLodashWrapper, _lodashChainThru) {
  'use strict';

  /**
   * Reverses the wrapped array so the first element becomes the last, the
   * second element becomes the second to last, and so on.
   *
   * **Note:** This method mutates the wrapped array.
   *
   * @name reverse
   * @memberOf _
   * @category Chain
   * @returns {Object} Returns the new reversed `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _(array).reverse().value()
   * // => [3, 2, 1]
   *
   * console.log(array);
   * // => [3, 2, 1]
   */
  function wrapperReverse() {
    var value = this.__wrapped__;

    var interceptor = function interceptor(value) {
      return value.reverse();
    };
    if (value instanceof _lodashInternalLazyWrapper['default']) {
      var wrapped = value;
      if (this.__actions__.length) {
        wrapped = new _lodashInternalLazyWrapper['default'](this);
      }
      wrapped = wrapped.reverse();
      wrapped.__actions__.push({ 'func': _lodashChainThru['default'], 'args': [interceptor], 'thisArg': undefined });
      return new _lodashInternalLodashWrapper['default'](wrapped, this.__chain__);
    }
    return this.thru(interceptor);
  }

  exports['default'] = wrapperReverse;
});
define('lodash/chain/wrapperToString', ['exports'], function (exports) {
  /**
   * Produces the result of coercing the unwrapped value to a string.
   *
   * @name toString
   * @memberOf _
   * @category Chain
   * @returns {string} Returns the coerced string value.
   * @example
   *
   * _([1, 2, 3]).toString();
   * // => '1,2,3'
   */
  'use strict';

  function wrapperToString() {
    return this.value() + '';
  }

  exports['default'] = wrapperToString;
});
define('lodash/chain/wrapperValue', ['exports', 'lodash/internal/baseWrapperValue'], function (exports, _lodashInternalBaseWrapperValue) {
  'use strict';

  /**
   * Executes the chained sequence to extract the unwrapped value.
   *
   * @name value
   * @memberOf _
   * @alias run, toJSON, valueOf
   * @category Chain
   * @returns {*} Returns the resolved unwrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return (0, _lodashInternalBaseWrapperValue['default'])(this.__wrapped__, this.__actions__);
  }

  exports['default'] = wrapperValue;
});
define('lodash/collection', ['exports', 'lodash/collection/all', 'lodash/collection/any', 'lodash/collection/at', 'lodash/collection/collect', 'lodash/collection/contains', 'lodash/collection/countBy', 'lodash/collection/detect', 'lodash/collection/each', 'lodash/collection/eachRight', 'lodash/collection/every', 'lodash/collection/filter', 'lodash/collection/find', 'lodash/collection/findLast', 'lodash/collection/findWhere', 'lodash/collection/foldl', 'lodash/collection/foldr', 'lodash/collection/forEach', 'lodash/collection/forEachRight', 'lodash/collection/groupBy', 'lodash/collection/include', 'lodash/collection/includes', 'lodash/collection/indexBy', 'lodash/collection/inject', 'lodash/collection/invoke', 'lodash/collection/map', 'lodash/math/max', 'lodash/math/min', 'lodash/collection/partition', 'lodash/collection/pluck', 'lodash/collection/reduce', 'lodash/collection/reduceRight', 'lodash/collection/reject', 'lodash/collection/sample', 'lodash/collection/select', 'lodash/collection/shuffle', 'lodash/collection/size', 'lodash/collection/some', 'lodash/collection/sortBy', 'lodash/collection/sortByAll', 'lodash/collection/sortByOrder', 'lodash/math/sum', 'lodash/collection/where'], function (exports, _lodashCollectionAll, _lodashCollectionAny, _lodashCollectionAt, _lodashCollectionCollect, _lodashCollectionContains, _lodashCollectionCountBy, _lodashCollectionDetect, _lodashCollectionEach, _lodashCollectionEachRight, _lodashCollectionEvery, _lodashCollectionFilter, _lodashCollectionFind, _lodashCollectionFindLast, _lodashCollectionFindWhere, _lodashCollectionFoldl, _lodashCollectionFoldr, _lodashCollectionForEach, _lodashCollectionForEachRight, _lodashCollectionGroupBy, _lodashCollectionInclude, _lodashCollectionIncludes, _lodashCollectionIndexBy, _lodashCollectionInject, _lodashCollectionInvoke, _lodashCollectionMap, _lodashMathMax, _lodashMathMin, _lodashCollectionPartition, _lodashCollectionPluck, _lodashCollectionReduce, _lodashCollectionReduceRight, _lodashCollectionReject, _lodashCollectionSample, _lodashCollectionSelect, _lodashCollectionShuffle, _lodashCollectionSize, _lodashCollectionSome, _lodashCollectionSortBy, _lodashCollectionSortByAll, _lodashCollectionSortByOrder, _lodashMathSum, _lodashCollectionWhere) {
  'use strict';

  exports['default'] = {
    'all': _lodashCollectionAll['default'],
    'any': _lodashCollectionAny['default'],
    'at': _lodashCollectionAt['default'],
    'collect': _lodashCollectionCollect['default'],
    'contains': _lodashCollectionContains['default'],
    'countBy': _lodashCollectionCountBy['default'],
    'detect': _lodashCollectionDetect['default'],
    'each': _lodashCollectionEach['default'],
    'eachRight': _lodashCollectionEachRight['default'],
    'every': _lodashCollectionEvery['default'],
    'filter': _lodashCollectionFilter['default'],
    'find': _lodashCollectionFind['default'],
    'findLast': _lodashCollectionFindLast['default'],
    'findWhere': _lodashCollectionFindWhere['default'],
    'foldl': _lodashCollectionFoldl['default'],
    'foldr': _lodashCollectionFoldr['default'],
    'forEach': _lodashCollectionForEach['default'],
    'forEachRight': _lodashCollectionForEachRight['default'],
    'groupBy': _lodashCollectionGroupBy['default'],
    'include': _lodashCollectionInclude['default'],
    'includes': _lodashCollectionIncludes['default'],
    'indexBy': _lodashCollectionIndexBy['default'],
    'inject': _lodashCollectionInject['default'],
    'invoke': _lodashCollectionInvoke['default'],
    'map': _lodashCollectionMap['default'],
    'max': _lodashMathMax['default'],
    'min': _lodashMathMin['default'],
    'partition': _lodashCollectionPartition['default'],
    'pluck': _lodashCollectionPluck['default'],
    'reduce': _lodashCollectionReduce['default'],
    'reduceRight': _lodashCollectionReduceRight['default'],
    'reject': _lodashCollectionReject['default'],
    'sample': _lodashCollectionSample['default'],
    'select': _lodashCollectionSelect['default'],
    'shuffle': _lodashCollectionShuffle['default'],
    'size': _lodashCollectionSize['default'],
    'some': _lodashCollectionSome['default'],
    'sortBy': _lodashCollectionSortBy['default'],
    'sortByAll': _lodashCollectionSortByAll['default'],
    'sortByOrder': _lodashCollectionSortByOrder['default'],
    'sum': _lodashMathSum['default'],
    'where': _lodashCollectionWhere['default']
  };
});
define('lodash/collection/all', ['exports', 'lodash/collection/every'], function (exports, _lodashCollectionEvery) {
  'use strict';

  exports['default'] = _lodashCollectionEvery['default'];
});
define('lodash/collection/any', ['exports', 'lodash/collection/some'], function (exports, _lodashCollectionSome) {
  'use strict';

  exports['default'] = _lodashCollectionSome['default'];
});
define('lodash/collection/at', ['exports', 'lodash/internal/baseAt', 'lodash/internal/baseFlatten', 'lodash/function/restParam'], function (exports, _lodashInternalBaseAt, _lodashInternalBaseFlatten, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates an array of elements corresponding to the given keys, or indexes,
   * of `collection`. Keys may be specified as individual arguments or as arrays
   * of keys.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {...(number|number[]|string|string[])} [props] The property names
   *  or indexes of elements to pick, specified individually or in arrays.
   * @returns {Array} Returns the new array of picked elements.
   * @example
   *
   * _.at(['a', 'b', 'c'], [0, 2]);
   * // => ['a', 'c']
   *
   * _.at(['barney', 'fred', 'pebbles'], 0, 2);
   * // => ['barney', 'pebbles']
   */
  var at = (0, _lodashFunctionRestParam['default'])(function (collection, props) {
    return (0, _lodashInternalBaseAt['default'])(collection, (0, _lodashInternalBaseFlatten['default'])(props));
  });

  exports['default'] = at;
});
define('lodash/collection/collect', ['exports', 'lodash/collection/map'], function (exports, _lodashCollectionMap) {
  'use strict';

  exports['default'] = _lodashCollectionMap['default'];
});
define('lodash/collection/contains', ['exports', 'lodash/collection/includes'], function (exports, _lodashCollectionIncludes) {
  'use strict';

  exports['default'] = _lodashCollectionIncludes['default'];
});
define('lodash/collection/countBy', ['exports', 'lodash/internal/createAggregator'], function (exports, _lodashInternalCreateAggregator) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` through `iteratee`. The corresponding value
   * of each key is the number of times the key was returned by `iteratee`.
   * The `iteratee` is bound to `thisArg` and invoked with three arguments:
   * (value, index|key, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.countBy([4.3, 6.1, 6.4], function(n) {
   *   return Math.floor(n);
   * });
   * // => { '4': 1, '6': 2 }
   *
   * _.countBy([4.3, 6.1, 6.4], function(n) {
   *   return this.floor(n);
   * }, Math);
   * // => { '4': 1, '6': 2 }
   *
   * _.countBy(['one', 'two', 'three'], 'length');
   * // => { '3': 2, '5': 1 }
   */
  var countBy = (0, _lodashInternalCreateAggregator['default'])(function (result, value, key) {
    hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;
  });

  exports['default'] = countBy;
});
define('lodash/collection/detect', ['exports', 'lodash/collection/find'], function (exports, _lodashCollectionFind) {
  'use strict';

  exports['default'] = _lodashCollectionFind['default'];
});
define('lodash/collection/each', ['exports', 'lodash/collection/forEach'], function (exports, _lodashCollectionForEach) {
  'use strict';

  exports['default'] = _lodashCollectionForEach['default'];
});
define('lodash/collection/eachRight', ['exports', 'lodash/collection/forEachRight'], function (exports, _lodashCollectionForEachRight) {
  'use strict';

  exports['default'] = _lodashCollectionForEachRight['default'];
});
define('lodash/collection/every', ['exports', 'lodash/internal/arrayEvery', 'lodash/internal/baseCallback', 'lodash/internal/baseEvery', 'lodash/lang/isArray', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalArrayEvery, _lodashInternalBaseCallback, _lodashInternalBaseEvery, _lodashLangIsArray, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Checks if `predicate` returns truthy for **all** elements of `collection`.
   * The predicate is bound to `thisArg` and invoked with three arguments:
   * (value, index|key, collection).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias all
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   *
   * var users = [
   *   { 'user': 'barney', 'active': false },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.every(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.every(users, 'active', false);
   * // => true
   *
   * // using the `_.property` callback shorthand
   * _.every(users, 'active');
   * // => false
   */
  function every(collection, predicate, thisArg) {
    var func = (0, _lodashLangIsArray['default'])(collection) ? _lodashInternalArrayEvery['default'] : _lodashInternalBaseEvery['default'];
    if (thisArg && (0, _lodashInternalIsIterateeCall['default'])(collection, predicate, thisArg)) {
      predicate = undefined;
    }
    if (typeof predicate != 'function' || thisArg !== undefined) {
      predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
    }
    return func(collection, predicate);
  }

  exports['default'] = every;
});
define('lodash/collection/filter', ['exports', 'lodash/internal/arrayFilter', 'lodash/internal/baseCallback', 'lodash/internal/baseFilter', 'lodash/lang/isArray'], function (exports, _lodashInternalArrayFilter, _lodashInternalBaseCallback, _lodashInternalBaseFilter, _lodashLangIsArray) {
  'use strict';

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is bound to `thisArg` and
   * invoked with three arguments: (value, index|key, collection).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias select
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the new filtered array.
   * @example
   *
   * _.filter([4, 5, 6], function(n) {
   *   return n % 2 == 0;
   * });
   * // => [4, 6]
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
   * // => ['barney']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.filter(users, 'active', false), 'user');
   * // => ['fred']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.filter(users, 'active'), 'user');
   * // => ['barney']
   */
  function filter(collection, predicate, thisArg) {
    var func = (0, _lodashLangIsArray['default'])(collection) ? _lodashInternalArrayFilter['default'] : _lodashInternalBaseFilter['default'];
    predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
    return func(collection, predicate);
  }

  exports['default'] = filter;
});
define('lodash/collection/find', ['exports', 'lodash/internal/baseEach', 'lodash/internal/createFind'], function (exports, _lodashInternalBaseEach, _lodashInternalCreateFind) {
  'use strict';

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is bound to `thisArg` and
   * invoked with three arguments: (value, index|key, collection).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias detect
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.result(_.find(users, function(chr) {
   *   return chr.age < 40;
   * }), 'user');
   * // => 'barney'
   *
   * // using the `_.matches` callback shorthand
   * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
   * // => 'pebbles'
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.result(_.find(users, 'active', false), 'user');
   * // => 'fred'
   *
   * // using the `_.property` callback shorthand
   * _.result(_.find(users, 'active'), 'user');
   * // => 'barney'
   */
  var find = (0, _lodashInternalCreateFind['default'])(_lodashInternalBaseEach['default']);

  exports['default'] = find;
});
define('lodash/collection/findLast', ['exports', 'lodash/internal/baseEachRight', 'lodash/internal/createFind'], function (exports, _lodashInternalBaseEachRight, _lodashInternalCreateFind) {
  'use strict';

  /**
   * This method is like `_.find` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * _.findLast([1, 2, 3, 4], function(n) {
   *   return n % 2 == 1;
   * });
   * // => 3
   */
  var findLast = (0, _lodashInternalCreateFind['default'])(_lodashInternalBaseEachRight['default'], true);

  exports['default'] = findLast;
});
define('lodash/collection/findWhere', ['exports', 'lodash/internal/baseMatches', 'lodash/collection/find'], function (exports, _lodashInternalBaseMatches, _lodashCollectionFind) {
  'use strict';

  /**
   * Performs a deep comparison between each element in `collection` and the
   * source object, returning the first element that has equivalent property
   * values.
   *
   * **Note:** This method supports comparing arrays, booleans, `Date` objects,
   * numbers, `Object` objects, regexes, and strings. Objects are compared by
   * their own, not inherited, enumerable properties. For comparing a single
   * own or inherited property value see `_.matchesProperty`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {Object} source The object of property values to match.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
   * // => 'barney'
   *
   * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
   * // => 'fred'
   */
  function findWhere(collection, source) {
    return (0, _lodashCollectionFind['default'])(collection, (0, _lodashInternalBaseMatches['default'])(source));
  }

  exports['default'] = findWhere;
});
define('lodash/collection/foldl', ['exports', 'lodash/collection/reduce'], function (exports, _lodashCollectionReduce) {
  'use strict';

  exports['default'] = _lodashCollectionReduce['default'];
});
define('lodash/collection/foldr', ['exports', 'lodash/collection/reduceRight'], function (exports, _lodashCollectionReduceRight) {
  'use strict';

  exports['default'] = _lodashCollectionReduceRight['default'];
});
define('lodash/collection/forEach', ['exports', 'lodash/internal/arrayEach', 'lodash/internal/baseEach', 'lodash/internal/createForEach'], function (exports, _lodashInternalArrayEach, _lodashInternalBaseEach, _lodashInternalCreateForEach) {
  'use strict';

  /**
   * Iterates over elements of `collection` invoking `iteratee` for each element.
   * The `iteratee` is bound to `thisArg` and invoked with three arguments:
   * (value, index|key, collection). Iteratee functions may exit iteration early
   * by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length" property
   * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
   * may be used for object iteration.
   *
   * @static
   * @memberOf _
   * @alias each
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array|Object|string} Returns `collection`.
   * @example
   *
   * _([1, 2]).forEach(function(n) {
   *   console.log(n);
   * }).value();
   * // => logs each value from left to right and returns the array
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
   *   console.log(n, key);
   * });
   * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
   */
  var forEach = (0, _lodashInternalCreateForEach['default'])(_lodashInternalArrayEach['default'], _lodashInternalBaseEach['default']);

  exports['default'] = forEach;
});
define('lodash/collection/forEachRight', ['exports', 'lodash/internal/arrayEachRight', 'lodash/internal/baseEachRight', 'lodash/internal/createForEach'], function (exports, _lodashInternalArrayEachRight, _lodashInternalBaseEachRight, _lodashInternalCreateForEach) {
  'use strict';

  /**
   * This method is like `_.forEach` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @alias eachRight
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array|Object|string} Returns `collection`.
   * @example
   *
   * _([1, 2]).forEachRight(function(n) {
   *   console.log(n);
   * }).value();
   * // => logs each value from right to left and returns the array
   */
  var forEachRight = (0, _lodashInternalCreateForEach['default'])(_lodashInternalArrayEachRight['default'], _lodashInternalBaseEachRight['default']);

  exports['default'] = forEachRight;
});
define('lodash/collection/groupBy', ['exports', 'lodash/internal/createAggregator'], function (exports, _lodashInternalCreateAggregator) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` through `iteratee`. The corresponding value
   * of each key is an array of the elements responsible for generating the key.
   * The `iteratee` is bound to `thisArg` and invoked with three arguments:
   * (value, index|key, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.groupBy([4.2, 6.1, 6.4], function(n) {
   *   return Math.floor(n);
   * });
   * // => { '4': [4.2], '6': [6.1, 6.4] }
   *
   * _.groupBy([4.2, 6.1, 6.4], function(n) {
   *   return this.floor(n);
   * }, Math);
   * // => { '4': [4.2], '6': [6.1, 6.4] }
   *
   * // using the `_.property` callback shorthand
   * _.groupBy(['one', 'two', 'three'], 'length');
   * // => { '3': ['one', 'two'], '5': ['three'] }
   */
  var groupBy = (0, _lodashInternalCreateAggregator['default'])(function (result, value, key) {
    if (hasOwnProperty.call(result, key)) {
      result[key].push(value);
    } else {
      result[key] = [value];
    }
  });

  exports['default'] = groupBy;
});
define('lodash/collection/include', ['exports', 'lodash/collection/includes'], function (exports, _lodashCollectionIncludes) {
  'use strict';

  exports['default'] = _lodashCollectionIncludes['default'];
});
define('lodash/collection/includes', ['exports', 'lodash/internal/baseIndexOf', 'lodash/internal/getLength', 'lodash/lang/isArray', 'lodash/internal/isIterateeCall', 'lodash/internal/isLength', 'lodash/lang/isString', 'lodash/object/values'], function (exports, _lodashInternalBaseIndexOf, _lodashInternalGetLength, _lodashLangIsArray, _lodashInternalIsIterateeCall, _lodashInternalIsLength, _lodashLangIsString, _lodashObjectValues) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Checks if `target` is in `collection` using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the offset
   * from the end of `collection`.
   *
   * @static
   * @memberOf _
   * @alias contains, include
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {*} target The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
   * @returns {boolean} Returns `true` if a matching element is found, else `false`.
   * @example
   *
   * _.includes([1, 2, 3], 1);
   * // => true
   *
   * _.includes([1, 2, 3], 1, 2);
   * // => false
   *
   * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
   * // => true
   *
   * _.includes('pebbles', 'eb');
   * // => true
   */
  function includes(collection, target, fromIndex, guard) {
    var length = collection ? (0, _lodashInternalGetLength['default'])(collection) : 0;
    if (!(0, _lodashInternalIsLength['default'])(length)) {
      collection = (0, _lodashObjectValues['default'])(collection);
      length = collection.length;
    }
    if (typeof fromIndex != 'number' || guard && (0, _lodashInternalIsIterateeCall['default'])(target, fromIndex, guard)) {
      fromIndex = 0;
    } else {
      fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex || 0;
    }
    return typeof collection == 'string' || !(0, _lodashLangIsArray['default'])(collection) && (0, _lodashLangIsString['default'])(collection) ? fromIndex <= length && collection.indexOf(target, fromIndex) > -1 : !!length && (0, _lodashInternalBaseIndexOf['default'])(collection, target, fromIndex) > -1;
  }

  exports['default'] = includes;
});
define('lodash/collection/indexBy', ['exports', 'lodash/internal/createAggregator'], function (exports, _lodashInternalCreateAggregator) {
  'use strict';

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` through `iteratee`. The corresponding value
   * of each key is the last element responsible for generating the key. The
   * iteratee function is bound to `thisArg` and invoked with three arguments:
   * (value, index|key, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * var keyData = [
   *   { 'dir': 'left', 'code': 97 },
   *   { 'dir': 'right', 'code': 100 }
   * ];
   *
   * _.indexBy(keyData, 'dir');
   * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
   *
   * _.indexBy(keyData, function(object) {
   *   return String.fromCharCode(object.code);
   * });
   * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
   *
   * _.indexBy(keyData, function(object) {
   *   return this.fromCharCode(object.code);
   * }, String);
   * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
   */
  var indexBy = (0, _lodashInternalCreateAggregator['default'])(function (result, value, key) {
    result[key] = value;
  });

  exports['default'] = indexBy;
});
define('lodash/collection/inject', ['exports', 'lodash/collection/reduce'], function (exports, _lodashCollectionReduce) {
  'use strict';

  exports['default'] = _lodashCollectionReduce['default'];
});
define('lodash/collection/invoke', ['exports', 'lodash/internal/baseEach', 'lodash/internal/invokePath', 'lodash/internal/isArrayLike', 'lodash/internal/isKey', 'lodash/function/restParam'], function (exports, _lodashInternalBaseEach, _lodashInternalInvokePath, _lodashInternalIsArrayLike, _lodashInternalIsKey, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Invokes the method at `path` of each element in `collection`, returning
   * an array of the results of each invoked method. Any additional arguments
   * are provided to each invoked method. If `methodName` is a function it's
   * invoked for, and `this` bound to, each element in `collection`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Array|Function|string} path The path of the method to invoke or
   *  the function invoked per iteration.
   * @param {...*} [args] The arguments to invoke the method with.
   * @returns {Array} Returns the array of results.
   * @example
   *
   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
   * // => [[1, 5, 7], [1, 2, 3]]
   *
   * _.invoke([123, 456], String.prototype.split, '');
   * // => [['1', '2', '3'], ['4', '5', '6']]
   */
  var invoke = (0, _lodashFunctionRestParam['default'])(function (collection, path, args) {
    var index = -1,
        isFunc = typeof path == 'function',
        isProp = (0, _lodashInternalIsKey['default'])(path),
        result = (0, _lodashInternalIsArrayLike['default'])(collection) ? Array(collection.length) : [];

    (0, _lodashInternalBaseEach['default'])(collection, function (value) {
      var func = isFunc ? path : isProp && value != null ? value[path] : undefined;
      result[++index] = func ? func.apply(value, args) : (0, _lodashInternalInvokePath['default'])(value, path, args);
    });
    return result;
  });

  exports['default'] = invoke;
});
define('lodash/collection/map', ['exports', 'lodash/internal/arrayMap', 'lodash/internal/baseCallback', 'lodash/internal/baseMap', 'lodash/lang/isArray'], function (exports, _lodashInternalArrayMap, _lodashInternalBaseCallback, _lodashInternalBaseMap, _lodashLangIsArray) {
  'use strict';

  /**
   * Creates an array of values by running each element in `collection` through
   * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
   * arguments: (value, index|key, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
   * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
   * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
   * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
   * `sum`, `uniq`, and `words`
   *
   * @static
   * @memberOf _
   * @alias collect
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function timesThree(n) {
   *   return n * 3;
   * }
   *
   * _.map([1, 2], timesThree);
   * // => [3, 6]
   *
   * _.map({ 'a': 1, 'b': 2 }, timesThree);
   * // => [3, 6] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // using the `_.property` callback shorthand
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee, thisArg) {
    var func = (0, _lodashLangIsArray['default'])(collection) ? _lodashInternalArrayMap['default'] : _lodashInternalBaseMap['default'];
    iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);
    return func(collection, iteratee);
  }

  exports['default'] = map;
});
define('lodash/collection/max', ['exports', 'lodash/math/max'], function (exports, _lodashMathMax) {
  'use strict';

  exports['default'] = _lodashMathMax['default'];
});
define('lodash/collection/min', ['exports', 'lodash/math/min'], function (exports, _lodashMathMin) {
  'use strict';

  exports['default'] = _lodashMathMin['default'];
});
define('lodash/collection/partition', ['exports', 'lodash/internal/createAggregator'], function (exports, _lodashInternalCreateAggregator) {
  'use strict';

  /**
   * Creates an array of elements split into two groups, the first of which
   * contains elements `predicate` returns truthy for, while the second of which
   * contains elements `predicate` returns falsey for. The predicate is bound
   * to `thisArg` and invoked with three arguments: (value, index|key, collection).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the array of grouped elements.
   * @example
   *
   * _.partition([1, 2, 3], function(n) {
   *   return n % 2;
   * });
   * // => [[1, 3], [2]]
   *
   * _.partition([1.2, 2.3, 3.4], function(n) {
   *   return this.floor(n) % 2;
   * }, Math);
   * // => [[1.2, 3.4], [2.3]]
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': false },
   *   { 'user': 'fred',    'age': 40, 'active': true },
   *   { 'user': 'pebbles', 'age': 1,  'active': false }
   * ];
   *
   * var mapper = function(array) {
   *   return _.pluck(array, 'user');
   * };
   *
   * // using the `_.matches` callback shorthand
   * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
   * // => [['pebbles'], ['barney', 'fred']]
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.map(_.partition(users, 'active', false), mapper);
   * // => [['barney', 'pebbles'], ['fred']]
   *
   * // using the `_.property` callback shorthand
   * _.map(_.partition(users, 'active'), mapper);
   * // => [['fred'], ['barney', 'pebbles']]
   */
  var partition = (0, _lodashInternalCreateAggregator['default'])(function (result, value, key) {
    result[key ? 0 : 1].push(value);
  }, function () {
    return [[], []];
  });

  exports['default'] = partition;
});
define('lodash/collection/pluck', ['exports', 'lodash/collection/map', 'lodash/utility/property'], function (exports, _lodashCollectionMap, _lodashUtilityProperty) {
  'use strict';

  /**
   * Gets the property value of `path` from all elements in `collection`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Array|string} path The path of the property to pluck.
   * @returns {Array} Returns the property values.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * _.pluck(users, 'user');
   * // => ['barney', 'fred']
   *
   * var userIndex = _.indexBy(users, 'user');
   * _.pluck(userIndex, 'age');
   * // => [36, 40] (iteration order is not guaranteed)
   */
  function pluck(collection, path) {
    return (0, _lodashCollectionMap['default'])(collection, (0, _lodashUtilityProperty['default'])(path));
  }

  exports['default'] = pluck;
});
define('lodash/collection/reduce', ['exports', 'lodash/internal/arrayReduce', 'lodash/internal/baseEach', 'lodash/internal/createReduce'], function (exports, _lodashInternalArrayReduce, _lodashInternalBaseEach, _lodashInternalCreateReduce) {
  'use strict';

  /**
   * Reduces `collection` to a value which is the accumulated result of running
   * each element in `collection` through `iteratee`, where each successive
   * invocation is supplied the return value of the previous. If `accumulator`
   * is not provided the first element of `collection` is used as the initial
   * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
   * (accumulator, value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.reduce`, `_.reduceRight`, and `_.transform`.
   *
   * The guarded methods are:
   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
   * and `sortByOrder`
   *
   * @static
   * @memberOf _
   * @alias foldl, inject
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {*} Returns the accumulated value.
   * @example
   *
   * _.reduce([1, 2], function(total, n) {
   *   return total + n;
   * });
   * // => 3
   *
   * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
   *   result[key] = n * 3;
   *   return result;
   * }, {});
   * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
   */
  var reduce = (0, _lodashInternalCreateReduce['default'])(_lodashInternalArrayReduce['default'], _lodashInternalBaseEach['default']);

  exports['default'] = reduce;
});
define('lodash/collection/reduceRight', ['exports', 'lodash/internal/arrayReduceRight', 'lodash/internal/baseEachRight', 'lodash/internal/createReduce'], function (exports, _lodashInternalArrayReduceRight, _lodashInternalBaseEachRight, _lodashInternalCreateReduce) {
  'use strict';

  /**
   * This method is like `_.reduce` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @alias foldr
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {*} Returns the accumulated value.
   * @example
   *
   * var array = [[0, 1], [2, 3], [4, 5]];
   *
   * _.reduceRight(array, function(flattened, other) {
   *   return flattened.concat(other);
   * }, []);
   * // => [4, 5, 2, 3, 0, 1]
   */
  var reduceRight = (0, _lodashInternalCreateReduce['default'])(_lodashInternalArrayReduceRight['default'], _lodashInternalBaseEachRight['default']);

  exports['default'] = reduceRight;
});
define('lodash/collection/reject', ['exports', 'lodash/internal/arrayFilter', 'lodash/internal/baseCallback', 'lodash/internal/baseFilter', 'lodash/lang/isArray'], function (exports, _lodashInternalArrayFilter, _lodashInternalBaseCallback, _lodashInternalBaseFilter, _lodashLangIsArray) {
  'use strict';

  /**
   * The opposite of `_.filter`; this method returns the elements of `collection`
   * that `predicate` does **not** return truthy for.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the new filtered array.
   * @example
   *
   * _.reject([1, 2, 3, 4], function(n) {
   *   return n % 2 == 0;
   * });
   * // => [1, 3]
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false },
   *   { 'user': 'fred',   'age': 40, 'active': true }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
   * // => ['barney']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.reject(users, 'active', false), 'user');
   * // => ['fred']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.reject(users, 'active'), 'user');
   * // => ['barney']
   */
  function reject(collection, predicate, thisArg) {
    var func = (0, _lodashLangIsArray['default'])(collection) ? _lodashInternalArrayFilter['default'] : _lodashInternalBaseFilter['default'];
    predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
    return func(collection, function (value, index, collection) {
      return !predicate(value, index, collection);
    });
  }

  exports['default'] = reject;
});
define('lodash/collection/sample', ['exports', 'lodash/internal/baseRandom', 'lodash/internal/isIterateeCall', 'lodash/lang/toArray', 'lodash/internal/toIterable'], function (exports, _lodashInternalBaseRandom, _lodashInternalIsIterateeCall, _lodashLangToArray, _lodashInternalToIterable) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Gets a random element or `n` random elements from a collection.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to sample.
   * @param {number} [n] The number of elements to sample.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {*} Returns the random sample(s).
   * @example
   *
   * _.sample([1, 2, 3, 4]);
   * // => 2
   *
   * _.sample([1, 2, 3, 4], 2);
   * // => [3, 1]
   */
  function sample(collection, n, guard) {
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(collection, n, guard) : n == null) {
      collection = (0, _lodashInternalToIterable['default'])(collection);
      var length = collection.length;
      return length > 0 ? collection[(0, _lodashInternalBaseRandom['default'])(0, length - 1)] : undefined;
    }
    var index = -1,
        result = (0, _lodashLangToArray['default'])(collection),
        length = result.length,
        lastIndex = length - 1;

    n = nativeMin(n < 0 ? 0 : +n || 0, length);
    while (++index < n) {
      var rand = (0, _lodashInternalBaseRandom['default'])(index, lastIndex),
          value = result[rand];

      result[rand] = result[index];
      result[index] = value;
    }
    result.length = n;
    return result;
  }

  exports['default'] = sample;
});
define('lodash/collection/select', ['exports', 'lodash/collection/filter'], function (exports, _lodashCollectionFilter) {
  'use strict';

  exports['default'] = _lodashCollectionFilter['default'];
});
define('lodash/collection/shuffle', ['exports', 'lodash/collection/sample'], function (exports, _lodashCollectionSample) {
  'use strict';

  /** Used as references for `-Infinity` and `Infinity`. */
  var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

  /**
   * Creates an array of shuffled values, using a version of the
   * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to shuffle.
   * @returns {Array} Returns the new shuffled array.
   * @example
   *
   * _.shuffle([1, 2, 3, 4]);
   * // => [4, 1, 3, 2]
   */
  function shuffle(collection) {
    return (0, _lodashCollectionSample['default'])(collection, POSITIVE_INFINITY);
  }

  exports['default'] = shuffle;
});
define('lodash/collection/size', ['exports', 'lodash/internal/getLength', 'lodash/internal/isLength', 'lodash/object/keys'], function (exports, _lodashInternalGetLength, _lodashInternalIsLength, _lodashObjectKeys) {
  'use strict';

  /**
   * Gets the size of `collection` by returning its length for array-like
   * values or the number of own enumerable properties for objects.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @returns {number} Returns the size of `collection`.
   * @example
   *
   * _.size([1, 2, 3]);
   * // => 3
   *
   * _.size({ 'a': 1, 'b': 2 });
   * // => 2
   *
   * _.size('pebbles');
   * // => 7
   */
  function size(collection) {
    var length = collection ? (0, _lodashInternalGetLength['default'])(collection) : 0;
    return (0, _lodashInternalIsLength['default'])(length) ? length : (0, _lodashObjectKeys['default'])(collection).length;
  }

  exports['default'] = size;
});
define('lodash/collection/some', ['exports', 'lodash/internal/arraySome', 'lodash/internal/baseCallback', 'lodash/internal/baseSome', 'lodash/lang/isArray', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalArraySome, _lodashInternalBaseCallback, _lodashInternalBaseSome, _lodashLangIsArray, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Checks if `predicate` returns truthy for **any** element of `collection`.
   * The function returns as soon as it finds a passing value and does not iterate
   * over the entire collection. The predicate is bound to `thisArg` and invoked
   * with three arguments: (value, index|key, collection).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias any
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false], Boolean);
   * // => true
   *
   * var users = [
   *   { 'user': 'barney', 'active': true },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.some(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.some(users, 'active', false);
   * // => true
   *
   * // using the `_.property` callback shorthand
   * _.some(users, 'active');
   * // => true
   */
  function some(collection, predicate, thisArg) {
    var func = (0, _lodashLangIsArray['default'])(collection) ? _lodashInternalArraySome['default'] : _lodashInternalBaseSome['default'];
    if (thisArg && (0, _lodashInternalIsIterateeCall['default'])(collection, predicate, thisArg)) {
      predicate = undefined;
    }
    if (typeof predicate != 'function' || thisArg !== undefined) {
      predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
    }
    return func(collection, predicate);
  }

  exports['default'] = some;
});
define('lodash/collection/sortBy', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseMap', 'lodash/internal/baseSortBy', 'lodash/internal/compareAscending', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseMap, _lodashInternalBaseSortBy, _lodashInternalCompareAscending, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection through `iteratee`. This method performs
   * a stable sort, that is, it preserves the original sort order of equal elements.
   * The `iteratee` is bound to `thisArg` and invoked with three arguments:
   * (value, index|key, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * _.sortBy([1, 2, 3], function(n) {
   *   return Math.sin(n);
   * });
   * // => [3, 1, 2]
   *
   * _.sortBy([1, 2, 3], function(n) {
   *   return this.sin(n);
   * }, Math);
   * // => [3, 1, 2]
   *
   * var users = [
   *   { 'user': 'fred' },
   *   { 'user': 'pebbles' },
   *   { 'user': 'barney' }
   * ];
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.sortBy(users, 'user'), 'user');
   * // => ['barney', 'fred', 'pebbles']
   */
  function sortBy(collection, iteratee, thisArg) {
    if (collection == null) {
      return [];
    }
    if (thisArg && (0, _lodashInternalIsIterateeCall['default'])(collection, iteratee, thisArg)) {
      iteratee = undefined;
    }
    var index = -1;
    iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);

    var result = (0, _lodashInternalBaseMap['default'])(collection, function (value, key, collection) {
      return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
    });
    return (0, _lodashInternalBaseSortBy['default'])(result, _lodashInternalCompareAscending['default']);
  }

  exports['default'] = sortBy;
});
define('lodash/collection/sortByAll', ['exports', 'lodash/internal/baseFlatten', 'lodash/internal/baseSortByOrder', 'lodash/internal/isIterateeCall', 'lodash/function/restParam'], function (exports, _lodashInternalBaseFlatten, _lodashInternalBaseSortByOrder, _lodashInternalIsIterateeCall, _lodashFunctionRestParam) {
  'use strict';

  /**
   * This method is like `_.sortBy` except that it can sort by multiple iteratees
   * or property names.
   *
   * If a property name is provided for an iteratee the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If an object is provided for an iteratee the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
   *  The iteratees to sort by, specified as individual values or arrays of values.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 42 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.map(_.sortByAll(users, ['user', 'age']), _.values);
   * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
   *
   * _.map(_.sortByAll(users, 'user', function(chr) {
   *   return Math.floor(chr.age / 10);
   * }), _.values);
   * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
   */
  var sortByAll = (0, _lodashFunctionRestParam['default'])(function (collection, iteratees) {
    if (collection == null) {
      return [];
    }
    var guard = iteratees[2];
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(iteratees[0], iteratees[1], guard)) {
      iteratees.length = 1;
    }
    return (0, _lodashInternalBaseSortByOrder['default'])(collection, (0, _lodashInternalBaseFlatten['default'])(iteratees), []);
  });

  exports['default'] = sortByAll;
});
define('lodash/collection/sortByOrder', ['exports', 'lodash/internal/baseSortByOrder', 'lodash/lang/isArray', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseSortByOrder, _lodashLangIsArray, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * This method is like `_.sortByAll` except that it allows specifying the
   * sort orders of the iteratees to sort by. If `orders` is unspecified, all
   * values are sorted in ascending order. Otherwise, a value is sorted in
   * ascending order if its corresponding order is "asc", and descending if "desc".
   *
   * If a property name is provided for an iteratee the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If an object is provided for an iteratee the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {boolean[]} [orders] The sort orders of `iteratees`.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 34 },
   *   { 'user': 'fred',   'age': 42 },
   *   { 'user': 'barney', 'age': 36 }
   * ];
   *
   * // sort by `user` in ascending order and by `age` in descending order
   * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
   * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
   */
  function sortByOrder(collection, iteratees, orders, guard) {
    if (collection == null) {
      return [];
    }
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(iteratees, orders, guard)) {
      orders = undefined;
    }
    if (!(0, _lodashLangIsArray['default'])(iteratees)) {
      iteratees = iteratees == null ? [] : [iteratees];
    }
    if (!(0, _lodashLangIsArray['default'])(orders)) {
      orders = orders == null ? [] : [orders];
    }
    return (0, _lodashInternalBaseSortByOrder['default'])(collection, iteratees, orders);
  }

  exports['default'] = sortByOrder;
});
define('lodash/collection/sum', ['exports', 'lodash/math/sum'], function (exports, _lodashMathSum) {
  'use strict';

  exports['default'] = _lodashMathSum['default'];
});
define('lodash/collection/where', ['exports', 'lodash/internal/baseMatches', 'lodash/collection/filter'], function (exports, _lodashInternalBaseMatches, _lodashCollectionFilter) {
  'use strict';

  /**
   * Performs a deep comparison between each element in `collection` and the
   * source object, returning an array of all elements that have equivalent
   * property values.
   *
   * **Note:** This method supports comparing arrays, booleans, `Date` objects,
   * numbers, `Object` objects, regexes, and strings. Objects are compared by
   * their own, not inherited, enumerable properties. For comparing a single
   * own or inherited property value see `_.matchesProperty`.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {Object} source The object of property values to match.
   * @returns {Array} Returns the new filtered array.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
   *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
   * ];
   *
   * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
   * // => ['barney']
   *
   * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
   * // => ['fred']
   */
  function where(collection, source) {
    return (0, _lodashCollectionFilter['default'])(collection, (0, _lodashInternalBaseMatches['default'])(source));
  }

  exports['default'] = where;
});
define('lodash/date', ['exports', 'lodash/date/now'], function (exports, _lodashDateNow) {
  'use strict';

  exports['default'] = {
    'now': _lodashDateNow['default']
  };
});
define('lodash/date/now', ['exports', 'lodash/internal/getNative'], function (exports, _lodashInternalGetNative) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeNow = (0, _lodashInternalGetNative['default'])(Date, 'now');

  /**
   * Gets the number of milliseconds that have elapsed since the Unix epoch
   * (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @category Date
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => logs the number of milliseconds it took for the deferred function to be invoked
   */
  var now = nativeNow || function () {
    return new Date().getTime();
  };

  exports['default'] = now;
});
define('lodash/function', ['exports', 'lodash/function/after', 'lodash/function/ary', 'lodash/function/backflow', 'lodash/function/before', 'lodash/function/bind', 'lodash/function/bindAll', 'lodash/function/bindKey', 'lodash/function/compose', 'lodash/function/curry', 'lodash/function/curryRight', 'lodash/function/debounce', 'lodash/function/defer', 'lodash/function/delay', 'lodash/function/flow', 'lodash/function/flowRight', 'lodash/function/memoize', 'lodash/function/modArgs', 'lodash/function/negate', 'lodash/function/once', 'lodash/function/partial', 'lodash/function/partialRight', 'lodash/function/rearg', 'lodash/function/restParam', 'lodash/function/spread', 'lodash/function/throttle', 'lodash/function/wrap'], function (exports, _lodashFunctionAfter, _lodashFunctionAry, _lodashFunctionBackflow, _lodashFunctionBefore, _lodashFunctionBind, _lodashFunctionBindAll, _lodashFunctionBindKey, _lodashFunctionCompose, _lodashFunctionCurry, _lodashFunctionCurryRight, _lodashFunctionDebounce, _lodashFunctionDefer, _lodashFunctionDelay, _lodashFunctionFlow, _lodashFunctionFlowRight, _lodashFunctionMemoize, _lodashFunctionModArgs, _lodashFunctionNegate, _lodashFunctionOnce, _lodashFunctionPartial, _lodashFunctionPartialRight, _lodashFunctionRearg, _lodashFunctionRestParam, _lodashFunctionSpread, _lodashFunctionThrottle, _lodashFunctionWrap) {
  'use strict';

  exports['default'] = {
    'after': _lodashFunctionAfter['default'],
    'ary': _lodashFunctionAry['default'],
    'backflow': _lodashFunctionBackflow['default'],
    'before': _lodashFunctionBefore['default'],
    'bind': _lodashFunctionBind['default'],
    'bindAll': _lodashFunctionBindAll['default'],
    'bindKey': _lodashFunctionBindKey['default'],
    'compose': _lodashFunctionCompose['default'],
    'curry': _lodashFunctionCurry['default'],
    'curryRight': _lodashFunctionCurryRight['default'],
    'debounce': _lodashFunctionDebounce['default'],
    'defer': _lodashFunctionDefer['default'],
    'delay': _lodashFunctionDelay['default'],
    'flow': _lodashFunctionFlow['default'],
    'flowRight': _lodashFunctionFlowRight['default'],
    'memoize': _lodashFunctionMemoize['default'],
    'modArgs': _lodashFunctionModArgs['default'],
    'negate': _lodashFunctionNegate['default'],
    'once': _lodashFunctionOnce['default'],
    'partial': _lodashFunctionPartial['default'],
    'partialRight': _lodashFunctionPartialRight['default'],
    'rearg': _lodashFunctionRearg['default'],
    'restParam': _lodashFunctionRestParam['default'],
    'spread': _lodashFunctionSpread['default'],
    'throttle': _lodashFunctionThrottle['default'],
    'wrap': _lodashFunctionWrap['default']
  };
});
define('lodash/function/after', ['exports', 'lodash/internal/root'], function (exports, _lodashInternalRoot) {
  'use strict';

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite = _lodashInternalRoot['default'].isFinite;

  /**
   * The opposite of `_.before`; this method creates a function that invokes
   * `func` once it's called `n` or more times.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {number} n The number of calls before `func` is invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var saves = ['profile', 'settings'];
   *
   * var done = _.after(saves.length, function() {
   *   console.log('done saving!');
   * });
   *
   * _.forEach(saves, function(type) {
   *   asyncSave({ 'type': type, 'complete': done });
   * });
   * // => logs 'done saving!' after the two async saves have completed
   */
  function after(n, func) {
    if (typeof func != 'function') {
      if (typeof n == 'function') {
        var temp = n;
        n = func;
        func = temp;
      } else {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
    }
    n = nativeIsFinite(n = +n) ? n : 0;
    return function () {
      if (--n < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  exports['default'] = after;
});
define('lodash/function/ary', ['exports', 'lodash/internal/createWrapper', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalCreateWrapper, _lodashInternalIsIterateeCall) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var ARY_FLAG = 128;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that accepts up to `n` arguments ignoring any
   * additional arguments.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to cap arguments for.
   * @param {number} [n=func.length] The arity cap.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Function} Returns the new function.
   * @example
   *
   * _.map(['6', '8', '10'], _.ary(parseInt, 1));
   * // => [6, 8, 10]
   */
  function ary(func, n, guard) {
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(func, n, guard)) {
      n = undefined;
    }
    n = func && n == null ? func.length : nativeMax(+n || 0, 0);
    return (0, _lodashInternalCreateWrapper['default'])(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
  }

  exports['default'] = ary;
});
define('lodash/function/backflow', ['exports', 'lodash/function/flowRight'], function (exports, _lodashFunctionFlowRight) {
  'use strict';

  exports['default'] = _lodashFunctionFlowRight['default'];
});
define('lodash/function/before', ['exports'], function (exports) {
  /** Used as the `TypeError` message for "Functions" methods. */
  'use strict';

  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that invokes `func`, with the `this` binding and arguments
   * of the created function, while it's called less than `n` times. Subsequent
   * calls to the created function return the result of the last `func` invocation.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {number} n The number of calls at which `func` is no longer invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * jQuery('#add').on('click', _.before(5, addContactToList));
   * // => allows adding up to 4 contacts to the list
   */
  function before(n, func) {
    var result;
    if (typeof func != 'function') {
      if (typeof n == 'function') {
        var temp = n;
        n = func;
        func = temp;
      } else {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
    }
    return function () {
      if (--n > 0) {
        result = func.apply(this, arguments);
      }
      if (n <= 1) {
        func = undefined;
      }
      return result;
    };
  }

  exports['default'] = before;
});
define('lodash/function/bind', ['exports', 'lodash/internal/createWrapper', 'lodash/internal/replaceHolders', 'lodash/function/restParam'], function (exports, _lodashInternalCreateWrapper, _lodashInternalReplaceHolders, _lodashFunctionRestParam) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      PARTIAL_FLAG = 32;

  /**
   * Creates a function that invokes `func` with the `this` binding of `thisArg`
   * and prepends any additional `_.bind` arguments to those provided to the
   * bound function.
   *
   * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for partially applied arguments.
   *
   * **Note:** Unlike native `Function#bind` this method does not set the "length"
   * property of bound functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * var greet = function(greeting, punctuation) {
   *   return greeting + ' ' + this.user + punctuation;
   * };
   *
   * var object = { 'user': 'fred' };
   *
   * var bound = _.bind(greet, object, 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * // using placeholders
   * var bound = _.bind(greet, object, _, '!');
   * bound('hi');
   * // => 'hi fred!'
   */
  var bind = (0, _lodashFunctionRestParam['default'])(function (func, thisArg, partials) {
    var bitmask = BIND_FLAG;
    if (partials.length) {
      var holders = (0, _lodashInternalReplaceHolders['default'])(partials, bind.placeholder);
      bitmask |= PARTIAL_FLAG;
    }
    return (0, _lodashInternalCreateWrapper['default'])(func, bitmask, thisArg, partials, holders);
  });

  // Assign default placeholders.
  bind.placeholder = {};

  exports['default'] = bind;
});
define('lodash/function/bindAll', ['exports', 'lodash/internal/baseFlatten', 'lodash/internal/createWrapper', 'lodash/object/functions', 'lodash/function/restParam'], function (exports, _lodashInternalBaseFlatten, _lodashInternalCreateWrapper, _lodashObjectFunctions, _lodashFunctionRestParam) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1;

  /**
   * Binds methods of an object to the object itself, overwriting the existing
   * method. Method names may be specified as individual arguments or as arrays
   * of method names. If no method names are provided all enumerable function
   * properties, own and inherited, of `object` are bound.
   *
   * **Note:** This method does not set the "length" property of bound functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Object} object The object to bind and assign the bound methods to.
   * @param {...(string|string[])} [methodNames] The object method names to bind,
   *  specified as individual method names or arrays of method names.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var view = {
   *   'label': 'docs',
   *   'onClick': function() {
   *     console.log('clicked ' + this.label);
   *   }
   * };
   *
   * _.bindAll(view);
   * jQuery('#docs').on('click', view.onClick);
   * // => logs 'clicked docs' when the element is clicked
   */
  var bindAll = (0, _lodashFunctionRestParam['default'])(function (object, methodNames) {
    methodNames = methodNames.length ? (0, _lodashInternalBaseFlatten['default'])(methodNames) : (0, _lodashObjectFunctions['default'])(object);

    var index = -1,
        length = methodNames.length;

    while (++index < length) {
      var key = methodNames[index];
      object[key] = (0, _lodashInternalCreateWrapper['default'])(object[key], BIND_FLAG, object);
    }
    return object;
  });

  exports['default'] = bindAll;
});
define('lodash/function/bindKey', ['exports', 'lodash/internal/createWrapper', 'lodash/internal/replaceHolders', 'lodash/function/restParam'], function (exports, _lodashInternalCreateWrapper, _lodashInternalReplaceHolders, _lodashFunctionRestParam) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      PARTIAL_FLAG = 32;

  /**
   * Creates a function that invokes the method at `object[key]` and prepends
   * any additional `_.bindKey` arguments to those provided to the bound function.
   *
   * This method differs from `_.bind` by allowing bound functions to reference
   * methods that may be redefined or don't yet exist.
   * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
   * for more details.
   *
   * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for partially applied arguments.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Object} object The object the method belongs to.
   * @param {string} key The key of the method.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * var object = {
   *   'user': 'fred',
   *   'greet': function(greeting, punctuation) {
   *     return greeting + ' ' + this.user + punctuation;
   *   }
   * };
   *
   * var bound = _.bindKey(object, 'greet', 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * object.greet = function(greeting, punctuation) {
   *   return greeting + 'ya ' + this.user + punctuation;
   * };
   *
   * bound('!');
   * // => 'hiya fred!'
   *
   * // using placeholders
   * var bound = _.bindKey(object, 'greet', _, '!');
   * bound('hi');
   * // => 'hiya fred!'
   */
  var bindKey = (0, _lodashFunctionRestParam['default'])(function (object, key, partials) {
    var bitmask = BIND_FLAG | BIND_KEY_FLAG;
    if (partials.length) {
      var holders = (0, _lodashInternalReplaceHolders['default'])(partials, bindKey.placeholder);
      bitmask |= PARTIAL_FLAG;
    }
    return (0, _lodashInternalCreateWrapper['default'])(key, bitmask, object, partials, holders);
  });

  // Assign default placeholders.
  bindKey.placeholder = {};

  exports['default'] = bindKey;
});
define('lodash/function/compose', ['exports', 'lodash/function/flowRight'], function (exports, _lodashFunctionFlowRight) {
  'use strict';

  exports['default'] = _lodashFunctionFlowRight['default'];
});
define('lodash/function/curry', ['exports', 'lodash/internal/createCurry'], function (exports, _lodashInternalCreateCurry) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var CURRY_FLAG = 8;

  /**
   * Creates a function that accepts one or more arguments of `func` that when
   * called either invokes `func` returning its result, if all `func` arguments
   * have been provided, or returns a function that accepts one or more of the
   * remaining `func` arguments, and so on. The arity of `func` may be specified
   * if `func.length` is not sufficient.
   *
   * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for provided arguments.
   *
   * **Note:** This method does not set the "length" property of curried functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to curry.
   * @param {number} [arity=func.length] The arity of `func`.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Function} Returns the new curried function.
   * @example
   *
   * var abc = function(a, b, c) {
   *   return [a, b, c];
   * };
   *
   * var curried = _.curry(abc);
   *
   * curried(1)(2)(3);
   * // => [1, 2, 3]
   *
   * curried(1, 2)(3);
   * // => [1, 2, 3]
   *
   * curried(1, 2, 3);
   * // => [1, 2, 3]
   *
   * // using placeholders
   * curried(1)(_, 3)(2);
   * // => [1, 2, 3]
   */
  var curry = (0, _lodashInternalCreateCurry['default'])(CURRY_FLAG);

  // Assign default placeholders.
  curry.placeholder = {};

  exports['default'] = curry;
});
define('lodash/function/curryRight', ['exports', 'lodash/internal/createCurry'], function (exports, _lodashInternalCreateCurry) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var CURRY_RIGHT_FLAG = 16;

  /**
   * This method is like `_.curry` except that arguments are applied to `func`
   * in the manner of `_.partialRight` instead of `_.partial`.
   *
   * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for provided arguments.
   *
   * **Note:** This method does not set the "length" property of curried functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to curry.
   * @param {number} [arity=func.length] The arity of `func`.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Function} Returns the new curried function.
   * @example
   *
   * var abc = function(a, b, c) {
   *   return [a, b, c];
   * };
   *
   * var curried = _.curryRight(abc);
   *
   * curried(3)(2)(1);
   * // => [1, 2, 3]
   *
   * curried(2, 3)(1);
   * // => [1, 2, 3]
   *
   * curried(1, 2, 3);
   * // => [1, 2, 3]
   *
   * // using placeholders
   * curried(3)(1, _)(2);
   * // => [1, 2, 3]
   */
  var curryRight = (0, _lodashInternalCreateCurry['default'])(CURRY_RIGHT_FLAG);

  // Assign default placeholders.
  curryRight.placeholder = {};

  exports['default'] = curryRight;
});
define('lodash/function/debounce', ['exports', 'lodash/lang/isObject', 'lodash/date/now'], function (exports, _lodashLangIsObject, _lodashDateNow) {
  'use strict';

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed invocations. Provide an options object to indicate that `func`
   * should be invoked on the leading and/or trailing edge of the `wait` timeout.
   * Subsequent calls to the debounced function return the result of the last
   * `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
   * on the trailing edge of the timeout only if the the debounced function is
   * invoked more than once during the `wait` timeout.
   *
   * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options] The options object.
   * @param {boolean} [options.leading=false] Specify invoking on the leading
   *  edge of the timeout.
   * @param {number} [options.maxWait] The maximum time `func` is allowed to be
   *  delayed before it's invoked.
   * @param {boolean} [options.trailing=true] Specify invoking on the trailing
   *  edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // avoid costly calculations while the window size is in flux
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
   * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // ensure `batchLog` is invoked once after 1 second of debounced calls
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', _.debounce(batchLog, 250, {
   *   'maxWait': 1000
   * }));
   *
   * // cancel a debounced call
   * var todoChanges = _.debounce(batchLog, 1000);
   * Object.observe(models.todo, todoChanges);
   *
   * Object.observe(models, function(changes) {
   *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
   *     todoChanges.cancel();
   *   }
   * }, ['delete']);
   *
   * // ...at some point `models.todo` is changed
   * models.todo.completed = true;
   *
   * // ...before 1 second has passed `models.todo` is deleted
   * // which cancels the debounced `todoChanges` call
   * delete models.todo;
   */
  function debounce(func, wait, options) {
    var args,
        maxTimeoutId,
        result,
        stamp,
        thisArg,
        timeoutId,
        trailingCall,
        lastCalled = 0,
        maxWait = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = wait < 0 ? 0 : +wait || 0;
    if (options === true) {
      var leading = true;
      trailing = false;
    } else if ((0, _lodashLangIsObject['default'])(options)) {
      leading = !!options.leading;
      maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function cancel() {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      if (maxTimeoutId) {
        clearTimeout(maxTimeoutId);
      }
      lastCalled = 0;
      maxTimeoutId = timeoutId = trailingCall = undefined;
    }

    function complete(isCalled, id) {
      if (id) {
        clearTimeout(id);
      }
      maxTimeoutId = timeoutId = trailingCall = undefined;
      if (isCalled) {
        lastCalled = (0, _lodashDateNow['default'])();
        result = func.apply(thisArg, args);
        if (!timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
      }
    }

    function delayed() {
      var remaining = wait - ((0, _lodashDateNow['default'])() - stamp);
      if (remaining <= 0 || remaining > wait) {
        complete(trailingCall, maxTimeoutId);
      } else {
        timeoutId = setTimeout(delayed, remaining);
      }
    }

    function maxDelayed() {
      complete(trailing, timeoutId);
    }

    function debounced() {
      args = arguments;
      stamp = (0, _lodashDateNow['default'])();
      thisArg = this;
      trailingCall = trailing && (timeoutId || !leading);

      if (maxWait === false) {
        var leadingCall = leading && !timeoutId;
      } else {
        if (!maxTimeoutId && !leading) {
          lastCalled = stamp;
        }
        var remaining = maxWait - (stamp - lastCalled),
            isCalled = remaining <= 0 || remaining > maxWait;

        if (isCalled) {
          if (maxTimeoutId) {
            maxTimeoutId = clearTimeout(maxTimeoutId);
          }
          lastCalled = stamp;
          result = func.apply(thisArg, args);
        } else if (!maxTimeoutId) {
          maxTimeoutId = setTimeout(maxDelayed, remaining);
        }
      }
      if (isCalled && timeoutId) {
        timeoutId = clearTimeout(timeoutId);
      } else if (!timeoutId && wait !== maxWait) {
        timeoutId = setTimeout(delayed, wait);
      }
      if (leadingCall) {
        isCalled = true;
        result = func.apply(thisArg, args);
      }
      if (isCalled && !timeoutId && !maxTimeoutId) {
        args = thisArg = undefined;
      }
      return result;
    }
    debounced.cancel = cancel;
    return debounced;
  }

  exports['default'] = debounce;
});
define('lodash/function/defer', ['exports', 'lodash/internal/baseDelay', 'lodash/function/restParam'], function (exports, _lodashInternalBaseDelay, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Defers invoking the `func` until the current call stack has cleared. Any
   * additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to defer.
   * @param {...*} [args] The arguments to invoke the function with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.defer(function(text) {
   *   console.log(text);
   * }, 'deferred');
   * // logs 'deferred' after one or more milliseconds
   */
  var defer = (0, _lodashFunctionRestParam['default'])(function (func, args) {
    return (0, _lodashInternalBaseDelay['default'])(func, 1, args);
  });

  exports['default'] = defer;
});
define('lodash/function/delay', ['exports', 'lodash/internal/baseDelay', 'lodash/function/restParam'], function (exports, _lodashInternalBaseDelay, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Invokes `func` after `wait` milliseconds. Any additional arguments are
   * provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {...*} [args] The arguments to invoke the function with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.delay(function(text) {
   *   console.log(text);
   * }, 1000, 'later');
   * // => logs 'later' after one second
   */
  var delay = (0, _lodashFunctionRestParam['default'])(function (func, wait, args) {
    return (0, _lodashInternalBaseDelay['default'])(func, wait, args);
  });

  exports['default'] = delay;
});
define('lodash/function/flow', ['exports', 'lodash/internal/createFlow'], function (exports, _lodashInternalCreateFlow) {
  'use strict';

  /**
   * Creates a function that returns the result of invoking the provided
   * functions with the `this` binding of the created function, where each
   * successive invocation is supplied the return value of the previous.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {...Function} [funcs] Functions to invoke.
   * @returns {Function} Returns the new function.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var addSquare = _.flow(_.add, square);
   * addSquare(1, 2);
   * // => 9
   */
  var flow = (0, _lodashInternalCreateFlow['default'])();

  exports['default'] = flow;
});
define('lodash/function/flowRight', ['exports', 'lodash/internal/createFlow'], function (exports, _lodashInternalCreateFlow) {
  'use strict';

  /**
   * This method is like `_.flow` except that it creates a function that
   * invokes the provided functions from right to left.
   *
   * @static
   * @memberOf _
   * @alias backflow, compose
   * @category Function
   * @param {...Function} [funcs] Functions to invoke.
   * @returns {Function} Returns the new function.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var addSquare = _.flowRight(square, _.add);
   * addSquare(1, 2);
   * // => 9
   */
  var flowRight = (0, _lodashInternalCreateFlow['default'])(true);

  exports['default'] = flowRight;
});
define('lodash/function/memoize', ['exports', 'lodash/internal/MapCache'], function (exports, _lodashInternalMapCache) {
  'use strict';

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is coerced to a string and used as the
   * cache key. The `func` is invoked with the `this` binding of the memoized
   * function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoizing function.
   * @example
   *
   * var upperCase = _.memoize(function(string) {
   *   return string.toUpperCase();
   * });
   *
   * upperCase('fred');
   * // => 'FRED'
   *
   * // modifying the result cache
   * upperCase.cache.set('fred', 'BARNEY');
   * upperCase('fred');
   * // => 'BARNEY'
   *
   * // replacing `_.memoize.Cache`
   * var object = { 'user': 'fred' };
   * var other = { 'user': 'barney' };
   * var identity = _.memoize(_.identity);
   *
   * identity(object);
   * // => { 'user': 'fred' }
   * identity(other);
   * // => { 'user': 'fred' }
   *
   * _.memoize.Cache = WeakMap;
   * var identity = _.memoize(_.identity);
   *
   * identity(object);
   * // => { 'user': 'fred' }
   * identity(other);
   * // => { 'user': 'barney' }
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new memoize.Cache();
    return memoized;
  }

  // Assign cache to `_.memoize`.
  memoize.Cache = _lodashInternalMapCache['default'];

  exports['default'] = memoize;
});
define('lodash/function/modArgs', ['exports', 'lodash/internal/arrayEvery', 'lodash/internal/baseFlatten', 'lodash/internal/baseIsFunction', 'lodash/function/restParam'], function (exports, _lodashInternalArrayEvery, _lodashInternalBaseFlatten, _lodashInternalBaseIsFunction, _lodashFunctionRestParam) {
  'use strict';

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Creates a function that runs each argument through a corresponding
   * transform function.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to wrap.
   * @param {...(Function|Function[])} [transforms] The functions to transform
   * arguments, specified as individual functions or arrays of functions.
   * @returns {Function} Returns the new function.
   * @example
   *
   * function doubled(n) {
   *   return n * 2;
   * }
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var modded = _.modArgs(function(x, y) {
   *   return [x, y];
   * }, square, doubled);
   *
   * modded(1, 2);
   * // => [1, 4]
   *
   * modded(5, 10);
   * // => [25, 20]
   */
  var modArgs = (0, _lodashFunctionRestParam['default'])(function (func, transforms) {
    transforms = (0, _lodashInternalBaseFlatten['default'])(transforms);
    if (typeof func != 'function' || !(0, _lodashInternalArrayEvery['default'])(transforms, _lodashInternalBaseIsFunction['default'])) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var length = transforms.length;
    return (0, _lodashFunctionRestParam['default'])(function (args) {
      var index = nativeMin(args.length, length);
      while (index--) {
        args[index] = transforms[index](args[index]);
      }
      return func.apply(this, args);
    });
  });

  exports['default'] = modArgs;
});
define('lodash/function/negate', ['exports'], function (exports) {
  /** Used as the `TypeError` message for "Functions" methods. */
  'use strict';

  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that negates the result of the predicate `func`. The
   * `func` predicate is invoked with the `this` binding and arguments of the
   * created function.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} predicate The predicate to negate.
   * @returns {Function} Returns the new function.
   * @example
   *
   * function isEven(n) {
   *   return n % 2 == 0;
   * }
   *
   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
   * // => [1, 3, 5]
   */
  function negate(predicate) {
    if (typeof predicate != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function () {
      return !predicate.apply(this, arguments);
    };
  }

  exports['default'] = negate;
});
define('lodash/function/once', ['exports', 'lodash/function/before'], function (exports, _lodashFunctionBefore) {
  'use strict';

  /**
   * Creates a function that is restricted to invoking `func` once. Repeat calls
   * to the function return the value of the first call. The `func` is invoked
   * with the `this` binding and arguments of the created function.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // `initialize` invokes `createApplication` once
   */
  function once(func) {
    return (0, _lodashFunctionBefore['default'])(2, func);
  }

  exports['default'] = once;
});
define('lodash/function/partial', ['exports', 'lodash/internal/createPartial'], function (exports, _lodashInternalCreatePartial) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var PARTIAL_FLAG = 32;

  /**
   * Creates a function that invokes `func` with `partial` arguments prepended
   * to those provided to the new function. This method is like `_.bind` except
   * it does **not** alter the `this` binding.
   *
   * The `_.partial.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for partially applied arguments.
   *
   * **Note:** This method does not set the "length" property of partially
   * applied functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to partially apply arguments to.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new partially applied function.
   * @example
   *
   * var greet = function(greeting, name) {
   *   return greeting + ' ' + name;
   * };
   *
   * var sayHelloTo = _.partial(greet, 'hello');
   * sayHelloTo('fred');
   * // => 'hello fred'
   *
   * // using placeholders
   * var greetFred = _.partial(greet, _, 'fred');
   * greetFred('hi');
   * // => 'hi fred'
   */
  var partial = (0, _lodashInternalCreatePartial['default'])(PARTIAL_FLAG);

  // Assign default placeholders.
  partial.placeholder = {};

  exports['default'] = partial;
});
define('lodash/function/partialRight', ['exports', 'lodash/internal/createPartial'], function (exports, _lodashInternalCreatePartial) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var PARTIAL_RIGHT_FLAG = 64;

  /**
   * This method is like `_.partial` except that partially applied arguments
   * are appended to those provided to the new function.
   *
   * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
   * builds, may be used as a placeholder for partially applied arguments.
   *
   * **Note:** This method does not set the "length" property of partially
   * applied functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to partially apply arguments to.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new partially applied function.
   * @example
   *
   * var greet = function(greeting, name) {
   *   return greeting + ' ' + name;
   * };
   *
   * var greetFred = _.partialRight(greet, 'fred');
   * greetFred('hi');
   * // => 'hi fred'
   *
   * // using placeholders
   * var sayHelloTo = _.partialRight(greet, 'hello', _);
   * sayHelloTo('fred');
   * // => 'hello fred'
   */
  var partialRight = (0, _lodashInternalCreatePartial['default'])(PARTIAL_RIGHT_FLAG);

  // Assign default placeholders.
  partialRight.placeholder = {};

  exports['default'] = partialRight;
});
define('lodash/function/rearg', ['exports', 'lodash/internal/baseFlatten', 'lodash/internal/createWrapper', 'lodash/function/restParam'], function (exports, _lodashInternalBaseFlatten, _lodashInternalCreateWrapper, _lodashFunctionRestParam) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var REARG_FLAG = 256;

  /**
   * Creates a function that invokes `func` with arguments arranged according
   * to the specified indexes where the argument value at the first index is
   * provided as the first argument, the argument value at the second index is
   * provided as the second argument, and so on.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to rearrange arguments for.
   * @param {...(number|number[])} indexes The arranged argument indexes,
   *  specified as individual indexes or arrays of indexes.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var rearged = _.rearg(function(a, b, c) {
   *   return [a, b, c];
   * }, 2, 0, 1);
   *
   * rearged('b', 'c', 'a')
   * // => ['a', 'b', 'c']
   *
   * var map = _.rearg(_.map, [1, 0]);
   * map(function(n) {
   *   return n * 3;
   * }, [1, 2, 3]);
   * // => [3, 6, 9]
   */
  var rearg = (0, _lodashFunctionRestParam['default'])(function (func, indexes) {
    return (0, _lodashInternalCreateWrapper['default'])(func, REARG_FLAG, undefined, undefined, undefined, (0, _lodashInternalBaseFlatten['default'])(indexes));
  });

  exports['default'] = rearg;
});
define('lodash/function/restParam', ['exports'], function (exports) {
  /** Used as the `TypeError` message for "Functions" methods. */
  'use strict';

  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * created function and arguments from `start` and beyond provided as an array.
   *
   * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.restParam(function(what, names) {
   *   return what + ' ' + _.initial(names).join(', ') +
   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
   * });
   *
   * say('hello', 'fred', 'barney', 'pebbles');
   * // => 'hello fred, barney, & pebbles'
   */
  function restParam(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          rest = Array(length);

      while (++index < length) {
        rest[index] = args[start + index];
      }
      switch (start) {
        case 0:
          return func.call(this, rest);
        case 1:
          return func.call(this, args[0], rest);
        case 2:
          return func.call(this, args[0], args[1], rest);
      }
      var otherArgs = Array(start + 1);
      index = -1;
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = rest;
      return func.apply(this, otherArgs);
    };
  }

  exports['default'] = restParam;
});
define('lodash/function/spread', ['exports'], function (exports) {
  /** Used as the `TypeError` message for "Functions" methods. */
  'use strict';

  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that invokes `func` with the `this` binding of the created
   * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
   *
   * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to spread arguments over.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.spread(function(who, what) {
   *   return who + ' says ' + what;
   * });
   *
   * say(['fred', 'hello']);
   * // => 'fred says hello'
   *
   * // with a Promise
   * var numbers = Promise.all([
   *   Promise.resolve(40),
   *   Promise.resolve(36)
   * ]);
   *
   * numbers.then(_.spread(function(x, y) {
   *   return x + y;
   * }));
   * // => a Promise of 76
   */
  function spread(func) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function (array) {
      return func.apply(this, array);
    };
  }

  exports['default'] = spread;
});
define('lodash/function/throttle', ['exports', 'lodash/function/debounce', 'lodash/lang/isObject'], function (exports, _lodashFunctionDebounce, _lodashLangIsObject) {
  'use strict';

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed invocations. Provide an options object to indicate
   * that `func` should be invoked on the leading and/or trailing edge of the
   * `wait` timeout. Subsequent calls to the throttled function return the
   * result of the last `func` call.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
   * on the trailing edge of the timeout only if the the throttled function is
   * invoked more than once during the `wait` timeout.
   *
   * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options] The options object.
   * @param {boolean} [options.leading=true] Specify invoking on the leading
   *  edge of the timeout.
   * @param {boolean} [options.trailing=true] Specify invoking on the trailing
   *  edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // avoid excessively updating the position while scrolling
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
   * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
   *   'trailing': false
   * }));
   *
   * // cancel a trailing throttled call
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (options === false) {
      leading = false;
    } else if ((0, _lodashLangIsObject['default'])(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return (0, _lodashFunctionDebounce['default'])(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
  }

  exports['default'] = throttle;
});
define('lodash/function/wrap', ['exports', 'lodash/internal/createWrapper', 'lodash/utility/identity'], function (exports, _lodashInternalCreateWrapper, _lodashUtilityIdentity) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var PARTIAL_FLAG = 32;

  /**
   * Creates a function that provides `value` to the wrapper function as its
   * first argument. Any additional arguments provided to the function are
   * appended to those provided to the wrapper function. The wrapper is invoked
   * with the `this` binding of the created function.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {*} value The value to wrap.
   * @param {Function} wrapper The wrapper function.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var p = _.wrap(_.escape, function(func, text) {
   *   return '<p>' + func(text) + '</p>';
   * });
   *
   * p('fred, barney, & pebbles');
   * // => '<p>fred, barney, &amp; pebbles</p>'
   */
  function wrap(value, wrapper) {
    wrapper = wrapper == null ? _lodashUtilityIdentity['default'] : wrapper;
    return (0, _lodashInternalCreateWrapper['default'])(wrapper, PARTIAL_FLAG, undefined, [value], []);
  }

  exports['default'] = wrap;
});
define('lodash/index', ['exports', 'lodash/lodash'], function (exports, _lodashLodash) {
  'use strict';

  exports['default'] = _lodashLodash['default'];
});
define('lodash/internal/LazyWrapper', ['exports', 'lodash/internal/baseCreate', 'lodash/internal/baseLodash'], function (exports, _lodashInternalBaseCreate, _lodashInternalBaseLodash) {
  'use strict';

  /** Used as references for `-Infinity` and `Infinity`. */
  var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

  /**
   * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
   *
   * @private
   * @param {*} value The value to wrap.
   */
  function LazyWrapper(value) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__dir__ = 1;
    this.__filtered__ = false;
    this.__iteratees__ = [];
    this.__takeCount__ = POSITIVE_INFINITY;
    this.__views__ = [];
  }

  LazyWrapper.prototype = (0, _lodashInternalBaseCreate['default'])(_lodashInternalBaseLodash['default'].prototype);
  LazyWrapper.prototype.constructor = LazyWrapper;

  exports['default'] = LazyWrapper;
});
define('lodash/internal/LodashWrapper', ['exports', 'lodash/internal/baseCreate', 'lodash/internal/baseLodash'], function (exports, _lodashInternalBaseCreate, _lodashInternalBaseLodash) {
  'use strict';

  /**
   * The base constructor for creating `lodash` wrapper objects.
   *
   * @private
   * @param {*} value The value to wrap.
   * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
   * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
   */
  function LodashWrapper(value, chainAll, actions) {
    this.__wrapped__ = value;
    this.__actions__ = actions || [];
    this.__chain__ = !!chainAll;
  }

  LodashWrapper.prototype = (0, _lodashInternalBaseCreate['default'])(_lodashInternalBaseLodash['default'].prototype);
  LodashWrapper.prototype.constructor = LodashWrapper;

  exports['default'] = LodashWrapper;
});
define('lodash/internal/MapCache', ['exports', 'lodash/internal/mapDelete', 'lodash/internal/mapGet', 'lodash/internal/mapHas', 'lodash/internal/mapSet'], function (exports, _lodashInternalMapDelete, _lodashInternalMapGet, _lodashInternalMapHas, _lodashInternalMapSet) {
  'use strict';

  /**
   * Creates a cache object to store key/value pairs.
   *
   * @private
   * @static
   * @name Cache
   * @memberOf _.memoize
   */
  function MapCache() {
    this.__data__ = {};
  }

  // Add functions to the `Map` cache.
  MapCache.prototype['delete'] = _lodashInternalMapDelete['default'];
  MapCache.prototype.get = _lodashInternalMapGet['default'];
  MapCache.prototype.has = _lodashInternalMapHas['default'];
  MapCache.prototype.set = _lodashInternalMapSet['default'];

  exports['default'] = MapCache;
});
define('lodash/internal/SetCache', ['exports', 'lodash/internal/cachePush', 'lodash/internal/getNative', 'lodash/internal/root'], function (exports, _lodashInternalCachePush, _lodashInternalGetNative, _lodashInternalRoot) {
  'use strict';

  /** Native method references. */
  var Set = (0, _lodashInternalGetNative['default'])(_lodashInternalRoot['default'], 'Set');

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCreate = (0, _lodashInternalGetNative['default'])(Object, 'create');

  /**
   *
   * Creates a cache object to store unique values.
   *
   * @private
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var length = values ? values.length : 0;

    this.data = { 'hash': nativeCreate(null), 'set': new Set() };
    while (length--) {
      this.push(values[length]);
    }
  }

  // Add functions to the `Set` cache.
  SetCache.prototype.push = _lodashInternalCachePush['default'];

  exports['default'] = SetCache;
});
define("lodash/internal/arrayConcat", ["exports"], function (exports) {
  /**
   * Creates a new array joining `array` with `other`.
   *
   * @private
   * @param {Array} array The array to join.
   * @param {Array} other The other array to join.
   * @returns {Array} Returns the new concatenated array.
   */
  "use strict";

  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  exports["default"] = arrayConcat;
});
define("lodash/internal/arrayCopy", ["exports"], function (exports) {
  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  "use strict";

  function arrayCopy(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  exports["default"] = arrayCopy;
});
define("lodash/internal/arrayEach", ["exports"], function (exports) {
  /**
   * A specialized version of `_.forEach` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  "use strict";

  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  exports["default"] = arrayEach;
});
define("lodash/internal/arrayEachRight", ["exports"], function (exports) {
  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  "use strict";

  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  exports["default"] = arrayEachRight;
});
define("lodash/internal/arrayEvery", ["exports"], function (exports) {
  /**
   * A specialized version of `_.every` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  "use strict";

  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  exports["default"] = arrayEvery;
});
define("lodash/internal/arrayExtremum", ["exports"], function (exports) {
  /**
   * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
   * with one argument: (value).
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} comparator The function used to compare values.
   * @param {*} exValue The initial extremum value.
   * @returns {*} Returns the extremum value.
   */
  "use strict";

  function arrayExtremum(array, iteratee, comparator, exValue) {
    var index = -1,
        length = array.length,
        computed = exValue,
        result = computed;

    while (++index < length) {
      var value = array[index],
          current = +iteratee(value);

      if (comparator(current, computed)) {
        computed = current;
        result = value;
      }
    }
    return result;
  }

  exports["default"] = arrayExtremum;
});
define("lodash/internal/arrayFilter", ["exports"], function (exports) {
  /**
   * A specialized version of `_.filter` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  "use strict";

  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  exports["default"] = arrayFilter;
});
define("lodash/internal/arrayMap", ["exports"], function (exports) {
  /**
   * A specialized version of `_.map` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  "use strict";

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  exports["default"] = arrayMap;
});
define("lodash/internal/arrayPush", ["exports"], function (exports) {
  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  "use strict";

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  exports["default"] = arrayPush;
});
define("lodash/internal/arrayReduce", ["exports"], function (exports) {
  /**
   * A specialized version of `_.reduce` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initFromArray] Specify using the first element of `array`
   *  as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  "use strict";

  function arrayReduce(array, iteratee, accumulator, initFromArray) {
    var index = -1,
        length = array.length;

    if (initFromArray && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  exports["default"] = arrayReduce;
});
define("lodash/internal/arrayReduceRight", ["exports"], function (exports) {
  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initFromArray] Specify using the last element of `array`
   *  as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  "use strict";

  function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
    var length = array.length;
    if (initFromArray && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  exports["default"] = arrayReduceRight;
});
define("lodash/internal/arraySome", ["exports"], function (exports) {
  /**
   * A specialized version of `_.some` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  "use strict";

  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  exports["default"] = arraySome;
});
define("lodash/internal/arraySum", ["exports"], function (exports) {
  /**
   * A specialized version of `_.sum` for arrays without support for callback
   * shorthands and `this` binding..
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  "use strict";

  function arraySum(array, iteratee) {
    var length = array.length,
        result = 0;

    while (length--) {
      result += +iteratee(array[length]) || 0;
    }
    return result;
  }

  exports["default"] = arraySum;
});
define("lodash/internal/assignDefaults", ["exports"], function (exports) {
  /**
   * Used by `_.defaults` to customize its `_.assign` use.
   *
   * @private
   * @param {*} objectValue The destination object property value.
   * @param {*} sourceValue The source object property value.
   * @returns {*} Returns the value to assign to the destination object.
   */
  "use strict";

  function assignDefaults(objectValue, sourceValue) {
    return objectValue === undefined ? sourceValue : objectValue;
  }

  exports["default"] = assignDefaults;
});
define("lodash/internal/assignOwnDefaults", ["exports"], function (exports) {
  /** Used for native method references. */
  "use strict";

  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used by `_.template` to customize its `_.assign` use.
   *
   * **Note:** This function is like `assignDefaults` except that it ignores
   * inherited property values when checking if a property is `undefined`.
   *
   * @private
   * @param {*} objectValue The destination object property value.
   * @param {*} sourceValue The source object property value.
   * @param {string} key The key associated with the object and source values.
   * @param {Object} object The destination object.
   * @returns {*} Returns the value to assign to the destination object.
   */
  function assignOwnDefaults(objectValue, sourceValue, key, object) {
    return objectValue === undefined || !hasOwnProperty.call(object, key) ? sourceValue : objectValue;
  }

  exports["default"] = assignOwnDefaults;
});
define('lodash/internal/assignWith', ['exports', 'lodash/object/keys'], function (exports, _lodashObjectKeys) {
  'use strict';

  /**
   * A specialized version of `_.assign` for customizing assigned values without
   * support for argument juggling, multiple sources, and `this` binding `customizer`
   * functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   */
  function assignWith(object, source, customizer) {
    var index = -1,
        props = (0, _lodashObjectKeys['default'])(source),
        length = props.length;

    while (++index < length) {
      var key = props[index],
          value = object[key],
          result = customizer(value, source[key], key, object, source);

      if ((result === result ? result !== value : value === value) || value === undefined && !(key in object)) {
        object[key] = result;
      }
    }
    return object;
  }

  exports['default'] = assignWith;
});
define('lodash/internal/baseAssign', ['exports', 'lodash/internal/baseCopy', 'lodash/object/keys'], function (exports, _lodashInternalBaseCopy, _lodashObjectKeys) {
  'use strict';

  /**
   * The base implementation of `_.assign` without support for argument juggling,
   * multiple sources, and `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return source == null ? object : (0, _lodashInternalBaseCopy['default'])(source, (0, _lodashObjectKeys['default'])(source), object);
  }

  exports['default'] = baseAssign;
});
define('lodash/internal/baseAt', ['exports', 'lodash/internal/isArrayLike', 'lodash/internal/isIndex'], function (exports, _lodashInternalIsArrayLike, _lodashInternalIsIndex) {
  'use strict';

  /**
   * The base implementation of `_.at` without support for string collections
   * and individual key arguments.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {number[]|string[]} props The property names or indexes of elements to pick.
   * @returns {Array} Returns the new array of picked elements.
   */
  function baseAt(collection, props) {
    var index = -1,
        isNil = collection == null,
        isArr = !isNil && (0, _lodashInternalIsArrayLike['default'])(collection),
        length = isArr ? collection.length : 0,
        propsLength = props.length,
        result = Array(propsLength);

    while (++index < propsLength) {
      var key = props[index];
      if (isArr) {
        result[index] = (0, _lodashInternalIsIndex['default'])(key, length) ? collection[key] : undefined;
      } else {
        result[index] = isNil ? undefined : collection[key];
      }
    }
    return result;
  }

  exports['default'] = baseAt;
});
define('lodash/internal/baseCallback', ['exports', 'lodash/internal/baseMatches', 'lodash/internal/baseMatchesProperty', 'lodash/internal/bindCallback', 'lodash/utility/identity', 'lodash/utility/property'], function (exports, _lodashInternalBaseMatches, _lodashInternalBaseMatchesProperty, _lodashInternalBindCallback, _lodashUtilityIdentity, _lodashUtilityProperty) {
  'use strict';

  /**
   * The base implementation of `_.callback` which supports specifying the
   * number of arguments to provide to `func`.
   *
   * @private
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {number} [argCount] The number of arguments to provide to `func`.
   * @returns {Function} Returns the callback.
   */
  function baseCallback(func, thisArg, argCount) {
    var type = typeof func;
    if (type == 'function') {
      return thisArg === undefined ? func : (0, _lodashInternalBindCallback['default'])(func, thisArg, argCount);
    }
    if (func == null) {
      return _lodashUtilityIdentity['default'];
    }
    if (type == 'object') {
      return (0, _lodashInternalBaseMatches['default'])(func);
    }
    return thisArg === undefined ? (0, _lodashUtilityProperty['default'])(func) : (0, _lodashInternalBaseMatchesProperty['default'])(func, thisArg);
  }

  exports['default'] = baseCallback;
});
define('lodash/internal/baseClone', ['exports', 'lodash/internal/arrayCopy', 'lodash/internal/arrayEach', 'lodash/internal/baseAssign', 'lodash/internal/baseForOwn', 'lodash/internal/initCloneArray', 'lodash/internal/initCloneByTag', 'lodash/internal/initCloneObject', 'lodash/lang/isArray', 'lodash/lang/isObject'], function (exports, _lodashInternalArrayCopy, _lodashInternalArrayEach, _lodashInternalBaseAssign, _lodashInternalBaseForOwn, _lodashInternalInitCloneArray, _lodashInternalInitCloneByTag, _lodashInternalInitCloneObject, _lodashLangIsArray, _lodashLangIsObject) {
  'use strict';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * The base implementation of `_.clone` without support for argument juggling
   * and `this` binding `customizer` functions.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @param {Function} [customizer] The function to customize cloning values.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The object `value` belongs to.
   * @param {Array} [stackA=[]] Tracks traversed source objects.
   * @param {Array} [stackB=[]] Associates clones with source counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!(0, _lodashLangIsObject['default'])(value)) {
      return value;
    }
    var isArr = (0, _lodashLangIsArray['default'])(value);
    if (isArr) {
      result = (0, _lodashInternalInitCloneArray['default'])(value);
      if (!isDeep) {
        return (0, _lodashInternalArrayCopy['default'])(value, result);
      }
    } else {
      var tag = objToString.call(value),
          isFunc = tag == funcTag;

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = (0, _lodashInternalInitCloneObject['default'])(isFunc ? {} : value);
        if (!isDeep) {
          return (0, _lodashInternalBaseAssign['default'])(result, value);
        }
      } else {
        return cloneableTags[tag] ? (0, _lodashInternalInitCloneByTag['default'])(value, tag, isDeep) : object ? value : {};
      }
    }
    // Check for circular references and return its corresponding clone.
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == value) {
        return stackB[length];
      }
    }
    // Add the source value to the stack of traversed objects and associate it with its clone.
    stackA.push(value);
    stackB.push(result);

    // Recursively populate clone (susceptible to call stack limits).
    (isArr ? _lodashInternalArrayEach['default'] : _lodashInternalBaseForOwn['default'])(value, function (subValue, key) {
      result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
    });
    return result;
  }

  exports['default'] = baseClone;
});
define("lodash/internal/baseCompareAscending", ["exports"], function (exports) {
  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  "use strict";

  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if (value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive) {
        return 1;
      }
      if (value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive) {
        return -1;
      }
    }
    return 0;
  }

  exports["default"] = baseCompareAscending;
});
define("lodash/internal/baseCopy", ["exports"], function (exports) {
  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property names to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @returns {Object} Returns `object`.
   */
  "use strict";

  function baseCopy(source, props, object) {
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      object[key] = source[key];
    }
    return object;
  }

  exports["default"] = baseCopy;
});
define('lodash/internal/baseCreate', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} prototype The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function () {
    function object() {}
    return function (prototype) {
      if ((0, _lodashLangIsObject['default'])(prototype)) {
        object.prototype = prototype;
        var result = new object();
        object.prototype = undefined;
      }
      return result || {};
    };
  })();

  exports['default'] = baseCreate;
});
define('lodash/internal/baseDelay', ['exports'], function (exports) {
  /** Used as the `TypeError` message for "Functions" methods. */
  'use strict';

  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * The base implementation of `_.delay` and `_.defer` which accepts an index
   * of where to slice the arguments to provide to `func`.
   *
   * @private
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {Object} args The arguments provide to `func`.
   * @returns {number} Returns the timer id.
   */
  function baseDelay(func, wait, args) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return setTimeout(function () {
      func.apply(undefined, args);
    }, wait);
  }

  exports['default'] = baseDelay;
});
define('lodash/internal/baseDifference', ['exports', 'lodash/internal/baseIndexOf', 'lodash/internal/cacheIndexOf', 'lodash/internal/createCache'], function (exports, _lodashInternalBaseIndexOf, _lodashInternalCacheIndexOf, _lodashInternalCreateCache) {
  'use strict';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.difference` which accepts a single array
   * of values to exclude.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference(array, values) {
    var length = array ? array.length : 0,
        result = [];

    if (!length) {
      return result;
    }
    var index = -1,
        indexOf = _lodashInternalBaseIndexOf['default'],
        isCommon = true,
        cache = isCommon && values.length >= LARGE_ARRAY_SIZE ? (0, _lodashInternalCreateCache['default'])(values) : null,
        valuesLength = values.length;

    if (cache) {
      indexOf = _lodashInternalCacheIndexOf['default'];
      isCommon = false;
      values = cache;
    }
    outer: while (++index < length) {
      var value = array[index];

      if (isCommon && value === value) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === value) {
            continue outer;
          }
        }
        result.push(value);
      } else if (indexOf(values, value, 0) < 0) {
        result.push(value);
      }
    }
    return result;
  }

  exports['default'] = baseDifference;
});
define('lodash/internal/baseEach', ['exports', 'lodash/internal/baseForOwn', 'lodash/internal/createBaseEach'], function (exports, _lodashInternalBaseForOwn, _lodashInternalCreateBaseEach) {
  'use strict';

  /**
   * The base implementation of `_.forEach` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object|string} Returns `collection`.
   */
  var baseEach = (0, _lodashInternalCreateBaseEach['default'])(_lodashInternalBaseForOwn['default']);

  exports['default'] = baseEach;
});
define('lodash/internal/baseEachRight', ['exports', 'lodash/internal/baseForOwnRight', 'lodash/internal/createBaseEach'], function (exports, _lodashInternalBaseForOwnRight, _lodashInternalCreateBaseEach) {
  'use strict';

  /**
   * The base implementation of `_.forEachRight` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object|string} Returns `collection`.
   */
  var baseEachRight = (0, _lodashInternalCreateBaseEach['default'])(_lodashInternalBaseForOwnRight['default'], true);

  exports['default'] = baseEachRight;
});
define('lodash/internal/baseEvery', ['exports', 'lodash/internal/baseEach'], function (exports, _lodashInternalBaseEach) {
  'use strict';

  /**
   * The base implementation of `_.every` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`
   */
  function baseEvery(collection, predicate) {
    var result = true;
    (0, _lodashInternalBaseEach['default'])(collection, function (value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  exports['default'] = baseEvery;
});
define('lodash/internal/baseExtremum', ['exports', 'lodash/internal/baseEach'], function (exports, _lodashInternalBaseEach) {
  'use strict';

  /**
   * Gets the extremum value of `collection` invoking `iteratee` for each value
   * in `collection` to generate the criterion by which the value is ranked.
   * The `iteratee` is invoked with three arguments: (value, index|key, collection).
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} comparator The function used to compare values.
   * @param {*} exValue The initial extremum value.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(collection, iteratee, comparator, exValue) {
    var computed = exValue,
        result = computed;

    (0, _lodashInternalBaseEach['default'])(collection, function (value, index, collection) {
      var current = +iteratee(value, index, collection);
      if (comparator(current, computed) || current === exValue && current === result) {
        computed = current;
        result = value;
      }
    });
    return result;
  }

  exports['default'] = baseExtremum;
});
define("lodash/internal/baseFill", ["exports"], function (exports) {
  /**
   * The base implementation of `_.fill` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to fill.
   * @param {*} value The value to fill `array` with.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns `array`.
   */
  "use strict";

  function baseFill(array, value, start, end) {
    var length = array.length;

    start = start == null ? 0 : +start || 0;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end === undefined || end > length ? length : +end || 0;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end >>> 0;
    start >>>= 0;

    while (start < length) {
      array[start++] = value;
    }
    return array;
  }

  exports["default"] = baseFill;
});
define('lodash/internal/baseFilter', ['exports', 'lodash/internal/baseEach'], function (exports, _lodashInternalBaseEach) {
  'use strict';

  /**
   * The base implementation of `_.filter` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    (0, _lodashInternalBaseEach['default'])(collection, function (value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  exports['default'] = baseFilter;
});
define("lodash/internal/baseFind", ["exports"], function (exports) {
  /**
   * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
   * without support for callback shorthands and `this` binding, which iterates
   * over `collection` using the provided `eachFunc`.
   *
   * @private
   * @param {Array|Object|string} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element
   *  instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  "use strict";

  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  exports["default"] = baseFind;
});
define("lodash/internal/baseFindIndex", ["exports"], function (exports) {
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  "use strict";

  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  exports["default"] = baseFindIndex;
});
define('lodash/internal/baseFlatten', ['exports', 'lodash/internal/arrayPush', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/internal/isArrayLike', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalArrayPush, _lodashLangIsArguments, _lodashLangIsArray, _lodashInternalIsArrayLike, _lodashInternalIsObjectLike) {
  'use strict';

  /**
   * The base implementation of `_.flatten` with added support for restricting
   * flattening and specifying the start index.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {boolean} [isDeep] Specify a deep flatten.
   * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, isDeep, isStrict, result) {
    result || (result = []);

    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      if ((0, _lodashInternalIsObjectLike['default'])(value) && (0, _lodashInternalIsArrayLike['default'])(value) && (isStrict || (0, _lodashLangIsArray['default'])(value) || (0, _lodashLangIsArguments['default'])(value))) {
        if (isDeep) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, isDeep, isStrict, result);
        } else {
          (0, _lodashInternalArrayPush['default'])(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  exports['default'] = baseFlatten;
});
define('lodash/internal/baseFor', ['exports', 'lodash/internal/createBaseFor'], function (exports, _lodashInternalCreateBaseFor) {
  'use strict';

  /**
   * The base implementation of `baseForIn` and `baseForOwn` which iterates
   * over `object` properties returned by `keysFunc` invoking `iteratee` for
   * each property. Iteratee functions may exit iteration early by explicitly
   * returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = (0, _lodashInternalCreateBaseFor['default'])();

  exports['default'] = baseFor;
});
define('lodash/internal/baseForIn', ['exports', 'lodash/internal/baseFor', 'lodash/object/keysIn'], function (exports, _lodashInternalBaseFor, _lodashObjectKeysIn) {
  'use strict';

  /**
   * The base implementation of `_.forIn` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForIn(object, iteratee) {
    return (0, _lodashInternalBaseFor['default'])(object, iteratee, _lodashObjectKeysIn['default']);
  }

  exports['default'] = baseForIn;
});
define('lodash/internal/baseForOwn', ['exports', 'lodash/internal/baseFor', 'lodash/object/keys'], function (exports, _lodashInternalBaseFor, _lodashObjectKeys) {
  'use strict';

  /**
   * The base implementation of `_.forOwn` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return (0, _lodashInternalBaseFor['default'])(object, iteratee, _lodashObjectKeys['default']);
  }

  exports['default'] = baseForOwn;
});
define('lodash/internal/baseForOwnRight', ['exports', 'lodash/internal/baseForRight', 'lodash/object/keys'], function (exports, _lodashInternalBaseForRight, _lodashObjectKeys) {
  'use strict';

  /**
   * The base implementation of `_.forOwnRight` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwnRight(object, iteratee) {
    return (0, _lodashInternalBaseForRight['default'])(object, iteratee, _lodashObjectKeys['default']);
  }

  exports['default'] = baseForOwnRight;
});
define('lodash/internal/baseForRight', ['exports', 'lodash/internal/createBaseFor'], function (exports, _lodashInternalCreateBaseFor) {
  'use strict';

  /**
   * This function is like `baseFor` except that it iterates over properties
   * in the opposite order.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseForRight = (0, _lodashInternalCreateBaseFor['default'])(true);

  exports['default'] = baseForRight;
});
define('lodash/internal/baseFunctions', ['exports', 'lodash/lang/isFunction'], function (exports, _lodashLangIsFunction) {
  'use strict';

  /**
   * The base implementation of `_.functions` which creates an array of
   * `object` function property names filtered from those provided.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} props The property names to filter.
   * @returns {Array} Returns the new array of filtered property names.
   */
  function baseFunctions(object, props) {
    var index = -1,
        length = props.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var key = props[index];
      if ((0, _lodashLangIsFunction['default'])(object[key])) {
        result[++resIndex] = key;
      }
    }
    return result;
  }

  exports['default'] = baseFunctions;
});
define('lodash/internal/baseGet', ['exports', 'lodash/internal/toObject'], function (exports, _lodashInternalToObject) {
  'use strict';

  /**
   * The base implementation of `get` without support for string paths
   * and default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path of the property to get.
   * @param {string} [pathKey] The key representation of path.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path, pathKey) {
    if (object == null) {
      return;
    }
    if (pathKey !== undefined && pathKey in (0, _lodashInternalToObject['default'])(object)) {
      path = [pathKey];
    }
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[path[index++]];
    }
    return index && index == length ? object : undefined;
  }

  exports['default'] = baseGet;
});
define('lodash/internal/baseIndexOf', ['exports', 'lodash/internal/indexOfNaN'], function (exports, _lodashInternalIndexOfNaN) {
  'use strict';

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return (0, _lodashInternalIndexOfNaN['default'])(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  exports['default'] = baseIndexOf;
});
define('lodash/internal/baseIsEqual', ['exports', 'lodash/internal/baseIsEqualDeep', 'lodash/lang/isObject', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalBaseIsEqualDeep, _lodashLangIsObject, _lodashInternalIsObjectLike) {
  'use strict';

  /**
   * The base implementation of `_.isEqual` without support for `this` binding
   * `customizer` functions.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparing values.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !(0, _lodashLangIsObject['default'])(value) && !(0, _lodashInternalIsObjectLike['default'])(other)) {
      return value !== value && other !== other;
    }
    return (0, _lodashInternalBaseIsEqualDeep['default'])(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
  }

  exports['default'] = baseIsEqual;
});
define('lodash/internal/baseIsEqualDeep', ['exports', 'lodash/internal/equalArrays', 'lodash/internal/equalByTag', 'lodash/internal/equalObjects', 'lodash/lang/isArray', 'lodash/lang/isTypedArray'], function (exports, _lodashInternalEqualArrays, _lodashInternalEqualByTag, _lodashInternalEqualObjects, _lodashLangIsArray, _lodashLangIsTypedArray) {
  'use strict';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing objects.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA=[]] Tracks traversed `value` objects.
   * @param {Array} [stackB=[]] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objIsArr = (0, _lodashLangIsArray['default'])(object),
        othIsArr = (0, _lodashLangIsArray['default'])(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = objToString.call(object);
      if (objTag == argsTag) {
        objTag = objectTag;
      } else if (objTag != objectTag) {
        objIsArr = (0, _lodashLangIsTypedArray['default'])(object);
      }
    }
    if (!othIsArr) {
      othTag = objToString.call(other);
      if (othTag == argsTag) {
        othTag = objectTag;
      } else if (othTag != objectTag) {
        othIsArr = (0, _lodashLangIsTypedArray['default'])(other);
      }
    }
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && !(objIsArr || objIsObj)) {
      return (0, _lodashInternalEqualByTag['default'])(object, other, objTag);
    }
    if (!isLoose) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
      }
    }
    if (!isSameTag) {
      return false;
    }
    // Assume cyclic values are equal.
    // For more information on detecting circular references see https://es5.github.io/#JO.
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == object) {
        return stackB[length] == other;
      }
    }
    // Add `object` and `other` to the stack of traversed objects.
    stackA.push(object);
    stackB.push(other);

    var result = (objIsArr ? _lodashInternalEqualArrays['default'] : _lodashInternalEqualObjects['default'])(object, other, equalFunc, customizer, isLoose, stackA, stackB);

    stackA.pop();
    stackB.pop();

    return result;
  }

  exports['default'] = baseIsEqualDeep;
});
define('lodash/internal/baseIsFunction', ['exports'], function (exports) {
  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  'use strict';

  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  exports['default'] = baseIsFunction;
});
define('lodash/internal/baseIsMatch', ['exports', 'lodash/internal/baseIsEqual', 'lodash/internal/toObject'], function (exports, _lodashInternalBaseIsEqual, _lodashInternalToObject) {
  'use strict';

  /**
   * The base implementation of `_.isMatch` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} matchData The propery names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparing objects.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = (0, _lodashInternalToObject['default'])(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var result = customizer ? customizer(objValue, srcValue, key) : undefined;
        if (!(result === undefined ? (0, _lodashInternalBaseIsEqual['default'])(srcValue, objValue, customizer, true) : result)) {
          return false;
        }
      }
    }
    return true;
  }

  exports['default'] = baseIsMatch;
});
define("lodash/internal/baseLodash", ["exports"], function (exports) {
  /**
   * The function whose prototype all chaining wrappers inherit from.
   *
   * @private
   */
  "use strict";

  function baseLodash() {
    // No operation performed.
  }

  exports["default"] = baseLodash;
});
define('lodash/internal/baseMap', ['exports', 'lodash/internal/baseEach', 'lodash/internal/isArrayLike'], function (exports, _lodashInternalBaseEach, _lodashInternalIsArrayLike) {
  'use strict';

  /**
   * The base implementation of `_.map` without support for callback shorthands
   * and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = (0, _lodashInternalIsArrayLike['default'])(collection) ? Array(collection.length) : [];

    (0, _lodashInternalBaseEach['default'])(collection, function (value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  exports['default'] = baseMap;
});
define('lodash/internal/baseMatches', ['exports', 'lodash/internal/baseIsMatch', 'lodash/internal/getMatchData', 'lodash/internal/toObject'], function (exports, _lodashInternalBaseIsMatch, _lodashInternalGetMatchData, _lodashInternalToObject) {
  'use strict';

  /**
   * The base implementation of `_.matches` which does not clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new function.
   */
  function baseMatches(source) {
    var matchData = (0, _lodashInternalGetMatchData['default'])(source);
    if (matchData.length == 1 && matchData[0][2]) {
      var key = matchData[0][0],
          value = matchData[0][1];

      return function (object) {
        if (object == null) {
          return false;
        }
        return object[key] === value && (value !== undefined || key in (0, _lodashInternalToObject['default'])(object));
      };
    }
    return function (object) {
      return (0, _lodashInternalBaseIsMatch['default'])(object, matchData);
    };
  }

  exports['default'] = baseMatches;
});
define('lodash/internal/baseMatchesProperty', ['exports', 'lodash/internal/baseGet', 'lodash/internal/baseIsEqual', 'lodash/internal/baseSlice', 'lodash/lang/isArray', 'lodash/internal/isKey', 'lodash/internal/isStrictComparable', 'lodash/array/last', 'lodash/internal/toObject', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalBaseIsEqual, _lodashInternalBaseSlice, _lodashLangIsArray, _lodashInternalIsKey, _lodashInternalIsStrictComparable, _lodashArrayLast, _lodashInternalToObject, _lodashInternalToPath) {
  'use strict';

  /**
   * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to compare.
   * @returns {Function} Returns the new function.
   */
  function baseMatchesProperty(path, srcValue) {
    var isArr = (0, _lodashLangIsArray['default'])(path),
        isCommon = (0, _lodashInternalIsKey['default'])(path) && (0, _lodashInternalIsStrictComparable['default'])(srcValue),
        pathKey = path + '';

    path = (0, _lodashInternalToPath['default'])(path);
    return function (object) {
      if (object == null) {
        return false;
      }
      var key = pathKey;
      object = (0, _lodashInternalToObject['default'])(object);
      if ((isArr || !isCommon) && !(key in object)) {
        object = path.length == 1 ? object : (0, _lodashInternalBaseGet['default'])(object, (0, _lodashInternalBaseSlice['default'])(path, 0, -1));
        if (object == null) {
          return false;
        }
        key = (0, _lodashArrayLast['default'])(path);
        object = (0, _lodashInternalToObject['default'])(object);
      }
      return object[key] === srcValue ? srcValue !== undefined || key in object : (0, _lodashInternalBaseIsEqual['default'])(srcValue, object[key], undefined, true);
    };
  }

  exports['default'] = baseMatchesProperty;
});
define('lodash/internal/baseMerge', ['exports', 'lodash/internal/arrayEach', 'lodash/internal/baseMergeDeep', 'lodash/lang/isArray', 'lodash/internal/isArrayLike', 'lodash/lang/isObject', 'lodash/internal/isObjectLike', 'lodash/lang/isTypedArray', 'lodash/object/keys'], function (exports, _lodashInternalArrayEach, _lodashInternalBaseMergeDeep, _lodashLangIsArray, _lodashInternalIsArrayLike, _lodashLangIsObject, _lodashInternalIsObjectLike, _lodashLangIsTypedArray, _lodashObjectKeys) {
  'use strict';

  /**
   * The base implementation of `_.merge` without support for argument juggling,
   * multiple sources, and `this` binding `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Array} [stackA=[]] Tracks traversed source objects.
   * @param {Array} [stackB=[]] Associates values with source counterparts.
   * @returns {Object} Returns `object`.
   */
  function baseMerge(object, source, customizer, stackA, stackB) {
    if (!(0, _lodashLangIsObject['default'])(object)) {
      return object;
    }
    var isSrcArr = (0, _lodashInternalIsArrayLike['default'])(source) && ((0, _lodashLangIsArray['default'])(source) || (0, _lodashLangIsTypedArray['default'])(source)),
        props = isSrcArr ? undefined : (0, _lodashObjectKeys['default'])(source);

    (0, _lodashInternalArrayEach['default'])(props || source, function (srcValue, key) {
      if (props) {
        key = srcValue;
        srcValue = source[key];
      }
      if ((0, _lodashInternalIsObjectLike['default'])(srcValue)) {
        stackA || (stackA = []);
        stackB || (stackB = []);
        (0, _lodashInternalBaseMergeDeep['default'])(object, source, key, baseMerge, customizer, stackA, stackB);
      } else {
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;

        if (isCommon) {
          result = srcValue;
        }
        if ((result !== undefined || isSrcArr && !(key in object)) && (isCommon || (result === result ? result !== value : value === value))) {
          object[key] = result;
        }
      }
    });
    return object;
  }

  exports['default'] = baseMerge;
});
define('lodash/internal/baseMergeDeep', ['exports', 'lodash/internal/arrayCopy', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/internal/isArrayLike', 'lodash/lang/isPlainObject', 'lodash/lang/isTypedArray', 'lodash/lang/toPlainObject'], function (exports, _lodashInternalArrayCopy, _lodashLangIsArguments, _lodashLangIsArray, _lodashInternalIsArrayLike, _lodashLangIsPlainObject, _lodashLangIsTypedArray, _lodashLangToPlainObject) {
  'use strict';

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Array} [stackA=[]] Tracks traversed source objects.
   * @param {Array} [stackB=[]] Associates values with source counterparts.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
    var length = stackA.length,
        srcValue = source[key];

    while (length--) {
      if (stackA[length] == srcValue) {
        object[key] = stackB[length];
        return;
      }
    }
    var value = object[key],
        result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
        isCommon = result === undefined;

    if (isCommon) {
      result = srcValue;
      if ((0, _lodashInternalIsArrayLike['default'])(srcValue) && ((0, _lodashLangIsArray['default'])(srcValue) || (0, _lodashLangIsTypedArray['default'])(srcValue))) {
        result = (0, _lodashLangIsArray['default'])(value) ? value : (0, _lodashInternalIsArrayLike['default'])(value) ? (0, _lodashInternalArrayCopy['default'])(value) : [];
      } else if ((0, _lodashLangIsPlainObject['default'])(srcValue) || (0, _lodashLangIsArguments['default'])(srcValue)) {
        result = (0, _lodashLangIsArguments['default'])(value) ? (0, _lodashLangToPlainObject['default'])(value) : (0, _lodashLangIsPlainObject['default'])(value) ? value : {};
      } else {
        isCommon = false;
      }
    }
    // Add the source value to the stack of traversed objects and associate
    // it with its merged value.
    stackA.push(srcValue);
    stackB.push(result);

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
    } else if (result === result ? result !== value : value === value) {
      object[key] = result;
    }
  }

  exports['default'] = baseMergeDeep;
});
define("lodash/internal/baseProperty", ["exports"], function (exports) {
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new function.
   */
  "use strict";

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  exports["default"] = baseProperty;
});
define('lodash/internal/basePropertyDeep', ['exports', 'lodash/internal/baseGet', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalToPath) {
  'use strict';

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new function.
   */
  function basePropertyDeep(path) {
    var pathKey = path + '';
    path = (0, _lodashInternalToPath['default'])(path);
    return function (object) {
      return (0, _lodashInternalBaseGet['default'])(object, path, pathKey);
    };
  }

  exports['default'] = basePropertyDeep;
});
define('lodash/internal/basePullAt', ['exports', 'lodash/internal/isIndex'], function (exports, _lodashInternalIsIndex) {
  'use strict';

  /** Used for native method references. */
  var arrayProto = Array.prototype;

  /** Native method references. */
  var splice = arrayProto.splice;

  /**
   * The base implementation of `_.pullAt` without support for individual
   * index arguments and capturing the removed elements.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {number[]} indexes The indexes of elements to remove.
   * @returns {Array} Returns `array`.
   */
  function basePullAt(array, indexes) {
    var length = array ? indexes.length : 0;
    while (length--) {
      var index = indexes[length];
      if (index != previous && (0, _lodashInternalIsIndex['default'])(index)) {
        var previous = index;
        splice.call(array, index, 1);
      }
    }
    return array;
  }

  exports['default'] = basePullAt;
});
define("lodash/internal/baseRandom", ["exports"], function (exports) {
  /* Native method references for those with the same name as other `lodash` methods. */
  "use strict";

  var nativeFloor = Math.floor,
      nativeRandom = Math.random;

  /**
   * The base implementation of `_.random` without support for argument juggling
   * and returning floating-point numbers.
   *
   * @private
   * @param {number} min The minimum possible value.
   * @param {number} max The maximum possible value.
   * @returns {number} Returns the random number.
   */
  function baseRandom(min, max) {
    return min + nativeFloor(nativeRandom() * (max - min + 1));
  }

  exports["default"] = baseRandom;
});
define("lodash/internal/baseReduce", ["exports"], function (exports) {
  /**
   * The base implementation of `_.reduce` and `_.reduceRight` without support
   * for callback shorthands and `this` binding, which iterates over `collection`
   * using the provided `eachFunc`.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initFromCollection Specify using the first or last element
   *  of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  "use strict";

  function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initFromCollection ? (initFromCollection = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  exports["default"] = baseReduce;
});
define('lodash/internal/baseSetData', ['exports', 'lodash/utility/identity', 'lodash/internal/metaMap'], function (exports, _lodashUtilityIdentity, _lodashInternalMetaMap) {
  'use strict';

  /**
   * The base implementation of `setData` without support for hot loop detection.
   *
   * @private
   * @param {Function} func The function to associate metadata with.
   * @param {*} data The metadata.
   * @returns {Function} Returns `func`.
   */
  var baseSetData = !_lodashInternalMetaMap['default'] ? _lodashUtilityIdentity['default'] : function (func, data) {
    _lodashInternalMetaMap['default'].set(func, data);
    return func;
  };

  exports['default'] = baseSetData;
});
define("lodash/internal/baseSlice", ["exports"], function (exports) {
  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  "use strict";

  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    start = start == null ? 0 : +start || 0;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end === undefined || end > length ? length : +end || 0;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  exports["default"] = baseSlice;
});
define('lodash/internal/baseSome', ['exports', 'lodash/internal/baseEach'], function (exports, _lodashInternalBaseEach) {
  'use strict';

  /**
   * The base implementation of `_.some` without support for callback shorthands
   * and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function baseSome(collection, predicate) {
    var result;

    (0, _lodashInternalBaseEach['default'])(collection, function (value, index, collection) {
      result = predicate(value, index, collection);
      return !result;
    });
    return !!result;
  }

  exports['default'] = baseSome;
});
define("lodash/internal/baseSortBy", ["exports"], function (exports) {
  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define
   * the sort order of `array` and replaces criteria objects with their
   * corresponding values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  "use strict";

  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  exports["default"] = baseSortBy;
});
define('lodash/internal/baseSortByOrder', ['exports', 'lodash/internal/arrayMap', 'lodash/internal/baseCallback', 'lodash/internal/baseMap', 'lodash/internal/baseSortBy', 'lodash/internal/compareMultiple'], function (exports, _lodashInternalArrayMap, _lodashInternalBaseCallback, _lodashInternalBaseMap, _lodashInternalBaseSortBy, _lodashInternalCompareMultiple) {
  'use strict';

  /**
   * The base implementation of `_.sortByOrder` without param guards.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {boolean[]} orders The sort orders of `iteratees`.
   * @returns {Array} Returns the new sorted array.
   */
  function baseSortByOrder(collection, iteratees, orders) {
    var index = -1;

    iteratees = (0, _lodashInternalArrayMap['default'])(iteratees, function (iteratee) {
      return (0, _lodashInternalBaseCallback['default'])(iteratee);
    });

    var result = (0, _lodashInternalBaseMap['default'])(collection, function (value) {
      var criteria = (0, _lodashInternalArrayMap['default'])(iteratees, function (iteratee) {
        return iteratee(value);
      });
      return { 'criteria': criteria, 'index': ++index, 'value': value };
    });

    return (0, _lodashInternalBaseSortBy['default'])(result, function (object, other) {
      return (0, _lodashInternalCompareMultiple['default'])(object, other, orders);
    });
  }

  exports['default'] = baseSortByOrder;
});
define('lodash/internal/baseSum', ['exports', 'lodash/internal/baseEach'], function (exports, _lodashInternalBaseEach) {
  'use strict';

  /**
   * The base implementation of `_.sum` without support for callback shorthands
   * and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(collection, iteratee) {
    var result = 0;
    (0, _lodashInternalBaseEach['default'])(collection, function (value, index, collection) {
      result += +iteratee(value, index, collection) || 0;
    });
    return result;
  }

  exports['default'] = baseSum;
});
define('lodash/internal/baseToString', ['exports'], function (exports) {
  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  'use strict';

  function baseToString(value) {
    return value == null ? '' : value + '';
  }

  exports['default'] = baseToString;
});
define('lodash/internal/baseUniq', ['exports', 'lodash/internal/baseIndexOf', 'lodash/internal/cacheIndexOf', 'lodash/internal/createCache'], function (exports, _lodashInternalBaseIndexOf, _lodashInternalCacheIndexOf, _lodashInternalCreateCache) {
  'use strict';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.uniq` without support for callback shorthands
   * and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee) {
    var index = -1,
        indexOf = _lodashInternalBaseIndexOf['default'],
        length = array.length,
        isCommon = true,
        isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
        seen = isLarge ? (0, _lodashInternalCreateCache['default'])() : null,
        result = [];

    if (seen) {
      indexOf = _lodashInternalCacheIndexOf['default'];
      isCommon = false;
    } else {
      isLarge = false;
      seen = iteratee ? [] : result;
    }
    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (isCommon && value === value) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      } else if (indexOf(seen, computed, 0) < 0) {
        if (iteratee || isLarge) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  exports['default'] = baseUniq;
});
define("lodash/internal/baseValues", ["exports"], function (exports) {
  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  "use strict";

  function baseValues(object, props) {
    var index = -1,
        length = props.length,
        result = Array(length);

    while (++index < length) {
      result[index] = object[props[index]];
    }
    return result;
  }

  exports["default"] = baseValues;
});
define('lodash/internal/baseWhile', ['exports', 'lodash/internal/baseSlice'], function (exports, _lodashInternalBaseSlice) {
    'use strict';

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
        return isDrop ? (0, _lodashInternalBaseSlice['default'])(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : (0, _lodashInternalBaseSlice['default'])(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }

    exports['default'] = baseWhile;
});
define('lodash/internal/baseWrapperValue', ['exports', 'lodash/internal/LazyWrapper', 'lodash/internal/arrayPush'], function (exports, _lodashInternalLazyWrapper, _lodashInternalArrayPush) {
  'use strict';

  /**
   * The base implementation of `wrapperValue` which returns the result of
   * performing a sequence of actions on the unwrapped `value`, where each
   * successive action is supplied the return value of the previous.
   *
   * @private
   * @param {*} value The unwrapped value.
   * @param {Array} actions Actions to peform to resolve the unwrapped value.
   * @returns {*} Returns the resolved value.
   */
  function baseWrapperValue(value, actions) {
    var result = value;
    if (result instanceof _lodashInternalLazyWrapper['default']) {
      result = result.value();
    }
    var index = -1,
        length = actions.length;

    while (++index < length) {
      var action = actions[index];
      result = action.func.apply(action.thisArg, (0, _lodashInternalArrayPush['default'])([result], action.args));
    }
    return result;
  }

  exports['default'] = baseWrapperValue;
});
define('lodash/internal/binaryIndex', ['exports', 'lodash/internal/binaryIndexBy', 'lodash/utility/identity'], function (exports, _lodashInternalBinaryIndexBy, _lodashUtilityIdentity) {
  'use strict';

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /**
   * Performs a binary search of `array` to determine the index at which `value`
   * should be inserted into `array` in order to maintain its sort order.
   *
   * @private
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   */
  function binaryIndex(array, value, retHighest) {
    var low = 0,
        high = array ? array.length : low;

    if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
      while (low < high) {
        var mid = low + high >>> 1,
            computed = array[mid];

        if ((retHighest ? computed <= value : computed < value) && computed !== null) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return high;
    }
    return (0, _lodashInternalBinaryIndexBy['default'])(array, value, _lodashUtilityIdentity['default'], retHighest);
  }

  exports['default'] = binaryIndex;
});
define("lodash/internal/binaryIndexBy", ["exports"], function (exports) {
  /* Native method references for those with the same name as other `lodash` methods. */
  "use strict";

  var nativeFloor = Math.floor,
      nativeMin = Math.min;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;

  /**
   * This function is like `binaryIndex` except that it invokes `iteratee` for
   * `value` and each element of `array` to compute their sort ranking. The
   * iteratee is invoked with one argument; (value).
   *
   * @private
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   */
  function binaryIndexBy(array, value, iteratee, retHighest) {
    value = iteratee(value);

    var low = 0,
        high = array ? array.length : 0,
        valIsNaN = value !== value,
        valIsNull = value === null,
        valIsUndef = value === undefined;

    while (low < high) {
      var mid = nativeFloor((low + high) / 2),
          computed = iteratee(array[mid]),
          isDef = computed !== undefined,
          isReflexive = computed === computed;

      if (valIsNaN) {
        var setLow = isReflexive || retHighest;
      } else if (valIsNull) {
        setLow = isReflexive && isDef && (retHighest || computed != null);
      } else if (valIsUndef) {
        setLow = isReflexive && (retHighest || isDef);
      } else if (computed == null) {
        setLow = false;
      } else {
        setLow = retHighest ? computed <= value : computed < value;
      }
      if (setLow) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return nativeMin(high, MAX_ARRAY_INDEX);
  }

  exports["default"] = binaryIndexBy;
});
define('lodash/internal/bindCallback', ['exports', 'lodash/utility/identity'], function (exports, _lodashUtilityIdentity) {
  'use strict';

  /**
   * A specialized version of `baseCallback` which only supports `this` binding
   * and specifying the number of arguments to provide to `func`.
   *
   * @private
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {number} [argCount] The number of arguments to provide to `func`.
   * @returns {Function} Returns the callback.
   */
  function bindCallback(func, thisArg, argCount) {
    if (typeof func != 'function') {
      return _lodashUtilityIdentity['default'];
    }
    if (thisArg === undefined) {
      return func;
    }
    switch (argCount) {
      case 1:
        return function (value) {
          return func.call(thisArg, value);
        };
      case 3:
        return function (value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
      case 4:
        return function (accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      case 5:
        return function (value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
    }
    return function () {
      return func.apply(thisArg, arguments);
    };
  }

  exports['default'] = bindCallback;
});
define('lodash/internal/bufferClone', ['exports', 'lodash/internal/root'], function (exports, _lodashInternalRoot) {
    'use strict';

    /** Native method references. */
    var ArrayBuffer = _lodashInternalRoot['default'].ArrayBuffer,
        Uint8Array = _lodashInternalRoot['default'].Uint8Array;

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
        var result = new ArrayBuffer(buffer.byteLength),
            view = new Uint8Array(result);

        view.set(new Uint8Array(buffer));
        return result;
    }

    exports['default'] = bufferClone;
});
define('lodash/internal/cacheIndexOf', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /**
   * Checks if `value` is in `cache` mimicking the return signature of
   * `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache to search.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var data = cache.data,
        result = typeof value == 'string' || (0, _lodashLangIsObject['default'])(value) ? data.set.has(value) : data.hash[value];

    return result ? 0 : -1;
  }

  exports['default'] = cacheIndexOf;
});
define('lodash/internal/cachePush', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /**
   * Adds `value` to the cache.
   *
   * @private
   * @name push
   * @memberOf SetCache
   * @param {*} value The value to cache.
   */
  function cachePush(value) {
    var data = this.data;
    if (typeof value == 'string' || (0, _lodashLangIsObject['default'])(value)) {
      data.set.add(value);
    } else {
      data.hash[value] = true;
    }
  }

  exports['default'] = cachePush;
});
define("lodash/internal/charsLeftIndex", ["exports"], function (exports) {
  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  "use strict";

  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  exports["default"] = charsLeftIndex;
});
define("lodash/internal/charsRightIndex", ["exports"], function (exports) {
  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  "use strict";

  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  exports["default"] = charsRightIndex;
});
define('lodash/internal/compareAscending', ['exports', 'lodash/internal/baseCompareAscending'], function (exports, _lodashInternalBaseCompareAscending) {
  'use strict';

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return (0, _lodashInternalBaseCompareAscending['default'])(object.criteria, other.criteria) || object.index - other.index;
  }

  exports['default'] = compareAscending;
});
define('lodash/internal/compareMultiple', ['exports', 'lodash/internal/baseCompareAscending'], function (exports, _lodashInternalBaseCompareAscending) {
  'use strict';

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = (0, _lodashInternalBaseCompareAscending['default'])(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order === 'asc' || order === true ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  exports['default'] = compareMultiple;
});
define("lodash/internal/composeArgs", ["exports"], function (exports) {
  /* Native method references for those with the same name as other `lodash` methods. */
  "use strict";

  var nativeMax = Math.max;

  /**
   * Creates an array that is the composition of partially applied arguments,
   * placeholders, and provided arguments into a single array of arguments.
   *
   * @private
   * @param {Array|Object} args The provided arguments.
   * @param {Array} partials The arguments to prepend to those provided.
   * @param {Array} holders The `partials` placeholder indexes.
   * @returns {Array} Returns the new array of composed arguments.
   */
  function composeArgs(args, partials, holders) {
    var holdersLength = holders.length,
        argsIndex = -1,
        argsLength = nativeMax(args.length - holdersLength, 0),
        leftIndex = -1,
        leftLength = partials.length,
        result = Array(leftLength + argsLength);

    while (++leftIndex < leftLength) {
      result[leftIndex] = partials[leftIndex];
    }
    while (++argsIndex < holdersLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
    while (argsLength--) {
      result[leftIndex++] = args[argsIndex++];
    }
    return result;
  }

  exports["default"] = composeArgs;
});
define("lodash/internal/composeArgsRight", ["exports"], function (exports) {
  /* Native method references for those with the same name as other `lodash` methods. */
  "use strict";

  var nativeMax = Math.max;

  /**
   * This function is like `composeArgs` except that the arguments composition
   * is tailored for `_.partialRight`.
   *
   * @private
   * @param {Array|Object} args The provided arguments.
   * @param {Array} partials The arguments to append to those provided.
   * @param {Array} holders The `partials` placeholder indexes.
   * @returns {Array} Returns the new array of composed arguments.
   */
  function composeArgsRight(args, partials, holders) {
    var holdersIndex = -1,
        holdersLength = holders.length,
        argsIndex = -1,
        argsLength = nativeMax(args.length - holdersLength, 0),
        rightIndex = -1,
        rightLength = partials.length,
        result = Array(argsLength + rightLength);

    while (++argsIndex < argsLength) {
      result[argsIndex] = args[argsIndex];
    }
    var offset = argsIndex;
    while (++rightIndex < rightLength) {
      result[offset + rightIndex] = partials[rightIndex];
    }
    while (++holdersIndex < holdersLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
    return result;
  }

  exports["default"] = composeArgsRight;
});
define('lodash/internal/createAggregator', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseEach', 'lodash/lang/isArray'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseEach, _lodashLangIsArray) {
  'use strict';

  /**
   * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
   *
   * @private
   * @param {Function} setter The function to set keys and values of the accumulator object.
   * @param {Function} [initializer] The function to initialize the accumulator object.
   * @returns {Function} Returns the new aggregator function.
   */
  function createAggregator(setter, initializer) {
    return function (collection, iteratee, thisArg) {
      var result = initializer ? initializer() : {};
      iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);

      if ((0, _lodashLangIsArray['default'])(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          setter(result, value, iteratee(value, index, collection), collection);
        }
      } else {
        (0, _lodashInternalBaseEach['default'])(collection, function (value, key, collection) {
          setter(result, value, iteratee(value, key, collection), collection);
        });
      }
      return result;
    };
  }

  exports['default'] = createAggregator;
});
define('lodash/internal/createAssigner', ['exports', 'lodash/internal/bindCallback', 'lodash/internal/isIterateeCall', 'lodash/function/restParam'], function (exports, _lodashInternalBindCallback, _lodashInternalIsIterateeCall, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return (0, _lodashFunctionRestParam['default'])(function (object, sources) {
      var index = -1,
          length = object == null ? 0 : sources.length,
          customizer = length > 2 ? sources[length - 2] : undefined,
          guard = length > 2 ? sources[2] : undefined,
          thisArg = length > 1 ? sources[length - 1] : undefined;

      if (typeof customizer == 'function') {
        customizer = (0, _lodashInternalBindCallback['default'])(customizer, thisArg, 5);
        length -= 2;
      } else {
        customizer = typeof thisArg == 'function' ? thisArg : undefined;
        length -= customizer ? 1 : 0;
      }
      if (guard && (0, _lodashInternalIsIterateeCall['default'])(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, customizer);
        }
      }
      return object;
    });
  }

  exports['default'] = createAssigner;
});
define('lodash/internal/createBaseEach', ['exports', 'lodash/internal/getLength', 'lodash/internal/isLength', 'lodash/internal/toObject'], function (exports, _lodashInternalGetLength, _lodashInternalIsLength, _lodashInternalToObject) {
  'use strict';

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function (collection, iteratee) {
      var length = collection ? (0, _lodashInternalGetLength['default'])(collection) : 0;
      if (!(0, _lodashInternalIsLength['default'])(length)) {
        return eachFunc(collection, iteratee);
      }
      var index = fromRight ? length : -1,
          iterable = (0, _lodashInternalToObject['default'])(collection);

      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  exports['default'] = createBaseEach;
});
define('lodash/internal/createBaseFor', ['exports', 'lodash/internal/toObject'], function (exports, _lodashInternalToObject) {
  'use strict';

  /**
   * Creates a base function for `_.forIn` or `_.forInRight`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var iterable = (0, _lodashInternalToObject['default'])(object),
          props = keysFunc(object),
          length = props.length,
          index = fromRight ? length : -1;

      while (fromRight ? index-- : ++index < length) {
        var key = props[index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  exports['default'] = createBaseFor;
});
define('lodash/internal/createBindWrapper', ['exports', 'lodash/internal/createCtorWrapper', 'lodash/internal/root'], function (exports, _lodashInternalCreateCtorWrapper, _lodashInternalRoot) {
  'use strict';

  /**
   * Creates a function that wraps `func` and invokes it with the `this`
   * binding of `thisArg`.
   *
   * @private
   * @param {Function} func The function to bind.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @returns {Function} Returns the new bound function.
   */
  function createBindWrapper(func, thisArg) {
    var Ctor = (0, _lodashInternalCreateCtorWrapper['default'])(func);

    function wrapper() {
      var fn = this && this !== _lodashInternalRoot['default'] && this instanceof wrapper ? Ctor : func;
      return fn.apply(thisArg, arguments);
    }
    return wrapper;
  }

  exports['default'] = createBindWrapper;
});
define('lodash/internal/createCache', ['exports', 'lodash/internal/SetCache', 'lodash/internal/getNative', 'lodash/internal/root'], function (exports, _lodashInternalSetCache, _lodashInternalGetNative, _lodashInternalRoot) {
  'use strict';

  /** Native method references. */
  var Set = (0, _lodashInternalGetNative['default'])(_lodashInternalRoot['default'], 'Set');

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCreate = (0, _lodashInternalGetNative['default'])(Object, 'create');

  /**
   * Creates a `Set` cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [values] The values to cache.
   * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
   */
  function createCache(values) {
    return nativeCreate && Set ? new _lodashInternalSetCache['default'](values) : null;
  }

  exports['default'] = createCache;
});
define('lodash/internal/createCompounder', ['exports', 'lodash/string/deburr', 'lodash/string/words'], function (exports, _lodashStringDeburr, _lodashStringWords) {
  'use strict';

  /**
   * Creates a function that produces compound words out of the words in a
   * given string.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder(callback) {
    return function (string) {
      var index = -1,
          array = (0, _lodashStringWords['default'])((0, _lodashStringDeburr['default'])(string)),
          length = array.length,
          result = '';

      while (++index < length) {
        result = callback(result, array[index], index);
      }
      return result;
    };
  }

  exports['default'] = createCompounder;
});
define('lodash/internal/createCtorWrapper', ['exports', 'lodash/internal/baseCreate', 'lodash/lang/isObject'], function (exports, _lodashInternalBaseCreate, _lodashLangIsObject) {
  'use strict';

  /**
   * Creates a function that produces an instance of `Ctor` regardless of
   * whether it was invoked as part of a `new` expression or by `call` or `apply`.
   *
   * @private
   * @param {Function} Ctor The constructor to wrap.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCtorWrapper(Ctor) {
    return function () {
      // Use a `switch` statement to work with class constructors.
      // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
      // for more details.
      var args = arguments;
      switch (args.length) {
        case 0:
          return new Ctor();
        case 1:
          return new Ctor(args[0]);
        case 2:
          return new Ctor(args[0], args[1]);
        case 3:
          return new Ctor(args[0], args[1], args[2]);
        case 4:
          return new Ctor(args[0], args[1], args[2], args[3]);
        case 5:
          return new Ctor(args[0], args[1], args[2], args[3], args[4]);
        case 6:
          return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7:
          return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
      }
      var thisBinding = (0, _lodashInternalBaseCreate['default'])(Ctor.prototype),
          result = Ctor.apply(thisBinding, args);

      // Mimic the constructor's `return` behavior.
      // See https://es5.github.io/#x13.2.2 for more details.
      return (0, _lodashLangIsObject['default'])(result) ? result : thisBinding;
    };
  }

  exports['default'] = createCtorWrapper;
});
define('lodash/internal/createCurry', ['exports', 'lodash/internal/createWrapper', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalCreateWrapper, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a `_.curry` or `_.curryRight` function.
   *
   * @private
   * @param {boolean} flag The curry bit flag.
   * @returns {Function} Returns the new curry function.
   */
  function createCurry(flag) {
    function curryFunc(func, arity, guard) {
      if (guard && (0, _lodashInternalIsIterateeCall['default'])(func, arity, guard)) {
        arity = undefined;
      }
      var result = (0, _lodashInternalCreateWrapper['default'])(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryFunc.placeholder;
      return result;
    }
    return curryFunc;
  }

  exports['default'] = createCurry;
});
define('lodash/internal/createDefaults', ['exports', 'lodash/function/restParam'], function (exports, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates a `_.defaults` or `_.defaultsDeep` function.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Function} Returns the new defaults function.
   */
  function createDefaults(assigner, customizer) {
    return (0, _lodashFunctionRestParam['default'])(function (args) {
      var object = args[0];
      if (object == null) {
        return object;
      }
      args.push(customizer);
      return assigner.apply(undefined, args);
    });
  }

  exports['default'] = createDefaults;
});
define('lodash/internal/createExtremum', ['exports', 'lodash/internal/arrayExtremum', 'lodash/internal/baseCallback', 'lodash/internal/baseExtremum', 'lodash/lang/isArray', 'lodash/internal/isIterateeCall', 'lodash/internal/toIterable'], function (exports, _lodashInternalArrayExtremum, _lodashInternalBaseCallback, _lodashInternalBaseExtremum, _lodashLangIsArray, _lodashInternalIsIterateeCall, _lodashInternalToIterable) {
  'use strict';

  /**
   * Creates a `_.max` or `_.min` function.
   *
   * @private
   * @param {Function} comparator The function used to compare values.
   * @param {*} exValue The initial extremum value.
   * @returns {Function} Returns the new extremum function.
   */
  function createExtremum(comparator, exValue) {
    return function (collection, iteratee, thisArg) {
      if (thisArg && (0, _lodashInternalIsIterateeCall['default'])(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);
      if (iteratee.length == 1) {
        collection = (0, _lodashLangIsArray['default'])(collection) ? collection : (0, _lodashInternalToIterable['default'])(collection);
        var result = (0, _lodashInternalArrayExtremum['default'])(collection, iteratee, comparator, exValue);
        if (!(collection.length && result === exValue)) {
          return result;
        }
      }
      return (0, _lodashInternalBaseExtremum['default'])(collection, iteratee, comparator, exValue);
    };
  }

  exports['default'] = createExtremum;
});
define('lodash/internal/createFind', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseFind', 'lodash/internal/baseFindIndex', 'lodash/lang/isArray'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseFind, _lodashInternalBaseFindIndex, _lodashLangIsArray) {
  'use strict';

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new find function.
   */
  function createFind(eachFunc, fromRight) {
    return function (collection, predicate, thisArg) {
      predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
      if ((0, _lodashLangIsArray['default'])(collection)) {
        var index = (0, _lodashInternalBaseFindIndex['default'])(collection, predicate, fromRight);
        return index > -1 ? collection[index] : undefined;
      }
      return (0, _lodashInternalBaseFind['default'])(collection, predicate, eachFunc);
    };
  }

  exports['default'] = createFind;
});
define('lodash/internal/createFindIndex', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseFindIndex'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseFindIndex) {
  'use strict';

  /**
   * Creates a `_.findIndex` or `_.findLastIndex` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new find function.
   */
  function createFindIndex(fromRight) {
    return function (array, predicate, thisArg) {
      if (!(array && array.length)) {
        return -1;
      }
      predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
      return (0, _lodashInternalBaseFindIndex['default'])(array, predicate, fromRight);
    };
  }

  exports['default'] = createFindIndex;
});
define('lodash/internal/createFindKey', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseFind'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseFind) {
  'use strict';

  /**
   * Creates a `_.findKey` or `_.findLastKey` function.
   *
   * @private
   * @param {Function} objectFunc The function to iterate over an object.
   * @returns {Function} Returns the new find function.
   */
  function createFindKey(objectFunc) {
    return function (object, predicate, thisArg) {
      predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 3);
      return (0, _lodashInternalBaseFind['default'])(object, predicate, objectFunc, true);
    };
  }

  exports['default'] = createFindKey;
});
define('lodash/internal/createFlow', ['exports', 'lodash/internal/LodashWrapper', 'lodash/internal/getData', 'lodash/internal/getFuncName', 'lodash/lang/isArray', 'lodash/internal/isLaziable'], function (exports, _lodashInternalLodashWrapper, _lodashInternalGetData, _lodashInternalGetFuncName, _lodashLangIsArray, _lodashInternalIsLaziable) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var CURRY_FLAG = 8,
      PARTIAL_FLAG = 32,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a `_.flow` or `_.flowRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new flow function.
   */
  function createFlow(fromRight) {
    return function () {
      var wrapper,
          length = arguments.length,
          index = fromRight ? length : -1,
          leftIndex = 0,
          funcs = Array(length);

      while (fromRight ? index-- : ++index < length) {
        var func = funcs[leftIndex++] = arguments[index];
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (!wrapper && _lodashInternalLodashWrapper['default'].prototype.thru && (0, _lodashInternalGetFuncName['default'])(func) == 'wrapper') {
          wrapper = new _lodashInternalLodashWrapper['default']([], true);
        }
      }
      index = wrapper ? -1 : length;
      while (++index < length) {
        func = funcs[index];

        var funcName = (0, _lodashInternalGetFuncName['default'])(func),
            data = funcName == 'wrapper' ? (0, _lodashInternalGetData['default'])(func) : undefined;

        if (data && (0, _lodashInternalIsLaziable['default'])(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
          wrapper = wrapper[(0, _lodashInternalGetFuncName['default'])(data[0])].apply(wrapper, data[3]);
        } else {
          wrapper = func.length == 1 && (0, _lodashInternalIsLaziable['default'])(func) ? wrapper[funcName]() : wrapper.thru(func);
        }
      }
      return function () {
        var args = arguments,
            value = args[0];

        if (wrapper && args.length == 1 && (0, _lodashLangIsArray['default'])(value) && value.length >= LARGE_ARRAY_SIZE) {
          return wrapper.plant(value).value();
        }
        var index = 0,
            result = length ? funcs[index].apply(this, args) : value;

        while (++index < length) {
          result = funcs[index].call(this, result);
        }
        return result;
      };
    };
  }

  exports['default'] = createFlow;
});
define('lodash/internal/createForEach', ['exports', 'lodash/internal/bindCallback', 'lodash/lang/isArray'], function (exports, _lodashInternalBindCallback, _lodashLangIsArray) {
  'use strict';

  /**
   * Creates a function for `_.forEach` or `_.forEachRight`.
   *
   * @private
   * @param {Function} arrayFunc The function to iterate over an array.
   * @param {Function} eachFunc The function to iterate over a collection.
   * @returns {Function} Returns the new each function.
   */
  function createForEach(arrayFunc, eachFunc) {
    return function (collection, iteratee, thisArg) {
      return typeof iteratee == 'function' && thisArg === undefined && (0, _lodashLangIsArray['default'])(collection) ? arrayFunc(collection, iteratee) : eachFunc(collection, (0, _lodashInternalBindCallback['default'])(iteratee, thisArg, 3));
    };
  }

  exports['default'] = createForEach;
});
define('lodash/internal/createForIn', ['exports', 'lodash/internal/bindCallback', 'lodash/object/keysIn'], function (exports, _lodashInternalBindCallback, _lodashObjectKeysIn) {
  'use strict';

  /**
   * Creates a function for `_.forIn` or `_.forInRight`.
   *
   * @private
   * @param {Function} objectFunc The function to iterate over an object.
   * @returns {Function} Returns the new each function.
   */
  function createForIn(objectFunc) {
    return function (object, iteratee, thisArg) {
      if (typeof iteratee != 'function' || thisArg !== undefined) {
        iteratee = (0, _lodashInternalBindCallback['default'])(iteratee, thisArg, 3);
      }
      return objectFunc(object, iteratee, _lodashObjectKeysIn['default']);
    };
  }

  exports['default'] = createForIn;
});
define('lodash/internal/createForOwn', ['exports', 'lodash/internal/bindCallback'], function (exports, _lodashInternalBindCallback) {
  'use strict';

  /**
   * Creates a function for `_.forOwn` or `_.forOwnRight`.
   *
   * @private
   * @param {Function} objectFunc The function to iterate over an object.
   * @returns {Function} Returns the new each function.
   */
  function createForOwn(objectFunc) {
    return function (object, iteratee, thisArg) {
      if (typeof iteratee != 'function' || thisArg !== undefined) {
        iteratee = (0, _lodashInternalBindCallback['default'])(iteratee, thisArg, 3);
      }
      return objectFunc(object, iteratee);
    };
  }

  exports['default'] = createForOwn;
});
define('lodash/internal/createHybridWrapper', ['exports', 'lodash/internal/arrayCopy', 'lodash/internal/composeArgs', 'lodash/internal/composeArgsRight', 'lodash/internal/createCtorWrapper', 'lodash/internal/isLaziable', 'lodash/internal/reorder', 'lodash/internal/replaceHolders', 'lodash/internal/root', 'lodash/internal/setData'], function (exports, _lodashInternalArrayCopy, _lodashInternalComposeArgs, _lodashInternalComposeArgsRight, _lodashInternalCreateCtorWrapper, _lodashInternalIsLaziable, _lodashInternalReorder, _lodashInternalReplaceHolders, _lodashInternalRoot, _lodashInternalSetData) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that wraps `func` and invokes it with optional `this`
   * binding of, partial application, and currying.
   *
   * @private
   * @param {Function|string} func The function or method name to reference.
   * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to prepend to those provided to the new function.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
   * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    var isAry = bitmask & ARY_FLAG,
        isBind = bitmask & BIND_FLAG,
        isBindKey = bitmask & BIND_KEY_FLAG,
        isCurry = bitmask & CURRY_FLAG,
        isCurryBound = bitmask & CURRY_BOUND_FLAG,
        isCurryRight = bitmask & CURRY_RIGHT_FLAG,
        Ctor = isBindKey ? undefined : (0, _lodashInternalCreateCtorWrapper['default'])(func);

    function wrapper() {
      // Avoid `arguments` object use disqualifying optimizations by
      // converting it to an array before providing it to other functions.
      var length = arguments.length,
          index = length,
          args = Array(length);

      while (index--) {
        args[index] = arguments[index];
      }
      if (partials) {
        args = (0, _lodashInternalComposeArgs['default'])(args, partials, holders);
      }
      if (partialsRight) {
        args = (0, _lodashInternalComposeArgsRight['default'])(args, partialsRight, holdersRight);
      }
      if (isCurry || isCurryRight) {
        var placeholder = wrapper.placeholder,
            argsHolders = (0, _lodashInternalReplaceHolders['default'])(args, placeholder);

        length -= argsHolders.length;
        if (length < arity) {
          var newArgPos = argPos ? (0, _lodashInternalArrayCopy['default'])(argPos) : undefined,
              newArity = nativeMax(arity - length, 0),
              newsHolders = isCurry ? argsHolders : undefined,
              newHoldersRight = isCurry ? undefined : argsHolders,
              newPartials = isCurry ? args : undefined,
              newPartialsRight = isCurry ? undefined : args;

          bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

          if (!isCurryBound) {
            bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
          }
          var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
              result = createHybridWrapper.apply(undefined, newData);

          if ((0, _lodashInternalIsLaziable['default'])(func)) {
            (0, _lodashInternalSetData['default'])(result, newData);
          }
          result.placeholder = placeholder;
          return result;
        }
      }
      var thisBinding = isBind ? thisArg : this,
          fn = isBindKey ? thisBinding[func] : func;

      if (argPos) {
        args = (0, _lodashInternalReorder['default'])(args, argPos);
      }
      if (isAry && ary < args.length) {
        args.length = ary;
      }
      if (this && this !== _lodashInternalRoot['default'] && this instanceof wrapper) {
        fn = Ctor || (0, _lodashInternalCreateCtorWrapper['default'])(func);
      }
      return fn.apply(thisBinding, args);
    }
    return wrapper;
  }

  exports['default'] = createHybridWrapper;
});
define('lodash/internal/createObjectMapper', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseForOwn'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseForOwn) {
  'use strict';

  /**
   * Creates a function for `_.mapKeys` or `_.mapValues`.
   *
   * @private
   * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
   * @returns {Function} Returns the new map function.
   */
  function createObjectMapper(isMapKeys) {
    return function (object, iteratee, thisArg) {
      var result = {};
      iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);

      (0, _lodashInternalBaseForOwn['default'])(object, function (value, key, object) {
        var mapped = iteratee(value, key, object);
        key = isMapKeys ? mapped : key;
        value = isMapKeys ? value : mapped;
        result[key] = value;
      });
      return result;
    };
  }

  exports['default'] = createObjectMapper;
});
define('lodash/internal/createPadDir', ['exports', 'lodash/internal/baseToString', 'lodash/internal/createPadding'], function (exports, _lodashInternalBaseToString, _lodashInternalCreatePadding) {
  'use strict';

  /**
   * Creates a function for `_.padLeft` or `_.padRight`.
   *
   * @private
   * @param {boolean} [fromRight] Specify padding from the right.
   * @returns {Function} Returns the new pad function.
   */
  function createPadDir(fromRight) {
    return function (string, length, chars) {
      string = (0, _lodashInternalBaseToString['default'])(string);
      return (fromRight ? string : '') + (0, _lodashInternalCreatePadding['default'])(string, length, chars) + (fromRight ? '' : string);
    };
  }

  exports['default'] = createPadDir;
});
define('lodash/internal/createPadding', ['exports', 'lodash/string/repeat', 'lodash/internal/root'], function (exports, _lodashStringRepeat, _lodashInternalRoot) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeIsFinite = _lodashInternalRoot['default'].isFinite;

  /**
   * Creates the padding required for `string` based on the given `length`.
   * The `chars` string is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {string} string The string to create padding for.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the pad for `string`.
   */
  function createPadding(string, length, chars) {
    var strLength = string.length;
    length = +length;

    if (strLength >= length || !nativeIsFinite(length)) {
      return '';
    }
    var padLength = length - strLength;
    chars = chars == null ? ' ' : chars + '';
    return (0, _lodashStringRepeat['default'])(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
  }

  exports['default'] = createPadding;
});
define('lodash/internal/createPartial', ['exports', 'lodash/internal/createWrapper', 'lodash/internal/replaceHolders', 'lodash/function/restParam'], function (exports, _lodashInternalCreateWrapper, _lodashInternalReplaceHolders, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates a `_.partial` or `_.partialRight` function.
   *
   * @private
   * @param {boolean} flag The partial bit flag.
   * @returns {Function} Returns the new partial function.
   */
  function createPartial(flag) {
    var partialFunc = (0, _lodashFunctionRestParam['default'])(function (func, partials) {
      var holders = (0, _lodashInternalReplaceHolders['default'])(partials, partialFunc.placeholder);
      return (0, _lodashInternalCreateWrapper['default'])(func, flag, undefined, partials, holders);
    });
    return partialFunc;
  }

  exports['default'] = createPartial;
});
define('lodash/internal/createPartialWrapper', ['exports', 'lodash/internal/createCtorWrapper', 'lodash/internal/root'], function (exports, _lodashInternalCreateCtorWrapper, _lodashInternalRoot) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1;

  /**
   * Creates a function that wraps `func` and invokes it with the optional `this`
   * binding of `thisArg` and the `partials` prepended to those provided to
   * the wrapper.
   *
   * @private
   * @param {Function} func The function to partially apply arguments to.
   * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} partials The arguments to prepend to those provided to the new function.
   * @returns {Function} Returns the new bound function.
   */
  function createPartialWrapper(func, bitmask, thisArg, partials) {
    var isBind = bitmask & BIND_FLAG,
        Ctor = (0, _lodashInternalCreateCtorWrapper['default'])(func);

    function wrapper() {
      // Avoid `arguments` object use disqualifying optimizations by
      // converting it to an array before providing it `func`.
      var argsIndex = -1,
          argsLength = arguments.length,
          leftIndex = -1,
          leftLength = partials.length,
          args = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        args[leftIndex] = partials[leftIndex];
      }
      while (argsLength--) {
        args[leftIndex++] = arguments[++argsIndex];
      }
      var fn = this && this !== _lodashInternalRoot['default'] && this instanceof wrapper ? Ctor : func;
      return fn.apply(isBind ? thisArg : this, args);
    }
    return wrapper;
  }

  exports['default'] = createPartialWrapper;
});
define('lodash/internal/createReduce', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/baseReduce', 'lodash/lang/isArray'], function (exports, _lodashInternalBaseCallback, _lodashInternalBaseReduce, _lodashLangIsArray) {
  'use strict';

  /**
   * Creates a function for `_.reduce` or `_.reduceRight`.
   *
   * @private
   * @param {Function} arrayFunc The function to iterate over an array.
   * @param {Function} eachFunc The function to iterate over a collection.
   * @returns {Function} Returns the new each function.
   */
  function createReduce(arrayFunc, eachFunc) {
    return function (collection, iteratee, accumulator, thisArg) {
      var initFromArray = arguments.length < 3;
      return typeof iteratee == 'function' && thisArg === undefined && (0, _lodashLangIsArray['default'])(collection) ? arrayFunc(collection, iteratee, accumulator, initFromArray) : (0, _lodashInternalBaseReduce['default'])(collection, (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
    };
  }

  exports['default'] = createReduce;
});
define("lodash/internal/createRound", ["exports"], function (exports) {
  /** Native method references. */
  "use strict";

  var pow = Math.pow;

  /**
   * Creates a `_.ceil`, `_.floor`, or `_.round` function.
   *
   * @private
   * @param {string} methodName The name of the `Math` method to use when rounding.
   * @returns {Function} Returns the new round function.
   */
  function createRound(methodName) {
    var func = Math[methodName];
    return function (number, precision) {
      precision = precision === undefined ? 0 : +precision || 0;
      if (precision) {
        precision = pow(10, precision);
        return func(number * precision) / precision;
      }
      return func(number);
    };
  }

  exports["default"] = createRound;
});
define('lodash/internal/createSortedIndex', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/binaryIndex', 'lodash/internal/binaryIndexBy'], function (exports, _lodashInternalBaseCallback, _lodashInternalBinaryIndex, _lodashInternalBinaryIndexBy) {
  'use strict';

  /**
   * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
   *
   * @private
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {Function} Returns the new index function.
   */
  function createSortedIndex(retHighest) {
    return function (array, value, iteratee, thisArg) {
      return iteratee == null ? (0, _lodashInternalBinaryIndex['default'])(array, value, retHighest) : (0, _lodashInternalBinaryIndexBy['default'])(array, value, (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 1), retHighest);
    };
  }

  exports['default'] = createSortedIndex;
});
define('lodash/internal/createWrapper', ['exports', 'lodash/internal/baseSetData', 'lodash/internal/createBindWrapper', 'lodash/internal/createHybridWrapper', 'lodash/internal/createPartialWrapper', 'lodash/internal/getData', 'lodash/internal/mergeData', 'lodash/internal/setData'], function (exports, _lodashInternalBaseSetData, _lodashInternalCreateBindWrapper, _lodashInternalCreateHybridWrapper, _lodashInternalCreatePartialWrapper, _lodashInternalGetData, _lodashInternalMergeData, _lodashInternalSetData) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that either curries or invokes `func` with optional
   * `this` binding and partially applied arguments.
   *
   * @private
   * @param {Function|string} func The function or method name to reference.
   * @param {number} bitmask The bitmask of flags.
   *  The bitmask may be composed of the following flags:
   *     1 - `_.bind`
   *     2 - `_.bindKey`
   *     4 - `_.curry` or `_.curryRight` of a bound function
   *     8 - `_.curry`
   *    16 - `_.curryRight`
   *    32 - `_.partial`
   *    64 - `_.partialRight`
   *   128 - `_.rearg`
   *   256 - `_.ary`
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to be partially applied.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & BIND_KEY_FLAG;
    if (!isBindKey && typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var length = partials ? partials.length : 0;
    if (!length) {
      bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
      partials = holders = undefined;
    }
    length -= holders ? holders.length : 0;
    if (bitmask & PARTIAL_RIGHT_FLAG) {
      var partialsRight = partials,
          holdersRight = holders;

      partials = holders = undefined;
    }
    var data = isBindKey ? undefined : (0, _lodashInternalGetData['default'])(func),
        newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

    if (data) {
      (0, _lodashInternalMergeData['default'])(newData, data);
      bitmask = newData[1];
      arity = newData[9];
    }
    newData[9] = arity == null ? isBindKey ? 0 : func.length : nativeMax(arity - length, 0) || 0;

    if (bitmask == BIND_FLAG) {
      var result = (0, _lodashInternalCreateBindWrapper['default'])(newData[0], newData[2]);
    } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
      result = _lodashInternalCreatePartialWrapper['default'].apply(undefined, newData);
    } else {
      result = _lodashInternalCreateHybridWrapper['default'].apply(undefined, newData);
    }
    var setter = data ? _lodashInternalBaseSetData['default'] : _lodashInternalSetData['default'];
    return setter(result, newData);
  }

  exports['default'] = createWrapper;
});
define('lodash/internal/deburrLetter', ['exports'], function (exports) {
  /** Used to map latin-1 supplementary letters to basic latin letters. */
  'use strict';

  var deburredLetters = {
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  exports['default'] = deburrLetter;
});
define('lodash/internal/equalArrays', ['exports', 'lodash/internal/arraySome'], function (exports, _lodashInternalArraySome) {
  'use strict';

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing arrays.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var index = -1,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
      return false;
    }
    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index],
          result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

      if (result !== undefined) {
        if (result) {
          continue;
        }
        return false;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (isLoose) {
        if (!(0, _lodashInternalArraySome['default'])(other, function (othValue) {
          return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
        })) {
          return false;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
        return false;
      }
    }
    return true;
  }

  exports['default'] = equalArrays;
});
define('lodash/internal/equalByTag', ['exports'], function (exports) {
  /** `Object#toString` result references. */
  'use strict';

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag) {
    switch (tag) {
      case boolTag:
      case dateTag:
        // Coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
        return +object == +other;

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case numberTag:
        // Treat `NaN` vs. `NaN` as equal.
        return object != +object ? other != +other : object == +other;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings primitives and string
        // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
        return object == other + '';
    }
    return false;
  }

  exports['default'] = equalByTag;
});
define('lodash/internal/equalObjects', ['exports', 'lodash/object/keys'], function (exports, _lodashObjectKeys) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing values.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objProps = (0, _lodashObjectKeys['default'])(object),
        objLength = objProps.length,
        othProps = (0, _lodashObjectKeys['default'])(other),
        othLength = othProps.length;

    if (objLength != othLength && !isLoose) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var skipCtor = isLoose;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key],
          result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : undefined;

      // Recursively compare objects (susceptible to call stack limits).
      if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
        return false;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (!skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        return false;
      }
    }
    return true;
  }

  exports['default'] = equalObjects;
});
define('lodash/internal/escapeHtmlChar', ['exports'], function (exports) {
  /** Used to map characters to HTML entities. */
  'use strict';

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  exports['default'] = escapeHtmlChar;
});
define('lodash/internal/escapeRegExpChar', ['exports'], function (exports) {
  /** Used to escape characters for inclusion in compiled regexes. */
  'use strict';

  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  exports['default'] = escapeRegExpChar;
});
define('lodash/internal/escapeStringChar', ['exports'], function (exports) {
  /** Used to escape characters for inclusion in compiled string literals. */
  'use strict';

  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  exports['default'] = escapeStringChar;
});
define('lodash/internal/getData', ['exports', 'lodash/internal/metaMap', 'lodash/utility/noop'], function (exports, _lodashInternalMetaMap, _lodashUtilityNoop) {
  'use strict';

  /**
   * Gets metadata for `func`.
   *
   * @private
   * @param {Function} func The function to query.
   * @returns {*} Returns the metadata for `func`.
   */
  var getData = !_lodashInternalMetaMap['default'] ? _lodashUtilityNoop['default'] : function (func) {
    return _lodashInternalMetaMap['default'].get(func);
  };

  exports['default'] = getData;
});
define('lodash/internal/getFuncName', ['exports', 'lodash/internal/realNames'], function (exports, _lodashInternalRealNames) {
  'use strict';

  /**
   * Gets the name of `func`.
   *
   * @private
   * @param {Function} func The function to query.
   * @returns {string} Returns the function name.
   */
  function getFuncName(func) {
    var result = func.name + '',
        array = _lodashInternalRealNames['default'][result],
        length = array ? array.length : 0;

    while (length--) {
      var data = array[length],
          otherFunc = data.func;
      if (otherFunc == null || otherFunc == func) {
        return data.name;
      }
    }
    return result;
  }

  exports['default'] = getFuncName;
});
define('lodash/internal/getLength', ['exports', 'lodash/internal/baseProperty'], function (exports, _lodashInternalBaseProperty) {
  'use strict';

  /**
   * Gets the "length" property value of `object`.
   *
   * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
   * that affects Safari on at least iOS 8.1-8.3 ARM64.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {*} Returns the "length" value.
   */
  var getLength = (0, _lodashInternalBaseProperty['default'])('length');

  exports['default'] = getLength;
});
define('lodash/internal/getMatchData', ['exports', 'lodash/internal/isStrictComparable', 'lodash/object/pairs'], function (exports, _lodashInternalIsStrictComparable, _lodashObjectPairs) {
  'use strict';

  /**
   * Gets the propery names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = (0, _lodashObjectPairs['default'])(object),
        length = result.length;

    while (length--) {
      result[length][2] = (0, _lodashInternalIsStrictComparable['default'])(result[length][1]);
    }
    return result;
  }

  exports['default'] = getMatchData;
});
define('lodash/internal/getNative', ['exports', 'lodash/lang/isNative'], function (exports, _lodashLangIsNative) {
  'use strict';

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return (0, _lodashLangIsNative['default'])(value) ? value : undefined;
  }

  exports['default'] = getNative;
});
define('lodash/internal/getView', ['exports'], function (exports) {
  /* Native method references for those with the same name as other `lodash` methods. */
  'use strict';

  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Gets the view, applying any `transforms` to the `start` and `end` positions.
   *
   * @private
   * @param {number} start The start of the view.
   * @param {number} end The end of the view.
   * @param {Array} transforms The transformations to apply to the view.
   * @returns {Object} Returns an object containing the `start` and `end`
   *  positions of the view.
   */
  function getView(start, end, transforms) {
    var index = -1,
        length = transforms.length;

    while (++index < length) {
      var data = transforms[index],
          size = data.size;

      switch (data.type) {
        case 'drop':
          start += size;break;
        case 'dropRight':
          end -= size;break;
        case 'take':
          end = nativeMin(end, start + size);break;
        case 'takeRight':
          start = nativeMax(start, end - size);break;
      }
    }
    return { 'start': start, 'end': end };
  }

  exports['default'] = getView;
});
define("lodash/internal/indexOfNaN", ["exports"], function (exports) {
  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  "use strict";

  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while (fromRight ? index-- : ++index < length) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  exports["default"] = indexOfNaN;
});
define('lodash/internal/initCloneArray', ['exports'], function (exports) {
  /** Used for native method references. */
  'use strict';

  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add array properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  exports['default'] = initCloneArray;
});
define('lodash/internal/initCloneByTag', ['exports', 'lodash/internal/bufferClone'], function (exports, _lodashInternalBufferClone) {
  'use strict';

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return (0, _lodashInternalBufferClone['default'])(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case float32Tag:case float64Tag:
      case int8Tag:case int16Tag:case int32Tag:
      case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
        var buffer = object.buffer;
        return new Ctor(isDeep ? (0, _lodashInternalBufferClone['default'])(buffer) : buffer, object.byteOffset, object.length);

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        var result = new Ctor(object.source, reFlags.exec(object));
        result.lastIndex = object.lastIndex;
    }
    return result;
  }

  exports['default'] = initCloneByTag;
});
define('lodash/internal/initCloneObject', ['exports'], function (exports) {
  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  'use strict';

  function initCloneObject(object) {
    var Ctor = object.constructor;
    if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
      Ctor = Object;
    }
    return new Ctor();
  }

  exports['default'] = initCloneObject;
});
define('lodash/internal/invokePath', ['exports', 'lodash/internal/baseGet', 'lodash/internal/baseSlice', 'lodash/internal/isKey', 'lodash/array/last', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalBaseSlice, _lodashInternalIsKey, _lodashArrayLast, _lodashInternalToPath) {
  'use strict';

  /**
   * Invokes the method at `path` on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the method to invoke.
   * @param {Array} args The arguments to invoke the method with.
   * @returns {*} Returns the result of the invoked method.
   */
  function invokePath(object, path, args) {
    if (object != null && !(0, _lodashInternalIsKey['default'])(path, object)) {
      path = (0, _lodashInternalToPath['default'])(path);
      object = path.length == 1 ? object : (0, _lodashInternalBaseGet['default'])(object, (0, _lodashInternalBaseSlice['default'])(path, 0, -1));
      path = (0, _lodashArrayLast['default'])(path);
    }
    var func = object == null ? object : object[path];
    return func == null ? undefined : func.apply(object, args);
  }

  exports['default'] = invokePath;
});
define('lodash/internal/isArrayLike', ['exports', 'lodash/internal/getLength', 'lodash/internal/isLength'], function (exports, _lodashInternalGetLength, _lodashInternalIsLength) {
  'use strict';

  /**
   * Checks if `value` is array-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   */
  function isArrayLike(value) {
    return value != null && (0, _lodashInternalIsLength['default'])((0, _lodashInternalGetLength['default'])(value));
  }

  exports['default'] = isArrayLike;
});
define('lodash/internal/isIndex', ['exports'], function (exports) {
  /** Used to detect unsigned integer values. */
  'use strict';

  var reIsUint = /^\d+$/;

  /**
   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
   * of an array-like value.
   */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  exports['default'] = isIndex;
});
define('lodash/internal/isIterateeCall', ['exports', 'lodash/internal/isArrayLike', 'lodash/internal/isIndex', 'lodash/lang/isObject'], function (exports, _lodashInternalIsArrayLike, _lodashInternalIsIndex, _lodashLangIsObject) {
  'use strict';

  /**
   * Checks if the provided arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!(0, _lodashLangIsObject['default'])(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number' ? (0, _lodashInternalIsArrayLike['default'])(object) && (0, _lodashInternalIsIndex['default'])(index, object.length) : type == 'string' && index in object) {
      var other = object[index];
      return value === value ? value === other : other !== other;
    }
    return false;
  }

  exports['default'] = isIterateeCall;
});
define('lodash/internal/isKey', ['exports', 'lodash/lang/isArray', 'lodash/internal/toObject'], function (exports, _lodashLangIsArray, _lodashInternalToObject) {
  'use strict';

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    var type = typeof value;
    if (type == 'string' && reIsPlainProp.test(value) || type == 'number') {
      return true;
    }
    if ((0, _lodashLangIsArray['default'])(value)) {
      return false;
    }
    var result = !reIsDeepProp.test(value);
    return result || object != null && value in (0, _lodashInternalToObject['default'])(object);
  }

  exports['default'] = isKey;
});
define('lodash/internal/isLaziable', ['exports', 'lodash/internal/LazyWrapper', 'lodash/internal/getData', 'lodash/internal/getFuncName', 'lodash/chain/lodash'], function (exports, _lodashInternalLazyWrapper, _lodashInternalGetData, _lodashInternalGetFuncName, _lodashChainLodash) {
  'use strict';

  /**
   * Checks if `func` has a lazy counterpart.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
   */
  function isLaziable(func) {
    var funcName = (0, _lodashInternalGetFuncName['default'])(func),
        other = _lodashChainLodash['default'][funcName];

    if (typeof other != 'function' || !(funcName in _lodashInternalLazyWrapper['default'].prototype)) {
      return false;
    }
    if (func === other) {
      return true;
    }
    var data = (0, _lodashInternalGetData['default'])(other);
    return !!data && func === data[0];
  }

  exports['default'] = isLaziable;
});
define('lodash/internal/isLength', ['exports'], function (exports) {
  /**
   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
   * of an array-like value.
   */
  'use strict';

  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   */
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  exports['default'] = isLength;
});
define('lodash/internal/isObjectLike', ['exports'], function (exports) {
  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  'use strict';

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  exports['default'] = isObjectLike;
});
define("lodash/internal/isSpace", ["exports"], function (exports) {
  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  "use strict";

  function isSpace(charCode) {
    return charCode <= 160 && charCode >= 9 && charCode <= 13 || charCode == 32 || charCode == 160 || charCode == 5760 || charCode == 6158 || charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279);
  }

  exports["default"] = isSpace;
});
define('lodash/internal/isStrictComparable', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !(0, _lodashLangIsObject['default'])(value);
  }

  exports['default'] = isStrictComparable;
});
define('lodash/internal/lazyClone', ['exports', 'lodash/internal/LazyWrapper', 'lodash/internal/arrayCopy'], function (exports, _lodashInternalLazyWrapper, _lodashInternalArrayCopy) {
  'use strict';

  /**
   * Creates a clone of the lazy wrapper object.
   *
   * @private
   * @name clone
   * @memberOf LazyWrapper
   * @returns {Object} Returns the cloned `LazyWrapper` object.
   */
  function lazyClone() {
    var result = new _lodashInternalLazyWrapper['default'](this.__wrapped__);
    result.__actions__ = (0, _lodashInternalArrayCopy['default'])(this.__actions__);
    result.__dir__ = this.__dir__;
    result.__filtered__ = this.__filtered__;
    result.__iteratees__ = (0, _lodashInternalArrayCopy['default'])(this.__iteratees__);
    result.__takeCount__ = this.__takeCount__;
    result.__views__ = (0, _lodashInternalArrayCopy['default'])(this.__views__);
    return result;
  }

  exports['default'] = lazyClone;
});
define('lodash/internal/lazyReverse', ['exports', 'lodash/internal/LazyWrapper'], function (exports, _lodashInternalLazyWrapper) {
  'use strict';

  /**
   * Reverses the direction of lazy iteration.
   *
   * @private
   * @name reverse
   * @memberOf LazyWrapper
   * @returns {Object} Returns the new reversed `LazyWrapper` object.
   */
  function lazyReverse() {
    if (this.__filtered__) {
      var result = new _lodashInternalLazyWrapper['default'](this);
      result.__dir__ = -1;
      result.__filtered__ = true;
    } else {
      result = this.clone();
      result.__dir__ *= -1;
    }
    return result;
  }

  exports['default'] = lazyReverse;
});
define('lodash/internal/lazyValue', ['exports', 'lodash/internal/baseWrapperValue', 'lodash/internal/getView', 'lodash/lang/isArray'], function (exports, _lodashInternalBaseWrapperValue, _lodashInternalGetView, _lodashLangIsArray) {
  'use strict';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Extracts the unwrapped value from its lazy wrapper.
   *
   * @private
   * @name value
   * @memberOf LazyWrapper
   * @returns {*} Returns the unwrapped value.
   */
  function lazyValue() {
    var array = this.__wrapped__.value(),
        dir = this.__dir__,
        isArr = (0, _lodashLangIsArray['default'])(array),
        isRight = dir < 0,
        arrLength = isArr ? array.length : 0,
        view = (0, _lodashInternalGetView['default'])(0, arrLength, this.__views__),
        start = view.start,
        end = view.end,
        length = end - start,
        index = isRight ? end : start - 1,
        iteratees = this.__iteratees__,
        iterLength = iteratees.length,
        resIndex = 0,
        takeCount = nativeMin(length, this.__takeCount__);

    if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) {
      return (0, _lodashInternalBaseWrapperValue['default'])(array, this.__actions__);
    }
    var result = [];

    outer: while (length-- && resIndex < takeCount) {
      index += dir;

      var iterIndex = -1,
          value = array[index];

      while (++iterIndex < iterLength) {
        var data = iteratees[iterIndex],
            iteratee = data.iteratee,
            type = data.type,
            computed = iteratee(value);

        if (type == LAZY_MAP_FLAG) {
          value = computed;
        } else if (!computed) {
          if (type == LAZY_FILTER_FLAG) {
            continue outer;
          } else {
            break outer;
          }
        }
      }
      result[resIndex++] = value;
    }
    return result;
  }

  exports['default'] = lazyValue;
});
define("lodash/internal/mapDelete", ["exports"], function (exports) {
  /**
   * Removes `key` and its value from the cache.
   *
   * @private
   * @name delete
   * @memberOf _.memoize.Cache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
   */
  "use strict";

  function mapDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  exports["default"] = mapDelete;
});
define('lodash/internal/mapGet', ['exports'], function (exports) {
  /**
   * Gets the cached value for `key`.
   *
   * @private
   * @name get
   * @memberOf _.memoize.Cache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the cached value.
   */
  'use strict';

  function mapGet(key) {
    return key == '__proto__' ? undefined : this.__data__[key];
  }

  exports['default'] = mapGet;
});
define('lodash/internal/mapHas', ['exports'], function (exports) {
  /** Used for native method references. */
  'use strict';

  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Checks if a cached value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf _.memoize.Cache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapHas(key) {
    return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
  }

  exports['default'] = mapHas;
});
define('lodash/internal/mapSet', ['exports'], function (exports) {
  /**
   * Sets `value` to `key` of the cache.
   *
   * @private
   * @name set
   * @memberOf _.memoize.Cache
   * @param {string} key The key of the value to cache.
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache object.
   */
  'use strict';

  function mapSet(key, value) {
    if (key != '__proto__') {
      this.__data__[key] = value;
    }
    return this;
  }

  exports['default'] = mapSet;
});
define('lodash/internal/mergeData', ['exports', 'lodash/internal/arrayCopy', 'lodash/internal/composeArgs', 'lodash/internal/composeArgsRight', 'lodash/internal/replaceHolders'], function (exports, _lodashInternalArrayCopy, _lodashInternalComposeArgs, _lodashInternalComposeArgsRight, _lodashInternalReplaceHolders) {
  'use strict';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Merges the function metadata of `source` into `data`.
   *
   * Merging metadata reduces the number of wrappers required to invoke a function.
   * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
   * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
   * augment function arguments, making the order in which they are executed important,
   * preventing the merging of metadata. However, we make an exception for a safe
   * common case where curried functions have `_.ary` and or `_.rearg` applied.
   *
   * @private
   * @param {Array} data The destination metadata.
   * @param {Array} source The source metadata.
   * @returns {Array} Returns `data`.
   */
  function mergeData(data, source) {
    var bitmask = data[1],
        srcBitmask = source[1],
        newBitmask = bitmask | srcBitmask,
        isCommon = newBitmask < ARY_FLAG;

    var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG;

    // Exit early if metadata can't be merged.
    if (!(isCommon || isCombo)) {
      return data;
    }
    // Use source `thisArg` if available.
    if (srcBitmask & BIND_FLAG) {
      data[2] = source[2];
      // Set when currying a bound function.
      newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
    }
    // Compose partial arguments.
    var value = source[3];
    if (value) {
      var partials = data[3];
      data[3] = partials ? (0, _lodashInternalComposeArgs['default'])(partials, value, source[4]) : (0, _lodashInternalArrayCopy['default'])(value);
      data[4] = partials ? (0, _lodashInternalReplaceHolders['default'])(data[3], PLACEHOLDER) : (0, _lodashInternalArrayCopy['default'])(source[4]);
    }
    // Compose partial right arguments.
    value = source[5];
    if (value) {
      partials = data[5];
      data[5] = partials ? (0, _lodashInternalComposeArgsRight['default'])(partials, value, source[6]) : (0, _lodashInternalArrayCopy['default'])(value);
      data[6] = partials ? (0, _lodashInternalReplaceHolders['default'])(data[5], PLACEHOLDER) : (0, _lodashInternalArrayCopy['default'])(source[6]);
    }
    // Use source `argPos` if available.
    value = source[7];
    if (value) {
      data[7] = (0, _lodashInternalArrayCopy['default'])(value);
    }
    // Use source `ary` if it's smaller.
    if (srcBitmask & ARY_FLAG) {
      data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    }
    // Use source `arity` if one is not provided.
    if (data[9] == null) {
      data[9] = source[9];
    }
    // Use source `func` and merge bitmasks.
    data[0] = source[0];
    data[1] = newBitmask;

    return data;
  }

  exports['default'] = mergeData;
});
define('lodash/internal/mergeDefaults', ['exports', 'lodash/object/merge'], function (exports, _lodashObjectMerge) {
  'use strict';

  /**
   * Used by `_.defaultsDeep` to customize its `_.merge` use.
   *
   * @private
   * @param {*} objectValue The destination object property value.
   * @param {*} sourceValue The source object property value.
   * @returns {*} Returns the value to assign to the destination object.
   */
  function mergeDefaults(objectValue, sourceValue) {
    return objectValue === undefined ? sourceValue : (0, _lodashObjectMerge['default'])(objectValue, sourceValue, mergeDefaults);
  }

  exports['default'] = mergeDefaults;
});
define('lodash/internal/metaMap', ['exports', 'lodash/internal/getNative', 'lodash/internal/root'], function (exports, _lodashInternalGetNative, _lodashInternalRoot) {
  'use strict';

  /** Native method references. */
  var WeakMap = (0, _lodashInternalGetNative['default'])(_lodashInternalRoot['default'], 'WeakMap');

  /** Used to store function metadata. */
  var metaMap = WeakMap && new WeakMap();

  exports['default'] = metaMap;
});
define('lodash/internal/pickByArray', ['exports', 'lodash/internal/toObject'], function (exports, _lodashInternalToObject) {
  'use strict';

  /**
   * A specialized version of `_.pick` which picks `object` properties specified
   * by `props`.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} props The property names to pick.
   * @returns {Object} Returns the new object.
   */
  function pickByArray(object, props) {
    object = (0, _lodashInternalToObject['default'])(object);

    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index];
      if (key in object) {
        result[key] = object[key];
      }
    }
    return result;
  }

  exports['default'] = pickByArray;
});
define('lodash/internal/pickByCallback', ['exports', 'lodash/internal/baseForIn'], function (exports, _lodashInternalBaseForIn) {
  'use strict';

  /**
   * A specialized version of `_.pick` which picks `object` properties `predicate`
   * returns truthy for.
   *
   * @private
   * @param {Object} object The source object.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Object} Returns the new object.
   */
  function pickByCallback(object, predicate) {
    var result = {};
    (0, _lodashInternalBaseForIn['default'])(object, function (value, key, object) {
      if (predicate(value, key, object)) {
        result[key] = value;
      }
    });
    return result;
  }

  exports['default'] = pickByCallback;
});
define("lodash/internal/reEscape", ["exports"], function (exports) {
  /** Used to match template delimiters. */
  "use strict";

  var reEscape = /<%-([\s\S]+?)%>/g;

  exports["default"] = reEscape;
});
define("lodash/internal/reEvaluate", ["exports"], function (exports) {
  /** Used to match template delimiters. */
  "use strict";

  var reEvaluate = /<%([\s\S]+?)%>/g;

  exports["default"] = reEvaluate;
});
define("lodash/internal/reInterpolate", ["exports"], function (exports) {
  /** Used to match template delimiters. */
  "use strict";

  var reInterpolate = /<%=([\s\S]+?)%>/g;

  exports["default"] = reInterpolate;
});
define("lodash/internal/realNames", ["exports"], function (exports) {
  /** Used to lookup unminified function names. */
  "use strict";

  var realNames = {};

  exports["default"] = realNames;
});
define('lodash/internal/reorder', ['exports', 'lodash/internal/arrayCopy', 'lodash/internal/isIndex'], function (exports, _lodashInternalArrayCopy, _lodashInternalIsIndex) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Reorder `array` according to the specified indexes where the element at
   * the first index is assigned as the first element, the element at
   * the second index is assigned as the second element, and so on.
   *
   * @private
   * @param {Array} array The array to reorder.
   * @param {Array} indexes The arranged array indexes.
   * @returns {Array} Returns `array`.
   */
  function reorder(array, indexes) {
    var arrLength = array.length,
        length = nativeMin(indexes.length, arrLength),
        oldArray = (0, _lodashInternalArrayCopy['default'])(array);

    while (length--) {
      var index = indexes[length];
      array[length] = (0, _lodashInternalIsIndex['default'])(index, arrLength) ? oldArray[index] : undefined;
    }
    return array;
  }

  exports['default'] = reorder;
});
define('lodash/internal/replaceHolders', ['exports'], function (exports) {
  /** Used as the internal argument placeholder. */
  'use strict';

  var PLACEHOLDER = '__lodash_placeholder__';

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  exports['default'] = replaceHolders;
});
define('lodash/internal/root', ['exports'], function (exports) {
  /** Used to determine if values are of the language type `Object`. */
  'use strict';

  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || window;
  // var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  exports['default'] = root;
});
define('lodash/internal/setData', ['exports', 'lodash/internal/baseSetData', 'lodash/date/now'], function (exports, _lodashInternalBaseSetData, _lodashDateNow) {
  'use strict';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /**
   * Sets metadata for `func`.
   *
   * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
   * period of time, it will trip its breaker and transition to an identity function
   * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
   * for more details.
   *
   * @private
   * @param {Function} func The function to associate metadata with.
   * @param {*} data The metadata.
   * @returns {Function} Returns `func`.
   */
  var setData = (function () {
    var count = 0,
        lastCalled = 0;

    return function (key, value) {
      var stamp = (0, _lodashDateNow['default'])(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return key;
        }
      } else {
        count = 0;
      }
      return (0, _lodashInternalBaseSetData['default'])(key, value);
    };
  })();

  exports['default'] = setData;
});
define('lodash/internal/shimKeys', ['exports', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/internal/isIndex', 'lodash/internal/isLength', 'lodash/object/keysIn'], function (exports, _lodashLangIsArguments, _lodashLangIsArray, _lodashInternalIsIndex, _lodashInternalIsLength, _lodashObjectKeysIn) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A fallback implementation of `Object.keys` which creates an array of the
   * own enumerable property names of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function shimKeys(object) {
    var props = (0, _lodashObjectKeysIn['default'])(object),
        propsLength = props.length,
        length = propsLength && object.length;

    var allowIndexes = !!length && (0, _lodashInternalIsLength['default'])(length) && ((0, _lodashLangIsArray['default'])(object) || (0, _lodashLangIsArguments['default'])(object));

    var index = -1,
        result = [];

    while (++index < propsLength) {
      var key = props[index];
      if (allowIndexes && (0, _lodashInternalIsIndex['default'])(key, length) || hasOwnProperty.call(object, key)) {
        result.push(key);
      }
    }
    return result;
  }

  exports['default'] = shimKeys;
});
define("lodash/internal/sortedUniq", ["exports"], function (exports) {
  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate free array.
   */
  "use strict";

  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  exports["default"] = sortedUniq;
});
define('lodash/internal/toIterable', ['exports', 'lodash/internal/isArrayLike', 'lodash/lang/isObject', 'lodash/object/values'], function (exports, _lodashInternalIsArrayLike, _lodashLangIsObject, _lodashObjectValues) {
  'use strict';

  /**
   * Converts `value` to an array-like object if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Array|Object} Returns the array-like object.
   */
  function toIterable(value) {
    if (value == null) {
      return [];
    }
    if (!(0, _lodashInternalIsArrayLike['default'])(value)) {
      return (0, _lodashObjectValues['default'])(value);
    }
    return (0, _lodashLangIsObject['default'])(value) ? value : Object(value);
  }

  exports['default'] = toIterable;
});
define('lodash/internal/toObject', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /**
   * Converts `value` to an object if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Object} Returns the object.
   */
  function toObject(value) {
    return (0, _lodashLangIsObject['default'])(value) ? value : Object(value);
  }

  exports['default'] = toObject;
});
define('lodash/internal/toPath', ['exports', 'lodash/internal/baseToString', 'lodash/lang/isArray'], function (exports, _lodashInternalBaseToString, _lodashLangIsArray) {
  'use strict';

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `value` to property path array if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Array} Returns the property path array.
   */
  function toPath(value) {
    if ((0, _lodashLangIsArray['default'])(value)) {
      return value;
    }
    var result = [];
    (0, _lodashInternalBaseToString['default'])(value).replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  }

  exports['default'] = toPath;
});
define('lodash/internal/trimmedLeftIndex', ['exports', 'lodash/internal/isSpace'], function (exports, _lodashInternalIsSpace) {
  'use strict';

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && (0, _lodashInternalIsSpace['default'])(string.charCodeAt(index))) {}
    return index;
  }

  exports['default'] = trimmedLeftIndex;
});
define('lodash/internal/trimmedRightIndex', ['exports', 'lodash/internal/isSpace'], function (exports, _lodashInternalIsSpace) {
  'use strict';

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && (0, _lodashInternalIsSpace['default'])(string.charCodeAt(index))) {}
    return index;
  }

  exports['default'] = trimmedRightIndex;
});
define('lodash/internal/unescapeHtmlChar', ['exports'], function (exports) {
  /** Used to map HTML entities to characters. */
  'use strict';

  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  exports['default'] = unescapeHtmlChar;
});
define('lodash/internal/wrapperClone', ['exports', 'lodash/internal/LazyWrapper', 'lodash/internal/LodashWrapper', 'lodash/internal/arrayCopy'], function (exports, _lodashInternalLazyWrapper, _lodashInternalLodashWrapper, _lodashInternalArrayCopy) {
  'use strict';

  /**
   * Creates a clone of `wrapper`.
   *
   * @private
   * @param {Object} wrapper The wrapper to clone.
   * @returns {Object} Returns the cloned wrapper.
   */
  function wrapperClone(wrapper) {
    return wrapper instanceof _lodashInternalLazyWrapper['default'] ? wrapper.clone() : new _lodashInternalLodashWrapper['default'](wrapper.__wrapped__, wrapper.__chain__, (0, _lodashInternalArrayCopy['default'])(wrapper.__actions__));
  }

  exports['default'] = wrapperClone;
});
define('lodash/lang', ['exports', 'lodash/lang/clone', 'lodash/lang/cloneDeep', 'lodash/lang/eq', 'lodash/lang/gt', 'lodash/lang/gte', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/lang/isBoolean', 'lodash/lang/isDate', 'lodash/lang/isElement', 'lodash/lang/isEmpty', 'lodash/lang/isEqual', 'lodash/lang/isError', 'lodash/lang/isFinite', 'lodash/lang/isFunction', 'lodash/lang/isMatch', 'lodash/lang/isNaN', 'lodash/lang/isNative', 'lodash/lang/isNull', 'lodash/lang/isNumber', 'lodash/lang/isObject', 'lodash/lang/isPlainObject', 'lodash/lang/isRegExp', 'lodash/lang/isString', 'lodash/lang/isTypedArray', 'lodash/lang/isUndefined', 'lodash/lang/lt', 'lodash/lang/lte', 'lodash/lang/toArray', 'lodash/lang/toPlainObject'], function (exports, _lodashLangClone, _lodashLangCloneDeep, _lodashLangEq, _lodashLangGt, _lodashLangGte, _lodashLangIsArguments, _lodashLangIsArray, _lodashLangIsBoolean, _lodashLangIsDate, _lodashLangIsElement, _lodashLangIsEmpty, _lodashLangIsEqual, _lodashLangIsError, _lodashLangIsFinite, _lodashLangIsFunction, _lodashLangIsMatch, _lodashLangIsNaN, _lodashLangIsNative, _lodashLangIsNull, _lodashLangIsNumber, _lodashLangIsObject, _lodashLangIsPlainObject, _lodashLangIsRegExp, _lodashLangIsString, _lodashLangIsTypedArray, _lodashLangIsUndefined, _lodashLangLt, _lodashLangLte, _lodashLangToArray, _lodashLangToPlainObject) {
  'use strict';

  exports['default'] = {
    'clone': _lodashLangClone['default'],
    'cloneDeep': _lodashLangCloneDeep['default'],
    'eq': _lodashLangEq['default'],
    'gt': _lodashLangGt['default'],
    'gte': _lodashLangGte['default'],
    'isArguments': _lodashLangIsArguments['default'],
    'isArray': _lodashLangIsArray['default'],
    'isBoolean': _lodashLangIsBoolean['default'],
    'isDate': _lodashLangIsDate['default'],
    'isElement': _lodashLangIsElement['default'],
    'isEmpty': _lodashLangIsEmpty['default'],
    'isEqual': _lodashLangIsEqual['default'],
    'isError': _lodashLangIsError['default'],
    'isFinite': _lodashLangIsFinite['default'],
    'isFunction': _lodashLangIsFunction['default'],
    'isMatch': _lodashLangIsMatch['default'],
    'isNaN': _lodashLangIsNaN['default'],
    'isNative': _lodashLangIsNative['default'],
    'isNull': _lodashLangIsNull['default'],
    'isNumber': _lodashLangIsNumber['default'],
    'isObject': _lodashLangIsObject['default'],
    'isPlainObject': _lodashLangIsPlainObject['default'],
    'isRegExp': _lodashLangIsRegExp['default'],
    'isString': _lodashLangIsString['default'],
    'isTypedArray': _lodashLangIsTypedArray['default'],
    'isUndefined': _lodashLangIsUndefined['default'],
    'lt': _lodashLangLt['default'],
    'lte': _lodashLangLte['default'],
    'toArray': _lodashLangToArray['default'],
    'toPlainObject': _lodashLangToPlainObject['default']
  };
});
define('lodash/lang/clone', ['exports', 'lodash/internal/baseClone', 'lodash/internal/bindCallback', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseClone, _lodashInternalBindCallback, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
   * otherwise they are assigned by reference. If `customizer` is provided it's
   * invoked to produce the cloned values. If `customizer` returns `undefined`
   * cloning is handled by the method instead. The `customizer` is bound to
   * `thisArg` and invoked with up to three argument; (value [, index|key, object]).
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
   * The enumerable properties of `arguments` objects and objects created by
   * constructors other than `Object` are cloned to plain `Object` objects. An
   * empty object is returned for uncloneable values such as functions, DOM nodes,
   * Maps, Sets, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @param {Function} [customizer] The function to customize cloning values.
   * @param {*} [thisArg] The `this` binding of `customizer`.
   * @returns {*} Returns the cloned value.
   * @example
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * var shallow = _.clone(users);
   * shallow[0] === users[0];
   * // => true
   *
   * var deep = _.clone(users, true);
   * deep[0] === users[0];
   * // => false
   *
   * // using a customizer callback
   * var el = _.clone(document.body, function(value) {
   *   if (_.isElement(value)) {
   *     return value.cloneNode(false);
   *   }
   * });
   *
   * el === document.body
   * // => false
   * el.nodeName
   * // => BODY
   * el.childNodes.length;
   * // => 0
   */
  function clone(value, isDeep, customizer, thisArg) {
    if (isDeep && typeof isDeep != 'boolean' && (0, _lodashInternalIsIterateeCall['default'])(value, isDeep, customizer)) {
      isDeep = false;
    } else if (typeof isDeep == 'function') {
      thisArg = customizer;
      customizer = isDeep;
      isDeep = false;
    }
    return typeof customizer == 'function' ? (0, _lodashInternalBaseClone['default'])(value, isDeep, (0, _lodashInternalBindCallback['default'])(customizer, thisArg, 3)) : (0, _lodashInternalBaseClone['default'])(value, isDeep);
  }

  exports['default'] = clone;
});
define('lodash/lang/cloneDeep', ['exports', 'lodash/internal/baseClone', 'lodash/internal/bindCallback'], function (exports, _lodashInternalBaseClone, _lodashInternalBindCallback) {
  'use strict';

  /**
   * Creates a deep clone of `value`. If `customizer` is provided it's invoked
   * to produce the cloned values. If `customizer` returns `undefined` cloning
   * is handled by the method instead. The `customizer` is bound to `thisArg`
   * and invoked with up to three argument; (value [, index|key, object]).
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
   * The enumerable properties of `arguments` objects and objects created by
   * constructors other than `Object` are cloned to plain `Object` objects. An
   * empty object is returned for uncloneable values such as functions, DOM nodes,
   * Maps, Sets, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to deep clone.
   * @param {Function} [customizer] The function to customize cloning values.
   * @param {*} [thisArg] The `this` binding of `customizer`.
   * @returns {*} Returns the deep cloned value.
   * @example
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * var deep = _.cloneDeep(users);
   * deep[0] === users[0];
   * // => false
   *
   * // using a customizer callback
   * var el = _.cloneDeep(document.body, function(value) {
   *   if (_.isElement(value)) {
   *     return value.cloneNode(true);
   *   }
   * });
   *
   * el === document.body
   * // => false
   * el.nodeName
   * // => BODY
   * el.childNodes.length;
   * // => 20
   */
  function cloneDeep(value, customizer, thisArg) {
    return typeof customizer == 'function' ? (0, _lodashInternalBaseClone['default'])(value, true, (0, _lodashInternalBindCallback['default'])(customizer, thisArg, 3)) : (0, _lodashInternalBaseClone['default'])(value, true);
  }

  exports['default'] = cloneDeep;
});
define('lodash/lang/eq', ['exports', 'lodash/lang/isEqual'], function (exports, _lodashLangIsEqual) {
  'use strict';

  exports['default'] = _lodashLangIsEqual['default'];
});
define("lodash/lang/gt", ["exports"], function (exports) {
  /**
   * Checks if `value` is greater than `other`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
   * @example
   *
   * _.gt(3, 1);
   * // => true
   *
   * _.gt(3, 3);
   * // => false
   *
   * _.gt(1, 3);
   * // => false
   */
  "use strict";

  function gt(value, other) {
    return value > other;
  }

  exports["default"] = gt;
});
define("lodash/lang/gte", ["exports"], function (exports) {
  /**
   * Checks if `value` is greater than or equal to `other`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
   * @example
   *
   * _.gte(3, 1);
   * // => true
   *
   * _.gte(3, 3);
   * // => true
   *
   * _.gte(1, 3);
   * // => false
   */
  "use strict";

  function gte(value, other) {
    return value >= other;
  }

  exports["default"] = gte;
});
define('lodash/lang/isArguments', ['exports', 'lodash/internal/isArrayLike', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsArrayLike, _lodashInternalIsObjectLike) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Native method references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /**
   * Checks if `value` is classified as an `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    return (0, _lodashInternalIsObjectLike['default'])(value) && (0, _lodashInternalIsArrayLike['default'])(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  }

  exports['default'] = isArguments;
});
define('lodash/lang/isArray', ['exports', 'lodash/internal/getNative', 'lodash/internal/isLength', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalGetNative, _lodashInternalIsLength, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var arrayTag = '[object Array]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeIsArray = (0, _lodashInternalGetNative['default'])(Array, 'isArray');

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(function() { return arguments; }());
   * // => false
   */
  var isArray = nativeIsArray || function (value) {
    return (0, _lodashInternalIsObjectLike['default'])(value) && (0, _lodashInternalIsLength['default'])(value.length) && objToString.call(value) == arrayTag;
  };

  exports['default'] = isArray;
});
define('lodash/lang/isBoolean', ['exports', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false || (0, _lodashInternalIsObjectLike['default'])(value) && objToString.call(value) == boolTag;
  }

  exports['default'] = isBoolean;
});
define('lodash/lang/isDate', ['exports', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var dateTag = '[object Date]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  function isDate(value) {
    return (0, _lodashInternalIsObjectLike['default'])(value) && objToString.call(value) == dateTag;
  }

  exports['default'] = isDate;
});
define('lodash/lang/isElement', ['exports', 'lodash/internal/isObjectLike', 'lodash/lang/isPlainObject'], function (exports, _lodashInternalIsObjectLike, _lodashLangIsPlainObject) {
  'use strict';

  /**
   * Checks if `value` is a DOM element.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
   * @example
   *
   * _.isElement(document.body);
   * // => true
   *
   * _.isElement('<body>');
   * // => false
   */
  function isElement(value) {
    return !!value && value.nodeType === 1 && (0, _lodashInternalIsObjectLike['default'])(value) && !(0, _lodashLangIsPlainObject['default'])(value);
  }

  exports['default'] = isElement;
});
define('lodash/lang/isEmpty', ['exports', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/internal/isArrayLike', 'lodash/lang/isFunction', 'lodash/internal/isObjectLike', 'lodash/lang/isString', 'lodash/object/keys'], function (exports, _lodashLangIsArguments, _lodashLangIsArray, _lodashInternalIsArrayLike, _lodashLangIsFunction, _lodashInternalIsObjectLike, _lodashLangIsString, _lodashObjectKeys) {
  'use strict';

  /**
   * Checks if `value` is empty. A value is considered empty unless it's an
   * `arguments` object, array, string, or jQuery-like collection with a length
   * greater than `0` or an object with own enumerable properties.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {Array|Object|string} value The value to inspect.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if ((0, _lodashInternalIsArrayLike['default'])(value) && ((0, _lodashLangIsArray['default'])(value) || (0, _lodashLangIsString['default'])(value) || (0, _lodashLangIsArguments['default'])(value) || (0, _lodashInternalIsObjectLike['default'])(value) && (0, _lodashLangIsFunction['default'])(value.splice))) {
      return !value.length;
    }
    return !(0, _lodashObjectKeys['default'])(value).length;
  }

  exports['default'] = isEmpty;
});
define('lodash/lang/isEqual', ['exports', 'lodash/internal/baseIsEqual', 'lodash/internal/bindCallback'], function (exports, _lodashInternalBaseIsEqual, _lodashInternalBindCallback) {
  'use strict';

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent. If `customizer` is provided it's invoked to compare values.
   * If `customizer` returns `undefined` comparisons are handled by the method
   * instead. The `customizer` is bound to `thisArg` and invoked with up to
   * three arguments: (value, other [, index|key]).
   *
   * **Note:** This method supports comparing arrays, booleans, `Date` objects,
   * numbers, `Object` objects, regexes, and strings. Objects are compared by
   * their own, not inherited, enumerable properties. Functions and DOM nodes
   * are **not** supported. Provide a customizer function to extend support
   * for comparing other values.
   *
   * @static
   * @memberOf _
   * @alias eq
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize value comparisons.
   * @param {*} [thisArg] The `this` binding of `customizer`.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'user': 'fred' };
   * var other = { 'user': 'fred' };
   *
   * object == other;
   * // => false
   *
   * _.isEqual(object, other);
   * // => true
   *
   * // using a customizer callback
   * var array = ['hello', 'goodbye'];
   * var other = ['hi', 'goodbye'];
   *
   * _.isEqual(array, other, function(value, other) {
   *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
   *     return true;
   *   }
   * });
   * // => true
   */
  function isEqual(value, other, customizer, thisArg) {
    customizer = typeof customizer == 'function' ? (0, _lodashInternalBindCallback['default'])(customizer, thisArg, 3) : undefined;
    var result = customizer ? customizer(value, other) : undefined;
    return result === undefined ? (0, _lodashInternalBaseIsEqual['default'])(value, other, customizer) : !!result;
  }

  exports['default'] = isEqual;
});
define('lodash/lang/isError', ['exports', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var errorTag = '[object Error]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */
  function isError(value) {
    return (0, _lodashInternalIsObjectLike['default'])(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
  }

  exports['default'] = isError;
});
define('lodash/lang/isFinite', ['exports', 'lodash/internal/root'], function (exports, _lodashInternalRoot) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite = _lodashInternalRoot['default'].isFinite;

  /**
   * Checks if `value` is a finite primitive number.
   *
   * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(10);
   * // => true
   *
   * _.isFinite('10');
   * // => false
   *
   * _.isFinite(true);
   * // => false
   *
   * _.isFinite(Object(10));
   * // => false
   *
   * _.isFinite(Infinity);
   * // => false
   */
  function isFinite(value) {
    return typeof value == 'number' && nativeIsFinite(value);
  }

  exports['default'] = isFinite;
});
define('lodash/lang/isFunction', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /** `Object#toString` result references. */
  var funcTag = '[object Function]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in older versions of Chrome and Safari which return 'function' for regexes
    // and Safari 8 which returns 'object' for typed array constructors.
    return (0, _lodashLangIsObject['default'])(value) && objToString.call(value) == funcTag;
  }

  exports['default'] = isFunction;
});
define('lodash/lang/isMatch', ['exports', 'lodash/internal/baseIsMatch', 'lodash/internal/bindCallback', 'lodash/internal/getMatchData'], function (exports, _lodashInternalBaseIsMatch, _lodashInternalBindCallback, _lodashInternalGetMatchData) {
  'use strict';

  /**
   * Performs a deep comparison between `object` and `source` to determine if
   * `object` contains equivalent property values. If `customizer` is provided
   * it's invoked to compare values. If `customizer` returns `undefined`
   * comparisons are handled by the method instead. The `customizer` is bound
   * to `thisArg` and invoked with three arguments: (value, other, index|key).
   *
   * **Note:** This method supports comparing properties of arrays, booleans,
   * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
   * and DOM nodes are **not** supported. Provide a customizer function to extend
   * support for comparing other values.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Function} [customizer] The function to customize value comparisons.
   * @param {*} [thisArg] The `this` binding of `customizer`.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   * @example
   *
   * var object = { 'user': 'fred', 'age': 40 };
   *
   * _.isMatch(object, { 'age': 40 });
   * // => true
   *
   * _.isMatch(object, { 'age': 36 });
   * // => false
   *
   * // using a customizer callback
   * var object = { 'greeting': 'hello' };
   * var source = { 'greeting': 'hi' };
   *
   * _.isMatch(object, source, function(value, other) {
   *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
   * });
   * // => true
   */
  function isMatch(object, source, customizer, thisArg) {
    customizer = typeof customizer == 'function' ? (0, _lodashInternalBindCallback['default'])(customizer, thisArg, 3) : undefined;
    return (0, _lodashInternalBaseIsMatch['default'])(object, (0, _lodashInternalGetMatchData['default'])(source), customizer);
  }

  exports['default'] = isMatch;
});
define('lodash/lang/isNaN', ['exports', 'lodash/lang/isNumber'], function (exports, _lodashLangIsNumber) {
  'use strict';

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
   * which returns `true` for `undefined` and other non-numeric values.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
    return (0, _lodashLangIsNumber['default'])(value) && value != +value;
  }

  exports['default'] = isNaN;
});
define('lodash/lang/isNative', ['exports', 'lodash/lang/isFunction', 'lodash/internal/isObjectLike'], function (exports, _lodashLangIsFunction, _lodashInternalIsObjectLike) {
  'use strict';

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var fnToString = Function.prototype.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  /**
   * Checks if `value` is a native function.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
   * @example
   *
   * _.isNative(Array.prototype.push);
   * // => true
   *
   * _.isNative(_);
   * // => false
   */
  function isNative(value) {
    if (value == null) {
      return false;
    }
    if ((0, _lodashLangIsFunction['default'])(value)) {
      return reIsNative.test(fnToString.call(value));
    }
    return (0, _lodashInternalIsObjectLike['default'])(value) && reIsHostCtor.test(value);
  }

  exports['default'] = isNative;
});
define("lodash/lang/isNull", ["exports"], function (exports) {
  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  "use strict";

  function isNull(value) {
    return value === null;
  }

  exports["default"] = isNull;
});
define('lodash/lang/isNumber', ['exports', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var numberTag = '[object Number]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
   * as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isNumber(8.4);
   * // => true
   *
   * _.isNumber(NaN);
   * // => true
   *
   * _.isNumber('8.4');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' || (0, _lodashInternalIsObjectLike['default'])(value) && objToString.call(value) == numberTag;
  }

  exports['default'] = isNumber;
});
define('lodash/lang/isObject', ['exports'], function (exports) {
  /**
   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(1);
   * // => false
   */
  'use strict';

  function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  exports['default'] = isObject;
});
define('lodash/lang/isPlainObject', ['exports', 'lodash/internal/baseForIn', 'lodash/lang/isArguments', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalBaseForIn, _lodashLangIsArguments, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var objectTag = '[object Object]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * **Note:** This method assumes objects created by the `Object` constructor
   * have no inherited enumerable properties.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    var Ctor;

    // Exit early for non `Object` objects.
    if (!((0, _lodashInternalIsObjectLike['default'])(value) && objToString.call(value) == objectTag && !(0, _lodashLangIsArguments['default'])(value)) || !hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor))) {
      return false;
    }
    // IE < 9 iterates inherited properties before own properties. If the first
    // iterated property is an object's own property then there are no inherited
    // enumerable properties.
    var result;
    // In most environments an object's own properties are iterated before
    // its inherited properties. If the last iterated property is an object's
    // own property then there are no inherited enumerable properties.
    (0, _lodashInternalBaseForIn['default'])(value, function (subValue, key) {
      result = key;
    });
    return result === undefined || hasOwnProperty.call(value, result);
  }

  exports['default'] = isPlainObject;
});
define('lodash/lang/isRegExp', ['exports', 'lodash/lang/isObject'], function (exports, _lodashLangIsObject) {
  'use strict';

  /** `Object#toString` result references. */
  var regexpTag = '[object RegExp]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  function isRegExp(value) {
    return (0, _lodashLangIsObject['default'])(value) && objToString.call(value) == regexpTag;
  }

  exports['default'] = isRegExp;
});
define('lodash/lang/isString', ['exports', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsObjectLike) {
  'use strict';

  /** `Object#toString` result references. */
  var stringTag = '[object String]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' || (0, _lodashInternalIsObjectLike['default'])(value) && objToString.call(value) == stringTag;
  }

  exports['default'] = isString;
});
define('lodash/lang/isTypedArray', ['exports', 'lodash/internal/isLength', 'lodash/internal/isObjectLike'], function (exports, _lodashInternalIsLength, _lodashInternalIsObjectLike) {
    'use strict';

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    /** Used for native method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
        return (0, _lodashInternalIsObjectLike['default'])(value) && (0, _lodashInternalIsLength['default'])(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    exports['default'] = isTypedArray;
});
define("lodash/lang/isUndefined", ["exports"], function (exports) {
  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  "use strict";

  function isUndefined(value) {
    return value === undefined;
  }

  exports["default"] = isUndefined;
});
define("lodash/lang/lt", ["exports"], function (exports) {
  /**
   * Checks if `value` is less than `other`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
   * @example
   *
   * _.lt(1, 3);
   * // => true
   *
   * _.lt(3, 3);
   * // => false
   *
   * _.lt(3, 1);
   * // => false
   */
  "use strict";

  function lt(value, other) {
    return value < other;
  }

  exports["default"] = lt;
});
define("lodash/lang/lte", ["exports"], function (exports) {
  /**
   * Checks if `value` is less than or equal to `other`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
   * @example
   *
   * _.lte(1, 3);
   * // => true
   *
   * _.lte(3, 3);
   * // => true
   *
   * _.lte(3, 1);
   * // => false
   */
  "use strict";

  function lte(value, other) {
    return value <= other;
  }

  exports["default"] = lte;
});
define('lodash/lang/toArray', ['exports', 'lodash/internal/arrayCopy', 'lodash/internal/getLength', 'lodash/internal/isLength', 'lodash/object/values'], function (exports, _lodashInternalArrayCopy, _lodashInternalGetLength, _lodashInternalIsLength, _lodashObjectValues) {
  'use strict';

  /**
   * Converts `value` to an array.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * (function() {
   *   return _.toArray(arguments).slice(1);
   * }(1, 2, 3));
   * // => [2, 3]
   */
  function toArray(value) {
    var length = value ? (0, _lodashInternalGetLength['default'])(value) : 0;
    if (!(0, _lodashInternalIsLength['default'])(length)) {
      return (0, _lodashObjectValues['default'])(value);
    }
    if (!length) {
      return [];
    }
    return (0, _lodashInternalArrayCopy['default'])(value);
  }

  exports['default'] = toArray;
});
define('lodash/lang/toPlainObject', ['exports', 'lodash/internal/baseCopy', 'lodash/object/keysIn'], function (exports, _lodashInternalBaseCopy, _lodashObjectKeysIn) {
  'use strict';

  /**
   * Converts `value` to a plain object flattening inherited enumerable
   * properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return (0, _lodashInternalBaseCopy['default'])(value, (0, _lodashObjectKeysIn['default'])(value));
  }

  exports['default'] = toPlainObject;
});
define('lodash/lodash', ['exports', 'lodash/array', 'lodash/chain', 'lodash/collection', 'lodash/date', 'lodash/function', 'lodash/lang', 'lodash/math', 'lodash/number', 'lodash/object', 'lodash/string', 'lodash/utility', 'lodash/internal/LazyWrapper', 'lodash/internal/LodashWrapper', 'lodash/internal/arrayEach', 'lodash/internal/arrayPush', 'lodash/internal/baseCallback', 'lodash/internal/baseForOwn', 'lodash/internal/baseFunctions', 'lodash/internal/baseMatches', 'lodash/internal/createHybridWrapper', 'lodash/utility/identity', 'lodash/lang/isArray', 'lodash/lang/isObject', 'lodash/object/keys', 'lodash/array/last', 'lodash/internal/lazyClone', 'lodash/internal/lazyReverse', 'lodash/internal/lazyValue', 'lodash/chain/lodash', 'lodash/utility/mixin', 'lodash/utility/property', 'lodash/internal/realNames', 'lodash/support', 'lodash/chain/thru'], function (exports, _lodashArray, _lodashChain, _lodashCollection, _lodashDate, _lodashFunction, _lodashLang, _lodashMath, _lodashNumber, _lodashObject, _lodashString, _lodashUtility, _lodashInternalLazyWrapper, _lodashInternalLodashWrapper, _lodashInternalArrayEach, _lodashInternalArrayPush, _lodashInternalBaseCallback, _lodashInternalBaseForOwn, _lodashInternalBaseFunctions, _lodashInternalBaseMatches, _lodashInternalCreateHybridWrapper, _lodashUtilityIdentity, _lodashLangIsArray, _lodashLangIsObject, _lodashObjectKeys, _lodashArrayLast, _lodashInternalLazyClone, _lodashInternalLazyReverse, _lodashInternalLazyValue, _lodashChainLodash, _lodashUtilityMixin, _lodashUtilityProperty, _lodashInternalRealNames, _lodashSupport, _lodashChainThru) {
  /**
   * @license
   * lodash 3.10.1 (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize modern exports="es" -o ./`
   * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   * Available under MIT license <https://lodash.com/license>
   */
  'use strict';

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_KEY_FLAG = 2;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_MAP_FLAG = 2;

  /** Used for native method references. */
  var arrayProto = Array.prototype,
      stringProto = String.prototype;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor,
      nativeMax = Math.max,
      nativeMin = Math.min;

  /** Used as references for `-Infinity` and `Infinity`. */
  var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

  // wrap `_.mixin` so it works when provided only one argument
  var mixin = (function (func) {
    return function (object, source, options) {
      if (options == null) {
        var isObj = (0, _lodashLangIsObject['default'])(source),
            props = isObj && (0, _lodashObjectKeys['default'])(source),
            methodNames = props && props.length && (0, _lodashInternalBaseFunctions['default'])(source, props);

        if (!(methodNames ? methodNames.length : isObj)) {
          options = source;
          source = object;
          object = this;
        }
      }
      return func(object, source, options);
    };
  })(_lodashUtilityMixin['default']);

  // Add functions that return wrapped values when chaining.
  _lodashChainLodash['default'].after = _lodashFunction['default'].after;
  _lodashChainLodash['default'].ary = _lodashFunction['default'].ary;
  _lodashChainLodash['default'].assign = _lodashObject['default'].assign;
  _lodashChainLodash['default'].at = _lodashCollection['default'].at;
  _lodashChainLodash['default'].before = _lodashFunction['default'].before;
  _lodashChainLodash['default'].bind = _lodashFunction['default'].bind;
  _lodashChainLodash['default'].bindAll = _lodashFunction['default'].bindAll;
  _lodashChainLodash['default'].bindKey = _lodashFunction['default'].bindKey;
  _lodashChainLodash['default'].callback = _lodashUtility['default'].callback;
  _lodashChainLodash['default'].chain = _lodashChain['default'].chain;
  _lodashChainLodash['default'].chunk = _lodashArray['default'].chunk;
  _lodashChainLodash['default'].compact = _lodashArray['default'].compact;
  _lodashChainLodash['default'].constant = _lodashUtility['default'].constant;
  _lodashChainLodash['default'].countBy = _lodashCollection['default'].countBy;
  _lodashChainLodash['default'].create = _lodashObject['default'].create;
  _lodashChainLodash['default'].curry = _lodashFunction['default'].curry;
  _lodashChainLodash['default'].curryRight = _lodashFunction['default'].curryRight;
  _lodashChainLodash['default'].debounce = _lodashFunction['default'].debounce;
  _lodashChainLodash['default'].defaults = _lodashObject['default'].defaults;
  _lodashChainLodash['default'].defaultsDeep = _lodashObject['default'].defaultsDeep;
  _lodashChainLodash['default'].defer = _lodashFunction['default'].defer;
  _lodashChainLodash['default'].delay = _lodashFunction['default'].delay;
  _lodashChainLodash['default'].difference = _lodashArray['default'].difference;
  _lodashChainLodash['default'].drop = _lodashArray['default'].drop;
  _lodashChainLodash['default'].dropRight = _lodashArray['default'].dropRight;
  _lodashChainLodash['default'].dropRightWhile = _lodashArray['default'].dropRightWhile;
  _lodashChainLodash['default'].dropWhile = _lodashArray['default'].dropWhile;
  _lodashChainLodash['default'].fill = _lodashArray['default'].fill;
  _lodashChainLodash['default'].filter = _lodashCollection['default'].filter;
  _lodashChainLodash['default'].flatten = _lodashArray['default'].flatten;
  _lodashChainLodash['default'].flattenDeep = _lodashArray['default'].flattenDeep;
  _lodashChainLodash['default'].flow = _lodashFunction['default'].flow;
  _lodashChainLodash['default'].flowRight = _lodashFunction['default'].flowRight;
  _lodashChainLodash['default'].forEach = _lodashCollection['default'].forEach;
  _lodashChainLodash['default'].forEachRight = _lodashCollection['default'].forEachRight;
  _lodashChainLodash['default'].forIn = _lodashObject['default'].forIn;
  _lodashChainLodash['default'].forInRight = _lodashObject['default'].forInRight;
  _lodashChainLodash['default'].forOwn = _lodashObject['default'].forOwn;
  _lodashChainLodash['default'].forOwnRight = _lodashObject['default'].forOwnRight;
  _lodashChainLodash['default'].functions = _lodashObject['default'].functions;
  _lodashChainLodash['default'].groupBy = _lodashCollection['default'].groupBy;
  _lodashChainLodash['default'].indexBy = _lodashCollection['default'].indexBy;
  _lodashChainLodash['default'].initial = _lodashArray['default'].initial;
  _lodashChainLodash['default'].intersection = _lodashArray['default'].intersection;
  _lodashChainLodash['default'].invert = _lodashObject['default'].invert;
  _lodashChainLodash['default'].invoke = _lodashCollection['default'].invoke;
  _lodashChainLodash['default'].keys = _lodashObjectKeys['default'];
  _lodashChainLodash['default'].keysIn = _lodashObject['default'].keysIn;
  _lodashChainLodash['default'].map = _lodashCollection['default'].map;
  _lodashChainLodash['default'].mapKeys = _lodashObject['default'].mapKeys;
  _lodashChainLodash['default'].mapValues = _lodashObject['default'].mapValues;
  _lodashChainLodash['default'].matches = _lodashUtility['default'].matches;
  _lodashChainLodash['default'].matchesProperty = _lodashUtility['default'].matchesProperty;
  _lodashChainLodash['default'].memoize = _lodashFunction['default'].memoize;
  _lodashChainLodash['default'].merge = _lodashObject['default'].merge;
  _lodashChainLodash['default'].method = _lodashUtility['default'].method;
  _lodashChainLodash['default'].methodOf = _lodashUtility['default'].methodOf;
  _lodashChainLodash['default'].mixin = mixin;
  _lodashChainLodash['default'].modArgs = _lodashFunction['default'].modArgs;
  _lodashChainLodash['default'].negate = _lodashFunction['default'].negate;
  _lodashChainLodash['default'].omit = _lodashObject['default'].omit;
  _lodashChainLodash['default'].once = _lodashFunction['default'].once;
  _lodashChainLodash['default'].pairs = _lodashObject['default'].pairs;
  _lodashChainLodash['default'].partial = _lodashFunction['default'].partial;
  _lodashChainLodash['default'].partialRight = _lodashFunction['default'].partialRight;
  _lodashChainLodash['default'].partition = _lodashCollection['default'].partition;
  _lodashChainLodash['default'].pick = _lodashObject['default'].pick;
  _lodashChainLodash['default'].pluck = _lodashCollection['default'].pluck;
  _lodashChainLodash['default'].property = _lodashUtilityProperty['default'];
  _lodashChainLodash['default'].propertyOf = _lodashUtility['default'].propertyOf;
  _lodashChainLodash['default'].pull = _lodashArray['default'].pull;
  _lodashChainLodash['default'].pullAt = _lodashArray['default'].pullAt;
  _lodashChainLodash['default'].range = _lodashUtility['default'].range;
  _lodashChainLodash['default'].rearg = _lodashFunction['default'].rearg;
  _lodashChainLodash['default'].reject = _lodashCollection['default'].reject;
  _lodashChainLodash['default'].remove = _lodashArray['default'].remove;
  _lodashChainLodash['default'].rest = _lodashArray['default'].rest;
  _lodashChainLodash['default'].restParam = _lodashFunction['default'].restParam;
  _lodashChainLodash['default'].set = _lodashObject['default'].set;
  _lodashChainLodash['default'].shuffle = _lodashCollection['default'].shuffle;
  _lodashChainLodash['default'].slice = _lodashArray['default'].slice;
  _lodashChainLodash['default'].sortBy = _lodashCollection['default'].sortBy;
  _lodashChainLodash['default'].sortByAll = _lodashCollection['default'].sortByAll;
  _lodashChainLodash['default'].sortByOrder = _lodashCollection['default'].sortByOrder;
  _lodashChainLodash['default'].spread = _lodashFunction['default'].spread;
  _lodashChainLodash['default'].take = _lodashArray['default'].take;
  _lodashChainLodash['default'].takeRight = _lodashArray['default'].takeRight;
  _lodashChainLodash['default'].takeRightWhile = _lodashArray['default'].takeRightWhile;
  _lodashChainLodash['default'].takeWhile = _lodashArray['default'].takeWhile;
  _lodashChainLodash['default'].tap = _lodashChain['default'].tap;
  _lodashChainLodash['default'].throttle = _lodashFunction['default'].throttle;
  _lodashChainLodash['default'].thru = _lodashChainThru['default'];
  _lodashChainLodash['default'].times = _lodashUtility['default'].times;
  _lodashChainLodash['default'].toArray = _lodashLang['default'].toArray;
  _lodashChainLodash['default'].toPlainObject = _lodashLang['default'].toPlainObject;
  _lodashChainLodash['default'].transform = _lodashObject['default'].transform;
  _lodashChainLodash['default'].union = _lodashArray['default'].union;
  _lodashChainLodash['default'].uniq = _lodashArray['default'].uniq;
  _lodashChainLodash['default'].unzip = _lodashArray['default'].unzip;
  _lodashChainLodash['default'].unzipWith = _lodashArray['default'].unzipWith;
  _lodashChainLodash['default'].values = _lodashObject['default'].values;
  _lodashChainLodash['default'].valuesIn = _lodashObject['default'].valuesIn;
  _lodashChainLodash['default'].where = _lodashCollection['default'].where;
  _lodashChainLodash['default'].without = _lodashArray['default'].without;
  _lodashChainLodash['default'].wrap = _lodashFunction['default'].wrap;
  _lodashChainLodash['default'].xor = _lodashArray['default'].xor;
  _lodashChainLodash['default'].zip = _lodashArray['default'].zip;
  _lodashChainLodash['default'].zipObject = _lodashArray['default'].zipObject;
  _lodashChainLodash['default'].zipWith = _lodashArray['default'].zipWith;

  // Add aliases.
  _lodashChainLodash['default'].backflow = _lodashFunction['default'].flowRight;
  _lodashChainLodash['default'].collect = _lodashCollection['default'].map;
  _lodashChainLodash['default'].compose = _lodashFunction['default'].flowRight;
  _lodashChainLodash['default'].each = _lodashCollection['default'].forEach;
  _lodashChainLodash['default'].eachRight = _lodashCollection['default'].forEachRight;
  _lodashChainLodash['default'].extend = _lodashObject['default'].assign;
  _lodashChainLodash['default'].iteratee = _lodashUtility['default'].callback;
  _lodashChainLodash['default'].methods = _lodashObject['default'].functions;
  _lodashChainLodash['default'].object = _lodashArray['default'].zipObject;
  _lodashChainLodash['default'].select = _lodashCollection['default'].filter;
  _lodashChainLodash['default'].tail = _lodashArray['default'].rest;
  _lodashChainLodash['default'].unique = _lodashArray['default'].uniq;

  // Add functions to `lodash.prototype`.
  mixin(_lodashChainLodash['default'], _lodashChainLodash['default']);

  // Add functions that return unwrapped values when chaining.
  _lodashChainLodash['default'].add = _lodashMath['default'].add;
  _lodashChainLodash['default'].attempt = _lodashUtility['default'].attempt;
  _lodashChainLodash['default'].camelCase = _lodashString['default'].camelCase;
  _lodashChainLodash['default'].capitalize = _lodashString['default'].capitalize;
  _lodashChainLodash['default'].ceil = _lodashMath['default'].ceil;
  _lodashChainLodash['default'].clone = _lodashLang['default'].clone;
  _lodashChainLodash['default'].cloneDeep = _lodashLang['default'].cloneDeep;
  _lodashChainLodash['default'].deburr = _lodashString['default'].deburr;
  _lodashChainLodash['default'].endsWith = _lodashString['default'].endsWith;
  _lodashChainLodash['default'].escape = _lodashString['default'].escape;
  _lodashChainLodash['default'].escapeRegExp = _lodashString['default'].escapeRegExp;
  _lodashChainLodash['default'].every = _lodashCollection['default'].every;
  _lodashChainLodash['default'].find = _lodashCollection['default'].find;
  _lodashChainLodash['default'].findIndex = _lodashArray['default'].findIndex;
  _lodashChainLodash['default'].findKey = _lodashObject['default'].findKey;
  _lodashChainLodash['default'].findLast = _lodashCollection['default'].findLast;
  _lodashChainLodash['default'].findLastIndex = _lodashArray['default'].findLastIndex;
  _lodashChainLodash['default'].findLastKey = _lodashObject['default'].findLastKey;
  _lodashChainLodash['default'].findWhere = _lodashCollection['default'].findWhere;
  _lodashChainLodash['default'].first = _lodashArray['default'].first;
  _lodashChainLodash['default'].floor = _lodashMath['default'].floor;
  _lodashChainLodash['default'].get = _lodashObject['default'].get;
  _lodashChainLodash['default'].gt = _lodashLang['default'].gt;
  _lodashChainLodash['default'].gte = _lodashLang['default'].gte;
  _lodashChainLodash['default'].has = _lodashObject['default'].has;
  _lodashChainLodash['default'].identity = _lodashUtilityIdentity['default'];
  _lodashChainLodash['default'].includes = _lodashCollection['default'].includes;
  _lodashChainLodash['default'].indexOf = _lodashArray['default'].indexOf;
  _lodashChainLodash['default'].inRange = _lodashNumber['default'].inRange;
  _lodashChainLodash['default'].isArguments = _lodashLang['default'].isArguments;
  _lodashChainLodash['default'].isArray = _lodashLangIsArray['default'];
  _lodashChainLodash['default'].isBoolean = _lodashLang['default'].isBoolean;
  _lodashChainLodash['default'].isDate = _lodashLang['default'].isDate;
  _lodashChainLodash['default'].isElement = _lodashLang['default'].isElement;
  _lodashChainLodash['default'].isEmpty = _lodashLang['default'].isEmpty;
  _lodashChainLodash['default'].isEqual = _lodashLang['default'].isEqual;
  _lodashChainLodash['default'].isError = _lodashLang['default'].isError;
  _lodashChainLodash['default'].isFinite = _lodashLang['default'].isFinite;
  _lodashChainLodash['default'].isFunction = _lodashLang['default'].isFunction;
  _lodashChainLodash['default'].isMatch = _lodashLang['default'].isMatch;
  _lodashChainLodash['default'].isNaN = _lodashLang['default'].isNaN;
  _lodashChainLodash['default'].isNative = _lodashLang['default'].isNative;
  _lodashChainLodash['default'].isNull = _lodashLang['default'].isNull;
  _lodashChainLodash['default'].isNumber = _lodashLang['default'].isNumber;
  _lodashChainLodash['default'].isObject = _lodashLangIsObject['default'];
  _lodashChainLodash['default'].isPlainObject = _lodashLang['default'].isPlainObject;
  _lodashChainLodash['default'].isRegExp = _lodashLang['default'].isRegExp;
  _lodashChainLodash['default'].isString = _lodashLang['default'].isString;
  _lodashChainLodash['default'].isTypedArray = _lodashLang['default'].isTypedArray;
  _lodashChainLodash['default'].isUndefined = _lodashLang['default'].isUndefined;
  _lodashChainLodash['default'].kebabCase = _lodashString['default'].kebabCase;
  _lodashChainLodash['default'].last = _lodashArrayLast['default'];
  _lodashChainLodash['default'].lastIndexOf = _lodashArray['default'].lastIndexOf;
  _lodashChainLodash['default'].lt = _lodashLang['default'].lt;
  _lodashChainLodash['default'].lte = _lodashLang['default'].lte;
  _lodashChainLodash['default'].max = _lodashMath['default'].max;
  _lodashChainLodash['default'].min = _lodashMath['default'].min;
  _lodashChainLodash['default'].noop = _lodashUtility['default'].noop;
  _lodashChainLodash['default'].now = _lodashDate['default'].now;
  _lodashChainLodash['default'].pad = _lodashString['default'].pad;
  _lodashChainLodash['default'].padLeft = _lodashString['default'].padLeft;
  _lodashChainLodash['default'].padRight = _lodashString['default'].padRight;
  _lodashChainLodash['default'].parseInt = _lodashString['default'].parseInt;
  _lodashChainLodash['default'].random = _lodashNumber['default'].random;
  _lodashChainLodash['default'].reduce = _lodashCollection['default'].reduce;
  _lodashChainLodash['default'].reduceRight = _lodashCollection['default'].reduceRight;
  _lodashChainLodash['default'].repeat = _lodashString['default'].repeat;
  _lodashChainLodash['default'].result = _lodashObject['default'].result;
  _lodashChainLodash['default'].round = _lodashMath['default'].round;
  _lodashChainLodash['default'].size = _lodashCollection['default'].size;
  _lodashChainLodash['default'].snakeCase = _lodashString['default'].snakeCase;
  _lodashChainLodash['default'].some = _lodashCollection['default'].some;
  _lodashChainLodash['default'].sortedIndex = _lodashArray['default'].sortedIndex;
  _lodashChainLodash['default'].sortedLastIndex = _lodashArray['default'].sortedLastIndex;
  _lodashChainLodash['default'].startCase = _lodashString['default'].startCase;
  _lodashChainLodash['default'].startsWith = _lodashString['default'].startsWith;
  _lodashChainLodash['default'].sum = _lodashMath['default'].sum;
  _lodashChainLodash['default'].template = _lodashString['default'].template;
  _lodashChainLodash['default'].trim = _lodashString['default'].trim;
  _lodashChainLodash['default'].trimLeft = _lodashString['default'].trimLeft;
  _lodashChainLodash['default'].trimRight = _lodashString['default'].trimRight;
  _lodashChainLodash['default'].trunc = _lodashString['default'].trunc;
  _lodashChainLodash['default'].unescape = _lodashString['default'].unescape;
  _lodashChainLodash['default'].uniqueId = _lodashUtility['default'].uniqueId;
  _lodashChainLodash['default'].words = _lodashString['default'].words;

  // Add aliases.
  _lodashChainLodash['default'].all = _lodashCollection['default'].every;
  _lodashChainLodash['default'].any = _lodashCollection['default'].some;
  _lodashChainLodash['default'].contains = _lodashCollection['default'].includes;
  _lodashChainLodash['default'].eq = _lodashLang['default'].isEqual;
  _lodashChainLodash['default'].detect = _lodashCollection['default'].find;
  _lodashChainLodash['default'].foldl = _lodashCollection['default'].reduce;
  _lodashChainLodash['default'].foldr = _lodashCollection['default'].reduceRight;
  _lodashChainLodash['default'].head = _lodashArray['default'].first;
  _lodashChainLodash['default'].include = _lodashCollection['default'].includes;
  _lodashChainLodash['default'].inject = _lodashCollection['default'].reduce;

  mixin(_lodashChainLodash['default'], (function () {
    var source = {};
    (0, _lodashInternalBaseForOwn['default'])(_lodashChainLodash['default'], function (func, methodName) {
      if (!_lodashChainLodash['default'].prototype[methodName]) {
        source[methodName] = func;
      }
    });
    return source;
  })(), false);

  // Add functions capable of returning wrapped and unwrapped values when chaining.
  _lodashChainLodash['default'].sample = _lodashCollection['default'].sample;

  _lodashChainLodash['default'].prototype.sample = function (n) {
    if (!this.__chain__ && n == null) {
      return _lodashCollection['default'].sample(this.value());
    }
    return this.thru(function (value) {
      return _lodashCollection['default'].sample(value, n);
    });
  };

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type string
   */
  _lodashChainLodash['default'].VERSION = VERSION;

  _lodashChainLodash['default'].support = _lodashSupport['default'];
  (_lodashChainLodash['default'].templateSettings = _lodashString['default'].templateSettings).imports._ = _lodashChainLodash['default'];

  // Assign default placeholders.
  (0, _lodashInternalArrayEach['default'])(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
    _lodashChainLodash['default'][methodName].placeholder = _lodashChainLodash['default'];
  });

  // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
  (0, _lodashInternalArrayEach['default'])(['drop', 'take'], function (methodName, index) {
    _lodashInternalLazyWrapper['default'].prototype[methodName] = function (n) {
      var filtered = this.__filtered__;
      if (filtered && !index) {
        return new _lodashInternalLazyWrapper['default'](this);
      }
      n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

      var result = this.clone();
      if (filtered) {
        result.__takeCount__ = nativeMin(result.__takeCount__, n);
      } else {
        result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
      }
      return result;
    };

    _lodashInternalLazyWrapper['default'].prototype[methodName + 'Right'] = function (n) {
      return this.reverse()[methodName](n).reverse();
    };
  });

  // Add `LazyWrapper` methods that accept an `iteratee` value.
  (0, _lodashInternalArrayEach['default'])(['filter', 'map', 'takeWhile'], function (methodName, index) {
    var type = index + 1,
        isFilter = type != LAZY_MAP_FLAG;

    _lodashInternalLazyWrapper['default'].prototype[methodName] = function (iteratee, thisArg) {
      var result = this.clone();
      result.__iteratees__.push({ 'iteratee': (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 1), 'type': type });
      result.__filtered__ = result.__filtered__ || isFilter;
      return result;
    };
  });

  // Add `LazyWrapper` methods for `_.first` and `_.last`.
  (0, _lodashInternalArrayEach['default'])(['first', 'last'], function (methodName, index) {
    var takeName = 'take' + (index ? 'Right' : '');

    _lodashInternalLazyWrapper['default'].prototype[methodName] = function () {
      return this[takeName](1).value()[0];
    };
  });

  // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
  (0, _lodashInternalArrayEach['default'])(['initial', 'rest'], function (methodName, index) {
    var dropName = 'drop' + (index ? '' : 'Right');

    _lodashInternalLazyWrapper['default'].prototype[methodName] = function () {
      return this.__filtered__ ? new _lodashInternalLazyWrapper['default'](this) : this[dropName](1);
    };
  });

  // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
  (0, _lodashInternalArrayEach['default'])(['pluck', 'where'], function (methodName, index) {
    var operationName = index ? 'filter' : 'map',
        createCallback = index ? _lodashInternalBaseMatches['default'] : _lodashUtilityProperty['default'];

    _lodashInternalLazyWrapper['default'].prototype[methodName] = function (value) {
      return this[operationName](createCallback(value));
    };
  });

  _lodashInternalLazyWrapper['default'].prototype.compact = function () {
    return this.filter(_lodashUtilityIdentity['default']);
  };

  _lodashInternalLazyWrapper['default'].prototype.reject = function (predicate, thisArg) {
    predicate = (0, _lodashInternalBaseCallback['default'])(predicate, thisArg, 1);
    return this.filter(function (value) {
      return !predicate(value);
    });
  };

  _lodashInternalLazyWrapper['default'].prototype.slice = function (start, end) {
    start = start == null ? 0 : +start || 0;

    var result = this;
    if (result.__filtered__ && (start > 0 || end < 0)) {
      return new _lodashInternalLazyWrapper['default'](result);
    }
    if (start < 0) {
      result = result.takeRight(-start);
    } else if (start) {
      result = result.drop(start);
    }
    if (end !== undefined) {
      end = +end || 0;
      result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    }
    return result;
  };

  _lodashInternalLazyWrapper['default'].prototype.takeRightWhile = function (predicate, thisArg) {
    return this.reverse().takeWhile(predicate, thisArg).reverse();
  };

  _lodashInternalLazyWrapper['default'].prototype.toArray = function () {
    return this.take(POSITIVE_INFINITY);
  };

  // Add `LazyWrapper` methods to `lodash.prototype`.
  (0, _lodashInternalBaseForOwn['default'])(_lodashInternalLazyWrapper['default'].prototype, function (func, methodName) {
    var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
        retUnwrapped = /^(?:first|last)$/.test(methodName),
        lodashFunc = _lodashChainLodash['default'][retUnwrapped ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName];

    if (!lodashFunc) {
      return;
    }
    _lodashChainLodash['default'].prototype[methodName] = function () {
      var args = retUnwrapped ? [1] : arguments,
          chainAll = this.__chain__,
          value = this.__wrapped__,
          isHybrid = !!this.__actions__.length,
          isLazy = value instanceof _lodashInternalLazyWrapper['default'],
          iteratee = args[0],
          useLazy = isLazy || (0, _lodashLangIsArray['default'])(value);

      if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
        // Avoid lazy use if the iteratee has a "length" value other than `1`.
        isLazy = useLazy = false;
      }
      var interceptor = function interceptor(value) {
        return retUnwrapped && chainAll ? lodashFunc(value, 1)[0] : lodashFunc.apply(undefined, (0, _lodashInternalArrayPush['default'])([value], args));
      };

      var action = { 'func': _lodashChainThru['default'], 'args': [interceptor], 'thisArg': undefined },
          onlyLazy = isLazy && !isHybrid;

      if (retUnwrapped && !chainAll) {
        if (onlyLazy) {
          value = value.clone();
          value.__actions__.push(action);
          return func.call(value);
        }
        return lodashFunc.call(undefined, this.value())[0];
      }
      if (!retUnwrapped && useLazy) {
        value = onlyLazy ? value : new _lodashInternalLazyWrapper['default'](this);
        var result = func.apply(value, args);
        result.__actions__.push(action);
        return new _lodashInternalLodashWrapper['default'](result, chainAll);
      }
      return this.thru(interceptor);
    };
  });

  // Add `Array` and `String` methods to `lodash.prototype`.
  (0, _lodashInternalArrayEach['default'])(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function (methodName) {
    var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
        retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

    _lodashChainLodash['default'].prototype[methodName] = function () {
      var args = arguments;
      if (retUnwrapped && !this.__chain__) {
        return func.apply(this.value(), args);
      }
      return this[chainName](function (value) {
        return func.apply(value, args);
      });
    };
  });

  // Map minified function names to their real names.
  (0, _lodashInternalBaseForOwn['default'])(_lodashInternalLazyWrapper['default'].prototype, function (func, methodName) {
    var lodashFunc = _lodashChainLodash['default'][methodName];
    if (lodashFunc) {
      var key = lodashFunc.name + '',
          names = _lodashInternalRealNames['default'][key] || (_lodashInternalRealNames['default'][key] = []);

      names.push({ 'name': methodName, 'func': lodashFunc });
    }
  });

  _lodashInternalRealNames['default'][(0, _lodashInternalCreateHybridWrapper['default'])(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

  // Add functions to the lazy wrapper.
  _lodashInternalLazyWrapper['default'].prototype.clone = _lodashInternalLazyClone['default'];
  _lodashInternalLazyWrapper['default'].prototype.reverse = _lodashInternalLazyReverse['default'];
  _lodashInternalLazyWrapper['default'].prototype.value = _lodashInternalLazyValue['default'];

  // Add chaining functions to the `lodash` wrapper.
  _lodashChainLodash['default'].prototype.chain = _lodashChain['default'].wrapperChain;
  _lodashChainLodash['default'].prototype.commit = _lodashChain['default'].commit;
  _lodashChainLodash['default'].prototype.concat = _lodashChain['default'].concat;
  _lodashChainLodash['default'].prototype.plant = _lodashChain['default'].plant;
  _lodashChainLodash['default'].prototype.reverse = _lodashChain['default'].reverse;
  _lodashChainLodash['default'].prototype.toString = _lodashChain['default'].toString;
  _lodashChainLodash['default'].prototype.run = _lodashChainLodash['default'].prototype.toJSON = _lodashChainLodash['default'].prototype.valueOf = _lodashChainLodash['default'].prototype.value = _lodashChain['default'].value;

  // Add function aliases to the `lodash` wrapper.
  _lodashChainLodash['default'].prototype.collect = _lodashChainLodash['default'].prototype.map;
  _lodashChainLodash['default'].prototype.head = _lodashChainLodash['default'].prototype.first;
  _lodashChainLodash['default'].prototype.select = _lodashChainLodash['default'].prototype.filter;
  _lodashChainLodash['default'].prototype.tail = _lodashChainLodash['default'].prototype.rest;

  exports['default'] = _lodashChainLodash['default'];
});
define('lodash/math', ['exports', 'lodash/math/add', 'lodash/math/ceil', 'lodash/math/floor', 'lodash/math/max', 'lodash/math/min', 'lodash/math/round', 'lodash/math/sum'], function (exports, _lodashMathAdd, _lodashMathCeil, _lodashMathFloor, _lodashMathMax, _lodashMathMin, _lodashMathRound, _lodashMathSum) {
  'use strict';

  exports['default'] = {
    'add': _lodashMathAdd['default'],
    'ceil': _lodashMathCeil['default'],
    'floor': _lodashMathFloor['default'],
    'max': _lodashMathMax['default'],
    'min': _lodashMathMin['default'],
    'round': _lodashMathRound['default'],
    'sum': _lodashMathSum['default']
  };
});
define("lodash/math/add", ["exports"], function (exports) {
  /**
   * Adds two numbers.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {number} augend The first number to add.
   * @param {number} addend The second number to add.
   * @returns {number} Returns the sum.
   * @example
   *
   * _.add(6, 4);
   * // => 10
   */
  "use strict";

  function add(augend, addend) {
    return (+augend || 0) + (+addend || 0);
  }

  exports["default"] = add;
});
define('lodash/math/ceil', ['exports', 'lodash/internal/createRound'], function (exports, _lodashInternalCreateRound) {
  'use strict';

  /**
   * Calculates `n` rounded up to `precision`.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {number} n The number to round up.
   * @param {number} [precision=0] The precision to round up to.
   * @returns {number} Returns the rounded up number.
   * @example
   *
   * _.ceil(4.006);
   * // => 5
   *
   * _.ceil(6.004, 2);
   * // => 6.01
   *
   * _.ceil(6040, -2);
   * // => 6100
   */
  var ceil = (0, _lodashInternalCreateRound['default'])('ceil');

  exports['default'] = ceil;
});
define('lodash/math/floor', ['exports', 'lodash/internal/createRound'], function (exports, _lodashInternalCreateRound) {
  'use strict';

  /**
   * Calculates `n` rounded down to `precision`.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {number} n The number to round down.
   * @param {number} [precision=0] The precision to round down to.
   * @returns {number} Returns the rounded down number.
   * @example
   *
   * _.floor(4.006);
   * // => 4
   *
   * _.floor(0.046, 2);
   * // => 0.04
   *
   * _.floor(4060, -2);
   * // => 4000
   */
  var floor = (0, _lodashInternalCreateRound['default'])('floor');

  exports['default'] = floor;
});
define('lodash/math/max', ['exports', 'lodash/internal/createExtremum', 'lodash/lang/gt'], function (exports, _lodashInternalCreateExtremum, _lodashLangGt) {
  'use strict';

  /** Used as references for `-Infinity` and `Infinity`. */
  var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;

  /**
   * Gets the maximum value of `collection`. If `collection` is empty or falsey
   * `-Infinity` is returned. If an iteratee function is provided it's invoked
   * for each value in `collection` to generate the criterion by which the value
   * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
   * arguments: (value, index, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * _.max([4, 2, 8, 6]);
   * // => 8
   *
   * _.max([]);
   * // => -Infinity
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * _.max(users, function(chr) {
   *   return chr.age;
   * });
   * // => { 'user': 'fred', 'age': 40 }
   *
   * // using the `_.property` callback shorthand
   * _.max(users, 'age');
   * // => { 'user': 'fred', 'age': 40 }
   */
  var max = (0, _lodashInternalCreateExtremum['default'])(_lodashLangGt['default'], NEGATIVE_INFINITY);

  exports['default'] = max;
});
define('lodash/math/min', ['exports', 'lodash/internal/createExtremum', 'lodash/lang/lt'], function (exports, _lodashInternalCreateExtremum, _lodashLangLt) {
  'use strict';

  /** Used as references for `-Infinity` and `Infinity`. */
  var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

  /**
   * Gets the minimum value of `collection`. If `collection` is empty or falsey
   * `Infinity` is returned. If an iteratee function is provided it's invoked
   * for each value in `collection` to generate the criterion by which the value
   * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
   * arguments: (value, index, collection).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * _.min([4, 2, 8, 6]);
   * // => 2
   *
   * _.min([]);
   * // => Infinity
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * _.min(users, function(chr) {
   *   return chr.age;
   * });
   * // => { 'user': 'barney', 'age': 36 }
   *
   * // using the `_.property` callback shorthand
   * _.min(users, 'age');
   * // => { 'user': 'barney', 'age': 36 }
   */
  var min = (0, _lodashInternalCreateExtremum['default'])(_lodashLangLt['default'], POSITIVE_INFINITY);

  exports['default'] = min;
});
define('lodash/math/round', ['exports', 'lodash/internal/createRound'], function (exports, _lodashInternalCreateRound) {
  'use strict';

  /**
   * Calculates `n` rounded to `precision`.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {number} n The number to round.
   * @param {number} [precision=0] The precision to round to.
   * @returns {number} Returns the rounded number.
   * @example
   *
   * _.round(4.006);
   * // => 4
   *
   * _.round(4.006, 2);
   * // => 4.01
   *
   * _.round(4060, -2);
   * // => 4100
   */
  var round = (0, _lodashInternalCreateRound['default'])('round');

  exports['default'] = round;
});
define('lodash/math/sum', ['exports', 'lodash/internal/arraySum', 'lodash/internal/baseCallback', 'lodash/internal/baseSum', 'lodash/lang/isArray', 'lodash/internal/isIterateeCall', 'lodash/internal/toIterable'], function (exports, _lodashInternalArraySum, _lodashInternalBaseCallback, _lodashInternalBaseSum, _lodashLangIsArray, _lodashInternalIsIterateeCall, _lodashInternalToIterable) {
  'use strict';

  /**
   * Gets the sum of the values in `collection`.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {number} Returns the sum.
   * @example
   *
   * _.sum([4, 6]);
   * // => 10
   *
   * _.sum({ 'a': 4, 'b': 6 });
   * // => 10
   *
   * var objects = [
   *   { 'n': 4 },
   *   { 'n': 6 }
   * ];
   *
   * _.sum(objects, function(object) {
   *   return object.n;
   * });
   * // => 10
   *
   * // using the `_.property` callback shorthand
   * _.sum(objects, 'n');
   * // => 10
   */
  function sum(collection, iteratee, thisArg) {
    if (thisArg && (0, _lodashInternalIsIterateeCall['default'])(collection, iteratee, thisArg)) {
      iteratee = undefined;
    }
    iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 3);
    return iteratee.length == 1 ? (0, _lodashInternalArraySum['default'])((0, _lodashLangIsArray['default'])(collection) ? collection : (0, _lodashInternalToIterable['default'])(collection), iteratee) : (0, _lodashInternalBaseSum['default'])(collection, iteratee);
  }

  exports['default'] = sum;
});
define('lodash/number', ['exports', 'lodash/number/inRange', 'lodash/number/random'], function (exports, _lodashNumberInRange, _lodashNumberRandom) {
  'use strict';

  exports['default'] = {
    'inRange': _lodashNumberInRange['default'],
    'random': _lodashNumberRandom['default']
  };
});
define("lodash/number/inRange", ["exports"], function (exports) {
  /* Native method references for those with the same name as other `lodash` methods. */
  "use strict";

  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Checks if `n` is between `start` and up to but not including, `end`. If
   * `end` is not specified it's set to `start` with `start` then set to `0`.
   *
   * @static
   * @memberOf _
   * @category Number
   * @param {number} n The number to check.
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
   * @example
   *
   * _.inRange(3, 2, 4);
   * // => true
   *
   * _.inRange(4, 8);
   * // => true
   *
   * _.inRange(4, 2);
   * // => false
   *
   * _.inRange(2, 2);
   * // => false
   *
   * _.inRange(1.2, 2);
   * // => true
   *
   * _.inRange(5.2, 4);
   * // => false
   */
  function inRange(value, start, end) {
    start = +start || 0;
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = +end || 0;
    }
    return value >= nativeMin(start, end) && value < nativeMax(start, end);
  }

  exports["default"] = inRange;
});
define('lodash/number/random', ['exports', 'lodash/internal/baseRandom', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseRandom, _lodashInternalIsIterateeCall) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min,
      nativeRandom = Math.random;

  /**
   * Produces a random number between `min` and `max` (inclusive). If only one
   * argument is provided a number between `0` and the given number is returned.
   * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
   * number is returned instead of an integer.
   *
   * @static
   * @memberOf _
   * @category Number
   * @param {number} [min=0] The minimum possible value.
   * @param {number} [max=1] The maximum possible value.
   * @param {boolean} [floating] Specify returning a floating-point number.
   * @returns {number} Returns the random number.
   * @example
   *
   * _.random(0, 5);
   * // => an integer between 0 and 5
   *
   * _.random(5);
   * // => also an integer between 0 and 5
   *
   * _.random(5, true);
   * // => a floating-point number between 0 and 5
   *
   * _.random(1.2, 5.2);
   * // => a floating-point number between 1.2 and 5.2
   */
  function random(min, max, floating) {
    if (floating && (0, _lodashInternalIsIterateeCall['default'])(min, max, floating)) {
      max = floating = undefined;
    }
    var noMin = min == null,
        noMax = max == null;

    if (floating == null) {
      if (noMax && typeof min == 'boolean') {
        floating = min;
        min = 1;
      } else if (typeof max == 'boolean') {
        floating = max;
        noMax = true;
      }
    }
    if (noMin && noMax) {
      max = 1;
      noMax = false;
    }
    min = +min || 0;
    if (noMax) {
      max = min;
      min = 0;
    } else {
      max = +max || 0;
    }
    if (floating || min % 1 || max % 1) {
      var rand = nativeRandom();
      return nativeMin(min + rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1))), max);
    }
    return (0, _lodashInternalBaseRandom['default'])(min, max);
  }

  exports['default'] = random;
});
define('lodash/object', ['exports', 'lodash/object/assign', 'lodash/object/create', 'lodash/object/defaults', 'lodash/object/defaultsDeep', 'lodash/object/extend', 'lodash/object/findKey', 'lodash/object/findLastKey', 'lodash/object/forIn', 'lodash/object/forInRight', 'lodash/object/forOwn', 'lodash/object/forOwnRight', 'lodash/object/functions', 'lodash/object/get', 'lodash/object/has', 'lodash/object/invert', 'lodash/object/keys', 'lodash/object/keysIn', 'lodash/object/mapKeys', 'lodash/object/mapValues', 'lodash/object/merge', 'lodash/object/methods', 'lodash/object/omit', 'lodash/object/pairs', 'lodash/object/pick', 'lodash/object/result', 'lodash/object/set', 'lodash/object/transform', 'lodash/object/values', 'lodash/object/valuesIn'], function (exports, _lodashObjectAssign, _lodashObjectCreate, _lodashObjectDefaults, _lodashObjectDefaultsDeep, _lodashObjectExtend, _lodashObjectFindKey, _lodashObjectFindLastKey, _lodashObjectForIn, _lodashObjectForInRight, _lodashObjectForOwn, _lodashObjectForOwnRight, _lodashObjectFunctions, _lodashObjectGet, _lodashObjectHas, _lodashObjectInvert, _lodashObjectKeys, _lodashObjectKeysIn, _lodashObjectMapKeys, _lodashObjectMapValues, _lodashObjectMerge, _lodashObjectMethods, _lodashObjectOmit, _lodashObjectPairs, _lodashObjectPick, _lodashObjectResult, _lodashObjectSet, _lodashObjectTransform, _lodashObjectValues, _lodashObjectValuesIn) {
  'use strict';

  exports['default'] = {
    'assign': _lodashObjectAssign['default'],
    'create': _lodashObjectCreate['default'],
    'defaults': _lodashObjectDefaults['default'],
    'defaultsDeep': _lodashObjectDefaultsDeep['default'],
    'extend': _lodashObjectExtend['default'],
    'findKey': _lodashObjectFindKey['default'],
    'findLastKey': _lodashObjectFindLastKey['default'],
    'forIn': _lodashObjectForIn['default'],
    'forInRight': _lodashObjectForInRight['default'],
    'forOwn': _lodashObjectForOwn['default'],
    'forOwnRight': _lodashObjectForOwnRight['default'],
    'functions': _lodashObjectFunctions['default'],
    'get': _lodashObjectGet['default'],
    'has': _lodashObjectHas['default'],
    'invert': _lodashObjectInvert['default'],
    'keys': _lodashObjectKeys['default'],
    'keysIn': _lodashObjectKeysIn['default'],
    'mapKeys': _lodashObjectMapKeys['default'],
    'mapValues': _lodashObjectMapValues['default'],
    'merge': _lodashObjectMerge['default'],
    'methods': _lodashObjectMethods['default'],
    'omit': _lodashObjectOmit['default'],
    'pairs': _lodashObjectPairs['default'],
    'pick': _lodashObjectPick['default'],
    'result': _lodashObjectResult['default'],
    'set': _lodashObjectSet['default'],
    'transform': _lodashObjectTransform['default'],
    'values': _lodashObjectValues['default'],
    'valuesIn': _lodashObjectValuesIn['default']
  };
});
define('lodash/object/assign', ['exports', 'lodash/internal/assignWith', 'lodash/internal/baseAssign', 'lodash/internal/createAssigner'], function (exports, _lodashInternalAssignWith, _lodashInternalBaseAssign, _lodashInternalCreateAssigner) {
  'use strict';

  /**
   * Assigns own enumerable properties of source object(s) to the destination
   * object. Subsequent sources overwrite property assignments of previous sources.
   * If `customizer` is provided it's invoked to produce the assigned values.
   * The `customizer` is bound to `thisArg` and invoked with five arguments:
   * (objectValue, sourceValue, key, object, source).
   *
   * **Note:** This method mutates `object` and is based on
   * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
   *
   * @static
   * @memberOf _
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {*} [thisArg] The `this` binding of `customizer`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
   * // => { 'user': 'fred', 'age': 40 }
   *
   * // using a customizer callback
   * var defaults = _.partialRight(_.assign, function(value, other) {
   *   return _.isUndefined(value) ? other : value;
   * });
   *
   * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
   * // => { 'user': 'barney', 'age': 36 }
   */
  var assign = (0, _lodashInternalCreateAssigner['default'])(function (object, source, customizer) {
    return customizer ? (0, _lodashInternalAssignWith['default'])(object, source, customizer) : (0, _lodashInternalBaseAssign['default'])(object, source);
  });

  exports['default'] = assign;
});
define('lodash/object/create', ['exports', 'lodash/internal/baseAssign', 'lodash/internal/baseCreate', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseAssign, _lodashInternalBaseCreate, _lodashInternalIsIterateeCall) {
  'use strict';

  /**
   * Creates an object that inherits from the given `prototype` object. If a
   * `properties` object is provided its own enumerable properties are assigned
   * to the created object.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} prototype The object to inherit from.
   * @param {Object} [properties] The properties to assign to the object.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Object} Returns the new object.
   * @example
   *
   * function Shape() {
   *   this.x = 0;
   *   this.y = 0;
   * }
   *
   * function Circle() {
   *   Shape.call(this);
   * }
   *
   * Circle.prototype = _.create(Shape.prototype, {
   *   'constructor': Circle
   * });
   *
   * var circle = new Circle;
   * circle instanceof Circle;
   * // => true
   *
   * circle instanceof Shape;
   * // => true
   */
  function create(prototype, properties, guard) {
    var result = (0, _lodashInternalBaseCreate['default'])(prototype);
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(prototype, properties, guard)) {
      properties = undefined;
    }
    return properties ? (0, _lodashInternalBaseAssign['default'])(result, properties) : result;
  }

  exports['default'] = create;
});
define('lodash/object/defaults', ['exports', 'lodash/object/assign', 'lodash/internal/assignDefaults', 'lodash/internal/createDefaults'], function (exports, _lodashObjectAssign, _lodashInternalAssignDefaults, _lodashInternalCreateDefaults) {
  'use strict';

  /**
   * Assigns own enumerable properties of source object(s) to the destination
   * object for all destination properties that resolve to `undefined`. Once a
   * property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
   * // => { 'user': 'barney', 'age': 36 }
   */
  var defaults = (0, _lodashInternalCreateDefaults['default'])(_lodashObjectAssign['default'], _lodashInternalAssignDefaults['default']);

  exports['default'] = defaults;
});
define('lodash/object/defaultsDeep', ['exports', 'lodash/internal/createDefaults', 'lodash/object/merge', 'lodash/internal/mergeDefaults'], function (exports, _lodashInternalCreateDefaults, _lodashObjectMerge, _lodashInternalMergeDefaults) {
  'use strict';

  /**
   * This method is like `_.defaults` except that it recursively assigns
   * default properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
   * // => { 'user': { 'name': 'barney', 'age': 36 } }
   *
   */
  var defaultsDeep = (0, _lodashInternalCreateDefaults['default'])(_lodashObjectMerge['default'], _lodashInternalMergeDefaults['default']);

  exports['default'] = defaultsDeep;
});
define('lodash/object/extend', ['exports', 'lodash/object/assign'], function (exports, _lodashObjectAssign) {
  'use strict';

  exports['default'] = _lodashObjectAssign['default'];
});
define('lodash/object/findKey', ['exports', 'lodash/internal/baseForOwn', 'lodash/internal/createFindKey'], function (exports, _lodashInternalBaseForOwn, _lodashInternalCreateFindKey) {
  'use strict';

  /**
   * This method is like `_.find` except that it returns the key of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
   * @example
   *
   * var users = {
   *   'barney':  { 'age': 36, 'active': true },
   *   'fred':    { 'age': 40, 'active': false },
   *   'pebbles': { 'age': 1,  'active': true }
   * };
   *
   * _.findKey(users, function(chr) {
   *   return chr.age < 40;
   * });
   * // => 'barney' (iteration order is not guaranteed)
   *
   * // using the `_.matches` callback shorthand
   * _.findKey(users, { 'age': 1, 'active': true });
   * // => 'pebbles'
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.findKey(users, 'active', false);
   * // => 'fred'
   *
   * // using the `_.property` callback shorthand
   * _.findKey(users, 'active');
   * // => 'barney'
   */
  var findKey = (0, _lodashInternalCreateFindKey['default'])(_lodashInternalBaseForOwn['default']);

  exports['default'] = findKey;
});
define('lodash/object/findLastKey', ['exports', 'lodash/internal/baseForOwnRight', 'lodash/internal/createFindKey'], function (exports, _lodashInternalBaseForOwnRight, _lodashInternalCreateFindKey) {
  'use strict';

  /**
   * This method is like `_.findKey` except that it iterates over elements of
   * a collection in the opposite order.
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
   * @example
   *
   * var users = {
   *   'barney':  { 'age': 36, 'active': true },
   *   'fred':    { 'age': 40, 'active': false },
   *   'pebbles': { 'age': 1,  'active': true }
   * };
   *
   * _.findLastKey(users, function(chr) {
   *   return chr.age < 40;
   * });
   * // => returns `pebbles` assuming `_.findKey` returns `barney`
   *
   * // using the `_.matches` callback shorthand
   * _.findLastKey(users, { 'age': 36, 'active': true });
   * // => 'barney'
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.findLastKey(users, 'active', false);
   * // => 'fred'
   *
   * // using the `_.property` callback shorthand
   * _.findLastKey(users, 'active');
   * // => 'pebbles'
   */
  var findLastKey = (0, _lodashInternalCreateFindKey['default'])(_lodashInternalBaseForOwnRight['default']);

  exports['default'] = findLastKey;
});
define('lodash/object/forIn', ['exports', 'lodash/internal/baseFor', 'lodash/internal/createForIn'], function (exports, _lodashInternalBaseFor, _lodashInternalCreateForIn) {
  'use strict';

  /**
   * Iterates over own and inherited enumerable properties of an object invoking
   * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
   * with three arguments: (value, key, object). Iteratee functions may exit
   * iteration early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forIn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
   */
  var forIn = (0, _lodashInternalCreateForIn['default'])(_lodashInternalBaseFor['default']);

  exports['default'] = forIn;
});
define('lodash/object/forInRight', ['exports', 'lodash/internal/baseForRight', 'lodash/internal/createForIn'], function (exports, _lodashInternalBaseForRight, _lodashInternalCreateForIn) {
  'use strict';

  /**
   * This method is like `_.forIn` except that it iterates over properties of
   * `object` in the opposite order.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forInRight(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
   */
  var forInRight = (0, _lodashInternalCreateForIn['default'])(_lodashInternalBaseForRight['default']);

  exports['default'] = forInRight;
});
define('lodash/object/forOwn', ['exports', 'lodash/internal/baseForOwn', 'lodash/internal/createForOwn'], function (exports, _lodashInternalBaseForOwn, _lodashInternalCreateForOwn) {
  'use strict';

  /**
   * Iterates over own enumerable properties of an object invoking `iteratee`
   * for each property. The `iteratee` is bound to `thisArg` and invoked with
   * three arguments: (value, key, object). Iteratee functions may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => logs 'a' and 'b' (iteration order is not guaranteed)
   */
  var forOwn = (0, _lodashInternalCreateForOwn['default'])(_lodashInternalBaseForOwn['default']);

  exports['default'] = forOwn;
});
define('lodash/object/forOwnRight', ['exports', 'lodash/internal/baseForOwnRight', 'lodash/internal/createForOwn'], function (exports, _lodashInternalBaseForOwnRight, _lodashInternalCreateForOwn) {
  'use strict';

  /**
   * This method is like `_.forOwn` except that it iterates over properties of
   * `object` in the opposite order.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwnRight(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
   */
  var forOwnRight = (0, _lodashInternalCreateForOwn['default'])(_lodashInternalBaseForOwnRight['default']);

  exports['default'] = forOwnRight;
});
define('lodash/object/functions', ['exports', 'lodash/internal/baseFunctions', 'lodash/object/keysIn'], function (exports, _lodashInternalBaseFunctions, _lodashObjectKeysIn) {
  'use strict';

  /**
   * Creates an array of function property names from all enumerable properties,
   * own and inherited, of `object`.
   *
   * @static
   * @memberOf _
   * @alias methods
   * @category Object
   * @param {Object} object The object to inspect.
   * @returns {Array} Returns the new array of property names.
   * @example
   *
   * _.functions(_);
   * // => ['after', 'ary', 'assign', ...]
   */
  function functions(object) {
    return (0, _lodashInternalBaseFunctions['default'])(object, (0, _lodashObjectKeysIn['default'])(object));
  }

  exports['default'] = functions;
});
define('lodash/object/get', ['exports', 'lodash/internal/baseGet', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalToPath) {
  'use strict';

  /**
   * Gets the property value at `path` of `object`. If the resolved value is
   * `undefined` the `defaultValue` is used in its place.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : (0, _lodashInternalBaseGet['default'])(object, (0, _lodashInternalToPath['default'])(path), path + '');
    return result === undefined ? defaultValue : result;
  }

  exports['default'] = get;
});
define('lodash/object/has', ['exports', 'lodash/internal/baseGet', 'lodash/internal/baseSlice', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/internal/isIndex', 'lodash/internal/isKey', 'lodash/internal/isLength', 'lodash/array/last', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalBaseSlice, _lodashLangIsArguments, _lodashLangIsArray, _lodashInternalIsIndex, _lodashInternalIsKey, _lodashInternalIsLength, _lodashArrayLast, _lodashInternalToPath) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Checks if `path` is a direct property.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': { 'c': 3 } } };
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b.c');
   * // => true
   *
   * _.has(object, ['a', 'b', 'c']);
   * // => true
   */
  function has(object, path) {
    if (object == null) {
      return false;
    }
    var result = hasOwnProperty.call(object, path);
    if (!result && !(0, _lodashInternalIsKey['default'])(path)) {
      path = (0, _lodashInternalToPath['default'])(path);
      object = path.length == 1 ? object : (0, _lodashInternalBaseGet['default'])(object, (0, _lodashInternalBaseSlice['default'])(path, 0, -1));
      if (object == null) {
        return false;
      }
      path = (0, _lodashArrayLast['default'])(path);
      result = hasOwnProperty.call(object, path);
    }
    return result || (0, _lodashInternalIsLength['default'])(object.length) && (0, _lodashInternalIsIndex['default'])(path, object.length) && ((0, _lodashLangIsArray['default'])(object) || (0, _lodashLangIsArguments['default'])(object));
  }

  exports['default'] = has;
});
define('lodash/object/invert', ['exports', 'lodash/internal/isIterateeCall', 'lodash/object/keys'], function (exports, _lodashInternalIsIterateeCall, _lodashObjectKeys) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an object composed of the inverted keys and values of `object`.
   * If `object` contains duplicate values, subsequent values overwrite property
   * assignments of previous values unless `multiValue` is `true`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to invert.
   * @param {boolean} [multiValue] Allow multiple values per key.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Object} Returns the new inverted object.
   * @example
   *
   * var object = { 'a': 1, 'b': 2, 'c': 1 };
   *
   * _.invert(object);
   * // => { '1': 'c', '2': 'b' }
   *
   * // with `multiValue`
   * _.invert(object, true);
   * // => { '1': ['a', 'c'], '2': ['b'] }
   */
  function invert(object, multiValue, guard) {
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(object, multiValue, guard)) {
      multiValue = undefined;
    }
    var index = -1,
        props = (0, _lodashObjectKeys['default'])(object),
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (multiValue) {
        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      } else {
        result[value] = key;
      }
    }
    return result;
  }

  exports['default'] = invert;
});
define('lodash/object/keys', ['exports', 'lodash/internal/getNative', 'lodash/internal/isArrayLike', 'lodash/lang/isObject', 'lodash/internal/shimKeys'], function (exports, _lodashInternalGetNative, _lodashInternalIsArrayLike, _lodashLangIsObject, _lodashInternalShimKeys) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeKeys = (0, _lodashInternalGetNative['default'])(Object, 'keys');

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  var keys = !nativeKeys ? _lodashInternalShimKeys['default'] : function (object) {
    var Ctor = object == null ? undefined : object.constructor;
    if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && (0, _lodashInternalIsArrayLike['default'])(object)) {
      return (0, _lodashInternalShimKeys['default'])(object);
    }
    return (0, _lodashLangIsObject['default'])(object) ? nativeKeys(object) : [];
  };

  exports['default'] = keys;
});
define('lodash/object/keysIn', ['exports', 'lodash/lang/isArguments', 'lodash/lang/isArray', 'lodash/internal/isIndex', 'lodash/internal/isLength', 'lodash/lang/isObject'], function (exports, _lodashLangIsArguments, _lodashLangIsArray, _lodashInternalIsIndex, _lodashInternalIsLength, _lodashLangIsObject) {
  'use strict';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    if (object == null) {
      return [];
    }
    if (!(0, _lodashLangIsObject['default'])(object)) {
      object = Object(object);
    }
    var length = object.length;
    length = length && (0, _lodashInternalIsLength['default'])(length) && ((0, _lodashLangIsArray['default'])(object) || (0, _lodashLangIsArguments['default'])(object)) && length || 0;

    var Ctor = object.constructor,
        index = -1,
        isProto = typeof Ctor == 'function' && Ctor.prototype === object,
        result = Array(length),
        skipIndexes = length > 0;

    while (++index < length) {
      result[index] = index + '';
    }
    for (var key in object) {
      if (!(skipIndexes && (0, _lodashInternalIsIndex['default'])(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  exports['default'] = keysIn;
});
define('lodash/object/mapKeys', ['exports', 'lodash/internal/createObjectMapper'], function (exports, _lodashInternalCreateObjectMapper) {
  'use strict';

  /**
   * The opposite of `_.mapValues`; this method creates an object with the
   * same values as `object` and keys generated by running each own enumerable
   * property of `object` through `iteratee`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns the new mapped object.
   * @example
   *
   * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
   *   return key + value;
   * });
   * // => { 'a1': 1, 'b2': 2 }
   */
  var mapKeys = (0, _lodashInternalCreateObjectMapper['default'])(true);

  exports['default'] = mapKeys;
});
define('lodash/object/mapValues', ['exports', 'lodash/internal/createObjectMapper'], function (exports, _lodashInternalCreateObjectMapper) {
  'use strict';

  /**
   * Creates an object with the same keys as `object` and values generated by
   * running each own enumerable property of `object` through `iteratee`. The
   * iteratee function is bound to `thisArg` and invoked with three arguments:
   * (value, key, object).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Object} Returns the new mapped object.
   * @example
   *
   * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
   *   return n * 3;
   * });
   * // => { 'a': 3, 'b': 6 }
   *
   * var users = {
   *   'fred':    { 'user': 'fred',    'age': 40 },
   *   'pebbles': { 'user': 'pebbles', 'age': 1 }
   * };
   *
   * // using the `_.property` callback shorthand
   * _.mapValues(users, 'age');
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   */
  var mapValues = (0, _lodashInternalCreateObjectMapper['default'])();

  exports['default'] = mapValues;
});
define('lodash/object/merge', ['exports', 'lodash/internal/baseMerge', 'lodash/internal/createAssigner'], function (exports, _lodashInternalBaseMerge, _lodashInternalCreateAssigner) {
  'use strict';

  /**
   * Recursively merges own enumerable properties of the source object(s), that
   * don't resolve to `undefined` into the destination object. Subsequent sources
   * overwrite property assignments of previous sources. If `customizer` is
   * provided it's invoked to produce the merged values of the destination and
   * source properties. If `customizer` returns `undefined` merging is handled
   * by the method instead. The `customizer` is bound to `thisArg` and invoked
   * with five arguments: (objectValue, sourceValue, key, object, source).
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {*} [thisArg] The `this` binding of `customizer`.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var users = {
   *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
   * };
   *
   * var ages = {
   *   'data': [{ 'age': 36 }, { 'age': 40 }]
   * };
   *
   * _.merge(users, ages);
   * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
   *
   * // using a customizer callback
   * var object = {
   *   'fruits': ['apple'],
   *   'vegetables': ['beet']
   * };
   *
   * var other = {
   *   'fruits': ['banana'],
   *   'vegetables': ['carrot']
   * };
   *
   * _.merge(object, other, function(a, b) {
   *   if (_.isArray(a)) {
   *     return a.concat(b);
   *   }
   * });
   * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
   */
  var merge = (0, _lodashInternalCreateAssigner['default'])(_lodashInternalBaseMerge['default']);

  exports['default'] = merge;
});
define('lodash/object/methods', ['exports', 'lodash/object/functions'], function (exports, _lodashObjectFunctions) {
  'use strict';

  exports['default'] = _lodashObjectFunctions['default'];
});
define('lodash/object/omit', ['exports', 'lodash/internal/arrayMap', 'lodash/internal/baseDifference', 'lodash/internal/baseFlatten', 'lodash/internal/bindCallback', 'lodash/object/keysIn', 'lodash/internal/pickByArray', 'lodash/internal/pickByCallback', 'lodash/function/restParam'], function (exports, _lodashInternalArrayMap, _lodashInternalBaseDifference, _lodashInternalBaseFlatten, _lodashInternalBindCallback, _lodashObjectKeysIn, _lodashInternalPickByArray, _lodashInternalPickByCallback, _lodashFunctionRestParam) {
  'use strict';

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable properties of `object` that are not omitted.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {Function|...(string|string[])} [predicate] The function invoked per
   *  iteration or property names to omit, specified as individual property
   *  names or arrays of property names.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'user': 'fred', 'age': 40 };
   *
   * _.omit(object, 'age');
   * // => { 'user': 'fred' }
   *
   * _.omit(object, _.isNumber);
   * // => { 'user': 'fred' }
   */
  var omit = (0, _lodashFunctionRestParam['default'])(function (object, props) {
    if (object == null) {
      return {};
    }
    if (typeof props[0] != 'function') {
      var props = (0, _lodashInternalArrayMap['default'])((0, _lodashInternalBaseFlatten['default'])(props), String);
      return (0, _lodashInternalPickByArray['default'])(object, (0, _lodashInternalBaseDifference['default'])((0, _lodashObjectKeysIn['default'])(object), props));
    }
    var predicate = (0, _lodashInternalBindCallback['default'])(props[0], props[1], 3);
    return (0, _lodashInternalPickByCallback['default'])(object, function (value, key, object) {
      return !predicate(value, key, object);
    });
  });

  exports['default'] = omit;
});
define('lodash/object/pairs', ['exports', 'lodash/object/keys', 'lodash/internal/toObject'], function (exports, _lodashObjectKeys, _lodashInternalToObject) {
  'use strict';

  /**
   * Creates a two dimensional array of the key-value pairs for `object`,
   * e.g. `[[key1, value1], [key2, value2]]`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the new array of key-value pairs.
   * @example
   *
   * _.pairs({ 'barney': 36, 'fred': 40 });
   * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
   */
  function pairs(object) {
    object = (0, _lodashInternalToObject['default'])(object);

    var index = -1,
        props = (0, _lodashObjectKeys['default'])(object),
        length = props.length,
        result = Array(length);

    while (++index < length) {
      var key = props[index];
      result[index] = [key, object[key]];
    }
    return result;
  }

  exports['default'] = pairs;
});
define('lodash/object/pick', ['exports', 'lodash/internal/baseFlatten', 'lodash/internal/bindCallback', 'lodash/internal/pickByArray', 'lodash/internal/pickByCallback', 'lodash/function/restParam'], function (exports, _lodashInternalBaseFlatten, _lodashInternalBindCallback, _lodashInternalPickByArray, _lodashInternalPickByCallback, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates an object composed of the picked `object` properties. Property
   * names may be specified as individual arguments or as arrays of property
   * names. If `predicate` is provided it's invoked for each property of `object`
   * picking the properties `predicate` returns truthy for. The predicate is
   * bound to `thisArg` and invoked with three arguments: (value, key, object).
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {Function|...(string|string[])} [predicate] The function invoked per
   *  iteration or property names to pick, specified as individual property
   *  names or arrays of property names.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'user': 'fred', 'age': 40 };
   *
   * _.pick(object, 'user');
   * // => { 'user': 'fred' }
   *
   * _.pick(object, _.isString);
   * // => { 'user': 'fred' }
   */
  var pick = (0, _lodashFunctionRestParam['default'])(function (object, props) {
    if (object == null) {
      return {};
    }
    return typeof props[0] == 'function' ? (0, _lodashInternalPickByCallback['default'])(object, (0, _lodashInternalBindCallback['default'])(props[0], props[1], 3)) : (0, _lodashInternalPickByArray['default'])(object, (0, _lodashInternalBaseFlatten['default'])(props));
  });

  exports['default'] = pick;
});
define('lodash/object/result', ['exports', 'lodash/internal/baseGet', 'lodash/internal/baseSlice', 'lodash/lang/isFunction', 'lodash/internal/isKey', 'lodash/array/last', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalBaseSlice, _lodashLangIsFunction, _lodashInternalIsKey, _lodashArrayLast, _lodashInternalToPath) {
  'use strict';

  /**
   * This method is like `_.get` except that if the resolved value is a function
   * it's invoked with the `this` binding of its parent object and its result
   * is returned.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to resolve.
   * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
   *
   * _.result(object, 'a[0].b.c1');
   * // => 3
   *
   * _.result(object, 'a[0].b.c2');
   * // => 4
   *
   * _.result(object, 'a.b.c', 'default');
   * // => 'default'
   *
   * _.result(object, 'a.b.c', _.constant('default'));
   * // => 'default'
   */
  function result(object, path, defaultValue) {
    var result = object == null ? undefined : object[path];
    if (result === undefined) {
      if (object != null && !(0, _lodashInternalIsKey['default'])(path, object)) {
        path = (0, _lodashInternalToPath['default'])(path);
        object = path.length == 1 ? object : (0, _lodashInternalBaseGet['default'])(object, (0, _lodashInternalBaseSlice['default'])(path, 0, -1));
        result = object == null ? undefined : object[(0, _lodashArrayLast['default'])(path)];
      }
      result = result === undefined ? defaultValue : result;
    }
    return (0, _lodashLangIsFunction['default'])(result) ? result.call(object) : result;
  }

  exports['default'] = result;
});
define('lodash/object/set', ['exports', 'lodash/internal/isIndex', 'lodash/internal/isKey', 'lodash/lang/isObject', 'lodash/internal/toPath'], function (exports, _lodashInternalIsIndex, _lodashInternalIsKey, _lodashLangIsObject, _lodashInternalToPath) {
  'use strict';

  /**
   * Sets the property value of `path` on `object`. If a portion of `path`
   * does not exist it's created.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to augment.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, 'x[0].y.z', 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */
  function set(object, path, value) {
    if (object == null) {
      return object;
    }
    var pathKey = path + '';
    path = object[pathKey] != null || (0, _lodashInternalIsKey['default'])(path, object) ? [pathKey] : (0, _lodashInternalToPath['default'])(path);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = path[index];
      if ((0, _lodashLangIsObject['default'])(nested)) {
        if (index == lastIndex) {
          nested[key] = value;
        } else if (nested[key] == null) {
          nested[key] = (0, _lodashInternalIsIndex['default'])(path[index + 1]) ? [] : {};
        }
      }
      nested = nested[key];
    }
    return object;
  }

  exports['default'] = set;
});
define('lodash/object/transform', ['exports', 'lodash/internal/arrayEach', 'lodash/internal/baseCallback', 'lodash/internal/baseCreate', 'lodash/internal/baseForOwn', 'lodash/lang/isArray', 'lodash/lang/isFunction', 'lodash/lang/isObject', 'lodash/lang/isTypedArray'], function (exports, _lodashInternalArrayEach, _lodashInternalBaseCallback, _lodashInternalBaseCreate, _lodashInternalBaseForOwn, _lodashLangIsArray, _lodashLangIsFunction, _lodashLangIsObject, _lodashLangIsTypedArray) {
  'use strict';

  /**
   * An alternative to `_.reduce`; this method transforms `object` to a new
   * `accumulator` object which is the result of running each of its own enumerable
   * properties through `iteratee`, with each invocation potentially mutating
   * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
   * with four arguments: (accumulator, value, key, object). Iteratee functions
   * may exit iteration early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Array|Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The custom accumulator value.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {*} Returns the accumulated value.
   * @example
   *
   * _.transform([2, 3, 4], function(result, n) {
   *   result.push(n *= n);
   *   return n % 2 == 0;
   * });
   * // => [4, 9]
   *
   * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
   *   result[key] = n * 3;
   * });
   * // => { 'a': 3, 'b': 6 }
   */
  function transform(object, iteratee, accumulator, thisArg) {
    var isArr = (0, _lodashLangIsArray['default'])(object) || (0, _lodashLangIsTypedArray['default'])(object);
    iteratee = (0, _lodashInternalBaseCallback['default'])(iteratee, thisArg, 4);

    if (accumulator == null) {
      if (isArr || (0, _lodashLangIsObject['default'])(object)) {
        var Ctor = object.constructor;
        if (isArr) {
          accumulator = (0, _lodashLangIsArray['default'])(object) ? new Ctor() : [];
        } else {
          accumulator = (0, _lodashInternalBaseCreate['default'])((0, _lodashLangIsFunction['default'])(Ctor) ? Ctor.prototype : undefined);
        }
      } else {
        accumulator = {};
      }
    }
    (isArr ? _lodashInternalArrayEach['default'] : _lodashInternalBaseForOwn['default'])(object, function (value, index, object) {
      return iteratee(accumulator, value, index, object);
    });
    return accumulator;
  }

  exports['default'] = transform;
});
define('lodash/object/values', ['exports', 'lodash/internal/baseValues', 'lodash/object/keys'], function (exports, _lodashInternalBaseValues, _lodashObjectKeys) {
  'use strict';

  /**
   * Creates an array of the own enumerable property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return (0, _lodashInternalBaseValues['default'])(object, (0, _lodashObjectKeys['default'])(object));
  }

  exports['default'] = values;
});
define('lodash/object/valuesIn', ['exports', 'lodash/internal/baseValues', 'lodash/object/keysIn'], function (exports, _lodashInternalBaseValues, _lodashObjectKeysIn) {
  'use strict';

  /**
   * Creates an array of the own and inherited enumerable property values
   * of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.valuesIn(new Foo);
   * // => [1, 2, 3] (iteration order is not guaranteed)
   */
  function valuesIn(object) {
    return (0, _lodashInternalBaseValues['default'])(object, (0, _lodashObjectKeysIn['default'])(object));
  }

  exports['default'] = valuesIn;
});
define('lodash/string', ['exports', 'lodash/string/camelCase', 'lodash/string/capitalize', 'lodash/string/deburr', 'lodash/string/endsWith', 'lodash/string/escape', 'lodash/string/escapeRegExp', 'lodash/string/kebabCase', 'lodash/string/pad', 'lodash/string/padLeft', 'lodash/string/padRight', 'lodash/string/parseInt', 'lodash/string/repeat', 'lodash/string/snakeCase', 'lodash/string/startCase', 'lodash/string/startsWith', 'lodash/string/template', 'lodash/string/templateSettings', 'lodash/string/trim', 'lodash/string/trimLeft', 'lodash/string/trimRight', 'lodash/string/trunc', 'lodash/string/unescape', 'lodash/string/words'], function (exports, _lodashStringCamelCase, _lodashStringCapitalize, _lodashStringDeburr, _lodashStringEndsWith, _lodashStringEscape, _lodashStringEscapeRegExp, _lodashStringKebabCase, _lodashStringPad, _lodashStringPadLeft, _lodashStringPadRight, _lodashStringParseInt, _lodashStringRepeat, _lodashStringSnakeCase, _lodashStringStartCase, _lodashStringStartsWith, _lodashStringTemplate, _lodashStringTemplateSettings, _lodashStringTrim, _lodashStringTrimLeft, _lodashStringTrimRight, _lodashStringTrunc, _lodashStringUnescape, _lodashStringWords) {
  'use strict';

  exports['default'] = {
    'camelCase': _lodashStringCamelCase['default'],
    'capitalize': _lodashStringCapitalize['default'],
    'deburr': _lodashStringDeburr['default'],
    'endsWith': _lodashStringEndsWith['default'],
    'escape': _lodashStringEscape['default'],
    'escapeRegExp': _lodashStringEscapeRegExp['default'],
    'kebabCase': _lodashStringKebabCase['default'],
    'pad': _lodashStringPad['default'],
    'padLeft': _lodashStringPadLeft['default'],
    'padRight': _lodashStringPadRight['default'],
    'parseInt': _lodashStringParseInt['default'],
    'repeat': _lodashStringRepeat['default'],
    'snakeCase': _lodashStringSnakeCase['default'],
    'startCase': _lodashStringStartCase['default'],
    'startsWith': _lodashStringStartsWith['default'],
    'template': _lodashStringTemplate['default'],
    'templateSettings': _lodashStringTemplateSettings['default'],
    'trim': _lodashStringTrim['default'],
    'trimLeft': _lodashStringTrimLeft['default'],
    'trimRight': _lodashStringTrimRight['default'],
    'trunc': _lodashStringTrunc['default'],
    'unescape': _lodashStringUnescape['default'],
    'words': _lodashStringWords['default']
  };
});
define('lodash/string/camelCase', ['exports', 'lodash/internal/createCompounder'], function (exports, _lodashInternalCreateCompounder) {
  'use strict';

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar');
   * // => 'fooBar'
   *
   * _.camelCase('__foo_bar__');
   * // => 'fooBar'
   */
  var camelCase = (0, _lodashInternalCreateCompounder['default'])(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? word.charAt(0).toUpperCase() + word.slice(1) : word);
  });

  exports['default'] = camelCase;
});
define('lodash/string/capitalize', ['exports', 'lodash/internal/baseToString'], function (exports, _lodashInternalBaseToString) {
  'use strict';

  /**
   * Capitalizes the first character of `string`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('fred');
   * // => 'Fred'
   */
  function capitalize(string) {
    string = (0, _lodashInternalBaseToString['default'])(string);
    return string && string.charAt(0).toUpperCase() + string.slice(1);
  }

  exports['default'] = capitalize;
});
define('lodash/string/deburr', ['exports', 'lodash/internal/baseToString', 'lodash/internal/deburrLetter'], function (exports, _lodashInternalBaseToString, _lodashInternalDeburrLetter) {
  'use strict';

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /**
   * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr(string) {
    string = (0, _lodashInternalBaseToString['default'])(string);
    return string && string.replace(reLatin1, _lodashInternalDeburrLetter['default']).replace(reComboMark, '');
  }

  exports['default'] = deburr;
});
define('lodash/string/endsWith', ['exports', 'lodash/internal/baseToString'], function (exports, _lodashInternalBaseToString) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Checks if `string` ends with the given target string.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to search.
   * @param {string} [target] The string to search for.
   * @param {number} [position=string.length] The position to search from.
   * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
   * @example
   *
   * _.endsWith('abc', 'c');
   * // => true
   *
   * _.endsWith('abc', 'b');
   * // => false
   *
   * _.endsWith('abc', 'b', 2);
   * // => true
   */
  function endsWith(string, target, position) {
    string = (0, _lodashInternalBaseToString['default'])(string);
    target = target + '';

    var length = string.length;
    position = position === undefined ? length : nativeMin(position < 0 ? 0 : +position || 0, length);

    position -= target.length;
    return position >= 0 && string.indexOf(target, position) == position;
  }

  exports['default'] = endsWith;
});
define('lodash/string/escape', ['exports', 'lodash/internal/baseToString', 'lodash/internal/escapeHtmlChar'], function (exports, _lodashInternalBaseToString, _lodashInternalEscapeHtmlChar) {
    'use strict';

    /** Used to match HTML entities and HTML characters. */
    var reUnescapedHtml = /[&<>"'`]/g,
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
        // Reset `lastIndex` because in IE < 9 `String#replace` does not.
        string = (0, _lodashInternalBaseToString['default'])(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, _lodashInternalEscapeHtmlChar['default']) : string;
    }

    exports['default'] = escape;
});
define('lodash/string/escapeRegExp', ['exports', 'lodash/internal/baseToString', 'lodash/internal/escapeRegExpChar'], function (exports, _lodashInternalBaseToString, _lodashInternalEscapeRegExpChar) {
  'use strict';

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /**
   * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
   * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escapeRegExp('[lodash](https://lodash.com/)');
   * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
   */
  function escapeRegExp(string) {
    string = (0, _lodashInternalBaseToString['default'])(string);
    return string && reHasRegExpChars.test(string) ? string.replace(reRegExpChars, _lodashInternalEscapeRegExpChar['default']) : string || '(?:)';
  }

  exports['default'] = escapeRegExp;
});
define('lodash/string/kebabCase', ['exports', 'lodash/internal/createCompounder'], function (exports, _lodashInternalCreateCompounder) {
  'use strict';

  /**
   * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__foo_bar__');
   * // => 'foo-bar'
   */
  var kebabCase = (0, _lodashInternalCreateCompounder['default'])(function (result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });

  exports['default'] = kebabCase;
});
define('lodash/string/pad', ['exports', 'lodash/internal/baseToString', 'lodash/internal/createPadding', 'lodash/internal/root'], function (exports, _lodashInternalBaseToString, _lodashInternalCreatePadding, _lodashInternalRoot) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeFloor = Math.floor,
      nativeIsFinite = _lodashInternalRoot['default'].isFinite;

  /**
   * Pads `string` on the left and right sides if it's shorter than `length`.
   * Padding characters are truncated if they can't be evenly divided by `length`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.pad('abc', 8);
   * // => '  abc   '
   *
   * _.pad('abc', 8, '_-');
   * // => '_-abc_-_'
   *
   * _.pad('abc', 3);
   * // => 'abc'
   */
  function pad(string, length, chars) {
    string = (0, _lodashInternalBaseToString['default'])(string);
    length = +length;

    var strLength = string.length;
    if (strLength >= length || !nativeIsFinite(length)) {
      return string;
    }
    var mid = (length - strLength) / 2,
        leftLength = nativeFloor(mid),
        rightLength = nativeCeil(mid);

    chars = (0, _lodashInternalCreatePadding['default'])('', rightLength, chars);
    return chars.slice(0, leftLength) + string + chars;
  }

  exports['default'] = pad;
});
define('lodash/string/padLeft', ['exports', 'lodash/internal/createPadDir'], function (exports, _lodashInternalCreatePadDir) {
  'use strict';

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padLeft('abc', 6);
   * // => '   abc'
   *
   * _.padLeft('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padLeft('abc', 3);
   * // => 'abc'
   */
  var padLeft = (0, _lodashInternalCreatePadDir['default'])();

  exports['default'] = padLeft;
});
define('lodash/string/padRight', ['exports', 'lodash/internal/createPadDir'], function (exports, _lodashInternalCreatePadDir) {
  'use strict';

  /**
   * Pads `string` on the right side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padRight('abc', 6);
   * // => 'abc   '
   *
   * _.padRight('abc', 6, '_-');
   * // => 'abc_-_'
   *
   * _.padRight('abc', 3);
   * // => 'abc'
   */
  var padRight = (0, _lodashInternalCreatePadDir['default'])(true);

  exports['default'] = padRight;
});
define('lodash/string/parseInt', ['exports', 'lodash/internal/isIterateeCall', 'lodash/internal/root', 'lodash/string/trim'], function (exports, _lodashInternalIsIterateeCall, _lodashInternalRoot, _lodashStringTrim) {
  'use strict';

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeParseInt = _lodashInternalRoot['default'].parseInt;

  /**
   * Converts `string` to an integer of the specified radix. If `radix` is
   * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
   * in which case a `radix` of `16` is used.
   *
   * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
   * of `parseInt`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} string The string to convert.
   * @param {number} [radix] The radix to interpret `value` by.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.parseInt('08');
   * // => 8
   *
   * _.map(['6', '08', '10'], _.parseInt);
   * // => [6, 8, 10]
   */
  function parseInt(string, radix, guard) {
    // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
    // Chrome fails to trim leading <BOM> whitespace characters.
    // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(string, radix, guard) : radix == null) {
      radix = 0;
    } else if (radix) {
      radix = +radix;
    }
    string = (0, _lodashStringTrim['default'])(string);
    return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
  }

  exports['default'] = parseInt;
});
define('lodash/string/repeat', ['exports', 'lodash/internal/baseToString', 'lodash/internal/root'], function (exports, _lodashInternalBaseToString, _lodashInternalRoot) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor,
      nativeIsFinite = _lodashInternalRoot['default'].isFinite;

  /**
   * Repeats the given string `n` times.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to repeat.
   * @param {number} [n=0] The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   * @example
   *
   * _.repeat('*', 3);
   * // => '***'
   *
   * _.repeat('abc', 2);
   * // => 'abcabc'
   *
   * _.repeat('abc', 0);
   * // => ''
   */
  function repeat(string, n) {
    var result = '';
    string = (0, _lodashInternalBaseToString['default'])(string);
    n = +n;
    if (n < 1 || !string || !nativeIsFinite(n)) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      string += string;
    } while (n);

    return result;
  }

  exports['default'] = repeat;
});
define('lodash/string/snakeCase', ['exports', 'lodash/internal/createCompounder'], function (exports, _lodashInternalCreateCompounder) {
  'use strict';

  /**
   * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the snake cased string.
   * @example
   *
   * _.snakeCase('Foo Bar');
   * // => 'foo_bar'
   *
   * _.snakeCase('fooBar');
   * // => 'foo_bar'
   *
   * _.snakeCase('--foo-bar');
   * // => 'foo_bar'
   */
  var snakeCase = (0, _lodashInternalCreateCompounder['default'])(function (result, word, index) {
    return result + (index ? '_' : '') + word.toLowerCase();
  });

  exports['default'] = snakeCase;
});
define('lodash/string/startCase', ['exports', 'lodash/internal/createCompounder'], function (exports, _lodashInternalCreateCompounder) {
  'use strict';

  /**
   * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the start cased string.
   * @example
   *
   * _.startCase('--foo-bar');
   * // => 'Foo Bar'
   *
   * _.startCase('fooBar');
   * // => 'Foo Bar'
   *
   * _.startCase('__foo_bar__');
   * // => 'Foo Bar'
   */
  var startCase = (0, _lodashInternalCreateCompounder['default'])(function (result, word, index) {
    return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
  });

  exports['default'] = startCase;
});
define('lodash/string/startsWith', ['exports', 'lodash/internal/baseToString'], function (exports, _lodashInternalBaseToString) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * Checks if `string` starts with the given target string.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to search.
   * @param {string} [target] The string to search for.
   * @param {number} [position=0] The position to search from.
   * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
   * @example
   *
   * _.startsWith('abc', 'a');
   * // => true
   *
   * _.startsWith('abc', 'b');
   * // => false
   *
   * _.startsWith('abc', 'b', 1);
   * // => true
   */
  function startsWith(string, target, position) {
    string = (0, _lodashInternalBaseToString['default'])(string);
    position = position == null ? 0 : nativeMin(position < 0 ? 0 : +position || 0, string.length);

    return string.lastIndexOf(target, position) == position;
  }

  exports['default'] = startsWith;
});
define('lodash/string/template', ['exports', 'lodash/internal/assignOwnDefaults', 'lodash/internal/assignWith', 'lodash/utility/attempt', 'lodash/internal/baseAssign', 'lodash/internal/baseToString', 'lodash/internal/baseValues', 'lodash/internal/escapeStringChar', 'lodash/lang/isError', 'lodash/internal/isIterateeCall', 'lodash/object/keys', 'lodash/internal/reInterpolate', 'lodash/string/templateSettings'], function (exports, _lodashInternalAssignOwnDefaults, _lodashInternalAssignWith, _lodashUtilityAttempt, _lodashInternalBaseAssign, _lodashInternalBaseToString, _lodashInternalBaseValues, _lodashInternalEscapeStringChar, _lodashLangIsError, _lodashInternalIsIterateeCall, _lodashObjectKeys, _lodashInternalReInterpolate, _lodashStringTemplateSettings) {
  'use strict';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is provided it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options] The options object.
   * @param {RegExp} [options.escape] The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
   * @param {Object} [options.imports] An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
   * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
   * @param {string} [options.variable] The data object variable name.
   * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // using the "interpolate" delimiter to create a compiled template
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // using the HTML "escape" delimiter to escape data property values
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // using the "evaluate" delimiter to execute JavaScript and generate HTML
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // using the internal `print` function in "evaluate" delimiters
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // using the ES delimiter as an alternative to the default "interpolate" delimiter
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // using custom template delimiters
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // using backslashes to treat delimiters as plain text
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // using the `imports` option to import `jQuery` as `jq`
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // using the `sourceURL` option to specify a custom sourceURL for the template
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
   *
   * // using the `variable` option to ensure a with-statement isn't used in the compiled template
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // using the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and a stack trace
   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */
  function template(string, options, otherOptions) {
    // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = _lodashStringTemplateSettings['default'].imports._.templateSettings || _lodashStringTemplateSettings['default'];

    if (otherOptions && (0, _lodashInternalIsIterateeCall['default'])(string, options, otherOptions)) {
      options = otherOptions = undefined;
    }
    string = (0, _lodashInternalBaseToString['default'])(string);
    options = (0, _lodashInternalAssignWith['default'])((0, _lodashInternalBaseAssign['default'])({}, otherOptions || options), settings, _lodashInternalAssignOwnDefaults['default']);

    var imports = (0, _lodashInternalAssignWith['default'])((0, _lodashInternalBaseAssign['default'])({}, options.imports), settings.imports, _lodashInternalAssignOwnDefaults['default']),
        importsKeys = (0, _lodashObjectKeys['default'])(imports),
        importsValues = (0, _lodashInternalBaseValues['default'])(imports, importsKeys);

    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '";

    // Compile the regexp to match each delimiter.
    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === _lodashInternalReInterpolate['default'] ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

    // Use a sourceURL for easier debugging.
    var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\n' : '';

    string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue);

      // Escape characters that can't be included in string literals.
      source += string.slice(index, offset).replace(reUnescapedString, _lodashInternalEscapeStringChar['default']);

      // Replace delimiters with snippets.
      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }
      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }
      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }
      index = offset + match.length;

      // The JS engine embedded in Adobe products requires returning the `match`
      // string in order to produce the correct `offset` value.
      return match;
    });

    source += "';\n";

    // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.
    var variable = options.variable;
    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    }
    // Cleanup code by stripping empty strings.
    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

    // Frame code as the function body.
    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

    var result = (0, _lodashUtilityAttempt['default'])(function () {
      return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    });

    // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.
    result.source = source;
    if ((0, _lodashLangIsError['default'])(result)) {
      throw result;
    }
    return result;
  }

  exports['default'] = template;
});
define('lodash/string/templateSettings', ['exports', 'lodash/string/escape', 'lodash/internal/reEscape', 'lodash/internal/reEvaluate', 'lodash/internal/reInterpolate'], function (exports, _lodashStringEscape, _lodashInternalReEscape, _lodashInternalReEvaluate, _lodashInternalReInterpolate) {
  'use strict';

  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB). Change the following template settings to use
   * alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type Object
   */
  var templateSettings = {

    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'escape': _lodashInternalReEscape['default'],

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'evaluate': _lodashInternalReEvaluate['default'],

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type RegExp
     */
    'interpolate': _lodashInternalReInterpolate['default'],

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type string
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type Object
     */
    'imports': {

      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type Function
       */
      '_': { 'escape': _lodashStringEscape['default'] }
    }
  };

  exports['default'] = templateSettings;
});
define('lodash/string/trim', ['exports', 'lodash/internal/baseToString', 'lodash/internal/charsLeftIndex', 'lodash/internal/charsRightIndex', 'lodash/internal/isIterateeCall', 'lodash/internal/trimmedLeftIndex', 'lodash/internal/trimmedRightIndex'], function (exports, _lodashInternalBaseToString, _lodashInternalCharsLeftIndex, _lodashInternalCharsRightIndex, _lodashInternalIsIterateeCall, _lodashInternalTrimmedLeftIndex, _lodashInternalTrimmedRightIndex) {
  'use strict';

  /**
   * Removes leading and trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trim('  abc  ');
   * // => 'abc'
   *
   * _.trim('-_-abc-_-', '_-');
   * // => 'abc'
   *
   * _.map(['  foo  ', '  bar  '], _.trim);
   * // => ['foo', 'bar']
   */
  function trim(string, chars, guard) {
    var value = string;
    string = (0, _lodashInternalBaseToString['default'])(string);
    if (!string) {
      return string;
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(value, chars, guard) : chars == null) {
      return string.slice((0, _lodashInternalTrimmedLeftIndex['default'])(string), (0, _lodashInternalTrimmedRightIndex['default'])(string) + 1);
    }
    chars = chars + '';
    return string.slice((0, _lodashInternalCharsLeftIndex['default'])(string, chars), (0, _lodashInternalCharsRightIndex['default'])(string, chars) + 1);
  }

  exports['default'] = trim;
});
define('lodash/string/trimLeft', ['exports', 'lodash/internal/baseToString', 'lodash/internal/charsLeftIndex', 'lodash/internal/isIterateeCall', 'lodash/internal/trimmedLeftIndex'], function (exports, _lodashInternalBaseToString, _lodashInternalCharsLeftIndex, _lodashInternalIsIterateeCall, _lodashInternalTrimmedLeftIndex) {
  'use strict';

  /**
   * Removes leading whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trimLeft('  abc  ');
   * // => 'abc  '
   *
   * _.trimLeft('-_-abc-_-', '_-');
   * // => 'abc-_-'
   */
  function trimLeft(string, chars, guard) {
    var value = string;
    string = (0, _lodashInternalBaseToString['default'])(string);
    if (!string) {
      return string;
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(value, chars, guard) : chars == null) {
      return string.slice((0, _lodashInternalTrimmedLeftIndex['default'])(string));
    }
    return string.slice((0, _lodashInternalCharsLeftIndex['default'])(string, chars + ''));
  }

  exports['default'] = trimLeft;
});
define('lodash/string/trimRight', ['exports', 'lodash/internal/baseToString', 'lodash/internal/charsRightIndex', 'lodash/internal/isIterateeCall', 'lodash/internal/trimmedRightIndex'], function (exports, _lodashInternalBaseToString, _lodashInternalCharsRightIndex, _lodashInternalIsIterateeCall, _lodashInternalTrimmedRightIndex) {
  'use strict';

  /**
   * Removes trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trimRight('  abc  ');
   * // => '  abc'
   *
   * _.trimRight('-_-abc-_-', '_-');
   * // => '-_-abc'
   */
  function trimRight(string, chars, guard) {
    var value = string;
    string = (0, _lodashInternalBaseToString['default'])(string);
    if (!string) {
      return string;
    }
    if (guard ? (0, _lodashInternalIsIterateeCall['default'])(value, chars, guard) : chars == null) {
      return string.slice(0, (0, _lodashInternalTrimmedRightIndex['default'])(string) + 1);
    }
    return string.slice(0, (0, _lodashInternalCharsRightIndex['default'])(string, chars + '') + 1);
  }

  exports['default'] = trimRight;
});
define('lodash/string/trunc', ['exports', 'lodash/internal/baseToString', 'lodash/internal/isIterateeCall', 'lodash/lang/isObject', 'lodash/lang/isRegExp'], function (exports, _lodashInternalBaseToString, _lodashInternalIsIterateeCall, _lodashLangIsObject, _lodashLangIsRegExp) {
  'use strict';

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Truncates `string` if it's longer than the given maximum string length.
   * The last characters of the truncated string are replaced with the omission
   * string which defaults to "...".
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to truncate.
   * @param {Object|number} [options] The options object or maximum string length.
   * @param {number} [options.length=30] The maximum string length.
   * @param {string} [options.omission='...'] The string to indicate text is omitted.
   * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {string} Returns the truncated string.
   * @example
   *
   * _.trunc('hi-diddly-ho there, neighborino');
   * // => 'hi-diddly-ho there, neighbo...'
   *
   * _.trunc('hi-diddly-ho there, neighborino', 24);
   * // => 'hi-diddly-ho there, n...'
   *
   * _.trunc('hi-diddly-ho there, neighborino', {
   *   'length': 24,
   *   'separator': ' '
   * });
   * // => 'hi-diddly-ho there,...'
   *
   * _.trunc('hi-diddly-ho there, neighborino', {
   *   'length': 24,
   *   'separator': /,? +/
   * });
   * // => 'hi-diddly-ho there...'
   *
   * _.trunc('hi-diddly-ho there, neighborino', {
   *   'omission': ' [...]'
   * });
   * // => 'hi-diddly-ho there, neig [...]'
   */
  function trunc(string, options, guard) {
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(string, options, guard)) {
      options = undefined;
    }
    var length = DEFAULT_TRUNC_LENGTH,
        omission = DEFAULT_TRUNC_OMISSION;

    if (options != null) {
      if ((0, _lodashLangIsObject['default'])(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? +options.length || 0 : length;
        omission = 'omission' in options ? (0, _lodashInternalBaseToString['default'])(options.omission) : omission;
      } else {
        length = +options || 0;
      }
    }
    string = (0, _lodashInternalBaseToString['default'])(string);
    if (length >= string.length) {
      return string;
    }
    var end = length - omission.length;
    if (end < 1) {
      return omission;
    }
    var result = string.slice(0, end);
    if (separator == null) {
      return result + omission;
    }
    if ((0, _lodashLangIsRegExp['default'])(separator)) {
      if (string.slice(end).search(separator)) {
        var match,
            newEnd,
            substring = string.slice(0, end);

        if (!separator.global) {
          separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
        }
        separator.lastIndex = 0;
        while (match = separator.exec(substring)) {
          newEnd = match.index;
        }
        result = result.slice(0, newEnd == null ? end : newEnd);
      }
    } else if (string.indexOf(separator, end) != end) {
      var index = result.lastIndexOf(separator);
      if (index > -1) {
        result = result.slice(0, index);
      }
    }
    return result + omission;
  }

  exports['default'] = trunc;
});
define('lodash/string/unescape', ['exports', 'lodash/internal/baseToString', 'lodash/internal/unescapeHtmlChar'], function (exports, _lodashInternalBaseToString, _lodashInternalUnescapeHtmlChar) {
    'use strict';

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source);

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
        string = (0, _lodashInternalBaseToString['default'])(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, _lodashInternalUnescapeHtmlChar['default']) : string;
    }

    exports['default'] = unescape;
});
define('lodash/string/words', ['exports', 'lodash/internal/baseToString', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalBaseToString, _lodashInternalIsIterateeCall) {
  'use strict';

  /** Used to match words to create compound words. */
  var reWords = (function () {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  })();

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words(string, pattern, guard) {
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(string, pattern, guard)) {
      pattern = undefined;
    }
    string = (0, _lodashInternalBaseToString['default'])(string);
    return string.match(pattern || reWords) || [];
  }

  exports['default'] = words;
});
define("lodash/support", ["exports"], function (exports) {
  /**
   * An object environment feature flags.
   *
   * @static
   * @memberOf _
   * @type Object
   */
  "use strict";

  var support = {};

  exports["default"] = support;
});
define('lodash/utility', ['exports', 'lodash/utility/attempt', 'lodash/utility/callback', 'lodash/utility/constant', 'lodash/utility/identity', 'lodash/utility/iteratee', 'lodash/utility/matches', 'lodash/utility/matchesProperty', 'lodash/utility/method', 'lodash/utility/methodOf', 'lodash/utility/mixin', 'lodash/utility/noop', 'lodash/utility/property', 'lodash/utility/propertyOf', 'lodash/utility/range', 'lodash/utility/times', 'lodash/utility/uniqueId'], function (exports, _lodashUtilityAttempt, _lodashUtilityCallback, _lodashUtilityConstant, _lodashUtilityIdentity, _lodashUtilityIteratee, _lodashUtilityMatches, _lodashUtilityMatchesProperty, _lodashUtilityMethod, _lodashUtilityMethodOf, _lodashUtilityMixin, _lodashUtilityNoop, _lodashUtilityProperty, _lodashUtilityPropertyOf, _lodashUtilityRange, _lodashUtilityTimes, _lodashUtilityUniqueId) {
  'use strict';

  exports['default'] = {
    'attempt': _lodashUtilityAttempt['default'],
    'callback': _lodashUtilityCallback['default'],
    'constant': _lodashUtilityConstant['default'],
    'identity': _lodashUtilityIdentity['default'],
    'iteratee': _lodashUtilityIteratee['default'],
    'matches': _lodashUtilityMatches['default'],
    'matchesProperty': _lodashUtilityMatchesProperty['default'],
    'method': _lodashUtilityMethod['default'],
    'methodOf': _lodashUtilityMethodOf['default'],
    'mixin': _lodashUtilityMixin['default'],
    'noop': _lodashUtilityNoop['default'],
    'property': _lodashUtilityProperty['default'],
    'propertyOf': _lodashUtilityPropertyOf['default'],
    'range': _lodashUtilityRange['default'],
    'times': _lodashUtilityTimes['default'],
    'uniqueId': _lodashUtilityUniqueId['default']
  };
});
define('lodash/utility/attempt', ['exports', 'lodash/lang/isError', 'lodash/function/restParam'], function (exports, _lodashLangIsError, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Function} func The function to attempt.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // avoid throwing errors for invalid selectors
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */
  var attempt = (0, _lodashFunctionRestParam['default'])(function (func, args) {
    try {
      return func.apply(undefined, args);
    } catch (e) {
      return (0, _lodashLangIsError['default'])(e) ? e : new Error(e);
    }
  });

  exports['default'] = attempt;
});
define('lodash/utility/callback', ['exports', 'lodash/internal/baseCallback', 'lodash/internal/isIterateeCall', 'lodash/internal/isObjectLike', 'lodash/utility/matches'], function (exports, _lodashInternalBaseCallback, _lodashInternalIsIterateeCall, _lodashInternalIsObjectLike, _lodashUtilityMatches) {
  'use strict';

  /**
   * Creates a function that invokes `func` with the `this` binding of `thisArg`
   * and arguments of the created function. If `func` is a property name the
   * created callback returns the property value for a given element. If `func`
   * is an object the created callback returns `true` for elements that contain
   * the equivalent object properties, otherwise it returns `false`.
   *
   * @static
   * @memberOf _
   * @alias iteratee
   * @category Utility
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Function} Returns the callback.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // wrap to create custom callback shorthands
   * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
   *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
   *   if (!match) {
   *     return callback(func, thisArg);
   *   }
   *   return function(object) {
   *     return match[2] == 'gt'
   *       ? object[match[1]] > match[3]
   *       : object[match[1]] < match[3];
   *   };
   * });
   *
   * _.filter(users, 'age__gt36');
   * // => [{ 'user': 'fred', 'age': 40 }]
   */
  function callback(func, thisArg, guard) {
    if (guard && (0, _lodashInternalIsIterateeCall['default'])(func, thisArg, guard)) {
      thisArg = undefined;
    }
    return (0, _lodashInternalIsObjectLike['default'])(func) ? (0, _lodashUtilityMatches['default'])(func) : (0, _lodashInternalBaseCallback['default'])(func, thisArg);
  }

  exports['default'] = callback;
});
define("lodash/utility/constant", ["exports"], function (exports) {
  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var object = { 'user': 'fred' };
   * var getter = _.constant(object);
   *
   * getter() === object;
   * // => true
   */
  "use strict";

  function constant(value) {
    return function () {
      return value;
    };
  }

  exports["default"] = constant;
});
define("lodash/utility/identity", ["exports"], function (exports) {
  /**
   * This method returns the first argument provided to it.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * _.identity(object) === object;
   * // => true
   */
  "use strict";

  function identity(value) {
    return value;
  }

  exports["default"] = identity;
});
define('lodash/utility/iteratee', ['exports', 'lodash/utility/callback'], function (exports, _lodashUtilityCallback) {
  'use strict';

  exports['default'] = _lodashUtilityCallback['default'];
});
define('lodash/utility/matches', ['exports', 'lodash/internal/baseClone', 'lodash/internal/baseMatches'], function (exports, _lodashInternalBaseClone, _lodashInternalBaseMatches) {
  'use strict';

  /**
   * Creates a function that performs a deep comparison between a given object
   * and `source`, returning `true` if the given object has equivalent property
   * values, else `false`.
   *
   * **Note:** This method supports comparing arrays, booleans, `Date` objects,
   * numbers, `Object` objects, regexes, and strings. Objects are compared by
   * their own, not inherited, enumerable properties. For comparing a single
   * own or inherited property value see `_.matchesProperty`.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, _.matches({ 'age': 40, 'active': false }));
   * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
   */
  function matches(source) {
    return (0, _lodashInternalBaseMatches['default'])((0, _lodashInternalBaseClone['default'])(source, true));
  }

  exports['default'] = matches;
});
define('lodash/utility/matchesProperty', ['exports', 'lodash/internal/baseClone', 'lodash/internal/baseMatchesProperty'], function (exports, _lodashInternalBaseClone, _lodashInternalBaseMatchesProperty) {
  'use strict';

  /**
   * Creates a function that compares the property value of `path` on a given
   * object to `value`.
   *
   * **Note:** This method supports comparing arrays, booleans, `Date` objects,
   * numbers, `Object` objects, regexes, and strings. Objects are compared by
   * their own, not inherited, enumerable properties.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Array|string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * _.find(users, _.matchesProperty('user', 'fred'));
   * // => { 'user': 'fred' }
   */
  function matchesProperty(path, srcValue) {
    return (0, _lodashInternalBaseMatchesProperty['default'])(path, (0, _lodashInternalBaseClone['default'])(srcValue, true));
  }

  exports['default'] = matchesProperty;
});
define('lodash/utility/method', ['exports', 'lodash/internal/invokePath', 'lodash/function/restParam'], function (exports, _lodashInternalInvokePath, _lodashFunctionRestParam) {
  'use strict';

  /**
   * Creates a function that invokes the method at `path` on a given object.
   * Any additional arguments are provided to the invoked method.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Array|string} path The path of the method to invoke.
   * @param {...*} [args] The arguments to invoke the method with.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': { 'c': _.constant(2) } } },
   *   { 'a': { 'b': { 'c': _.constant(1) } } }
   * ];
   *
   * _.map(objects, _.method('a.b.c'));
   * // => [2, 1]
   *
   * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
   * // => [1, 2]
   */
  var method = (0, _lodashFunctionRestParam['default'])(function (path, args) {
    return function (object) {
      return (0, _lodashInternalInvokePath['default'])(object, path, args);
    };
  });

  exports['default'] = method;
});
define('lodash/utility/methodOf', ['exports', 'lodash/internal/invokePath', 'lodash/function/restParam'], function (exports, _lodashInternalInvokePath, _lodashFunctionRestParam) {
  'use strict';

  /**
   * The opposite of `_.method`; this method creates a function that invokes
   * the method at a given path on `object`. Any additional arguments are
   * provided to the invoked method.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} object The object to query.
   * @param {...*} [args] The arguments to invoke the method with.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var array = _.times(3, _.constant),
   *     object = { 'a': array, 'b': array, 'c': array };
   *
   * _.map(['a[2]', 'c[0]'], _.methodOf(object));
   * // => [2, 0]
   *
   * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
   * // => [2, 0]
   */
  var methodOf = (0, _lodashFunctionRestParam['default'])(function (object, args) {
    return function (path) {
      return (0, _lodashInternalInvokePath['default'])(object, path, args);
    };
  });

  exports['default'] = methodOf;
});
define('lodash/utility/mixin', ['exports', 'lodash/internal/arrayCopy', 'lodash/internal/arrayPush', 'lodash/internal/baseFunctions', 'lodash/lang/isFunction', 'lodash/lang/isObject', 'lodash/object/keys'], function (exports, _lodashInternalArrayCopy, _lodashInternalArrayPush, _lodashInternalBaseFunctions, _lodashLangIsFunction, _lodashLangIsObject, _lodashObjectKeys) {
  'use strict';

  /**
   * Adds all own enumerable function properties of a source object to the
   * destination object. If `object` is a function then methods are added to
   * its prototype as well.
   *
   * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
   * avoid conflicts caused by modifying the original.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Function|Object} [object=lodash] The destination object.
   * @param {Object} source The object of functions to add.
   * @param {Object} [options] The options object.
   * @param {boolean} [options.chain=true] Specify whether the functions added
   *  are chainable.
   * @returns {Function|Object} Returns `object`.
   * @example
   *
   * function vowels(string) {
   *   return _.filter(string, function(v) {
   *     return /[aeiou]/i.test(v);
   *   });
   * }
   *
   * _.mixin({ 'vowels': vowels });
   * _.vowels('fred');
   * // => ['e']
   *
   * _('fred').vowels().value();
   * // => ['e']
   *
   * _.mixin({ 'vowels': vowels }, { 'chain': false });
   * _('fred').vowels();
   * // => ['e']
   */
  function mixin(object, source, options) {
    var methodNames = (0, _lodashInternalBaseFunctions['default'])(source, (0, _lodashObjectKeys['default'])(source));

    var chain = true,
        index = -1,
        isFunc = (0, _lodashLangIsFunction['default'])(object),
        length = methodNames.length;

    if (options === false) {
      chain = false;
    } else if ((0, _lodashLangIsObject['default'])(options) && 'chain' in options) {
      chain = options.chain;
    }
    while (++index < length) {
      var methodName = methodNames[index],
          func = source[methodName];

      object[methodName] = func;
      if (isFunc) {
        object.prototype[methodName] = (function (func) {
          return function () {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = (0, _lodashInternalArrayCopy['default'])(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, (0, _lodashInternalArrayPush['default'])([this.value()], arguments));
          };
        })(func);
      }
    }
    return object;
  }

  exports['default'] = mixin;
});
define("lodash/utility/noop", ["exports"], function (exports) {
  /**
   * A no-operation function that returns `undefined` regardless of the
   * arguments it receives.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * _.noop(object) === undefined;
   * // => true
   */
  "use strict";

  function noop() {
    // No operation performed.
  }

  exports["default"] = noop;
});
define('lodash/utility/property', ['exports', 'lodash/internal/baseProperty', 'lodash/internal/basePropertyDeep', 'lodash/internal/isKey'], function (exports, _lodashInternalBaseProperty, _lodashInternalBasePropertyDeep, _lodashInternalIsKey) {
  'use strict';

  /**
   * Creates a function that returns the property value at `path` on a
   * given object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': { 'c': 2 } } },
   *   { 'a': { 'b': { 'c': 1 } } }
   * ];
   *
   * _.map(objects, _.property('a.b.c'));
   * // => [2, 1]
   *
   * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
   * // => [1, 2]
   */
  function property(path) {
    return (0, _lodashInternalIsKey['default'])(path) ? (0, _lodashInternalBaseProperty['default'])(path) : (0, _lodashInternalBasePropertyDeep['default'])(path);
  }

  exports['default'] = property;
});
define('lodash/utility/propertyOf', ['exports', 'lodash/internal/baseGet', 'lodash/internal/toPath'], function (exports, _lodashInternalBaseGet, _lodashInternalToPath) {
  'use strict';

  /**
   * The opposite of `_.property`; this method creates a function that returns
   * the property value at a given path on `object`.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var array = [0, 1, 2],
   *     object = { 'a': array, 'b': array, 'c': array };
   *
   * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
   * // => [2, 0]
   *
   * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
   * // => [2, 0]
   */
  function propertyOf(object) {
    return function (path) {
      return (0, _lodashInternalBaseGet['default'])(object, (0, _lodashInternalToPath['default'])(path), path + '');
    };
  }

  exports['default'] = propertyOf;
});
define('lodash/utility/range', ['exports', 'lodash/internal/isIterateeCall'], function (exports, _lodashInternalIsIterateeCall) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeMax = Math.max;

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. If `end` is not specified it's
   * set to `start` with `start` then set to `0`. If `end` is less than `start`
   * a zero-length range is created unless a negative `step` is specified.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the new array of numbers.
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */
  function range(start, end, step) {
    if (step && (0, _lodashInternalIsIterateeCall['default'])(start, end, step)) {
      end = step = undefined;
    }
    start = +start || 0;
    step = step == null ? 1 : +step || 0;

    if (end == null) {
      end = start;
      start = 0;
    } else {
      end = +end || 0;
    }
    // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
    // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
    var index = -1,
        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
        result = Array(length);

    while (++index < length) {
      result[index] = start;
      start += step;
    }
    return result;
  }

  exports['default'] = range;
});
define('lodash/utility/times', ['exports', 'lodash/internal/bindCallback', 'lodash/internal/root'], function (exports, _lodashInternalBindCallback, _lodashInternalRoot) {
  'use strict';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor,
      nativeIsFinite = _lodashInternalRoot['default'].isFinite,
      nativeMin = Math.min;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295;

  /**
   * Invokes the iteratee function `n` times, returning an array of the results
   * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
   * one argument; (index).
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the array of results.
   * @example
   *
   * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
   * // => [3, 6, 4]
   *
   * _.times(3, function(n) {
   *   mage.castSpell(n);
   * });
   * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
   *
   * _.times(3, function(n) {
   *   this.cast(n);
   * }, mage);
   * // => also invokes `mage.castSpell(n)` three times
   */
  function times(n, iteratee, thisArg) {
    n = nativeFloor(n);

    // Exit early to avoid a JSC JIT bug in Safari 8
    // where `Array(0)` is treated as `Array(1)`.
    if (n < 1 || !nativeIsFinite(n)) {
      return [];
    }
    var index = -1,
        result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

    iteratee = (0, _lodashInternalBindCallback['default'])(iteratee, thisArg, 1);
    while (++index < n) {
      if (index < MAX_ARRAY_LENGTH) {
        result[index] = iteratee(index);
      } else {
        iteratee(index);
      }
    }
    return result;
  }

  exports['default'] = times;
});
define('lodash/utility/uniqueId', ['exports', 'lodash/internal/baseToString'], function (exports, _lodashInternalBaseToString) {
  'use strict';

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Generates a unique ID. If `prefix` is provided the ID is appended to it.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {string} [prefix] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return (0, _lodashInternalBaseToString['default'])(prefix) + id;
  }

  exports['default'] = uniqueId;
});
define('moment/index', ['exports', 'ember'], function (exports, _ember) {
  'use strict';

  var ComparableMoment = _ember['default'].Object.extend(_ember['default'].Comparable, moment.fn, {
    compare: function compare(a, b) {
      if (moment.isMoment(a) && moment.isMoment(b) && a.isBefore(b)) {
        return -1;
      } else if (moment.isMoment(a) && moment.isMoment(b) && a.isAfter(b)) {
        return 1;
      } else if (moment.isMoment(a) && !moment.isMoment(b)) {
        return 1;
      } else if (moment.isMoment(b)) {
        return -1;
      }

      return 0;
    }
  });

  var comparableMoment = function comparableMoment() {
    return ComparableMoment.create(moment.apply(this, arguments));
  };

  for (var momentProp in moment) {
    if (moment.hasOwnProperty(momentProp)) {
      comparableMoment[momentProp] = moment[momentProp];
    }
  }

  // Wrap global moment methods that return a full moment object
  ['utc', 'unix'].forEach(function (method) {
    comparableMoment[method] = function () {
      return ComparableMoment.create(moment[method].apply(this, arguments));
    };
  });

  ComparableMoment.reopen({
    clone: function clone() {
      return comparableMoment(this);
    }
  });

  exports['default'] = comparableMoment;
});//# sourceMappingURL=addons.map
