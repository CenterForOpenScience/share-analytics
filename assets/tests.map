{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","sa-dashboard/tests/app.lint-test.js","sa-dashboard/tests/components/ember-ace.js","sa-dashboard/tests/ember-sinon-qunit/test.js","sa-dashboard/tests/factories/citation.js","sa-dashboard/tests/factories/collection.js","sa-dashboard/tests/factories/comment-report.js","sa-dashboard/tests/factories/comment.js","sa-dashboard/tests/factories/contributor.js","sa-dashboard/tests/factories/draft-registration.js","sa-dashboard/tests/factories/file-provider.js","sa-dashboard/tests/factories/file-version.js","sa-dashboard/tests/factories/file.js","sa-dashboard/tests/factories/institution.js","sa-dashboard/tests/factories/license.js","sa-dashboard/tests/factories/log.js","sa-dashboard/tests/factories/metaschema.js","sa-dashboard/tests/factories/node-link.js","sa-dashboard/tests/factories/node.js","sa-dashboard/tests/factories/preprint-provider.js","sa-dashboard/tests/factories/preprint.js","sa-dashboard/tests/factories/registration.js","sa-dashboard/tests/factories/taxonomy.js","sa-dashboard/tests/factories/user.js","sa-dashboard/tests/factories/wiki.js","sa-dashboard/tests/helpers/destroy-app.js","sa-dashboard/tests/helpers/ember-cli-clipboard.js","sa-dashboard/tests/helpers/ember-i18n/test-helpers.js","sa-dashboard/tests/helpers/ember-power-select.js","sa-dashboard/tests/helpers/ember-simple-auth.js","sa-dashboard/tests/helpers/module-for-acceptance.js","sa-dashboard/tests/helpers/resolver.js","sa-dashboard/tests/helpers/start-app.js","sa-dashboard/tests/integration/components/dropdown-widget/component-test.js","sa-dashboard/tests/integration/components/list-widget/component-test.js","sa-dashboard/tests/integration/components/number-widget/component-test.js","sa-dashboard/tests/integration/components/search-facet-daterange/component-test.js","sa-dashboard/tests/integration/components/stacked-bars/component-test.js","sa-dashboard/tests/integration/components/user-feedback-form/component-test.js","sa-dashboard/tests/test-helper.js","sa-dashboard/tests/tests.lint-test.js","sa-dashboard/tests/unit/adapters/application-test.js","sa-dashboard/tests/unit/adapters/widget-test.js","sa-dashboard/tests/unit/controllers/dashboard-test.js","sa-dashboard/tests/unit/controllers/widget-test.js","sa-dashboard/tests/unit/helpers/add-test.js","sa-dashboard/tests/unit/instance-initializers/global-test.js","sa-dashboard/tests/unit/instance-initializers/global.js-test.js","sa-dashboard/tests/unit/models/dashboard-test.js","sa-dashboard/tests/unit/models/institution-test.js","sa-dashboard/tests/unit/models/widget-test.js","sa-dashboard/tests/unit/routes/dashboard-test.js","sa-dashboard/tests/unit/utils/currency-rounder-test.js","sa-dashboard/tests/unit/utils/date-interval-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('sa-dashboard/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n8:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:16 - Use import { underscore } from \\'@ember/string\\'; instead of using Ember.String.underscore (ember/new-module-imports)');\n  });\n\n  QUnit.test('adapters/widget.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/widget.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass ESLint\\n\\n9:11 - Use import Application from \\'@ember/application\\'; instead of using Ember.Application (ember/new-module-imports)');\n  });\n\n  QUnit.test('components/agent-detail-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/agent-detail-widget/component.js should pass ESLint\\n\\n2:8 - \\'ENV\\' is defined but never used. (no-unused-vars)\\n5:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n7:16 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n10:19 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n25:22 - Do not use this.attrs (ember/no-attrs-in-components)\\n32:18 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/c3-chart/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/c3-chart/component.js should pass ESLint\\n\\n3:8 - \\'ENV\\' is defined but never used. (no-unused-vars)\\n63:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n68:18 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n72:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n76:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n93:39 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n104:18 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n110:21 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n141:17 - \\'_data\\' is assigned a value but never used. (no-unused-vars)\\n157:17 - \\'columns\\' is already defined. (no-redeclare)\\n157:55 - \\'number\\' is defined but never used. (no-unused-vars)\\n162:41 - \\'percentage\\' is defined but never used. (no-unused-vars)\\n163:73 - \\'arr\\' is defined but never used. (no-unused-vars)\\n190:17 - \\'columns\\' is already defined. (no-redeclare)\\n207:40 - \\'tooltip\\' is not defined. (no-undef)\\n214:17 - \\'columns\\' is already defined. (no-redeclare)\\n266:17 - \\'columns\\' is already defined. (no-redeclare)\\n296:55 - \\'a\\' is defined but never used. (no-unused-vars)\\n324:17 - \\'labels\\' is assigned a value but never used. (no-unused-vars)\\n330:64 - \\'arr\\' is defined but never used. (no-unused-vars)\\n347:32 - \\'d\\' is defined but never used. (no-unused-vars)\\n378:18 - Do not use this.attrs (ember/no-attrs-in-components)\\n384:52 - \\'arr\\' is defined but never used. (no-unused-vars)\\n397:22 - Do not use this.attrs (ember/no-attrs-in-components)\\n409:22 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/dropdown-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/dropdown-widget/component.js should pass ESLint\\n\\n5:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n14:18 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n27:30 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n28:34 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n56:35 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n68:23 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n68:23 - \\'$\\' is not defined. (no-undef)\\n77:9 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n82:9 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n158:22 - Do not use this.attrs (ember/no-attrs-in-components)\\n164:18 - Do not use this.attrs (ember/no-attrs-in-components)\\n211:37 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)');\n  });\n\n  QUnit.test('components/filter-plaques/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/filter-plaques/component.js should pass ESLint\\n\\n9:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n37:23 - Use import { Promise } from \\'rsvp\\'; instead of using Ember.RSVP.Promise (ember/new-module-imports)\\n65:9 - \\'$\\' is not defined. (no-undef)\\n66:11 - \\'$\\' is not defined. (no-undef)\\n67:13 - Unexpected console statement. (no-console)\\n80:33 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n101:14 - Do not use this.attrs (ember/no-attrs-in-components)\\n107:14 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/list-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/list-widget/component.js should pass ESLint\\n\\n3:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n4:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n65:35 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n89:18 - Do not use this.attrs (ember/no-attrs-in-components)\\n93:14 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/number-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/number-widget/component.js should pass ESLint\\n\\n3:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n5:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n16:34 - Use import { assign } from \\'@ember/polyfills\\'; instead of using Ember.assign (ember/new-module-imports)\\n33:17 - \\'facet\\' is assigned a value but never used. (no-unused-vars)\\n35:40 - \\'item\\' is not defined. (no-undef)\\n36:40 - \\'item\\' is not defined. (no-undef)\\n40:22 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/object-detail-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/object-detail-widget/component.js should pass ESLint\\n\\n2:8 - \\'ENV\\' is defined but never used. (no-unused-vars)\\n10:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n16:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n20:19 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n24:19 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n55:21 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n61:14 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n77:14 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n91:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n99:20 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n138:18 - Do not use this.attrs (ember/no-attrs-in-components)\\n146:18 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/query-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/query-widget/component.js should pass ESLint\\n\\n3:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n16:18 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/results-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/results-list/component.js should pass ESLint\\n\\n4:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n6:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:9 - \\'$\\' is not defined. (no-undef)\\n19:9 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n20:13 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n20:13 - \\'$\\' is not defined. (no-undef)\\n23:9 - \\'$\\' is not defined. (no-undef)\\n23:9 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n24:13 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n25:13 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n45:21 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n45:21 - \\'$\\' is not defined. (no-undef)\\n46:39 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n46:39 - \\'$\\' is not defined. (no-undef)\\n55:13 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n55:13 - \\'$\\' is not defined. (no-undef)\\n56:13 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n56:13 - \\'$\\' is not defined. (no-undef)\\n59:5 - Duplicate key \\'pagebackbtn\\'. (no-dupe-keys)\\n59:18 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n68:5 - Duplicate key \\'pagenextbtn\\'. (no-dupe-keys)\\n68:18 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n75:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n118:17 - Unexpected console statement. (no-console)\\n122:22 - Do not use this.attrs (ember/no-attrs-in-components)\\n130:18 - Do not use this.attrs (ember/no-attrs-in-components)\\n134:13 - Unexpected console statement. (no-console)\\n141:18 - Do not use this.attrs (ember/no-attrs-in-components)\\n144:30 - \\'$\\' is not defined. (no-undef)\\n144:30 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n146:13 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n146:13 - \\'$\\' is not defined. (no-undef)\\n147:13 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n147:13 - \\'$\\' is not defined. (no-undef)\\n150:17 - Unexpected console statement. (no-console)\\n151:22 - Do not use this.attrs (ember/no-attrs-in-components)\\n153:17 - Unexpected console statement. (no-console)\\n156:22 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/search-facet-daterange/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/search-facet-daterange/component.js should pass ESLint\\n\\n6:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n7:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n35:13 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)\\n43:13 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)\\n48:9 - Use import { scheduleOnce } from \\'@ember/runloop\\'; instead of using Ember.run.scheduleOnce (ember/new-module-imports)\\n53:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n54:14 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n63:20 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n95:18 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/stacked-bars/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/stacked-bars/component.js should pass ESLint\\n\\n6:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n8:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n9:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n118:20 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/text-widget/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/text-widget/component.js should pass ESLint\\n\\n3:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n8:18 - Do not use this.attrs (ember/no-attrs-in-components)');\n  });\n\n  QUnit.test('components/user-feedback-form/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/user-feedback-form/component.js should pass ESLint\\n\\n3:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n9:5 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n9:5 - \\'$\\' is not defined. (no-undef)\\n11:5 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n11:5 - \\'$\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/widget-adapter/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/widget-adapter/component.js should pass ESLint\\n\\n19:7 - \\'agg_types\\' is assigned a value but never used. (no-unused-vars)\\n73:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n99:28 - This generator function does not have \\'yield\\'. (require-yield)\\n106:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n132:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n158:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n191:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n224:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n250:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n276:37 - \\'value\\' is defined but never used. (no-unused-vars)\\n361:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n366:18 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n377:13 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n380:12 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n401:13 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n409:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n446:9 - \\'MathJax\\' is not defined. (no-undef)\\n446:38 - \\'MathJax\\' is not defined. (no-undef)\\n454:13 - \\'query\\' is assigned a value but never used. (no-unused-vars)\\n455:13 - \\'gte\\' is assigned a value but never used. (no-unused-vars)\\n456:13 - \\'lte\\' is assigned a value but never used. (no-unused-vars)\\n457:13 - \\'interval\\' is assigned a value but never used. (no-unused-vars)\\n470:26 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n517:13 - Use closure actions, unless you need bubbling (ember/closure-actions)\\n531:13 - Unexpected console statement. (no-console)\\n541:13 - Unexpected console statement. (no-console)\\n548:13 - Use closure actions, unless you need bubbling (ember/closure-actions)\\n552:17 - \\'name\\' is assigned a value but never used. (no-unused-vars)\\n559:17 - \\'self\\' is assigned a value but never used. (no-unused-vars)\\n560:82 - \\'arr\\' is defined but never used. (no-unused-vars)\\n566:30 - \\'route\\' is defined but never used. (no-unused-vars)\\n579:13 - Unexpected console statement. (no-console)\\n580:17 - \\'widgetType\\' is assigned a value but never used. (no-unused-vars)\\n584:17 - \\'author\\' is assigned a value but never used. (no-unused-vars)\\n645:13 - Use closure actions, unless you need bubbling (ember/closure-actions)');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass ESLint\\n\\n9:16 - Use import Controller from \\'@ember/controller\\'; instead of using Ember.Controller (ember/new-module-imports)\\n10:12 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)');\n  });\n\n  QUnit.test('controllers/dashboards/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/dashboards/dashboard.js should pass ESLint\\n\\n3:16 - Use import Controller from \\'@ember/controller\\'; instead of using Ember.Controller (ember/new-module-imports)\\n24:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n32:18 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n35:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n38:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n39:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n41:21 - Don\\'t use Ember\\'s function prototype extensions (ember/no-function-prototype-extensions)\\n44:5 - Call this._super(...arguments) in init hook (ember/require-super-in-init)\\n75:28 - \\'widget\\' is defined but never used. (no-unused-vars)\\n87:25 - \\'r\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('helpers/add.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/add.js should pass ESLint\\n\\n7:16 - Use import { helper } from \\'@ember/component/helper\\'; instead of using Ember.Helper.helper (ember/new-module-imports)');\n  });\n\n  QUnit.test('initializers/component-routes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/component-routes.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/promise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'initializers/promise.js should pass ESLint\\n\\n4:20 - Use import { Promise } from \\'rsvp\\'; instead of using Ember.RSVP.Promise (ember/new-module-imports)');\n  });\n\n  QUnit.test('instance-initializers/global.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/global.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/dashboard.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/institution.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/institution.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/widget.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/widget.js should pass ESLint\\n\\n3:10 - \\'belongsTo\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint\\n\\n4:16 - Use import EmberRouter from \\'@ember/routing/router\\'; instead of using Ember.Router (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n5:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)\\n7:12 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n8:14 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)');\n  });\n\n  QUnit.test('routes/dashboards.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboards.js should pass ESLint\\n\\n2:8 - \\'AuthenticatedRouteMixin\\' is defined but never used. (no-unused-vars)\\n4:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)\\n5:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('routes/dashboards/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboards/dashboard.js should pass ESLint\\n\\n184:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)\\n204:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n211:54 - \\'transition\\' is defined but never used. (no-unused-vars)\\n251:37 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n251:53 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n252:29 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n252:44 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n257:25 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n257:55 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n259:25 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n259:47 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n279:25 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n279:54 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n281:25 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n281:54 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n300:46 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n300:75 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n305:48 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n305:65 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n306:46 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n306:64 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n307:69 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n307:89 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n308:29 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n308:49 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n309:33 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n309:50 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n313:41 - \\'queryParams\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('utils/currency-rounder.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/currency-rounder.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/date-interval.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/date-interval.js should pass ESLint\\n\\n');\n  });\n});","define('sa-dashboard/tests/components/ember-ace', ['exports', 'ember-ace/test-support/components/ember-ace'], function (exports, _emberAce) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _emberAce.default;\n    }\n  });\n});","define(\"sa-dashboard/tests/ember-sinon-qunit/test\", [\"exports\", \"ember-sinon-qunit/test-support/test\"], function (exports, _test) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function () {\n    console.warn(\"Using deprecated import path for ember-sinon-qunit; use `import test from 'ember-sinon-qunit/test-support/test';` instead.\");\n    return _test.default.apply(this, arguments);\n  };\n});","define('sa-dashboard/tests/factories/citation', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('citation', {\n        default: {\n            citation: () => _faker.default.lorem.words(10)\n        }\n    });\n});","define('sa-dashboard/tests/factories/collection', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('collection', {\n        default: {\n            title: () => _faker.default.lorem.words(3),\n            dateCreated: () => _faker.default.date.past(1),\n            dateModified: () => _faker.default.date.recent(1),\n            bookmarks: false\n        },\n        traits: {\n            hasNodes: {\n                linkedNodes: _emberDataFactoryGuy.default.hasMany('node', 3)\n            },\n            hasRegistrations: {\n                linkedRegistrations: _emberDataFactoryGuy.default.hasMany('registration', 3)\n            },\n            isBookmark: {\n                bookmarks: true\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/comment-report', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('comment-report', {\n        default: {\n            category: () => _faker.default.random.arrayElement(['hate', 'spam', 'violence']),\n            text: _emberDataFactoryGuy.default.belongsTo('comment')\n        }\n    });\n});","define('sa-dashboard/tests/factories/comment', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('comment', {\n        default: {\n            content: () => _faker.default.lorem.sentence(),\n\n            dateCreated: () => _faker.default.date.past(1),\n            dateModified: () => _faker.default.date.recent(1),\n\n            modified: true,\n            deleted: false,\n\n            isAbuse: false,\n            hasChildren: false,\n\n            canEdit: true\n        },\n        traits: {\n            // List of possible \"page\" values h/t Saman- must be one of these values. Mutually exclusive.\n            isWiki: {\n                page: 'wiki'\n            },\n            isNode: {\n                page: 'node'\n            },\n            isFile: {\n                page: 'files'\n            },\n            // TODO: Add a hasReplies trait in the future to support replies- can we make reply page type match the specified parent type?\n            // Not sure if reply needs to have same page type for hasReplies to be useful. Can always make manual replies with relevant type\n            hasReplies: {\n                replies: _emberDataFactoryGuy.default.hasMany('comment', 3)\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/contributor', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('contributor', {\n        default: {\n            bibliographic: () => _faker.default.random.boolean(),\n            permission: () => _faker.default.random.arrayElement(['read', 'write', 'admin']),\n            // nodeID: // TODO: Field not defined in serializer. Find out meaning and add to factory.\n            users: _emberDataFactoryGuy.default.belongsTo('user'),\n            index: () => _faker.default.random.number(),\n            fullName: () => _faker.default.lorem.words(2),\n            email: () => _faker.default.internet.email(),\n            node: _emberDataFactoryGuy.default.belongsTo('node')\n        }\n    });\n});","define('sa-dashboard/tests/factories/draft-registration', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('draft-registration', {\n        default: {\n            registrationSupplement: () => _faker.default.lorem.words(1),\n            datetimeInitiated: () => _faker.default.date.past(1),\n            datetimeUpdated: () => _faker.default.date.recent(),\n            branchedFrom: _emberDataFactoryGuy.default.belongsTo('node'),\n            initiator: _emberDataFactoryGuy.default.belongsTo('user'),\n            registrationSchema: _emberDataFactoryGuy.default.belongsTo('metaschema')\n        }\n    });\n});","define('sa-dashboard/tests/factories/file-provider', ['ember-data-factory-guy'], function (_emberDataFactoryGuy) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('file-provider', {\n        default: {\n            name: 'osfstorage',\n            kind: 'folder',\n            path: '/',\n            provider: 'osfstorage',\n            node: _emberDataFactoryGuy.default.belongsTo('node')\n        },\n        traits: {\n            hasFiles: {\n                files: () => _emberDataFactoryGuy.default.hasMany('file', 3)\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/file-version', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('file-version', {\n        default: {\n            size: () => _faker.default.random.number(),\n            contentType: 'text/plain' // faker.system may not come with older versions of lib\n        }\n    });\n});","define('sa-dashboard/tests/factories/file', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('file', {\n        default: {\n            name: () => _faker.default.lorem.words(1) + '.txt',\n            kind: 'file',\n            path: '/1234567890', // Faker.system.filePath may not yet be implemented\n            size: () => _faker.default.random.number(),\n            provider: 'osfstorage',\n            materializedPath: () => '/' + _faker.default.lorem.words(1) + '.png',\n            lastTouched: null,\n\n            dateModified: () => _faker.default.date.recent(1),\n            dateCreated: () => _faker.default.date.past(1),\n\n            isProvider: false,\n            checkout: null,\n\n            links: {\n                upload: '/this/is/an/upload/url',\n                download: '/this/is/a/download/url',\n                move: '/this/is/a/move/url',\n                delete: '/this/is/a/delete/url',\n                new_folder: '/this/is/a/new_folder/url'\n            }\n        },\n        traits: {\n            // Folder specific\n            isFolder: {\n                kind: 'folder',\n                materializedPath: () => '/' + _faker.default.lorem.words(1),\n                files: () => _emberDataFactoryGuy.default.hasMany('file', 3)\n            },\n            // File specific\n            hasVersions: {\n                kind: 'file',\n                versions: () => _emberDataFactoryGuy.default.hasMany('file-version', 3)\n            },\n            hasComments: {\n                kind: 'file',\n                comments: () => _emberDataFactoryGuy.default.hasMany('comment', 3)\n            },\n            hasTags: {\n                kind: 'file',\n                tags: () => [_faker.default.lorem.words(1), _faker.default.lorem.words(1), _faker.default.lorem.words(1)]\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/institution', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('institution', {\n        default: {\n            name: () => _faker.default.lorem.words(3),\n            description: () => _faker.default.lorem.sentences(3),\n            logoPath: '/img.jpg',\n            authUrl: () => _faker.default.internet.url()\n        },\n        traits: {\n            // TODO: Add children relations, if that field turns out to be needed after all (henrique)\n            hasNodes: {\n                nodes: () => _emberDataFactoryGuy.default.hasMany('node', 3)\n            },\n            hasRegistrations: {\n                registrations: () => _emberDataFactoryGuy.default.hasMany('registration', 3)\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/license', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('license', {\n        default: {\n            name: () => _faker.default.lorem.words(1),\n            text: () => _faker.default.lorem.words(15)\n        }\n    });\n});","define('sa-dashboard/tests/factories/log', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('log', {\n        default: {\n            date: () => _faker.default.date.past(1),\n            // Extracted from Nodelog.actions as of May 24, 2016\n            action: () => _faker.default.random.arrayElement(['checked_in', 'checked_out', 'file_tag_removed', 'file_tag_added', 'created_from', 'project_created', 'project_registered', 'project_deleted', 'node_created', 'node_forked', 'node_removed', 'pointer_created', 'pointer_forked', 'pointer_removed', 'wiki_updated', 'wiki_deleted', 'wiki_renamed', 'made_wiki_public', 'made_wiki_private', 'contributor_added', 'contributor_removed', 'contributors_reordered', 'permissions_updated', 'made_private', 'made_public', 'tag_added', 'tag_removed', 'edit_title', 'edit_description', 'updated_fields', 'addon_file_moved', 'addon_file_copied', 'folder_created', 'file_added', 'file_updated', 'file_removed', 'file_restored', 'addon_added', 'addon_removed', 'comment_added', 'comment_removed', 'comment_updated', 'made_contributor_visible', 'made_contributor_invisible', 'external_ids_added', 'embargo_approved', 'embargo_cancelled', 'embargo_completed', 'embargo_initiated', 'retraction_approved', 'retraction_cancelled', 'retraction_initiated', 'registration_cancelled', 'registration_initiated', 'registration_approved', 'prereg_registration_initiated', 'citation_added', 'citation_edited', 'citation_removed', 'primary_institution_changed', 'primary_institution_removed']),\n            params: {} // Correct info from this field will depend on the log type\n            // TODO: Figure out node vs originalnode vs linkedNode vs templateNode, and add sample traits with correct values\n        }\n    });\n});","define('sa-dashboard/tests/factories/metaschema', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('metaschema', {\n        default: {\n            name: () => _faker.default.lorem.words(1),\n            schemaVersion: () => _faker.default.random.number(),\n            schema: {}\n        }\n    });\n});","define('sa-dashboard/tests/factories/node-link', ['ember-data-factory-guy'], function (_emberDataFactoryGuy) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('node-link', {\n        default: {\n            targetNode: _emberDataFactoryGuy.default.belongsTo('node')\n        }\n    });\n});","define('sa-dashboard/tests/factories/node', ['ember-data-factory-guy', 'faker', 'ember-osf/const/permissions'], function (_emberDataFactoryGuy, _faker, _permissions) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('node', {\n        default: {\n            title: () => _faker.default.lorem.words(4),\n            description: () => _faker.default.lorem.paragraphs(2, '\\n'),\n            // Extracted from Node model CATEGORY_MAP as of May 24, 2016\n            category: () => _faker.default.random.arrayElement(['analysis', 'communication', 'data', 'hypothesis', 'instrumentation', 'methods and measures', 'procedure', 'project', 'software', 'other', '']),\n\n            currentUserPermissions: () => _faker.default.random.arrayElement([_permissions.default.READ, _permissions.default.WRITE, _permissions.default.ADMIN]),\n\n            fork: false,\n            collection: false,\n            registration: false,\n            public: () => _faker.default.random.boolean(),\n\n            dateCreated: () => _faker.default.date.past(1),\n            dateModified: () => _faker.default.date.recent(1)\n        },\n        traits: {\n            hasParent: { // Is a child of a public node\n                parent: () => _emberDataFactoryGuy.default.belongsTo('node')\n            },\n            hasChildren: { // Has one layer of child projects\n                children: _emberDataFactoryGuy.default.hasMany('node', 3)\n            },\n            hasInstitution: {\n                affiliatedInstitutions: _emberDataFactoryGuy.default.hasMany('institution', 1)\n            },\n            hasComments: {\n                comments: _emberDataFactoryGuy.default.hasMany('comment', 3)\n            },\n            hasContributors: {\n                contributors: _emberDataFactoryGuy.default.hasMany('contributor', 3)\n            },\n            hasFiles: {\n                files: _emberDataFactoryGuy.default.hasMany('file-provider', 3, 'hasFiles')\n            },\n            hasRegistrations: {\n                registrations: _emberDataFactoryGuy.default.hasMany('registration', 1)\n            },\n            hasLogs: {\n                logs: _emberDataFactoryGuy.default.hasMany('log', 5)\n            },\n            hasTags: {\n                tags: () => [_faker.default.lorem.words(1), _faker.default.lorem.words(1), _faker.default.lorem.words(1)]\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/preprint-provider', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('preprint-provider', {\n        default: {\n            name: () => _faker.default.lorem.words(1),\n            logoPath: () => '/static/img/preprint_providers/' + _faker.default.lorem.words(1) + '.png',\n            bannerPath: () => '/static/img/preprint_providers/' + _faker.default.lorem.words(1) + '.png',\n            description: () => _faker.default.lorem.words(3),\n            advisoryBoard: () => _faker.default.lorem.paragraphs(2),\n            emailContact: 'contact+fake@osf.io',\n            emailSupport: 'support+fake@osf.io',\n            headerText: () => _faker.default.lorem.words(3),\n            taxonomy: _emberDataFactoryGuy.default.hasMany('taxonomy', 20)\n        },\n        traits: {\n            isOSF: {\n                id: 'osf'\n            },\n            hasPreprints: {\n                preprints: _emberDataFactoryGuy.default.hasMany('preprint', 5)\n            },\n            hasLicenses: {\n                licensesAcceptable: _emberDataFactoryGuy.default.hasMany('license', 3)\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/preprint', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('preprint', {\n        default: {\n            dateCreated: () => _faker.default.date.past(2),\n            datePublished: () => _faker.default.date.past(1),\n            dateModified: () => _faker.default.date.recent(),\n            doi: () => '10.1000/' + String(_faker.default.random.number()),\n            node: _emberDataFactoryGuy.default.belongsTo('node'),\n            license: _emberDataFactoryGuy.default.belongsTo('license'),\n            primaryFile: _emberDataFactoryGuy.default.belongsTo('file'),\n            provider: _emberDataFactoryGuy.default.belongsTo('preprint-provider'),\n            isPublished: false,\n            isPreprintOrphan: false\n        },\n        traits: {\n            hasBeenPublished: {\n                isPublished: true\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/registration', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('registration', {\n        default: {\n            dateRegistered: () => _faker.default.date.past(1),\n            pendingRegistrationApproval: false,\n\n            embargoEndDate: () => _faker.default.date.future(1),\n            pendingEmbargoApproval: false,\n\n            withdrawn: false,\n            pendingWithdrawal: false,\n\n            // TODO: Implement with sample data for faker, possibly traits for different reg types\n            registrationSupplement: null,\n            registeredMeta: null,\n\n            registeredFrom: () => _emberDataFactoryGuy.default.belongsTo('node'),\n            registeredBy: () => _emberDataFactoryGuy.default.belongsTo('user'),\n\n            contributors: () => _emberDataFactoryGuy.default.hasMany('contributor', 3)\n        },\n        traits: {\n            hasComments: {\n                comments: () => _emberDataFactoryGuy.default.hasMany('comment', 3)\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/taxonomy', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('taxonomy', {\n        default: {\n            text: () => _faker.default.lorem.words(2),\n            child_count: () => _faker.default.random.number(),\n            parents: null\n        },\n        traits: {\n            hasParents: {\n                parents: () => [String(_faker.default.random.number())]\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/user', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('user', {\n        default: {\n            fullName: () => _faker.default.name.findName(),\n            givenName: () => _faker.default.name.firstName(),\n            familyName: () => _faker.default.name.lastName(),\n            dateRegistered: () => _faker.default.date.past(1)\n        },\n        traits: {\n            // TODO: Consider writing tests that would force pagination of relationships (!)\n            hasProjects: {\n                nodes: () => _emberDataFactoryGuy.default.hasMany('node', 3)\n            },\n            hasRegistrations: {\n                registrations: () => _emberDataFactoryGuy.default.hasMany('registration', 3)\n            },\n            hasInstitutions: {\n                affiliatedInstitutions: () => _emberDataFactoryGuy.default.hasMany('institution', 2)\n            }\n        }\n    });\n});","define('sa-dashboard/tests/factories/wiki', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {\n    'use strict';\n\n    _emberDataFactoryGuy.default.define('wiki', {\n        defaults: {\n            kind: 'file',\n            name: () => _faker.default.lorem.words(2),\n            dateModified: () => _faker.default.date.recent(),\n            contentType: 'text/markdown',\n            path: () => '/' + _faker.default.lorem.words(1),\n            currentUserCanComment: () => _faker.default.random.boolean(),\n            materializedPath: () => '/' + _faker.default.lorem.words(1),\n            size: () => _faker.default.random.number(),\n            node: _emberDataFactoryGuy.default.belongsTo('node')\n        }\n    });\n});","define('sa-dashboard/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('sa-dashboard/tests/helpers/ember-cli-clipboard', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.triggerSuccess = triggerSuccess;\n  exports.triggerError = triggerError;\n\n  exports.default = function () {\n    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector = '.copy-btn') {\n      fireComponentActionFromApp(app, selector, 'success');\n    });\n\n    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector = '.copy-btn') {\n      fireComponentActionFromApp(app, selector, 'error');\n    });\n  };\n\n  /* === Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerSuccess(context, selector) {\n    fireComponentAction(context, selector, 'success');\n  }\n\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerError(context, selector) {\n    fireComponentAction(context, selector, 'error');\n  }\n\n  /* === Acceptance Test Helpers === */\n\n  /**\n   * Default export is a function that registers acceptance test helpers\n   */\n\n\n  /* === Private Functions === */\n\n  /**\n   * Fires named action for an instance of a copy-button component in an app\n   * @function fireComponentActionFromApp\n   * @param {Object} app - Ember application\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireComponentActionFromApp(app, selector, actionName) {\n    fireComponentAction({\n      container: app.__container__,\n      $: app.$\n    }, selector, actionName);\n  }\n\n  /**\n   * Fires named action for an instance of a copy-button component\n   * @function fireComponentAction\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireComponentAction(context, selector, actionName) {\n    let component = getComponentBySelector(context, selector);\n    fireActionByName(component, actionName);\n  }\n\n  /**\n   * Fetches component reference for a given context and selector\n   * @function getComponentBySelector\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Object} component object\n   */\n  function getComponentBySelector(context, selector = '.copy-btn') {\n    let emberId = context.$(selector).attr('id');\n    return context.container.lookup('-view-registry:main')[emberId];\n  }\n\n  /**\n   * Fires a component's action given an action name\n   * @function fireActionByName\n   * @param {Ember.Component} component - component to fire action from\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireActionByName(component, actionName) {\n    let action = component[actionName];\n\n    Ember.run(() => {\n      if (typeof action === 'string') {\n        component.sendAction(action);\n      } else {\n        action();\n      }\n    });\n  }\n});","define('sa-dashboard/tests/helpers/ember-i18n/test-helpers', [], function () {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  Ember.Test.registerHelper('t', function (app, key, interpolations) {\n    const i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  Ember.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    const text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  const assertTranslation = function () {\n    if (typeof QUnit !== 'undefined' && typeof QUnit.assert.ok === 'function') {\n      return function (element, key, text) {\n        QUnit.assert.ok(find(`${element}:contains(${text})`).length, `Found translation key ${key} in ${element}`);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        const found = !!find(`${element}:contains(${text})`).length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  }();\n});","define('sa-dashboard/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('sa-dashboard/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const { __container__: container } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('sa-dashboard/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'sa-dashboard/tests/helpers/start-app', 'sa-dashboard/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name, options = {}) {\n    (0, _qunit.module)(name, {\n      beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach() {\n        let afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(() => (0, _destroyApp.default)(this.application));\n      }\n    });\n  };\n\n  const { RSVP: { Promise } } = Ember;\n});","define('sa-dashboard/tests/helpers/resolver', ['exports', 'sa-dashboard/resolver', 'sa-dashboard/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('sa-dashboard/tests/helpers/start-app', ['exports', 'sa-dashboard/app', 'sa-dashboard/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    let application;\n\n    let attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember.run(() => {\n      application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('sa-dashboard/tests/integration/components/dropdown-widget/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('dropdown-widget', 'Integration | Component | dropdown widget', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Zx2iw6ky\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"dropdown-widget\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CQA3uNvF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dropdown-widget\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('sa-dashboard/tests/integration/components/list-widget/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('list-widget', 'Integration | Component | list widget', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ie2vnriM\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"list-widget\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PCaUaotl\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"list-widget\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('sa-dashboard/tests/integration/components/number-widget/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('number-widget', 'Integration | Component | number widget', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+EF4F04R\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"number-widget\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"avyA3ORz\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"number-widget\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('sa-dashboard/tests/integration/components/search-facet-daterange/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('search-facet-daterange', 'Integration | Component | search facet daterange', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"G8WhguPw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"search-facet-daterange\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8MFfJiCP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"search-facet-daterange\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('sa-dashboard/tests/integration/components/stacked-bars/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('stacked-bars', 'Integration | Component | stacked bars', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"H88VzVs5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"stacked-bars\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VzKgoZJe\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"stacked-bars\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('sa-dashboard/tests/integration/components/user-feedback-form/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('user-feedback-form', 'Integration | Component | user feedback form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ymj+tGTC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"user-feedback-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MtpaSfAV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"user-feedback-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('sa-dashboard/tests/test-helper', ['sa-dashboard/tests/helpers/resolver', 'ember-qunit'], function (_resolver, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n});","define('sa-dashboard/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/destroy-app.js should pass ESLint\\n\\n4:3 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n6:17 - Use import { Promise } from \\'rsvp\\'; instead of using Ember destructuring (ember/new-module-imports)');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/start-app.js should pass ESLint\\n\\n8:20 - Use import { merge } from \\'@ember/polyfills\\'; instead of using Ember.merge (ember/new-module-imports)\\n9:16 - Use import { merge } from \\'@ember/polyfills\\'; instead of using Ember.merge (ember/new-module-imports)\\n11:3 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)');\n  });\n\n  QUnit.test('integration/components/dropdown-widget/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dropdown-widget/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/list-widget/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-widget/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/number-widget/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/number-widget/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/search-facet-daterange/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-facet-daterange/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/stacked-bars/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/stacked-bars/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/user-feedback-form/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-feedback-form/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/widget-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/widget-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/dashboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/dashboard-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/widget-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/widget-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/add-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/add-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/instance-initializers/global-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/instance-initializers/global-test.js should pass ESLint\\n\\n8:5 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)\\n9:26 - Use import Application from \\'@ember/application\\'; instead of using Ember.Application (ember/new-module-imports)\\n14:5 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)');\n  });\n\n  QUnit.test('unit/instance-initializers/global.js-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/instance-initializers/global.js-test.js should pass ESLint\\n\\n8:5 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)\\n9:26 - Use import Application from \\'@ember/application\\'; instead of using Ember.Application (ember/new-module-imports)\\n14:5 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)');\n  });\n\n  QUnit.test('unit/models/dashboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/dashboard-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/institution-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/institution-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/widget-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/widget-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/currency-rounder-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/utils/currency-rounder-test.js should pass ESLint\\n\\n2:10 - \\'module\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('unit/utils/date-interval-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/date-interval-test.js should pass ESLint\\n\\n');\n  });\n});","define('sa-dashboard/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('sa-dashboard/tests/unit/adapters/widget-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:widget', 'Unit | Adapter | widget', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('sa-dashboard/tests/unit/controllers/dashboard-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:dashboard', 'Unit | Controller | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('sa-dashboard/tests/unit/controllers/widget-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:widget', 'Unit | Controller | widget', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('sa-dashboard/tests/unit/helpers/add-test', ['tc3/helpers/add', 'qunit'], function (_add, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | add');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    let result = (0, _add.add)([42]);\n    assert.ok(result);\n  });\n});","define('sa-dashboard/tests/unit/instance-initializers/global-test', ['tc3/instance-initializers/global', 'qunit', 'sa-dashboard/tests/helpers/destroy-app'], function (_global, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Instance Initializer | global', {\n    beforeEach: function () {\n      Ember.run(() => {\n        this.application = Ember.Application.create();\n        this.appInstance = this.application.buildInstance();\n      });\n    },\n    afterEach: function () {\n      Ember.run(this.appInstance, 'destroy');\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _global.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('sa-dashboard/tests/unit/instance-initializers/global.js-test', ['tc3/instance-initializers/global.js', 'qunit', 'sa-dashboard/tests/helpers/destroy-app'], function (_global, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Instance Initializer | global.js', {\n    beforeEach: function () {\n      Ember.run(() => {\n        this.application = Ember.Application.create();\n        this.appInstance = this.application.buildInstance();\n      });\n    },\n    afterEach: function () {\n      Ember.run(this.appInstance, 'destroy');\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _global.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('sa-dashboard/tests/unit/models/dashboard-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('dashboard', 'Unit | Model | dashboard', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('sa-dashboard/tests/unit/models/institution-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('institution', 'Unit | Model | institution', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('sa-dashboard/tests/unit/models/widget-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('widget', 'Unit | Model | widget', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('sa-dashboard/tests/unit/routes/dashboard-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let route = this.subject();\n    assert.ok(route);\n  });\n});","define('sa-dashboard/tests/unit/utils/currency-rounder-test', ['analytics-dashboard/utils/currency-rounder', 'qunit'], function (_currencyRounder, _qunit) {\n  'use strict';\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('works with billions', function (assert) {\n    let rawValue = 180000000123;\n    let result = (0, _currencyRounder.default)(rawValue);\n    assert.equal(result, '180B');\n  });\n});","define('sa-dashboard/tests/unit/utils/date-interval-test', ['analytics-dashboard/utils/date-interval', 'qunit'], function (_dateInterval, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | date interval');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    let result = (0, _dateInterval.default)();\n    assert.ok(result);\n  });\n});","define('sa-dashboard/config/environment', [], function() {\n  var prefix = 'sa-dashboard';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('sa-dashboard/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}